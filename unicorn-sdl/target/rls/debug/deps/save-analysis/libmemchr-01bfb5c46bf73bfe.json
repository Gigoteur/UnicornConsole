{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","memchr","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=01bfb5c46bf73bfe","-C","extra-filename=-01bfb5c46bf73bfe","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-sdl\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-sdl\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","memchr_runtime_simd","--cfg","memchr_runtime_sse2","--cfg","memchr_runtime_sse42","--cfg","memchr_runtime_avx","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-sdl\\target\\rls\\debug\\deps\\libmemchr-01bfb5c46bf73bfe.rmeta"},"prelude":{"crate_id":{"name":"memchr","disambiguator":[11795001318777741512,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":0,"byte_end":6586,"line_start":1,"line_end":181,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6348,"byte_end":6354,"line_start":172,"line_end":172,"column_start":5,"column_end":11},"alias_span":null,"name":"memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6356,"byte_end":6363,"line_start":172,"line_end":172,"column_start":13,"column_end":20},"alias_span":null,"name":"memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6365,"byte_end":6377,"line_start":172,"line_end":172,"column_start":22,"column_end":34},"alias_span":null,"name":"memchr2_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6379,"byte_end":6386,"line_start":172,"line_end":172,"column_start":36,"column_end":43},"alias_span":null,"name":"memchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6388,"byte_end":6400,"line_start":172,"line_end":172,"column_start":45,"column_end":57},"alias_span":null,"name":"memchr3_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6402,"byte_end":6413,"line_start":172,"line_end":172,"column_start":59,"column_end":70},"alias_span":null,"name":"memchr_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6419,"byte_end":6426,"line_start":173,"line_end":173,"column_start":5,"column_end":12},"alias_span":null,"name":"memrchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6428,"byte_end":6436,"line_start":173,"line_end":173,"column_start":14,"column_end":22},"alias_span":null,"name":"memrchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6438,"byte_end":6451,"line_start":173,"line_end":173,"column_start":24,"column_end":37},"alias_span":null,"name":"memrchr2_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6453,"byte_end":6461,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"alias_span":null,"name":"memrchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6463,"byte_end":6476,"line_start":173,"line_end":173,"column_start":49,"column_end":62},"alias_span":null,"name":"memrchr3_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6478,"byte_end":6490,"line_start":173,"line_end":173,"column_start":64,"column_end":76},"alias_span":null,"name":"memrchr_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6496,"byte_end":6502,"line_start":174,"line_end":174,"column_start":5,"column_end":11},"alias_span":null,"name":"Memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6504,"byte_end":6511,"line_start":174,"line_end":174,"column_start":13,"column_end":20},"alias_span":null,"name":"Memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6513,"byte_end":6520,"line_start":174,"line_end":174,"column_start":22,"column_end":29},"alias_span":null,"name":"Memchr3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9247,"byte_end":9253,"line_start":3,"line_end":3,"column_start":22,"column_end":28},"alias_span":null,"name":"Memchr","value":"","parent":{"krate":0,"index":68}},{"kind":"Use","ref_id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9255,"byte_end":9262,"line_start":3,"line_end":3,"column_start":30,"column_end":37},"alias_span":null,"name":"Memchr2","value":"","parent":{"krate":0,"index":68}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9264,"byte_end":9271,"line_start":3,"line_end":3,"column_start":39,"column_end":46},"alias_span":null,"name":"Memchr3","value":"","parent":{"krate":0,"index":68}},{"kind":"Use","ref_id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":100864,"byte_end":100873,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"alias_span":null,"name":"Prefilter","value":"","parent":{"krate":0,"index":300}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":0,"byte_end":6586,"line_start":1,"line_end":181,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":68},{"krate":0,"index":300}],"decl_id":null,"docs":"This library provides heavily optimized routines for string search primitives.","sig":null,"attributes":[{"value":"*\nThis library provides heavily optimized routines for string search primitives.\n\n# Overview\n\nThis section gives a brief high level overview of what this crate offers.\n\n* The top-level module provides routines for searching for 1, 2 or 3 bytes\n  in the forward or reverse direction. When searching for more than one byte,\n  positions are considered a match if the byte at that position matches any\n  of the bytes.\n* The [`memmem`] sub-module provides forward and reverse substring search\n  routines.\n\nIn all such cases, routines operate on `&[u8]` without regard to encoding. This\nis exactly what you want when searching either UTF-8 or arbitrary bytes.\n\n# Example: using `memchr`\n\nThis example shows how to use `memchr` to find the first occurrence of `z` in\na haystack:\n\n```\nuse memchr::memchr;\n\nlet haystack = b\"foo bar baz quuz\";\nassert_eq!(Some(10), memchr(b'z', haystack));\n```\n\n# Example: matching one of three possible bytes\n\nThis examples shows how to use `memrchr3` to find occurrences of `a`, `b` or\n`c`, starting at the end of the haystack.\n\n```\nuse memchr::memchr3_iter;\n\nlet haystack = b\"xyzaxyzbxyzc\";\n\nlet mut it = memchr3_iter(b'a', b'b', b'c', haystack).rev();\nassert_eq!(Some(11), it.next());\nassert_eq!(Some(7), it.next());\nassert_eq!(Some(3), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches\n\nThis example shows how to use the [`memmem`] sub-module to find occurrences of\na substring in a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`memmem::Finder`]:\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n\n# Why use this crate?\n\nAt first glance, the APIs provided by this crate might seem weird. Why provide\na dedicated routine like `memchr` for something that could be implemented\nclearly and trivially in one line:\n\n```\nfn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n    haystack.iter().position(|&b| b == needle)\n}\n```\n\nOr similarly, why does this crate provide substring search routines when Rust's\ncore library already provides them?\n\n```\nfn search(haystack: &str, needle: &str) -> Option<usize> {\n    haystack.find(needle)\n}\n```\n\nThe primary reason for both of them to exist is performance. When it comes to\nperformance, at a high level at least, there are two primary ways to look at\nit:\n\n* **Throughput**: For this, think about it as, \"given some very large haystack\n  and a byte that never occurs in that haystack, how long does it take to\n  search through it and determine that it, in fact, does not occur?\"\n* **Latency**: For this, think about it as, \"given a tiny haystack---just a\n  few bytes---how long does it take to determine if a byte is in it?\"\n\nThe `memchr` routine in this crate has _slightly_ worse latency than the\nsolution presented above, however, its throughput can easily be over an\norder of magnitude faster. This is a good general purpose trade off to make.\nYou rarely lose, but often gain big.\n\n**NOTE:** The name `memchr` comes from the corresponding routine in libc. A key\nadvantage of using this library is that its performance is not tied to its\nquality of implementation in the libc you happen to be using, which can vary\ngreatly from platform to platform.\n\nBut what about substring search? This one is a bit more complicated. The\nprimary reason for its existence is still indeed performance, but it's also\nuseful because Rust's core library doesn't actually expose any substring\nsearch routine on arbitrary bytes. The only substring search routine that\nexists works exclusively on valid UTF-8.\n\nSo if you have valid UTF-8, is there a reason to use this over the standard\nlibrary substring search routine? Yes. This routine is faster on almost every\nmetric, including latency. The natural question then, is why isn't this\nimplementation in the standard library, even if only for searching on UTF-8?\nThe reason is that the implementation details for using SIMD in the standard\nlibrary haven't quite been worked out yet.\n\n**NOTE:** Currently, only `x86_64` targets have highly accelerated\nimplementations of substring search. For `memchr`, all targets have\nsomewhat-accelerated implementations, while only `x86_64` targets have highly\naccelerated implementations. This limitation is expected to be lifted once the\nstandard library exposes a platform independent SIMD API.\n\n# Crate features\n\n* **std** - When enabled (the default), this will permit this crate to use\n  features specific to the standard library. Currently, the only thing used\n  from the standard library is runtime SIMD CPU feature detection. This means\n  that this feature must be enabled to get AVX accelerated routines. When\n  `std` is not enabled, this crate will still attempt to use SSE2 accelerated\n  routines on `x86_64`.\n* **libc** - When enabled (**not** the default), this library will use your\n  platform's libc implementation of `memchr` (and `memrchr` on Linux). This\n  can be useful on non-`x86_64` targets where the fallback implementation in\n  this crate is not as good as the one found in your libc. All other routines\n  (e.g., `memchr[23]` and substring search) unconditionally use the\n  implementation in this crate.\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":0,"byte_end":5778,"line_start":1,"line_end":154,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":5780,"byte_end":5802,"line_start":156,"line_end":156,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33518,"byte_end":33524,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Memchr","qualname":"::memchr::iter::Memchr","value":"Memchr {  }","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"decl_id":null,"docs":" An iterator for `memchr`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33477,"byte_end":33506,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33775,"byte_end":33778,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr>::new","value":"pub fn new(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33674,"byte_end":33749,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33754,"byte_end":33763,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34427,"byte_end":34434,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"Memchr2","qualname":"::memchr::iter::Memchr2","value":"Memchr2 {  }","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"decl_id":null,"docs":" An iterator for `memchr2`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr2`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34385,"byte_end":34415,"line_start":71,"line_end":71,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34704,"byte_end":34707,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr2>::new","value":"pub fn new(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34603,"byte_end":34678,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34683,"byte_end":34692,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35517,"byte_end":35524,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"Memchr3","qualname":"::memchr::iter::Memchr3","value":"Memchr3 {  }","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" An iterator for `memchr3`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr3`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35475,"byte_end":35505,"line_start":118,"line_end":118,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35805,"byte_end":35808,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr3>::new","value":"pub fn new(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Memchr3` that's initialized to zero with a haystack\n","sig":null,"attributes":[{"value":"/ Create a new `Memchr3` that's initialized to zero with a haystack","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35710,"byte_end":35779,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35784,"byte_end":35793,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9594,"byte_end":9605,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"memchr_iter","qualname":"::memchr::memchr_iter","value":"pub fn memchr_iter(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9511,"byte_end":9576,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9577,"byte_end":9586,"line_start":16,"line_end":16,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9772,"byte_end":9784,"line_start":23,"line_end":23,"column_start":8,"column_end":20},"name":"memchr2_iter","qualname":"::memchr::memchr2_iter","value":"pub fn memchr2_iter(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9688,"byte_end":9754,"line_start":21,"line_end":21,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9755,"byte_end":9764,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9977,"byte_end":9989,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"memchr3_iter","qualname":"::memchr::memchr3_iter","value":"pub fn memchr3_iter(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9893,"byte_end":9959,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":9960,"byte_end":9969,"line_start":28,"line_end":28,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10234,"byte_end":10246,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"memrchr_iter","qualname":"::memchr::memrchr_iter","value":"pub fn memrchr_iter(u8, &[u8]) -> Rev<Memchr>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack, in reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10139,"byte_end":10216,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10217,"byte_end":10226,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10436,"byte_end":10449,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"memrchr2_iter","qualname":"::memchr::memrchr2_iter","value":"pub fn memrchr2_iter(u8, u8, &[u8]) -> Rev<Memchr2>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10340,"byte_end":10418,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10419,"byte_end":10428,"line_start":45,"line_end":45,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10680,"byte_end":10693,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"memrchr3_iter","qualname":"::memchr::memrchr3_iter","value":"pub fn memrchr3_iter(u8, u8, u8, &[u8]) -> Rev<Memchr3>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10584,"byte_end":10662,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10663,"byte_end":10672,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11600,"byte_end":11606,"line_start":87,"line_end":87,"column_start":8,"column_end":14},"name":"memchr","qualname":"::memchr::memchr","value":"pub fn memchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the first occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the first occurrence of a byte in a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10854,"byte_end":10911,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10912,"byte_end":10915,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle` in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10916,"byte_end":10995,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ `haystack`, or `None` if one is not found. If an index is returned, it is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":10996,"byte_end":11073,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11074,"byte_end":11118,"line_start":69,"line_end":69,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11119,"byte_end":11122,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11123,"byte_end":11181,"line_start":71,"line_end":71,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11182,"byte_end":11258,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11259,"byte_end":11335,"line_start":73,"line_end":73,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11336,"byte_end":11346,"line_start":74,"line_end":74,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11347,"byte_end":11350,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11351,"byte_end":11364,"line_start":76,"line_end":76,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11365,"byte_end":11368,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of a byte in a byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11369,"byte_end":11442,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11443,"byte_end":11446,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11447,"byte_end":11454,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11455,"byte_end":11478,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11479,"byte_end":11482,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11483,"byte_end":11525,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr(b'k', haystack), Some(8));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11526,"byte_end":11574,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11575,"byte_end":11582,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":11583,"byte_end":11592,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13453,"byte_end":13460,"line_start":151,"line_end":151,"column_start":8,"column_end":15},"name":"memchr2","qualname":"::memchr::memchr2","value":"pub fn memchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12572,"byte_end":12648,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12649,"byte_end":12652,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12653,"byte_end":12730,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ or the first occurrence of `needle2` in `haystack` (whichever occurs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12731,"byte_end":12803,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ earlier), or `None` if neither one is found. If an index is returned, it is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12804,"byte_end":12883,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12884,"byte_end":12928,"line_start":132,"line_end":132,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12929,"byte_end":12932,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12933,"byte_end":12991,"line_start":134,"line_end":134,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":12992,"byte_end":13068,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13069,"byte_end":13148,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13149,"byte_end":13174,"line_start":137,"line_end":137,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13175,"byte_end":13178,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13179,"byte_end":13192,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13193,"byte_end":13196,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of either of two bytes in a byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13197,"byte_end":13275,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13276,"byte_end":13287,"line_start":142,"line_end":142,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13288,"byte_end":13291,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13292,"byte_end":13299,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr2;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13300,"byte_end":13324,"line_start":145,"line_end":145,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13325,"byte_end":13328,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13329,"byte_end":13371,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr2(b'k', b'q', haystack), Some(4));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13372,"byte_end":13427,"line_start":148,"line_end":148,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13428,"byte_end":13435,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":13436,"byte_end":13445,"line_start":150,"line_end":150,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15153,"byte_end":15160,"line_start":204,"line_end":204,"column_start":8,"column_end":15},"name":"memchr3","qualname":"::memchr::memchr3","value":"pub fn memchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14221,"byte_end":14296,"line_start":180,"line_end":180,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14297,"byte_end":14300,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14301,"byte_end":14379,"line_start":182,"line_end":182,"column_start":1,"column_end":79}},{"value":"/ the first occurrence of `needle2`, or the first occurrence of `needle3` in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14380,"byte_end":14458,"line_start":183,"line_end":183,"column_start":1,"column_end":79}},{"value":"/ `haystack` (whichever occurs earliest), or `None` if none are found. If an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14459,"byte_end":14537,"line_start":184,"line_end":184,"column_start":1,"column_end":79}},{"value":"/ index is returned, it is guaranteed to be less than `usize::MAX`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14538,"byte_end":14607,"line_start":185,"line_end":185,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14608,"byte_end":14611,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14612,"byte_end":14670,"line_start":187,"line_end":187,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14671,"byte_end":14737,"line_start":188,"line_end":188,"column_start":1,"column_end":67}},{"value":"/ b == needle3)`, `memchr3` will use a highly optimized routine that can be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14738,"byte_end":14815,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14816,"byte_end":14869,"line_start":190,"line_end":190,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14870,"byte_end":14873,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14874,"byte_end":14887,"line_start":192,"line_end":192,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14888,"byte_end":14891,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of any of three bytes in a byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14892,"byte_end":14969,"line_start":194,"line_end":194,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14970,"byte_end":14981,"line_start":195,"line_end":195,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14982,"byte_end":14985,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14986,"byte_end":14993,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr3;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":14994,"byte_end":15018,"line_start":198,"line_end":198,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15019,"byte_end":15022,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15023,"byte_end":15065,"line_start":200,"line_end":200,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15066,"byte_end":15127,"line_start":201,"line_end":201,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15128,"byte_end":15135,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15136,"byte_end":15145,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16746,"byte_end":16753,"line_start":260,"line_end":260,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::memchr::memrchr","value":"pub fn memrchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the last occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the last occurrence of a byte in a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":15998,"byte_end":16054,"line_start":238,"line_end":238,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16055,"byte_end":16058,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle` in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16059,"byte_end":16137,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/ `haystack`, or `None` if one is not found. If an index is returned, it is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16138,"byte_end":16215,"line_start":241,"line_end":241,"column_start":1,"column_end":78}},{"value":"/ guaranteed to be less than `usize::MAX`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16216,"byte_end":16260,"line_start":242,"line_end":242,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16261,"byte_end":16264,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16265,"byte_end":16323,"line_start":244,"line_end":244,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16324,"byte_end":16402,"line_start":245,"line_end":245,"column_start":1,"column_end":79}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16403,"byte_end":16479,"line_start":246,"line_end":246,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16480,"byte_end":16490,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16491,"byte_end":16494,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16495,"byte_end":16508,"line_start":249,"line_end":249,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16509,"byte_end":16512,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of a byte in a byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16513,"byte_end":16585,"line_start":251,"line_end":251,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16586,"byte_end":16589,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16590,"byte_end":16597,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16598,"byte_end":16622,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16623,"byte_end":16626,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16627,"byte_end":16669,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr(b'o', haystack), Some(17));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16670,"byte_end":16720,"line_start":257,"line_end":257,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16721,"byte_end":16728,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":16729,"byte_end":16738,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18658,"byte_end":18666,"line_start":325,"line_end":325,"column_start":8,"column_end":16},"name":"memrchr2","qualname":"::memchr::memrchr2","value":"pub fn memrchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":17777,"byte_end":17854,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":17855,"byte_end":17858,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1` or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":17859,"byte_end":17938,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ the last occurrence of `needle2` in `haystack` (whichever occurs later), or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":17939,"byte_end":18018,"line_start":304,"line_end":304,"column_start":1,"column_end":80}},{"value":"/ `None` if neither one is found. If an index is returned, it is guaranteed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18019,"byte_end":18096,"line_start":305,"line_end":305,"column_start":1,"column_end":78}},{"value":"/ to be less than `usize::MAX`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18097,"byte_end":18130,"line_start":306,"line_end":306,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18131,"byte_end":18134,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18135,"byte_end":18193,"line_start":308,"line_end":308,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18194,"byte_end":18272,"line_start":309,"line_end":309,"column_start":1,"column_end":79}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18273,"byte_end":18352,"line_start":310,"line_end":310,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18353,"byte_end":18378,"line_start":311,"line_end":311,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18379,"byte_end":18382,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18383,"byte_end":18396,"line_start":313,"line_end":313,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18397,"byte_end":18400,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of either of two bytes in a byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18401,"byte_end":18478,"line_start":315,"line_end":315,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18479,"byte_end":18490,"line_start":316,"line_end":316,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18491,"byte_end":18494,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18495,"byte_end":18502,"line_start":318,"line_end":318,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr2;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18503,"byte_end":18528,"line_start":319,"line_end":319,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18529,"byte_end":18532,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18533,"byte_end":18575,"line_start":321,"line_end":321,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr2(b'k', b'q', haystack), Some(8));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18576,"byte_end":18632,"line_start":322,"line_end":322,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18633,"byte_end":18640,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":18641,"byte_end":18650,"line_start":324,"line_end":324,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20360,"byte_end":20368,"line_start":378,"line_end":378,"column_start":8,"column_end":16},"name":"memrchr3","qualname":"::memchr::memrchr3","value":"pub fn memrchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19430,"byte_end":19506,"line_start":354,"line_end":354,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19507,"byte_end":19510,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19511,"byte_end":19588,"line_start":356,"line_end":356,"column_start":1,"column_end":78}},{"value":"/ the last occurrence of `needle2`, or the last occurrence of `needle3` in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19589,"byte_end":19665,"line_start":357,"line_end":357,"column_start":1,"column_end":77}},{"value":"/ `haystack` (whichever occurs later), or `None` if none are found. If an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19666,"byte_end":19741,"line_start":358,"line_end":358,"column_start":1,"column_end":76}},{"value":"/ index is returned, it is guaranteed to be less than `usize::MAX`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19742,"byte_end":19811,"line_start":359,"line_end":359,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19812,"byte_end":19815,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19816,"byte_end":19874,"line_start":361,"line_end":361,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19875,"byte_end":19942,"line_start":362,"line_end":362,"column_start":1,"column_end":68}},{"value":"/ b == needle3)`, `memrchr3` will use a highly optimized routine that can be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":19943,"byte_end":20021,"line_start":363,"line_end":363,"column_start":1,"column_end":79}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20022,"byte_end":20075,"line_start":364,"line_end":364,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20076,"byte_end":20079,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20080,"byte_end":20093,"line_start":366,"line_end":366,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20094,"byte_end":20097,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of any of three bytes in a byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20098,"byte_end":20174,"line_start":368,"line_end":368,"column_start":1,"column_end":77}},{"value":"/ string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20175,"byte_end":20186,"line_start":369,"line_end":369,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20187,"byte_end":20190,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20191,"byte_end":20198,"line_start":371,"line_end":371,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr3;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20199,"byte_end":20224,"line_start":372,"line_end":372,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20225,"byte_end":20228,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20229,"byte_end":20271,"line_start":374,"line_end":374,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20272,"byte_end":20334,"line_start":375,"line_end":375,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20335,"byte_end":20342,"line_start":376,"line_end":376,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\mod.rs","byte_start":20343,"byte_end":20352,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memmem","qualname":"::memmem","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":354},{"krate":0,"index":472},{"krate":0,"index":491},{"krate":0,"index":500},{"krate":0,"index":535},{"krate":0,"index":539},{"krate":0,"index":568},{"krate":0,"index":609},{"krate":0,"index":613},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":966},{"krate":0,"index":973},{"krate":0,"index":619},{"krate":0,"index":624},{"krate":0,"index":977},{"krate":0,"index":983},{"krate":0,"index":629},{"krate":0,"index":634},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":639},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":650},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":662},{"krate":0,"index":1013},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1033},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":671},{"krate":0,"index":685},{"krate":0,"index":1061},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":687}],"decl_id":null,"docs":"This module provides forward and reverse substring search routines.","sig":null,"attributes":[{"value":"*\nThis module provides forward and reverse substring search routines.\n\nUnlike the standard library's substring search routines, these work on\narbitrary bytes. For all non-empty needles, these routines will report exactly\nthe same values as the corresponding routines in the standard library. For\nthe empty needle, the standard library reports matches only at valid UTF-8\nboundaries, where as these routines will report matches at every position.\n\nOther than being able to work on arbitrary bytes, the primary reason to prefer\nthese routines over the standard library routines is that these will generally\nbe faster. In some cases, significantly so.\n\n# Example: iterating over substring matches\n\nThis example shows how to use [`find_iter`] to find occurrences of a substring\nin a haystack.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::find_iter(haystack, \"foo\");\nassert_eq!(Some(0), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(16), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: iterating over substring matches in reverse\n\nThis example shows how to use [`rfind_iter`] to find occurrences of a substring\nin a haystack starting from the end of the haystack.\n\n**NOTE:** This module does not implement double ended iterators, so reverse\nsearches aren't done by calling `rev` on a forward iterator.\n\n```\nuse memchr::memmem;\n\nlet haystack = b\"foo bar foo baz foo\";\n\nlet mut it = memmem::rfind_iter(haystack, \"foo\");\nassert_eq!(Some(16), it.next());\nassert_eq!(Some(8), it.next());\nassert_eq!(Some(0), it.next());\nassert_eq!(None, it.next());\n```\n\n# Example: repeating a search for the same needle\n\nIt may be possible for the overhead of constructing a substring searcher to be\nmeasurable in some workloads. In cases where the same needle is used to search\nmany haystacks, it is possible to do construction once and thus to avoid it for\nsubsequent searches. This can be done with a [`Finder`] (or a [`FinderRev`] for\nreverse searches).\n\n```\nuse memchr::memmem;\n\nlet finder = memmem::Finder::new(\"foo\");\n\nassert_eq!(Some(4), finder.find(b\"baz foo quux\"));\nassert_eq!(None, finder.find(b\"quux baz bar\"));\n```\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":98665,"byte_end":100837,"line_start":1,"line_end":67,"column_start":1,"column_end":3}}]},{"kind":"TupleVariant","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165702,"byte_end":165706,"line_start":172,"line_end":172,"column_start":5,"column_end":9},"name":"None","qualname":"::memmem::prefilter::Prefilter::None","value":"Prefilter::None","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":" Never used a prefilter in substring search.\n","sig":null,"attributes":[{"value":"/ Never used a prefilter in substring search.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165650,"byte_end":165697,"line_start":171,"line_end":171,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165933,"byte_end":165937,"line_start":176,"line_end":176,"column_start":5,"column_end":9},"name":"Auto","qualname":"::memmem::prefilter::Prefilter::Auto","value":"Prefilter::Auto","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":" Automatically detect whether a heuristic prefilter should be used. If\n it is used, then heuristics will be used to dynamically disable the\n prefilter if it is believed to not be carrying its weight.\n","sig":null,"attributes":[{"value":"/ Automatically detect whether a heuristic prefilter should be used. If","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165712,"byte_end":165785,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ it is used, then heuristics will be used to dynamically disable the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165790,"byte_end":165861,"line_start":174,"line_end":174,"column_start":5,"column_end":76}},{"value":"/ prefilter if it is believed to not be carrying its weight.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165866,"byte_end":165928,"line_start":175,"line_end":175,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165634,"byte_end":165643,"line_start":170,"line_end":170,"column_start":10,"column_end":19},"name":"Prefilter","qualname":"::memmem::prefilter::Prefilter","value":"pub enum Prefilter { None, Auto, }","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":829}],"decl_id":null,"docs":" Prefilter controls whether heuristics are used to accelerate searching.","sig":null,"attributes":[{"value":"/ Prefilter controls whether heuristics are used to accelerate searching.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164136,"byte_end":164211,"line_start":143,"line_end":143,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164212,"byte_end":164215,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ A prefilter refers to the idea of detecting candidate matches very quickly,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164216,"byte_end":164295,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/ and then confirming whether those candidates are full matches. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164296,"byte_end":164367,"line_start":146,"line_end":146,"column_start":1,"column_end":72}},{"value":"/ idea can be quite effective since it's often the case that looking for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164368,"byte_end":164442,"line_start":147,"line_end":147,"column_start":1,"column_end":75}},{"value":"/ candidates can be a lot faster than running a complete substring search","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164443,"byte_end":164518,"line_start":148,"line_end":148,"column_start":1,"column_end":76}},{"value":"/ over the entire input. Namely, looking for candidates can be done with","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164519,"byte_end":164593,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/ extremely fast vectorized code.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164594,"byte_end":164629,"line_start":150,"line_end":150,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164630,"byte_end":164633,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ The downside of a prefilter is that it assumes false positives (which are","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164634,"byte_end":164711,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/ candidates generated by a prefilter that aren't matches) are somewhat rare","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164712,"byte_end":164790,"line_start":153,"line_end":153,"column_start":1,"column_end":79}},{"value":"/ relative to the frequency of full matches. That is, if a lot of false","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164791,"byte_end":164864,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/ positives are generated, then it's possible for search time to be worse","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164865,"byte_end":164940,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/ than if the prefilter wasn't enabled in the first place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164941,"byte_end":165001,"line_start":156,"line_end":156,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165002,"byte_end":165005,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ Another downside of a prefilter is that it can result in highly variable","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165006,"byte_end":165082,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/ performance, where some cases are extraordinarily fast and others aren't.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165083,"byte_end":165160,"line_start":159,"line_end":159,"column_start":1,"column_end":78}},{"value":"/ Typically, variable performance isn't a problem, but it may be for your use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165161,"byte_end":165240,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165241,"byte_end":165250,"line_start":161,"line_end":161,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165251,"byte_end":165254,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ The use of prefilters in this implementation does use a heuristic to detect","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165255,"byte_end":165334,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/ when a prefilter might not be carrying its weight, and will dynamically","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165335,"byte_end":165410,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ disable its use. Nevertheless, this configuration option gives callers","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165411,"byte_end":165485,"line_start":165,"line_end":165,"column_start":1,"column_end":75}},{"value":"/ the ability to disable prefilters if you have knowledge that they won't be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165486,"byte_end":165564,"line_start":166,"line_end":166,"column_start":1,"column_end":79}},{"value":"/ useful.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165565,"byte_end":165576,"line_start":167,"line_end":167,"column_start":1,"column_end":12}},{"value":"non_exhaustive","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165607,"byte_end":165624,"line_start":169,"line_end":169,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104231,"byte_end":104240,"line_start":190,"line_end":190,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::memmem::find_iter","value":"pub fn find_iter<'h, 'n, N: 'n + ?Sized + AsRef<[u8]>>(&'h [u8], &'n N)\n-> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping occurrences of a substring in\n a haystack.","sig":null,"attributes":[{"value":"/ Returns an iterator over all non-overlapping occurrences of a substring in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103483,"byte_end":103561,"line_start":163,"line_end":163,"column_start":1,"column_end":79}},{"value":"/ a haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103562,"byte_end":103577,"line_start":164,"line_end":164,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103578,"byte_end":103581,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103582,"byte_end":103598,"line_start":166,"line_end":166,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103599,"byte_end":103602,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103603,"byte_end":103675,"line_start":168,"line_end":168,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103676,"byte_end":103748,"line_start":169,"line_end":169,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103749,"byte_end":103796,"line_start":170,"line_end":170,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103797,"byte_end":103800,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103801,"byte_end":103870,"line_start":172,"line_end":172,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103871,"byte_end":103886,"line_start":173,"line_end":173,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103887,"byte_end":103890,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103891,"byte_end":103905,"line_start":175,"line_end":175,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103906,"byte_end":103909,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103910,"byte_end":103926,"line_start":177,"line_end":177,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103927,"byte_end":103930,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103931,"byte_end":103938,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103939,"byte_end":103962,"line_start":180,"line_end":180,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103963,"byte_end":103966,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":103967,"byte_end":104009,"line_start":182,"line_end":182,"column_start":1,"column_end":43}},{"value":"/ let mut it = memmem::find_iter(haystack, b\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104010,"byte_end":104063,"line_start":183,"line_end":183,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104064,"byte_end":104099,"line_start":184,"line_end":184,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104100,"byte_end":104135,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104136,"byte_end":104172,"line_start":186,"line_end":186,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104173,"byte_end":104205,"line_start":187,"line_end":187,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104206,"byte_end":104213,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104214,"byte_end":104223,"line_start":189,"line_end":189,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105155,"byte_end":105165,"line_start":224,"line_end":224,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::memmem::rfind_iter","value":"pub fn rfind_iter<'h, 'n, N: 'n + ?Sized + AsRef<[u8]>>(&'h [u8], &'n N)\n-> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Returns a reverse iterator over all non-overlapping occurrences of a\n substring in a haystack.","sig":null,"attributes":[{"value":"/ Returns a reverse iterator over all non-overlapping occurrences of a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104399,"byte_end":104471,"line_start":197,"line_end":197,"column_start":1,"column_end":73}},{"value":"/ substring in a haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104472,"byte_end":104500,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104501,"byte_end":104504,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104505,"byte_end":104521,"line_start":200,"line_end":200,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104522,"byte_end":104525,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104526,"byte_end":104598,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104599,"byte_end":104671,"line_start":203,"line_end":203,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104672,"byte_end":104719,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104720,"byte_end":104723,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104724,"byte_end":104793,"line_start":206,"line_end":206,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104794,"byte_end":104809,"line_start":207,"line_end":207,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104810,"byte_end":104813,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104814,"byte_end":104828,"line_start":209,"line_end":209,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104829,"byte_end":104832,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104833,"byte_end":104849,"line_start":211,"line_end":211,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104850,"byte_end":104853,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104854,"byte_end":104861,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104862,"byte_end":104885,"line_start":214,"line_end":214,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104886,"byte_end":104889,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104890,"byte_end":104932,"line_start":216,"line_end":216,"column_start":1,"column_end":43}},{"value":"/ let mut it = memmem::rfind_iter(haystack, b\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104933,"byte_end":104987,"line_start":217,"line_end":217,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":104988,"byte_end":105024,"line_start":218,"line_end":218,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105025,"byte_end":105060,"line_start":219,"line_end":219,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105061,"byte_end":105096,"line_start":220,"line_end":220,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105097,"byte_end":105129,"line_start":221,"line_end":221,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105130,"byte_end":105137,"line_start":222,"line_end":222,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105138,"byte_end":105147,"line_start":223,"line_end":223,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106203,"byte_end":106207,"line_start":259,"line_end":259,"column_start":8,"column_end":12},"name":"find","qualname":"::memmem::find","value":"pub fn find(&[u8], &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105333,"byte_end":105399,"line_start":231,"line_end":231,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105400,"byte_end":105403,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Note that if you're are searching for the same needle in many different","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105404,"byte_end":105479,"line_start":233,"line_end":233,"column_start":1,"column_end":76}},{"value":"/ small haystacks, it may be faster to initialize a [`Finder`] once,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105480,"byte_end":105550,"line_start":234,"line_end":234,"column_start":1,"column_end":71}},{"value":"/ and reuse it for each search.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105551,"byte_end":105584,"line_start":235,"line_end":235,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105585,"byte_end":105588,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105589,"byte_end":105605,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105606,"byte_end":105609,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105610,"byte_end":105682,"line_start":239,"line_end":239,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105683,"byte_end":105755,"line_start":240,"line_end":240,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105756,"byte_end":105803,"line_start":241,"line_end":241,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105804,"byte_end":105807,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105808,"byte_end":105877,"line_start":243,"line_end":243,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105878,"byte_end":105893,"line_start":244,"line_end":244,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105894,"byte_end":105897,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105898,"byte_end":105912,"line_start":246,"line_end":246,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105913,"byte_end":105916,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105917,"byte_end":105933,"line_start":248,"line_end":248,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105934,"byte_end":105937,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105938,"byte_end":105945,"line_start":250,"line_end":250,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105946,"byte_end":105969,"line_start":251,"line_end":251,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105970,"byte_end":105973,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":105974,"byte_end":106008,"line_start":253,"line_end":253,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(Some(0), memmem::find(haystack, b\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106009,"byte_end":106065,"line_start":254,"line_end":254,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(Some(4), memmem::find(haystack, b\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106066,"byte_end":106122,"line_start":255,"line_end":255,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(None, memmem::find(haystack, b\"quux\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106123,"byte_end":106177,"line_start":256,"line_end":256,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106178,"byte_end":106185,"line_start":257,"line_end":257,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106186,"byte_end":106195,"line_start":258,"line_end":258,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107327,"byte_end":107332,"line_start":296,"line_end":296,"column_start":8,"column_end":13},"name":"rfind","qualname":"::memmem::rfind","value":"pub fn rfind(&[u8], &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106395,"byte_end":106460,"line_start":267,"line_end":267,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106461,"byte_end":106464,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ Note that if you're are searching for the same needle in many different","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106465,"byte_end":106540,"line_start":269,"line_end":269,"column_start":1,"column_end":76}},{"value":"/ small haystacks, it may be faster to initialize a [`FinderRev`] once,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106541,"byte_end":106614,"line_start":270,"line_end":270,"column_start":1,"column_end":74}},{"value":"/ and reuse it for each search.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106615,"byte_end":106648,"line_start":271,"line_end":271,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106649,"byte_end":106652,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106653,"byte_end":106669,"line_start":273,"line_end":273,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106670,"byte_end":106673,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106674,"byte_end":106746,"line_start":275,"line_end":275,"column_start":1,"column_end":73}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106747,"byte_end":106819,"line_start":276,"line_end":276,"column_start":1,"column_end":73}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106820,"byte_end":106867,"line_start":277,"line_end":277,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106868,"byte_end":106871,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106872,"byte_end":106941,"line_start":279,"line_end":279,"column_start":1,"column_end":70}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106942,"byte_end":106957,"line_start":280,"line_end":280,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106958,"byte_end":106961,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106962,"byte_end":106976,"line_start":282,"line_end":282,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106977,"byte_end":106980,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106981,"byte_end":106997,"line_start":284,"line_end":284,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":106998,"byte_end":107001,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107002,"byte_end":107009,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ use memchr::memmem;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107010,"byte_end":107033,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107034,"byte_end":107037,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107038,"byte_end":107072,"line_start":289,"line_end":289,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(Some(0), memmem::rfind(haystack, b\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107073,"byte_end":107130,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Some(4), memmem::rfind(haystack, b\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107131,"byte_end":107188,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(Some(8), memmem::rfind(haystack, b\"ba\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107189,"byte_end":107245,"line_start":292,"line_end":292,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(None, memmem::rfind(haystack, b\"quux\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107246,"byte_end":107301,"line_start":293,"line_end":293,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107302,"byte_end":107309,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107310,"byte_end":107319,"line_start":295,"line_end":295,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107769,"byte_end":107777,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"FindIter","qualname":"::memmem::FindIter","value":"FindIter {  }","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107525,"byte_end":107580,"line_start":304,"line_end":304,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107581,"byte_end":107584,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107585,"byte_end":107649,"line_start":306,"line_end":306,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107650,"byte_end":107653,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ `'h` is the lifetime of the haystack while `'n` is the lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107654,"byte_end":107728,"line_start":308,"line_end":308,"column_start":1,"column_end":75}},{"value":"/ needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107729,"byte_end":107740,"line_start":309,"line_end":309,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108529,"byte_end":108539,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FindIter>::into_owned","value":"pub fn into_owned(Self) -> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Convert this iterator into its owned variant, such that it no longer\n borrows the finder and needle.","sig":null,"attributes":[{"value":"/ Convert this iterator into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108171,"byte_end":108243,"line_start":328,"line_end":328,"column_start":5,"column_end":77}},{"value":"/ borrows the finder and needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108248,"byte_end":108282,"line_start":329,"line_end":329,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108287,"byte_end":108290,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned iterator, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108295,"byte_end":108369,"line_start":331,"line_end":331,"column_start":5,"column_end":79}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108374,"byte_end":108401,"line_start":332,"line_end":332,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108406,"byte_end":108409,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108414,"byte_end":108475,"line_start":334,"line_end":334,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108480,"byte_end":108503,"line_start":335,"line_end":335,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108508,"byte_end":108517,"line_start":336,"line_end":336,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109591,"byte_end":109602,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"FindRevIter","qualname":"::memmem::FindRevIter","value":"FindRevIter {  }","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109336,"byte_end":109402,"line_start":369,"line_end":369,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109403,"byte_end":109406,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109407,"byte_end":109471,"line_start":371,"line_end":371,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109472,"byte_end":109475,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ `'h` is the lifetime of the haystack while `'n` is the lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109476,"byte_end":109550,"line_start":373,"line_end":373,"column_start":1,"column_end":75}},{"value":"/ needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109551,"byte_end":109562,"line_start":374,"line_end":374,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110438,"byte_end":110448,"line_start":403,"line_end":403,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FindRevIter>::into_owned","value":"pub fn into_owned(Self) -> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Convert this iterator into its owned variant, such that it no longer\n borrows the finder and needle.","sig":null,"attributes":[{"value":"/ Convert this iterator into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110080,"byte_end":110152,"line_start":394,"line_end":394,"column_start":5,"column_end":77}},{"value":"/ borrows the finder and needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110157,"byte_end":110191,"line_start":395,"line_end":395,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110196,"byte_end":110199,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned iterator, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110204,"byte_end":110278,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110283,"byte_end":110310,"line_start":398,"line_end":398,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110315,"byte_end":110318,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110323,"byte_end":110384,"line_start":400,"line_end":400,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110389,"byte_end":110412,"line_start":401,"line_end":401,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110417,"byte_end":110426,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112010,"byte_end":112016,"line_start":449,"line_end":449,"column_start":12,"column_end":18},"name":"Finder","qualname":"::memmem::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":989}],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111217,"byte_end":111278,"line_start":435,"line_end":435,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111279,"byte_end":111282,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111283,"byte_end":111357,"line_start":437,"line_end":437,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111358,"byte_end":111431,"line_start":438,"line_end":438,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111432,"byte_end":111506,"line_start":439,"line_end":439,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111507,"byte_end":111583,"line_start":440,"line_end":440,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111584,"byte_end":111662,"line_start":441,"line_end":441,"column_start":1,"column_end":79}},{"value":"/ [`find`] is good enough, but `Finder` is useful when you can meaningfully","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111663,"byte_end":111740,"line_start":442,"line_end":442,"column_start":1,"column_end":78}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111741,"byte_end":111793,"line_start":443,"line_end":443,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111794,"byte_end":111797,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111798,"byte_end":111871,"line_start":445,"line_end":445,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111872,"byte_end":111942,"line_start":446,"line_end":446,"column_start":1,"column_end":71}},{"value":"/ the lifetime of its needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":111943,"byte_end":111974,"line_start":447,"line_end":447,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112151,"byte_end":112154,"line_start":456,"line_end":456,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'n B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112080,"byte_end":112125,"line_start":454,"line_end":454,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112130,"byte_end":112139,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113082,"byte_end":113086,"line_start":484,"line_end":484,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"pub fn find(&Self, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112273,"byte_end":112346,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112351,"byte_end":112364,"line_start":461,"line_end":461,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112369,"byte_end":112372,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112377,"byte_end":112393,"line_start":463,"line_end":463,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112398,"byte_end":112401,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112406,"byte_end":112478,"line_start":465,"line_end":465,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112483,"byte_end":112555,"line_start":466,"line_end":466,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112560,"byte_end":112607,"line_start":467,"line_end":467,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112612,"byte_end":112615,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112620,"byte_end":112689,"line_start":469,"line_end":469,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112694,"byte_end":112709,"line_start":470,"line_end":470,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112714,"byte_end":112717,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112722,"byte_end":112736,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112741,"byte_end":112744,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112749,"byte_end":112765,"line_start":474,"line_end":474,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112770,"byte_end":112773,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112778,"byte_end":112785,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::Finder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112790,"byte_end":112821,"line_start":477,"line_end":477,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112826,"byte_end":112829,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112834,"byte_end":112868,"line_start":479,"line_end":479,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112873,"byte_end":112932,"line_start":480,"line_end":480,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112937,"byte_end":112996,"line_start":481,"line_end":481,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113001,"byte_end":113058,"line_start":482,"line_end":482,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113063,"byte_end":113070,"line_start":483,"line_end":483,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114089,"byte_end":114098,"line_start":515,"line_end":515,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Finder>::find_iter","value":"pub fn find_iter<'a, 'h>(&'a Self, &'h [u8]) -> FindIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all occurrences of a substring in a haystack.","sig":null,"attributes":[{"value":"/ Returns an iterator over all occurrences of a substring in a haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113216,"byte_end":113290,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113295,"byte_end":113298,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113303,"byte_end":113319,"line_start":490,"line_end":490,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113324,"byte_end":113327,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113332,"byte_end":113404,"line_start":492,"line_end":492,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113409,"byte_end":113481,"line_start":493,"line_end":493,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113486,"byte_end":113533,"line_start":494,"line_end":494,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113538,"byte_end":113541,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113546,"byte_end":113615,"line_start":496,"line_end":496,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113620,"byte_end":113635,"line_start":497,"line_end":497,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113640,"byte_end":113643,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113648,"byte_end":113662,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113667,"byte_end":113670,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113675,"byte_end":113691,"line_start":501,"line_end":501,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113696,"byte_end":113699,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113704,"byte_end":113711,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::Finder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113716,"byte_end":113747,"line_start":504,"line_end":504,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113752,"byte_end":113755,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113760,"byte_end":113802,"line_start":506,"line_end":506,"column_start":5,"column_end":47}},{"value":"/ let finder = Finder::new(b\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113807,"byte_end":113844,"line_start":507,"line_end":507,"column_start":5,"column_end":42}},{"value":"/ let mut it = finder.find_iter(haystack);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113849,"byte_end":113893,"line_start":508,"line_end":508,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113898,"byte_end":113933,"line_start":509,"line_end":509,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113938,"byte_end":113973,"line_start":510,"line_end":510,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":113978,"byte_end":114014,"line_start":511,"line_end":511,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114019,"byte_end":114051,"line_start":512,"line_end":512,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114056,"byte_end":114063,"line_start":513,"line_end":513,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114068,"byte_end":114077,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114583,"byte_end":114593,"line_start":531,"line_end":531,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Finder>::into_owned","value":"pub fn into_owned(Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114240,"byte_end":114310,"line_start":522,"line_end":522,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114315,"byte_end":114338,"line_start":523,"line_end":523,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114343,"byte_end":114346,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114351,"byte_end":114423,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114428,"byte_end":114455,"line_start":526,"line_end":526,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114460,"byte_end":114463,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114468,"byte_end":114529,"line_start":528,"line_end":528,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114534,"byte_end":114557,"line_start":529,"line_end":529,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114562,"byte_end":114571,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115264,"byte_end":115270,"line_start":546,"line_end":546,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Finder>::as_ref","value":"pub fn as_ref(&Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its borrowed variant.","sig":null,"attributes":[{"value":"/ Convert this finder into its borrowed variant.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114688,"byte_end":114738,"line_start":535,"line_end":535,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114743,"byte_end":114746,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ This is primarily useful if your finder is owned and you'd like to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114751,"byte_end":114821,"line_start":537,"line_end":537,"column_start":5,"column_end":75}},{"value":"/ store its borrowed variant in some intermediate data structure.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114826,"byte_end":114893,"line_start":538,"line_end":538,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114898,"byte_end":114901,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime parameter of the returned finder is tied to the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114906,"byte_end":114980,"line_start":540,"line_end":540,"column_start":5,"column_end":79}},{"value":"/ lifetime of `self`, and may be shorter than the `'n` lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":114985,"byte_end":115057,"line_start":541,"line_end":541,"column_start":5,"column_end":77}},{"value":"/ needle itself. Namely, a finder's needle can be either borrowed or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115062,"byte_end":115132,"line_start":542,"line_end":542,"column_start":5,"column_end":75}},{"value":"/ owned, so the lifetime of the needle returned must necessarily be the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115137,"byte_end":115210,"line_start":543,"line_end":543,"column_start":5,"column_end":78}},{"value":"/ shorter of the two.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115215,"byte_end":115238,"line_start":544,"line_end":544,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115243,"byte_end":115252,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115746,"byte_end":115752,"line_start":557,"line_end":557,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115357,"byte_end":115410,"line_start":550,"line_end":550,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115415,"byte_end":115418,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115423,"byte_end":115496,"line_start":552,"line_end":552,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'n` lifetime. Namely, a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115501,"byte_end":115572,"line_start":553,"line_end":553,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115577,"byte_end":115652,"line_start":554,"line_end":554,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115657,"byte_end":115720,"line_start":555,"line_end":555,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115725,"byte_end":115734,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116619,"byte_end":116628,"line_start":576,"line_end":576,"column_start":12,"column_end":21},"name":"FinderRev","qualname":"::memmem::FinderRev","value":"FinderRev {  }","parent":null,"children":[{"krate":0,"index":998}],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115811,"byte_end":115880,"line_start":562,"line_end":562,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115881,"byte_end":115884,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115885,"byte_end":115959,"line_start":564,"line_end":564,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":115960,"byte_end":116033,"line_start":565,"line_end":565,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116034,"byte_end":116108,"line_start":566,"line_end":566,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116109,"byte_end":116185,"line_start":567,"line_end":567,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116186,"byte_end":116258,"line_start":568,"line_end":568,"column_start":1,"column_end":73}},{"value":"/ using [`rfind`] is good enough, but `FinderRev` is useful when you can","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116259,"byte_end":116333,"line_start":569,"line_end":569,"column_start":1,"column_end":75}},{"value":"/ meaningfully observe searcher construction time in a profile.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116334,"byte_end":116399,"line_start":570,"line_end":570,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116400,"byte_end":116403,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116404,"byte_end":116477,"line_start":572,"line_end":572,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderRev` that is not connected to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116478,"byte_end":116551,"line_start":573,"line_end":573,"column_start":1,"column_end":74}},{"value":"/ the lifetime of its needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116552,"byte_end":116583,"line_start":574,"line_end":574,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116777,"byte_end":116780,"line_start":583,"line_end":583,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderRev>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'n B) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116698,"byte_end":116751,"line_start":581,"line_end":581,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116756,"byte_end":116765,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117882,"byte_end":117887,"line_start":614,"line_end":614,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderRev>::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116902,"byte_end":116974,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116979,"byte_end":116992,"line_start":588,"line_end":588,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116997,"byte_end":117000,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117005,"byte_end":117074,"line_start":590,"line_end":590,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117079,"byte_end":117149,"line_start":591,"line_end":591,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117154,"byte_end":117157,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117162,"byte_end":117178,"line_start":593,"line_end":593,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117183,"byte_end":117186,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117191,"byte_end":117263,"line_start":595,"line_end":595,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117268,"byte_end":117340,"line_start":596,"line_end":596,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117345,"byte_end":117392,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117397,"byte_end":117400,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117405,"byte_end":117474,"line_start":599,"line_end":599,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117479,"byte_end":117494,"line_start":600,"line_end":600,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117499,"byte_end":117502,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117507,"byte_end":117521,"line_start":602,"line_end":602,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117526,"byte_end":117529,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117534,"byte_end":117550,"line_start":604,"line_end":604,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117555,"byte_end":117558,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117563,"byte_end":117570,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::FinderRev;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117575,"byte_end":117609,"line_start":607,"line_end":607,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117614,"byte_end":117617,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117622,"byte_end":117656,"line_start":609,"line_end":609,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Some(0), FinderRev::new(\"foo\").rfind(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117661,"byte_end":117724,"line_start":610,"line_end":610,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(Some(4), FinderRev::new(\"bar\").rfind(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117729,"byte_end":117792,"line_start":611,"line_end":611,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(None, FinderRev::new(\"quux\").rfind(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117797,"byte_end":117858,"line_start":612,"line_end":612,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":117863,"byte_end":117870,"line_start":613,"line_end":613,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118896,"byte_end":118906,"line_start":646,"line_end":646,"column_start":12,"column_end":22},"name":"rfind_iter","qualname":"<FinderRev>::rfind_iter","value":"pub fn rfind_iter<'a, 'h>(&'a Self, &'h [u8]) -> FindRevIter","parent":null,"children":[],"decl_id":null,"docs":" Returns a reverse iterator over all occurrences of a substring in a\n haystack.","sig":null,"attributes":[{"value":"/ Returns a reverse iterator over all occurrences of a substring in a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118001,"byte_end":118072,"line_start":618,"line_end":618,"column_start":5,"column_end":76}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118077,"byte_end":118090,"line_start":619,"line_end":619,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118095,"byte_end":118098,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118103,"byte_end":118119,"line_start":621,"line_end":621,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118124,"byte_end":118127,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118132,"byte_end":118204,"line_start":623,"line_end":623,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118209,"byte_end":118281,"line_start":624,"line_end":624,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118286,"byte_end":118333,"line_start":625,"line_end":625,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118338,"byte_end":118341,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118346,"byte_end":118415,"line_start":627,"line_end":627,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118420,"byte_end":118435,"line_start":628,"line_end":628,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118440,"byte_end":118443,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118448,"byte_end":118462,"line_start":630,"line_end":630,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118467,"byte_end":118470,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118475,"byte_end":118491,"line_start":632,"line_end":632,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118496,"byte_end":118499,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118504,"byte_end":118511,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ use memchr::memmem::FinderRev;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118516,"byte_end":118550,"line_start":635,"line_end":635,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118555,"byte_end":118558,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let haystack = b\"foo bar foo baz foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118563,"byte_end":118605,"line_start":637,"line_end":637,"column_start":5,"column_end":47}},{"value":"/ let finder = FinderRev::new(b\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118610,"byte_end":118650,"line_start":638,"line_end":638,"column_start":5,"column_end":45}},{"value":"/ let mut it = finder.rfind_iter(haystack);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118655,"byte_end":118700,"line_start":639,"line_end":639,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some(16), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118705,"byte_end":118741,"line_start":640,"line_end":640,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(Some(8), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118746,"byte_end":118781,"line_start":641,"line_end":641,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(0), it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118786,"byte_end":118821,"line_start":642,"line_end":642,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118826,"byte_end":118858,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118863,"byte_end":118870,"line_start":644,"line_end":644,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":118875,"byte_end":118884,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119397,"byte_end":119407,"line_start":662,"line_end":662,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FinderRev>::into_owned","value":"pub fn into_owned(Self) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119054,"byte_end":119124,"line_start":653,"line_end":653,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119129,"byte_end":119152,"line_start":654,"line_end":654,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119157,"byte_end":119160,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119165,"byte_end":119237,"line_start":656,"line_end":656,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119242,"byte_end":119269,"line_start":657,"line_end":657,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119274,"byte_end":119277,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119282,"byte_end":119343,"line_start":659,"line_end":659,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119348,"byte_end":119371,"line_start":660,"line_end":660,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119376,"byte_end":119385,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120084,"byte_end":120090,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FinderRev>::as_ref","value":"pub fn as_ref(&Self) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its borrowed variant.","sig":null,"attributes":[{"value":"/ Convert this finder into its borrowed variant.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119508,"byte_end":119558,"line_start":666,"line_end":666,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119563,"byte_end":119566,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This is primarily useful if your finder is owned and you'd like to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119571,"byte_end":119641,"line_start":668,"line_end":668,"column_start":5,"column_end":75}},{"value":"/ store its borrowed variant in some intermediate data structure.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119646,"byte_end":119713,"line_start":669,"line_end":669,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119718,"byte_end":119721,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime parameter of the returned finder is tied to the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119726,"byte_end":119800,"line_start":671,"line_end":671,"column_start":5,"column_end":79}},{"value":"/ lifetime of `self`, and may be shorter than the `'n` lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119805,"byte_end":119877,"line_start":672,"line_end":672,"column_start":5,"column_end":77}},{"value":"/ needle itself. Namely, a finder's needle can be either borrowed or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119882,"byte_end":119952,"line_start":673,"line_end":673,"column_start":5,"column_end":75}},{"value":"/ owned, so the lifetime of the needle returned must necessarily be the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":119957,"byte_end":120030,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"/ shorter of the two.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120035,"byte_end":120058,"line_start":675,"line_end":675,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120063,"byte_end":120072,"line_start":676,"line_end":676,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120572,"byte_end":120578,"line_start":688,"line_end":688,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderRev>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120183,"byte_end":120236,"line_start":681,"line_end":681,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120241,"byte_end":120244,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120249,"byte_end":120322,"line_start":683,"line_end":683,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'n` lifetime. Namely, a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120327,"byte_end":120398,"line_start":684,"line_end":684,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120403,"byte_end":120478,"line_start":685,"line_end":685,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120483,"byte_end":120546,"line_start":686,"line_end":686,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120551,"byte_end":120560,"line_start":687,"line_end":687,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120967,"byte_end":120980,"line_start":699,"line_end":699,"column_start":12,"column_end":25},"name":"FinderBuilder","qualname":"::memmem::FinderBuilder","value":"FinderBuilder {  }","parent":null,"children":[{"krate":0,"index":1006}],"decl_id":null,"docs":" A builder for constructing non-default forward or reverse memmem finders.","sig":null,"attributes":[{"value":"/ A builder for constructing non-default forward or reverse memmem finders.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120637,"byte_end":120714,"line_start":693,"line_end":693,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120715,"byte_end":120718,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ A builder is primarily useful for configuring a substring searcher.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120719,"byte_end":120790,"line_start":695,"line_end":695,"column_start":1,"column_end":72}},{"value":"/ Currently, the only configuration exposed is the ability to disable","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120791,"byte_end":120862,"line_start":696,"line_end":696,"column_start":1,"column_end":72}},{"value":"/ heuristic prefilters used to speed up certain searches.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":120863,"byte_end":120922,"line_start":697,"line_end":697,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121105,"byte_end":121108,"line_start":705,"line_end":705,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderBuilder>::new","value":"pub fn new() -> FinderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder builder with default settings.\n","sig":null,"attributes":[{"value":"/ Create a new finder builder with default settings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121039,"byte_end":121093,"line_start":704,"line_end":704,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121270,"byte_end":121283,"line_start":711,"line_end":711,"column_start":12,"column_end":25},"name":"build_forward","qualname":"<FinderBuilder>::build_forward","value":"pub fn build_forward<'n, B: ?Sized + AsRef<[u8]>>(&Self, &'n B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Build a forward finder using the given needle from the current\n settings.\n","sig":null,"attributes":[{"value":"/ Build a forward finder using the given needle from the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121174,"byte_end":121240,"line_start":709,"line_end":709,"column_start":5,"column_end":71}},{"value":"/ settings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121245,"byte_end":121258,"line_start":710,"line_end":710,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121554,"byte_end":121567,"line_start":720,"line_end":720,"column_start":12,"column_end":25},"name":"build_reverse","qualname":"<FinderBuilder>::build_reverse","value":"pub fn build_reverse<'n, B: ?Sized + AsRef<[u8]>>(&Self, &'n B) -> FinderRev","parent":null,"children":[],"decl_id":null,"docs":" Build a reverse finder using the given needle from the current\n settings.\n","sig":null,"attributes":[{"value":"/ Build a reverse finder using the given needle from the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121458,"byte_end":121524,"line_start":718,"line_end":718,"column_start":5,"column_end":71}},{"value":"/ settings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121529,"byte_end":121542,"line_start":719,"line_end":719,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121926,"byte_end":121935,"line_start":731,"line_end":731,"column_start":12,"column_end":21},"name":"prefilter","qualname":"<FinderBuilder>::prefilter","value":"pub fn prefilter(&mut Self, Prefilter) -> &mut FinderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the prefilter setting for the finder.","sig":null,"attributes":[{"value":"/ Configure the prefilter setting for the finder.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121738,"byte_end":121789,"line_start":727,"line_end":727,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121794,"byte_end":121797,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ See the documentation for [`Prefilter`] for more discussion on why","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121802,"byte_end":121872,"line_start":729,"line_end":729,"column_start":5,"column_end":75}},{"value":"/ you might want to configure this.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121877,"byte_end":121914,"line_start":730,"line_end":730,"column_start":5,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","byte_start":7398,"byte_end":7406,"line_start":26,"line_end":26,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","byte_start":7533,"byte_end":7541,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","byte_start":8623,"byte_end":8626,"line_start":70,"line_end":70,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33657,"byte_end":33663,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33922,"byte_end":33928,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34230,"byte_end":34236,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34585,"byte_end":34592,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34944,"byte_end":34951,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35269,"byte_end":35276,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35692,"byte_end":35699,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":36127,"byte_end":36134,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":36500,"byte_end":36507,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\genericsimd.rs","byte_start":150640,"byte_end":150647,"line_start":61,"line_end":61,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":159623,"byte_end":159626,"line_start":31,"line_end":31,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":162998,"byte_end":163009,"line_start":110,"line_end":110,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164005,"byte_end":164016,"line_start":137,"line_end":137,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165959,"byte_end":165968,"line_start":179,"line_end":179,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":166041,"byte_end":166050,"line_start":185,"line_end":185,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":167314,"byte_end":167328,"line_start":216,"line_end":216,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\rabinkarp.rs","byte_start":201477,"byte_end":201487,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\rabinkarp.rs","byte_start":202789,"byte_end":202793,"line_start":157,"line_end":157,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\rarebytes.rs","byte_start":207168,"byte_end":207183,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":215008,"byte_end":215015,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":220698,"byte_end":220705,"line_start":244,"line_end":244,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":225502,"byte_end":225508,"line_start":383,"line_end":383,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":227596,"byte_end":227601,"line_start":429,"line_end":429,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":230183,"byte_end":230189,"line_start":495,"line_end":495,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":235332,"byte_end":235342,"line_start":623,"line_end":623,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":236419,"byte_end":236437,"line_start":650,"line_end":650,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\vector.rs","byte_start":249476,"byte_end":249483,"line_start":39,"line_end":39,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\vector.rs","byte_start":250302,"byte_end":250309,"line_start":72,"line_end":72,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\x86\\avx.rs","byte_start":252260,"byte_end":252267,"line_start":17,"line_end":17,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\x86\\sse.rs","byte_start":256462,"byte_end":256469,"line_start":10,"line_end":10,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107898,"byte_end":107906,"line_start":318,"line_end":318,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108784,"byte_end":108792,"line_start":347,"line_end":347,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109826,"byte_end":109837,"line_start":384,"line_end":384,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110662,"byte_end":110673,"line_start":412,"line_end":412,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112063,"byte_end":112069,"line_start":453,"line_end":453,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116678,"byte_end":116687,"line_start":580,"line_end":580,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121019,"byte_end":121032,"line_start":703,"line_end":703,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":125700,"byte_end":125708,"line_start":819,"line_end":819,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":132606,"byte_end":132616,"line_start":1012,"line_end":1012,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":134046,"byte_end":134057,"line_start":1052,"line_end":1052,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\lib.rs","byte_start":6555,"byte_end":6561,"line_start":179,"line_end":179,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":300}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","byte_start":7398,"byte_end":7406,"line_start":26,"line_end":26,"column_start":25,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":698},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","byte_start":7533,"byte_end":7541,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\cow.rs","byte_start":8623,"byte_end":8626,"line_start":70,"line_end":70,"column_start":10,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33657,"byte_end":33663,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":33922,"byte_end":33928,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":137},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34230,"byte_end":34236,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":137},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34585,"byte_end":34592,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":34944,"byte_end":34951,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35269,"byte_end":35276,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":35692,"byte_end":35699,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":36127,"byte_end":36134,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memchr\\iter.rs","byte_start":36500,"byte_end":36507,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\genericsimd.rs","byte_start":150640,"byte_end":150647,"line_start":61,"line_end":61,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":159623,"byte_end":159626,"line_start":31,"line_end":31,"column_start":10,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":162998,"byte_end":163009,"line_start":110,"line_end":110,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":164005,"byte_end":164016,"line_start":137,"line_end":137,"column_start":27,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":820},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":165959,"byte_end":165968,"line_start":179,"line_end":179,"column_start":18,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":826},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":166041,"byte_end":166050,"line_start":185,"line_end":185,"column_start":6,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\prefilter\\mod.rs","byte_start":167314,"byte_end":167328,"line_start":216,"line_end":216,"column_start":6,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\rabinkarp.rs","byte_start":201477,"byte_end":201487,"line_start":115,"line_end":115,"column_start":6,"column_end":16},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\rabinkarp.rs","byte_start":202789,"byte_end":202793,"line_start":157,"line_end":157,"column_start":6,"column_end":10},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":853},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\rarebytes.rs","byte_start":207168,"byte_end":207183,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":215008,"byte_end":215015,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":220698,"byte_end":220705,"line_start":244,"line_end":244,"column_start":6,"column_end":13},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":225502,"byte_end":225508,"line_start":383,"line_end":383,"column_start":6,"column_end":12},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":227596,"byte_end":227601,"line_start":429,"line_end":429,"column_start":6,"column_end":11},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":230183,"byte_end":230189,"line_start":495,"line_end":495,"column_start":6,"column_end":12},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":235332,"byte_end":235342,"line_start":623,"line_end":623,"column_start":6,"column_end":16},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\twoway.rs","byte_start":236419,"byte_end":236437,"line_start":650,"line_end":650,"column_start":6,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\vector.rs","byte_start":248875,"byte_end":248879,"line_start":21,"line_end":21,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":540}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\vector.rs","byte_start":248893,"byte_end":248898,"line_start":21,"line_end":21,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":540}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\vector.rs","byte_start":249476,"byte_end":249483,"line_start":39,"line_end":39,"column_start":21,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":2,"index":52166},"to":{"krate":0,"index":540}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\vector.rs","byte_start":250302,"byte_end":250309,"line_start":72,"line_end":72,"column_start":21,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":2,"index":52195},"to":{"krate":0,"index":540}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\x86\\avx.rs","byte_start":252260,"byte_end":252267,"line_start":17,"line_end":17,"column_start":10,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\x86\\sse.rs","byte_start":256462,"byte_end":256469,"line_start":10,"line_end":10,"column_start":6,"column_end":13},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":107898,"byte_end":107906,"line_start":318,"line_end":318,"column_start":14,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":108784,"byte_end":108792,"line_start":347,"line_end":347,"column_start":27,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":966},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":109826,"byte_end":109837,"line_start":384,"line_end":384,"column_start":14,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":110662,"byte_end":110673,"line_start":412,"line_end":412,"column_start":27,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":112063,"byte_end":112069,"line_start":453,"line_end":453,"column_start":10,"column_end":16},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":116678,"byte_end":116687,"line_start":580,"line_end":580,"column_start":10,"column_end":19},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":121019,"byte_end":121032,"line_start":703,"line_end":703,"column_start":6,"column_end":19},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":125700,"byte_end":125708,"line_start":819,"line_end":819,"column_start":10,"column_end":18},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":132606,"byte_end":132616,"line_start":1012,"line_end":1012,"column_start":6,"column_end":16},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memchr-2.5.0\\src\\memmem\\mod.rs","byte_start":134046,"byte_end":134057,"line_start":1052,"line_end":1052,"column_start":10,"column_end":21},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1061},"to":{"krate":4294967295,"index":4294967295}}]}
{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","utf8_ranges","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","-C","metadata=6da49c1e210489e4","-C","extra-filename=-6da49c1e210489e4","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-games\\dinunicorn\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-games\\dinunicorn\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-games\\dinunicorn\\target\\rls\\debug\\deps\\libutf8_ranges-6da49c1e210489e4.rmeta"},"prelude":{"crate_id":{"name":"utf8_ranges","disambiguator":[6845809163562963420,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":0,"byte_end":17309,"line_start":1,"line_end":532,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":0,"byte_end":17309,"line_start":1,"line_end":532,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":67},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":25},{"krate":0,"index":31},{"krate":0,"index":36},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":60},{"krate":0,"index":66}],"decl_id":null,"docs":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","sig":null,"attributes":[{"value":"*\nCrate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.\n\nSee the documentation on the `Utf8Sequences` iterator for more details and\nan example.\n\n# Wait, what is this?\n\nThis is simplest to explain with an example. Let's say you wanted to test\nwhether a particular byte sequence was a Cyrillic character. One possible\nscalar value range is `[0400-04FF]`. The set of allowed bytes for this\nrange can be expressed as a sequence of byte ranges:\n\n```ignore\n[D0-D3][80-BF]\n```\n\nThis is simple enough: simply encode the boundaries, `0400` encodes to\n`D0 80` and `04FF` encodes to `D3 BF`, and create ranges from each\ncorresponding pair of bytes: `D0` to `D3` and `80` to `BF`.\n\nHowever, what if you wanted to add the Cyrillic Supplementary characters to\nyour range? Your range might then become `[0400-052F]`. The same procedure\nas above doesn't quite work because `052F` encodes to `D4 AF`. The byte ranges\nyou'd get from the previous transformation would be `[D0-D4][80-AF]`. However,\nthis isn't quite correct because this range doesn't capture many characters,\nfor example, `04FF` (because its last byte, `BF` isn't in the range `80-AF`).\n\nInstead, you need multiple sequences of byte ranges:\n\n```ignore\n[D0-D3][80-BF]  # matches codepoints 0400-04FF\n[D4][80-AF]     # matches codepoints 0500-052F\n```\n\nThis gets even more complicated if you want bigger ranges, particularly if\nthey naively contain surrogate codepoints. For example, the sequence of byte\nranges for the basic multilingual plane (`[0000-FFFF]`) look like this:\n\n```ignore\n[0-7F]\n[C2-DF][80-BF]\n[E0][A0-BF][80-BF]\n[E1-EC][80-BF][80-BF]\n[ED][80-9F][80-BF]\n[EE-EF][80-BF][80-BF]\n```\n\nNote that the byte ranges above will *not* match any erroneous encoding of\nUTF-8, including encodings of surrogate codepoints.\n\nAnd, of course, for all of Unicode (`[000000-10FFFF]`):\n\n```ignore\n[0-7F]\n[C2-DF][80-BF]\n[E0][A0-BF][80-BF]\n[E1-EC][80-BF][80-BF]\n[ED][80-9F][80-BF]\n[EE-EF][80-BF][80-BF]\n[F0][90-BF][80-BF][80-BF]\n[F1-F3][80-BF][80-BF][80-BF]\n[F4][80-8F][80-BF][80-BF]\n```\n\nThis crate automates the process of creating these byte ranges from ranges of\nUnicode scalar values.\n\n# Why would I ever use this?\n\nYou probably won't ever need this. In 99% of cases, you just decode the byte\nsequence into a Unicode scalar value and compare scalar values directly.\nHowever, this explicit decoding step isn't always possible. For example, the\nconstruction of some finite state machines may benefit from converting ranges\nof scalar values into UTF-8 decoder automata (e.g., for character classes in\nregular expressions).\n\n# Lineage\n\nI got the idea and general implementation strategy from Russ Cox in his\n[article on regexps](https://web.archive.org/web/20160404141123/https://swtch.com/~rsc/regexp/regexp3.html) and RE2.\nRuss Cox got it from Ken Thompson's `grep` (no source, folk lore?).\nI also got the idea from\n[Lucene](https://github.com/apache/lucene-solr/blob/ae93f4e7ac6a3908046391de35d4f50a0d3c59ca/lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8.java),\nwhich uses it for executing automata on their term index.\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":0,"byte_end":3218,"line_start":1,"line_end":88,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3220,"byte_end":3242,"line_start":90,"line_end":90,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3791,"byte_end":3794,"line_start":115,"line_end":115,"column_start":5,"column_end":8},"name":"One","qualname":"::Utf8Sequence::One","value":"Utf8Sequence::One(Utf8Range)","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" One byte range.\n","sig":null,"attributes":[{"value":"/ One byte range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3767,"byte_end":3786,"line_start":114,"line_end":114,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3847,"byte_end":3850,"line_start":117,"line_end":117,"column_start":5,"column_end":8},"name":"Two","qualname":"::Utf8Sequence::Two","value":"Utf8Sequence::Two([Utf8Range; ])","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Two successive byte ranges.\n","sig":null,"attributes":[{"value":"/ Two successive byte ranges.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3811,"byte_end":3842,"line_start":116,"line_end":116,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3910,"byte_end":3915,"line_start":119,"line_end":119,"column_start":5,"column_end":10},"name":"Three","qualname":"::Utf8Sequence::Three","value":"Utf8Sequence::Three([Utf8Range; ])","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Three successive byte ranges.\n","sig":null,"attributes":[{"value":"/ Three successive byte ranges.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3872,"byte_end":3905,"line_start":118,"line_end":118,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3974,"byte_end":3978,"line_start":121,"line_end":121,"column_start":5,"column_end":9},"name":"Four","qualname":"::Utf8Sequence::Four","value":"Utf8Sequence::Four([Utf8Range; ])","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Four successive byte ranges.\n","sig":null,"attributes":[{"value":"/ Four successive byte ranges.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3937,"byte_end":3969,"line_start":120,"line_end":120,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3748,"byte_end":3760,"line_start":113,"line_end":113,"column_start":10,"column_end":22},"name":"Utf8Sequence","qualname":"::Utf8Sequence","value":"pub enum Utf8Sequence {\n    One(Utf8Range),\n    Two([Utf8Range; ]),\n    Three([Utf8Range; ]),\n    Four([Utf8Range; ]),\n}","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":79}],"decl_id":null,"docs":" Utf8Sequence represents a sequence of byte ranges.","sig":null,"attributes":[{"value":"/ Utf8Sequence represents a sequence of byte ranges.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3408,"byte_end":3462,"line_start":105,"line_end":105,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3463,"byte_end":3466,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ To match a Utf8Sequence, a candidate byte sequence must match each","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3467,"byte_end":3537,"line_start":107,"line_end":107,"column_start":1,"column_end":71}},{"value":"/ successive range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3538,"byte_end":3559,"line_start":108,"line_end":108,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3560,"byte_end":3563,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ For example, if there are two ranges, `[C2-DF][80-BF]`, then the byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3564,"byte_end":3637,"line_start":110,"line_end":110,"column_start":1,"column_end":74}},{"value":"/ sequence `\\xDD\\x61` would not match because `0x61 < 0x80`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":3638,"byte_end":3700,"line_start":111,"line_end":111,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5091,"byte_end":5099,"line_start":152,"line_end":152,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Utf8Sequence>::as_slice","value":"pub fn as_slice(&Self) -> &[Utf8Range]","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying sequence of byte ranges as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the underlying sequence of byte ranges as a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5017,"byte_end":5079,"line_start":151,"line_end":151,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5501,"byte_end":5504,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"len","qualname":"<Utf8Sequence>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of byte ranges in this sequence.","sig":null,"attributes":[{"value":"/ Returns the number of byte ranges in this sequence.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5354,"byte_end":5409,"line_start":162,"line_end":162,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5414,"byte_end":5417,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The length is guaranteed to be in the closed interval `[1, 4]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5422,"byte_end":5489,"line_start":164,"line_end":164,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5673,"byte_end":5680,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Sequence>::matches","value":"pub fn matches(&Self, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if a prefix of `bytes` matches this sequence\n of byte ranges.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if a prefix of `bytes` matches this sequence","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5564,"byte_end":5637,"line_start":169,"line_end":169,"column_start":5,"column_end":78}},{"value":"/ of byte ranges.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":5642,"byte_end":5661,"line_start":170,"line_end":170,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6716,"byte_end":6725,"line_start":208,"line_end":208,"column_start":12,"column_end":21},"name":"Utf8Range","qualname":"::Utf8Range","value":"Utf8Range { start, end }","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" A single inclusive range of UTF-8 bytes.\n","sig":null,"attributes":[{"value":"/ A single inclusive range of UTF-8 bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6622,"byte_end":6666,"line_start":206,"line_end":206,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6777,"byte_end":6782,"line_start":210,"line_end":210,"column_start":9,"column_end":14},"name":"start","qualname":"::Utf8Range::start","value":"u8","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Start of byte range (inclusive).\n","sig":null,"attributes":[{"value":"/ Start of byte range (inclusive).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6732,"byte_end":6768,"line_start":209,"line_end":209,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6835,"byte_end":6838,"line_start":212,"line_end":212,"column_start":9,"column_end":12},"name":"end","qualname":"::Utf8Range::end","value":"u8","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" End of byte range (inclusive).\n","sig":null,"attributes":[{"value":"/ End of byte range (inclusive).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6792,"byte_end":6826,"line_start":211,"line_end":211,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7037,"byte_end":7044,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Range>::matches","value":"pub fn matches(&Self, u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if the given byte is in this range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6961,"byte_end":7025,"line_start":220,"line_end":220,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9386,"byte_end":9399,"line_start":286,"line_end":286,"column_start":12,"column_end":25},"name":"Utf8Sequences","qualname":"::Utf8Sequences","value":"Utf8Sequences {  }","parent":null,"children":[{"krate":0,"index":45}],"decl_id":null,"docs":" An iterator over ranges of matching UTF-8 byte sequences.","sig":null,"attributes":[{"value":"/ An iterator over ranges of matching UTF-8 byte sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7385,"byte_end":7446,"line_start":236,"line_end":236,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7447,"byte_end":7450,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ The iteration represents an alternation of comprehensive byte sequences","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7451,"byte_end":7526,"line_start":238,"line_end":238,"column_start":1,"column_end":76}},{"value":"/ that match precisely the set of UTF-8 encoded scalar values.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7527,"byte_end":7591,"line_start":239,"line_end":239,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7592,"byte_end":7595,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ A byte sequence corresponds to one of the scalar values in the range given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7596,"byte_end":7674,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ if and only if it completely matches exactly one of the sequences of byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7675,"byte_end":7752,"line_start":242,"line_end":242,"column_start":1,"column_end":78}},{"value":"/ ranges produced by this iterator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7753,"byte_end":7790,"line_start":243,"line_end":243,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7791,"byte_end":7794,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ Each sequence of byte ranges matches a unique set of bytes. That is, no two","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7795,"byte_end":7874,"line_start":245,"line_end":245,"column_start":1,"column_end":80}},{"value":"/ sequences will match the same bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7875,"byte_end":7915,"line_start":246,"line_end":246,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7916,"byte_end":7919,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7920,"byte_end":7933,"line_start":248,"line_end":248,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7934,"byte_end":7937,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ This shows how to match an arbitrary byte sequence against a range of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7938,"byte_end":8011,"line_start":250,"line_end":250,"column_start":1,"column_end":74}},{"value":"/ scalar values.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8012,"byte_end":8030,"line_start":251,"line_end":251,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8031,"byte_end":8034,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8035,"byte_end":8046,"line_start":253,"line_end":253,"column_start":1,"column_end":12}},{"value":"/ use utf8_ranges::{Utf8Sequences, Utf8Sequence};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8047,"byte_end":8098,"line_start":254,"line_end":254,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8099,"byte_end":8102,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ fn matches(seqs: &[Utf8Sequence], bytes: &[u8]) -> bool {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8103,"byte_end":8164,"line_start":256,"line_end":256,"column_start":1,"column_end":62}},{"value":"/     for range in seqs {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8165,"byte_end":8192,"line_start":257,"line_end":257,"column_start":1,"column_end":28}},{"value":"/         if range.matches(bytes) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8193,"byte_end":8230,"line_start":258,"line_end":258,"column_start":1,"column_end":38}},{"value":"/             return true;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8231,"byte_end":8259,"line_start":259,"line_end":259,"column_start":1,"column_end":29}},{"value":"/         }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8260,"byte_end":8273,"line_start":260,"line_end":260,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8274,"byte_end":8283,"line_start":261,"line_end":261,"column_start":1,"column_end":10}},{"value":"/     false","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8284,"byte_end":8297,"line_start":262,"line_end":262,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8298,"byte_end":8303,"line_start":263,"line_end":263,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8304,"byte_end":8307,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ // Test the basic multilingual plane.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8308,"byte_end":8349,"line_start":265,"line_end":265,"column_start":1,"column_end":42}},{"value":"/ let seqs: Vec<_> = Utf8Sequences::new('\\u{0}', '\\u{FFFF}').collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8350,"byte_end":8423,"line_start":266,"line_end":266,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8424,"byte_end":8427,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ // UTF-8 encoding of 'a'.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8428,"byte_end":8457,"line_start":268,"line_end":268,"column_start":1,"column_end":30}},{"value":"/ assert!(matches(&seqs, &[0x61]));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8458,"byte_end":8495,"line_start":269,"line_end":269,"column_start":1,"column_end":38}},{"value":"/ // UTF-8 encoding of '☃' (`\\u{2603}`).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8496,"byte_end":8540,"line_start":270,"line_end":270,"column_start":1,"column_end":43}},{"value":"/ assert!(matches(&seqs, &[0xE2, 0x98, 0x83]));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8541,"byte_end":8590,"line_start":271,"line_end":271,"column_start":1,"column_end":50}},{"value":"/ // UTF-8 encoding of `\\u{10348}` (outside the BMP).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8591,"byte_end":8646,"line_start":272,"line_end":272,"column_start":1,"column_end":56}},{"value":"/ assert!(!matches(&seqs, &[0xF0, 0x90, 0x8D, 0x88]));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8647,"byte_end":8703,"line_start":273,"line_end":273,"column_start":1,"column_end":57}},{"value":"/ // Tries to match against a UTF-8 encoding of a surrogate codepoint,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8704,"byte_end":8776,"line_start":274,"line_end":274,"column_start":1,"column_end":73}},{"value":"/ // which is invalid UTF-8, and therefore fails, despite the fact that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8777,"byte_end":8850,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ // the corresponding codepoint (0xD800) falls in the range given.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8851,"byte_end":8920,"line_start":276,"line_end":276,"column_start":1,"column_end":70}},{"value":"/ assert!(!matches(&seqs, &[0xED, 0xA0, 0x80]));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8921,"byte_end":8971,"line_start":277,"line_end":277,"column_start":1,"column_end":51}},{"value":"/ // And fails against plain old invalid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":8972,"byte_end":9021,"line_start":278,"line_end":278,"column_start":1,"column_end":50}},{"value":"/ assert!(!matches(&seqs, &[0xFF, 0xFF]));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9022,"byte_end":9066,"line_start":279,"line_end":279,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9067,"byte_end":9074,"line_start":280,"line_end":280,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9075,"byte_end":9078,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ If this example seems circuitous, that's because it is! It's meant to be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9079,"byte_end":9155,"line_start":282,"line_end":282,"column_start":1,"column_end":77}},{"value":"/ illustrative. In practice, you could just try to decode your byte sequence","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9156,"byte_end":9234,"line_start":283,"line_end":283,"column_start":1,"column_end":79}},{"value":"/ and compare it with the scalar value range directly. However, this is not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9235,"byte_end":9312,"line_start":284,"line_end":284,"column_start":1,"column_end":78}},{"value":"/ always possible (for example, in a byte based automaton).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9313,"byte_end":9374,"line_start":285,"line_end":285,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9567,"byte_end":9570,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"new","qualname":"<Utf8Sequences>::new","value":"pub fn new(char, char) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator over UTF-8 byte ranges for the scalar value range\n given.\n","sig":null,"attributes":[{"value":"/ Create a new iterator over UTF-8 byte ranges for the scalar value range","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9465,"byte_end":9540,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ given.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9545,"byte_end":9555,"line_start":292,"line_end":292,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9934,"byte_end":9939,"line_start":304,"line_end":304,"column_start":12,"column_end":17},"name":"reset","qualname":"<Utf8Sequences>::reset","value":"pub fn reset(&mut Self, char, char)","parent":null,"children":[],"decl_id":null,"docs":" reset resets the scalar value range.\n Any existing state is cleared, but resources may be reused.","sig":null,"attributes":[{"value":"/ reset resets the scalar value range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9730,"byte_end":9770,"line_start":299,"line_end":299,"column_start":5,"column_end":45}},{"value":"/ Any existing state is cleared, but resources may be reused.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9775,"byte_end":9838,"line_start":300,"line_end":300,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9843,"byte_end":9846,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ N.B. Benchmarks say that this method is dubious.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9851,"byte_end":9903,"line_start":302,"line_end":302,"column_start":5,"column_end":57}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":4004,"byte_end":4016,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6174,"byte_end":6186,"line_start":193,"line_end":193,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6852,"byte_end":6861,"line_start":215,"line_end":215,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7139,"byte_end":7148,"line_start":226,"line_end":226,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9445,"byte_end":9458,"line_start":290,"line_end":290,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":10264,"byte_end":10275,"line_start":319,"line_end":319,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":10431,"byte_end":10444,"line_start":325,"line_end":325,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":12380,"byte_end":12391,"line_start":379,"line_end":379,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":4004,"byte_end":4016,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":67},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6174,"byte_end":6186,"line_start":193,"line_end":193,"column_start":21,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":67},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":6852,"byte_end":6861,"line_start":215,"line_end":215,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":7139,"byte_end":7148,"line_start":226,"line_end":226,"column_start":21,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":99},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":9445,"byte_end":9458,"line_start":290,"line_end":290,"column_start":6,"column_end":19},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":10264,"byte_end":10275,"line_start":319,"line_end":319,"column_start":21,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":50},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":10431,"byte_end":10444,"line_start":325,"line_end":325,"column_start":19,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":44},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\utf8-ranges-1.0.5\\src\\lib.rs","byte_start":12380,"byte_end":12391,"line_start":379,"line_end":379,"column_start":6,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}}]}
{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","flate2","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"miniz_oxide\"","--cfg","feature=\"rust_backend\"","-C","metadata=88c8a33865e249c1","-C","extra-filename=-88c8a33865e249c1","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps","--extern","crc32fast=d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps\\libcrc32fast-709d1338336be821.rmeta","--extern","miniz_oxide=d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps\\libminiz_oxide-7dbd7991e341e130.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps\\libflate2-88c8a33865e249c1.rmeta"},"prelude":{"crate_id":{"name":"flate2","disambiguator":[7418216954871648181,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","num":16,"id":{"name":"crc32fast","disambiguator":[7521281354712788951,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","num":17,"id":{"name":"cfg_if","disambiguator":[17941200006019888196,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","num":18,"id":{"name":"miniz_oxide","disambiguator":[8009271135597417284,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","num":19,"id":{"name":"adler","disambiguator":[8964059262800736621,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":0,"byte_end":7427,"line_start":1,"line_end":204,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3487,"byte_end":3490,"line_start":80,"line_end":80,"column_start":22,"column_end":25},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3492,"byte_end":3501,"line_start":80,"line_end":80,"column_start":27,"column_end":36},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3503,"byte_end":3512,"line_start":80,"line_end":80,"column_start":38,"column_end":47},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3534,"byte_end":3543,"line_start":81,"line_end":81,"column_start":20,"column_end":29},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3564,"byte_end":3572,"line_start":82,"line_end":82,"column_start":20,"column_end":28},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3595,"byte_end":3603,"line_start":83,"line_end":83,"column_start":22,"column_end":30},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3605,"byte_end":3618,"line_start":83,"line_end":83,"column_start":32,"column_end":45},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3620,"byte_end":3630,"line_start":83,"line_end":83,"column_start":47,"column_end":57},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3632,"byte_end":3647,"line_start":83,"line_end":83,"column_start":59,"column_end":74},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3632,"byte_end":3647,"line_start":83,"line_end":83,"column_start":59,"column_end":74},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3649,"byte_end":3655,"line_start":83,"line_end":83,"column_start":76,"column_end":82},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3679,"byte_end":3692,"line_start":84,"line_end":84,"column_start":22,"column_end":35},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3694,"byte_end":3709,"line_start":84,"line_end":84,"column_start":37,"column_end":52},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4011,"byte_end":4025,"line_start":100,"line_end":100,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4061,"byte_end":4075,"line_start":101,"line_end":101,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4106,"byte_end":4115,"line_start":102,"line_end":102,"column_start":30,"column_end":39},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4146,"byte_end":4155,"line_start":103,"line_end":103,"column_start":30,"column_end":39},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4186,"byte_end":4200,"line_start":104,"line_end":104,"column_start":30,"column_end":44},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4233,"byte_end":4244,"line_start":105,"line_end":105,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4277,"byte_end":4288,"line_start":106,"line_end":106,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1026}},{"kind":"Use","ref_id":{"krate":0,"index":1151},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4513,"byte_end":4527,"line_start":114,"line_end":114,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4564,"byte_end":4578,"line_start":115,"line_end":115,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4610,"byte_end":4619,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4651,"byte_end":4660,"line_start":117,"line_end":117,"column_start":31,"column_end":40},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4694,"byte_end":4705,"line_start":118,"line_end":118,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4739,"byte_end":4750,"line_start":119,"line_end":119,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1126},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4985,"byte_end":4999,"line_start":127,"line_end":127,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":5038,"byte_end":5052,"line_start":128,"line_end":128,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":5086,"byte_end":5095,"line_start":129,"line_end":129,"column_start":33,"column_end":42},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":5129,"byte_end":5138,"line_start":130,"line_end":130,"column_start":33,"column_end":42},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":5172,"byte_end":5186,"line_start":131,"line_end":131,"column_start":33,"column_end":47},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":5222,"byte_end":5233,"line_start":132,"line_end":132,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1067}},{"kind":"Use","ref_id":{"krate":0,"index":1393},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":5269,"byte_end":5280,"line_start":133,"line_end":133,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1067}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":0,"byte_end":7427,"line_start":1,"line_end":204,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":79},{"krate":0,"index":127},{"krate":0,"index":285},{"krate":0,"index":371},{"krate":0,"index":713},{"krate":0,"index":787},{"krate":0,"index":869},{"krate":0,"index":1026},{"krate":0,"index":1048},{"krate":0,"index":1067},{"krate":0,"index":1089},{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1092},{"krate":0,"index":1098}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"/ A DEFLATE-based stream compression/decompression library","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":0,"byte_end":60,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":61,"byte_end":64,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library provides support for compression and decompression of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":65,"byte_end":135,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ DEFLATE-based streams:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":136,"byte_end":162,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":163,"byte_end":166,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ * the DEFLATE format itself","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":167,"byte_end":198,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"/ * the zlib format","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":199,"byte_end":220,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/ * gzip","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":221,"byte_end":231,"line_start":8,"line_end":8,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":232,"byte_end":235,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ These three formats are all closely related and largely only differ in their","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":236,"byte_end":316,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ headers/footers. This crate has three types in each submodule for dealing","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":317,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ with these three formats.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":395,"byte_end":424,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":425,"byte_end":428,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":429,"byte_end":449,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":450,"byte_end":453,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In addition to supporting three formats, this crate supports several different","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":454,"byte_end":536,"line_start":16,"line_end":16,"column_start":1,"column_end":83}},{"value":"/ backends, controlled through this crate's features:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":537,"byte_end":592,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":593,"byte_end":596,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ * `default`, or `rust_backend` - this implementation uses the `miniz_oxide`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":597,"byte_end":676,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/   crate which is a port of `miniz.c` (below) to Rust. This feature does not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":677,"byte_end":756,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/   require a C compiler and only requires Rust code.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":757,"byte_end":812,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":813,"byte_end":816,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ * `zlib` - this feature will enable linking against the `libz` library, typically found on most","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":817,"byte_end":916,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/   Linux systems by default. If the library isn't found to already be on the system it will be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":917,"byte_end":1014,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/   compiled from source (this is a C library).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1015,"byte_end":1064,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1065,"byte_end":1068,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ There's various tradeoffs associated with each implementation, but in general you probably","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1069,"byte_end":1163,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/ won't have to tweak the defaults. The default choice is selected to avoid the need for a C","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1164,"byte_end":1258,"line_start":28,"line_end":28,"column_start":1,"column_end":95}},{"value":"/ compiler at build time. `zlib-ng-compat` is useful if you're using zlib for compatibility but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1259,"byte_end":1356,"line_start":29,"line_end":29,"column_start":1,"column_end":98}},{"value":"/ want performance via zlib-ng's zlib-compat mode. `zlib` is useful if something else in your","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1357,"byte_end":1452,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ dependencies links the original zlib so you cannot use zlib-ng-compat. The compression ratios","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1453,"byte_end":1550,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ and performance of each of these feature should be roughly comparable, but you'll likely want","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1551,"byte_end":1648,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ to run your own tests if you're curious about the performance.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1649,"byte_end":1715,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1716,"byte_end":1719,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Organization","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1720,"byte_end":1738,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1739,"byte_end":1742,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This crate consists mainly of three modules, [`read`], [`write`], and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1743,"byte_end":1816,"line_start":37,"line_end":37,"column_start":1,"column_end":74}},{"value":"/ [`bufread`]. Each module contains a number of types used to encode and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1817,"byte_end":1891,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ decode various streams of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1892,"byte_end":1927,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1928,"byte_end":1931,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All types in the [`write`] module work on instances of [`Write`][write],","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":1932,"byte_end":2008,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ whereas all types in the [`read`] module work on instances of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2009,"byte_end":2074,"line_start":42,"line_end":42,"column_start":1,"column_end":66}},{"value":"/ [`Read`][read] and [`bufread`] works with [`BufRead`][bufread]. If you","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2075,"byte_end":2149,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ are decoding directly from a `&[u8]`, use the [`bufread`] types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2150,"byte_end":2218,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2219,"byte_end":2222,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2223,"byte_end":2230,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2231,"byte_end":2264,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2265,"byte_end":2293,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2294,"byte_end":2310,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2311,"byte_end":2339,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2340,"byte_end":2343,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # fn main() { let _ = run(); }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2344,"byte_end":2378,"line_start":52,"line_end":52,"column_start":1,"column_end":35}},{"value":"/ # fn run() -> io::Result<()> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2379,"byte_end":2413,"line_start":53,"line_end":53,"column_start":1,"column_end":35}},{"value":"/ let mut encoder = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2414,"byte_end":2487,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/ encoder.write_all(b\"Example\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2488,"byte_end":2523,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2524,"byte_end":2536,"line_start":56,"line_end":56,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2537,"byte_end":2544,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2545,"byte_end":2552,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2553,"byte_end":2556,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2557,"byte_end":2560,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Other various types are provided at the top-level of the crate for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2561,"byte_end":2631,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/ management and dealing with encoders/decoders. Also note that types which","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2632,"byte_end":2709,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ operate over a specific trait often implement the mirroring trait as well.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2710,"byte_end":2788,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ For example a `flate2::read::DeflateDecoder<T>` *also* implements the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2789,"byte_end":2862,"line_start":64,"line_end":64,"column_start":1,"column_end":74}},{"value":"/ `Write` trait if `T: Write`. That is, the \"dual trait\" is forwarded directly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2863,"byte_end":2943,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/ to the underlying object if available.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2944,"byte_end":2986,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2987,"byte_end":2990,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`read`]: read/index.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":2991,"byte_end":3020,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/ [`bufread`]: bufread/index.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3021,"byte_end":3056,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"/ [`write`]: write/index.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3057,"byte_end":3088,"line_start":70,"line_end":70,"column_start":1,"column_end":32}},{"value":"/ [read]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3089,"byte_end":3149,"line_start":71,"line_end":71,"column_start":1,"column_end":61}},{"value":"/ [write]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3150,"byte_end":3212,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"/ [bufread]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3213,"byte_end":3279,"line_start":73,"line_end":73,"column_start":1,"column_end":67}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3334,"byte_end":3356,"line_start":75,"line_end":75,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3357,"byte_end":3396,"line_start":76,"line_end":76,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3397,"byte_end":3429,"line_start":77,"line_end":77,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10466,"byte_end":10469,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[{"value":"/ The CRC calculated by a [`CrcReader`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10350,"byte_end":10392,"line_start":8,"line_end":8,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10393,"byte_end":10396,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`CrcReader`]: struct.CrcReader.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10397,"byte_end":10437,"line_start":10,"line_end":10,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10661,"byte_end":10670,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Read`] that calculates the CRC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10509,"byte_end":10565,"line_start":17,"line_end":17,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10566,"byte_end":10569,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10570,"byte_end":10632,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10834,"byte_end":10837,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"pub fn new() -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[{"value":"/ Create a new CRC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10801,"byte_end":10822,"line_start":33,"line_end":33,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10990,"byte_end":10993,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"pub fn sum(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current crc32 checksum.\n","sig":null,"attributes":[{"value":"/ Returns the current crc32 checksum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10939,"byte_end":10978,"line_start":41,"line_end":41,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11217,"byte_end":11223,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"pub fn amount(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[{"value":"/ The number of bytes that have been used to calculate the CRC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11060,"byte_end":11125,"line_start":46,"line_end":46,"column_start":5,"column_end":70}},{"value":"/ This value is only accurate if the amount is lower than 2<sup>32</sup>.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11130,"byte_end":11205,"line_start":47,"line_end":47,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11324,"byte_end":11330,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"pub fn update(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[{"value":"/ Update the CRC with the bytes in `data`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11268,"byte_end":11312,"line_start":52,"line_end":52,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11493,"byte_end":11498,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[{"value":"/ Reset the CRC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11463,"byte_end":11481,"line_start":58,"line_end":58,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11653,"byte_end":11660,"line_start":65,"line_end":65,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"pub fn combine(&mut Self, &Crc)","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[{"value":"/ Combine the CRC with the CRC for the subsequent block of bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11574,"byte_end":11641,"line_start":64,"line_end":64,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11870,"byte_end":11873,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"pub fn new(R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[{"value":"/ Create a new CrcReader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11831,"byte_end":11858,"line_start":72,"line_end":72,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12062,"byte_end":12065,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"pub fn crc(&Self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcReader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12015,"byte_end":12050,"line_start":82,"line_end":82,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12177,"byte_end":12187,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12112,"byte_end":12165,"line_start":87,"line_end":87,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12309,"byte_end":12316,"line_start":93,"line_end":93,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader by reference.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12231,"byte_end":12297,"line_start":92,"line_end":92,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12451,"byte_end":12458,"line_start":98,"line_end":98,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the reader that is wrapped by this CrcReader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12363,"byte_end":12439,"line_start":97,"line_end":97,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12565,"byte_end":12570,"line_start":103,"line_end":103,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcReader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12517,"byte_end":12553,"line_start":102,"line_end":102,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13296,"byte_end":13305,"line_start":132,"line_end":132,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Write`] that calculates the CRC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13141,"byte_end":13198,"line_start":128,"line_end":128,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13199,"byte_end":13202,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13203,"byte_end":13267,"line_start":130,"line_end":130,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13416,"byte_end":13419,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"pub fn crc(&Self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcWriter.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13369,"byte_end":13404,"line_start":138,"line_end":138,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13531,"byte_end":13541,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get the writer that is wrapped by this CrcWriter.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13466,"byte_end":13519,"line_start":143,"line_end":143,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13663,"byte_end":13670,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[{"value":"/ Get the writer that is wrapped by this CrcWriter by reference.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13585,"byte_end":13651,"line_start":148,"line_end":148,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13805,"byte_end":13812,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the writer that is wrapped by this CrcWriter.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13717,"byte_end":13793,"line_start":153,"line_end":153,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13919,"byte_end":13924,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcWriter.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13871,"byte_end":13907,"line_start":158,"line_end":158,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":14046,"byte_end":14049,"line_start":166,"line_end":166,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"pub fn new(W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[{"value":"/ Create a new CrcWriter.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":14007,"byte_end":14034,"line_start":165,"line_end":165,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21719,"byte_end":21733,"line_start":40,"line_end":40,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":1121},{"krate":0,"index":1122}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":20751,"byte_end":20788,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":20789,"byte_end":20792,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading uncompressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":20793,"byte_end":20871,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ from the underlying reader, and emitting compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":20872,"byte_end":20933,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":20934,"byte_end":20937,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":20938,"byte_end":21006,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21007,"byte_end":21010,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21011,"byte_end":21025,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21026,"byte_end":21029,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21030,"byte_end":21037,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21038,"byte_end":21066,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21067,"byte_end":21083,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21084,"byte_end":21112,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::DeflateEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21113,"byte_end":21153,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/ use std::fs::File;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21154,"byte_end":21176,"line_start":22,"line_end":22,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21177,"byte_end":21204,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21205,"byte_end":21208,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21209,"byte_end":21226,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", open_hello_world().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21227,"byte_end":21282,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21283,"byte_end":21290,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21291,"byte_end":21296,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21297,"byte_end":21367,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21368,"byte_end":21418,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/    let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21419,"byte_end":21474,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/    let b = BufReader::new(f);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21475,"byte_end":21508,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/    let mut deflater = DeflateEncoder::new(b, Compression::fast());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21509,"byte_end":21579,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/    let mut buffer = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21580,"byte_end":21615,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/    deflater.read_to_end(&mut buffer)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21616,"byte_end":21658,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/    Ok(buffer)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21659,"byte_end":21676,"line_start":36,"line_end":36,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21677,"byte_end":21682,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21683,"byte_end":21690,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21948,"byte_end":21951,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21815,"byte_end":21889,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21894,"byte_end":21936,"line_start":47,"line_end":47,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22617,"byte_end":22622,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22238,"byte_end":22307,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22312,"byte_end":22335,"line_start":62,"line_end":62,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22340,"byte_end":22343,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22348,"byte_end":22423,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22428,"byte_end":22500,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22505,"byte_end":22574,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22579,"byte_end":22605,"line_start":67,"line_end":67,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22792,"byte_end":22799,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22731,"byte_end":22780,"line_start":73,"line_end":73,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23044,"byte_end":23051,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22844,"byte_end":22901,"line_start":78,"line_end":78,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22906,"byte_end":22909,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22914,"byte_end":22986,"line_start":80,"line_end":80,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22991,"byte_end":23032,"line_start":81,"line_end":81,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23179,"byte_end":23189,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23108,"byte_end":23167,"line_start":86,"line_end":86,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23460,"byte_end":23468,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23231,"byte_end":23304,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23309,"byte_end":23312,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23317,"byte_end":23393,"line_start":93,"line_end":93,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23398,"byte_end":23448,"line_start":94,"line_end":94,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23702,"byte_end":23711,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23525,"byte_end":23590,"line_start":99,"line_end":99,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23595,"byte_end":23598,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23603,"byte_end":23672,"line_start":101,"line_end":101,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23677,"byte_end":23690,"line_start":102,"line_end":102,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1126},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25246,"byte_end":25260,"line_start":156,"line_end":156,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24177,"byte_end":24216,"line_start":124,"line_end":124,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24217,"byte_end":24220,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading compressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24221,"byte_end":24297,"line_start":126,"line_end":126,"column_start":1,"column_end":77}},{"value":"/ from the underlying reader, and emitting uncompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24298,"byte_end":24361,"line_start":127,"line_end":127,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24362,"byte_end":24365,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24366,"byte_end":24434,"line_start":129,"line_end":129,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24435,"byte_end":24438,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24439,"byte_end":24453,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24454,"byte_end":24457,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24458,"byte_end":24465,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24466,"byte_end":24494,"line_start":134,"line_end":134,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24495,"byte_end":24511,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24512,"byte_end":24542,"line_start":136,"line_end":136,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24543,"byte_end":24583,"line_start":137,"line_end":137,"column_start":1,"column_end":41}},{"value":"/ use flate2::bufread::DeflateDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24584,"byte_end":24624,"line_start":138,"line_end":138,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24625,"byte_end":24628,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24629,"byte_end":24646,"line_start":140,"line_end":140,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24647,"byte_end":24724,"line_start":141,"line_end":141,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24725,"byte_end":24771,"line_start":142,"line_end":142,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24772,"byte_end":24813,"line_start":143,"line_end":143,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24814,"byte_end":24869,"line_start":144,"line_end":144,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24870,"byte_end":24877,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24878,"byte_end":24961,"line_start":146,"line_end":146,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24962,"byte_end":24995,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":24996,"byte_end":25056,"line_start":148,"line_end":148,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25057,"byte_end":25115,"line_start":149,"line_end":149,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25116,"byte_end":25149,"line_start":150,"line_end":150,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25150,"byte_end":25190,"line_start":151,"line_end":151,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25191,"byte_end":25203,"line_start":152,"line_end":152,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25204,"byte_end":25209,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25210,"byte_end":25217,"line_start":154,"line_end":154,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25548,"byte_end":25551,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"pub fn new(R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25448,"byte_end":25520,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25525,"byte_end":25536,"line_start":167,"line_end":167,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26091,"byte_end":26096,"line_start":184,"line_end":184,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25719,"byte_end":25788,"line_start":177,"line_end":177,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25793,"byte_end":25816,"line_start":178,"line_end":178,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25821,"byte_end":25824,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25829,"byte_end":25899,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25904,"byte_end":25972,"line_start":181,"line_end":181,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25977,"byte_end":26048,"line_start":182,"line_end":182,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26053,"byte_end":26079,"line_start":183,"line_end":183,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26383,"byte_end":26393,"line_start":193,"line_end":193,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"pub fn reset_data(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[{"value":"/ Resets the state of this decoder's data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26205,"byte_end":26248,"line_start":189,"line_end":189,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26253,"byte_end":26256,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder. It will continue","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26261,"byte_end":26333,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ reading from the same stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26338,"byte_end":26371,"line_start":192,"line_end":192,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26513,"byte_end":26520,"line_start":198,"line_end":198,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26452,"byte_end":26501,"line_start":197,"line_end":197,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26765,"byte_end":26772,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26565,"byte_end":26622,"line_start":202,"line_end":202,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26627,"byte_end":26630,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26635,"byte_end":26707,"line_start":204,"line_end":204,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26712,"byte_end":26753,"line_start":205,"line_end":205,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26900,"byte_end":26910,"line_start":211,"line_end":211,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26829,"byte_end":26888,"line_start":210,"line_end":210,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27179,"byte_end":27187,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":26952,"byte_end":27019,"line_start":215,"line_end":215,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27024,"byte_end":27027,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27032,"byte_end":27100,"line_start":217,"line_end":217,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27105,"byte_end":27167,"line_start":218,"line_end":218,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27323,"byte_end":27332,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27244,"byte_end":27311,"line_start":223,"line_end":223,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28820,"byte_end":28834,"line_start":36,"line_end":36,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":1135}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":27893,"byte_end":27930,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":27931,"byte_end":27934,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":27935,"byte_end":28012,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28013,"byte_end":28085,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28086,"byte_end":28089,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28090,"byte_end":28152,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28153,"byte_end":28156,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28157,"byte_end":28171,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28172,"byte_end":28175,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28176,"byte_end":28183,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28184,"byte_end":28212,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28213,"byte_end":28229,"line_start":18,"line_end":18,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28230,"byte_end":28258,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::DeflateEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28259,"byte_end":28296,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28297,"byte_end":28300,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28301,"byte_end":28318,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", deflateencoder_read_hello_world().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28319,"byte_end":28389,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28390,"byte_end":28397,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28398,"byte_end":28403,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ // Return a vector containing the Deflate compressed version of hello world","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28404,"byte_end":28483,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ fn deflateencoder_read_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28484,"byte_end":28549,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/    let mut ret_vec = [0;100];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28550,"byte_end":28583,"line_start":28,"line_end":28,"column_start":1,"column_end":34}},{"value":"/    let c = b\"hello world\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28584,"byte_end":28614,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"/    let mut deflater = DeflateEncoder::new(&c[..], Compression::fast());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28615,"byte_end":28690,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/    let count = deflater.read(&mut ret_vec)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28691,"byte_end":28739,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"/    Ok(ret_vec[0..count].to_vec())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28740,"byte_end":28777,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28778,"byte_end":28783,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28784,"byte_end":28791,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29064,"byte_end":29067,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28931,"byte_end":29005,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29010,"byte_end":29052,"line_start":42,"line_end":42,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29804,"byte_end":29809,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29275,"byte_end":29344,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29349,"byte_end":29372,"line_start":52,"line_end":52,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29377,"byte_end":29380,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29385,"byte_end":29460,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29465,"byte_end":29537,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29542,"byte_end":29611,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29616,"byte_end":29642,"line_start":57,"line_end":57,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29647,"byte_end":29650,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29655,"byte_end":29727,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29732,"byte_end":29792,"line_start":60,"line_end":60,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30005,"byte_end":30012,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29944,"byte_end":29993,"line_start":66,"line_end":66,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30278,"byte_end":30285,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30078,"byte_end":30135,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30140,"byte_end":30143,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30148,"byte_end":30220,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30225,"byte_end":30266,"line_start":74,"line_end":74,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30626,"byte_end":30636,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30359,"byte_end":30418,"line_start":79,"line_end":79,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30423,"byte_end":30426,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30431,"byte_end":30506,"line_start":81,"line_end":81,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30511,"byte_end":30584,"line_start":82,"line_end":82,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30589,"byte_end":30614,"line_start":83,"line_end":83,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30935,"byte_end":30943,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30706,"byte_end":30779,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30784,"byte_end":30787,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30792,"byte_end":30868,"line_start":90,"line_end":90,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":30873,"byte_end":30923,"line_start":91,"line_end":91,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31178,"byte_end":31187,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31001,"byte_end":31066,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31071,"byte_end":31074,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31079,"byte_end":31148,"line_start":98,"line_end":98,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31153,"byte_end":31166,"line_start":99,"line_end":99,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32693,"byte_end":32707,"line_start":153,"line_end":153,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":1141}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31623,"byte_end":31662,"line_start":121,"line_end":121,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31663,"byte_end":31666,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31667,"byte_end":31739,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31740,"byte_end":31817,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31818,"byte_end":31821,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31822,"byte_end":31884,"line_start":126,"line_end":126,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31885,"byte_end":31888,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31889,"byte_end":31903,"line_start":128,"line_end":128,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31904,"byte_end":31907,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31908,"byte_end":31915,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31916,"byte_end":31944,"line_start":131,"line_end":131,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31945,"byte_end":31961,"line_start":132,"line_end":132,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31962,"byte_end":31992,"line_start":133,"line_end":133,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31993,"byte_end":32033,"line_start":134,"line_end":134,"column_start":1,"column_end":41}},{"value":"/ use flate2::read::DeflateDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32034,"byte_end":32071,"line_start":135,"line_end":135,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32072,"byte_end":32075,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32076,"byte_end":32093,"line_start":137,"line_end":137,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32094,"byte_end":32171,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32172,"byte_end":32218,"line_start":139,"line_end":139,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32219,"byte_end":32260,"line_start":140,"line_end":140,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32261,"byte_end":32316,"line_start":141,"line_end":141,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32317,"byte_end":32324,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32325,"byte_end":32408,"line_start":143,"line_end":143,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32409,"byte_end":32442,"line_start":144,"line_end":144,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32443,"byte_end":32503,"line_start":145,"line_end":145,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32504,"byte_end":32562,"line_start":146,"line_end":146,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32563,"byte_end":32596,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32597,"byte_end":32637,"line_start":148,"line_end":148,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32638,"byte_end":32650,"line_start":149,"line_end":149,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32651,"byte_end":32656,"line_start":150,"line_end":150,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32657,"byte_end":32664,"line_start":151,"line_end":151,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32904,"byte_end":32907,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"pub fn new(R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32804,"byte_end":32876,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32881,"byte_end":32892,"line_start":159,"line_end":159,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33225,"byte_end":33237,"line_start":168,"line_end":168,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"pub fn new_with_buf(R, Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33008,"byte_end":33077,"line_start":164,"line_end":164,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33082,"byte_end":33085,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of the intermediate buffer is never increased,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33090,"byte_end":33163,"line_start":166,"line_end":166,"column_start":5,"column_end":78}},{"value":"/ and it is recommended for it to be large.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33168,"byte_end":33213,"line_start":167,"line_end":167,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33957,"byte_end":33962,"line_start":186,"line_end":186,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33435,"byte_end":33504,"line_start":176,"line_end":176,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33509,"byte_end":33532,"line_start":177,"line_end":177,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33537,"byte_end":33540,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33545,"byte_end":33615,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33620,"byte_end":33688,"line_start":180,"line_end":180,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33693,"byte_end":33764,"line_start":181,"line_end":181,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33769,"byte_end":33795,"line_start":182,"line_end":182,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33800,"byte_end":33803,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33808,"byte_end":33880,"line_start":184,"line_end":184,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33885,"byte_end":33945,"line_start":185,"line_end":185,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34158,"byte_end":34165,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34097,"byte_end":34146,"line_start":191,"line_end":191,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34431,"byte_end":34438,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34231,"byte_end":34288,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34293,"byte_end":34296,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34301,"byte_end":34373,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34378,"byte_end":34419,"line_start":199,"line_end":199,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34779,"byte_end":34789,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34512,"byte_end":34571,"line_start":204,"line_end":204,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34576,"byte_end":34579,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34584,"byte_end":34659,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34664,"byte_end":34737,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34742,"byte_end":34767,"line_start":208,"line_end":208,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35086,"byte_end":35094,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34859,"byte_end":34926,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34931,"byte_end":34934,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":34939,"byte_end":35007,"line_start":215,"line_end":215,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35012,"byte_end":35074,"line_start":216,"line_end":216,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35231,"byte_end":35240,"line_start":222,"line_end":222,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35152,"byte_end":35219,"line_start":221,"line_end":221,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36463,"byte_end":36477,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":1147}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":35769,"byte_end":35806,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":35807,"byte_end":35810,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":35811,"byte_end":35884,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":35885,"byte_end":35958,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":35959,"byte_end":35962,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":35963,"byte_end":36027,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36028,"byte_end":36031,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36032,"byte_end":36046,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36047,"byte_end":36050,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36051,"byte_end":36058,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36059,"byte_end":36087,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36088,"byte_end":36116,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::DeflateEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36117,"byte_end":36155,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36156,"byte_end":36159,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36160,"byte_end":36238,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36239,"byte_end":36256,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36257,"byte_end":36260,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36261,"byte_end":36333,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36334,"byte_end":36375,"line_start":25,"line_end":25,"column_start":1,"column_end":42}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36376,"byte_end":36418,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36419,"byte_end":36426,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36427,"byte_end":36434,"line_start":28,"line_end":28,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36807,"byte_end":36810,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"pub fn new(W, crate::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36569,"byte_end":36641,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36646,"byte_end":36687,"line_start":36,"line_end":36,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36692,"byte_end":36695,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36700,"byte_end":36775,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36780,"byte_end":36795,"line_start":39,"line_end":39,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37044,"byte_end":37051,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36982,"byte_end":37032,"line_start":46,"line_end":46,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37328,"byte_end":37335,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37107,"byte_end":37165,"line_start":51,"line_end":51,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37170,"byte_end":37173,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37178,"byte_end":37254,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37259,"byte_end":37316,"line_start":54,"line_end":54,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38213,"byte_end":38218,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37399,"byte_end":37469,"line_start":59,"line_end":59,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37474,"byte_end":37497,"line_start":60,"line_end":60,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37502,"byte_end":37505,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37510,"byte_end":37584,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams. If the stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37589,"byte_end":37664,"line_start":63,"line_end":63,"column_start":5,"column_end":80}},{"value":"/ cannot be finished an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37669,"byte_end":37713,"line_start":64,"line_end":64,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37718,"byte_end":37721,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37726,"byte_end":37802,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37807,"byte_end":37875,"line_start":67,"line_end":67,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37880,"byte_end":37954,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":37959,"byte_end":38028,"line_start":69,"line_end":69,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38033,"byte_end":38036,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38041,"byte_end":38053,"line_start":71,"line_end":71,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38058,"byte_end":38061,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38066,"byte_end":38137,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38142,"byte_end":38201,"line_start":74,"line_end":74,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38978,"byte_end":38988,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38363,"byte_end":38438,"line_start":81,"line_end":81,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38443,"byte_end":38446,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38451,"byte_end":38524,"line_start":83,"line_end":83,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38529,"byte_end":38605,"line_start":84,"line_end":84,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38610,"byte_end":38653,"line_start":85,"line_end":85,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38658,"byte_end":38661,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38666,"byte_end":38678,"line_start":87,"line_end":87,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38683,"byte_end":38686,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38691,"byte_end":38765,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38770,"byte_end":38793,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38798,"byte_end":38801,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38806,"byte_end":38818,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38823,"byte_end":38826,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38831,"byte_end":38902,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":38907,"byte_end":38966,"line_start":95,"line_end":95,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39823,"byte_end":39829,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39059,"byte_end":39113,"line_start":100,"line_end":100,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39118,"byte_end":39121,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39126,"byte_end":39198,"line_start":102,"line_end":102,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39203,"byte_end":39262,"line_start":103,"line_end":103,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39267,"byte_end":39270,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39275,"byte_end":39351,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39356,"byte_end":39431,"line_start":106,"line_end":106,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39436,"byte_end":39506,"line_start":107,"line_end":107,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39511,"byte_end":39584,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39589,"byte_end":39638,"line_start":109,"line_end":109,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39643,"byte_end":39646,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39651,"byte_end":39663,"line_start":111,"line_end":111,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39668,"byte_end":39671,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39676,"byte_end":39747,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39752,"byte_end":39811,"line_start":114,"line_end":114,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40514,"byte_end":40526,"line_start":132,"line_end":132,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"pub fn flush_finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39936,"byte_end":39990,"line_start":120,"line_end":120,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":39995,"byte_end":39998,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40003,"byte_end":40079,"line_start":122,"line_end":122,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40084,"byte_end":40118,"line_start":123,"line_end":123,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40123,"byte_end":40187,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40192,"byte_end":40262,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40267,"byte_end":40329,"line_start":126,"line_end":126,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40334,"byte_end":40337,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40342,"byte_end":40354,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40359,"byte_end":40362,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40367,"byte_end":40438,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40443,"byte_end":40502,"line_start":131,"line_end":131,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40853,"byte_end":40861,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40632,"byte_end":40706,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40711,"byte_end":40714,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40719,"byte_end":40791,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40796,"byte_end":40841,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41104,"byte_end":41113,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40924,"byte_end":40989,"line_start":145,"line_end":145,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":40994,"byte_end":40997,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41002,"byte_end":41074,"line_start":147,"line_end":147,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41079,"byte_end":41092,"line_start":148,"line_end":148,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1151},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42739,"byte_end":42753,"line_start":204,"line_end":204,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":1153}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41557,"byte_end":41596,"line_start":170,"line_end":170,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41597,"byte_end":41600,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41601,"byte_end":41681,"line_start":172,"line_end":172,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41682,"byte_end":41728,"line_start":173,"line_end":173,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41729,"byte_end":41732,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41733,"byte_end":41796,"line_start":175,"line_end":175,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41797,"byte_end":41800,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41801,"byte_end":41815,"line_start":177,"line_end":177,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41816,"byte_end":41819,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41820,"byte_end":41827,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41828,"byte_end":41856,"line_start":180,"line_end":180,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41857,"byte_end":41873,"line_start":181,"line_end":181,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41874,"byte_end":41904,"line_start":182,"line_end":182,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41905,"byte_end":41945,"line_start":183,"line_end":183,"column_start":1,"column_end":41}},{"value":"/ use flate2::write::DeflateDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41946,"byte_end":41984,"line_start":184,"line_end":184,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41985,"byte_end":41988,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41989,"byte_end":42006,"line_start":186,"line_end":186,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42007,"byte_end":42084,"line_start":187,"line_end":187,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42085,"byte_end":42131,"line_start":188,"line_end":188,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42132,"byte_end":42173,"line_start":189,"line_end":189,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_writer(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42174,"byte_end":42229,"line_start":190,"line_end":190,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42230,"byte_end":42237,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42238,"byte_end":42321,"line_start":192,"line_end":192,"column_start":1,"column_end":84}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42322,"byte_end":42358,"line_start":193,"line_end":193,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42359,"byte_end":42419,"line_start":194,"line_end":194,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42420,"byte_end":42455,"line_start":195,"line_end":195,"column_start":1,"column_end":36}},{"value":"/    let mut deflater = DeflateDecoder::new(writer);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42456,"byte_end":42510,"line_start":196,"line_end":196,"column_start":1,"column_end":55}},{"value":"/    deflater.write_all(&bytes[..])?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42511,"byte_end":42550,"line_start":197,"line_end":197,"column_start":1,"column_end":40}},{"value":"/    writer = deflater.finish()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42551,"byte_end":42586,"line_start":198,"line_end":198,"column_start":1,"column_end":36}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42587,"byte_end":42671,"line_start":199,"line_end":199,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42672,"byte_end":42696,"line_start":200,"line_end":200,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42697,"byte_end":42702,"line_start":201,"line_end":201,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42703,"byte_end":42710,"line_start":202,"line_end":202,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43042,"byte_end":43045,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"pub fn new(W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42847,"byte_end":42922,"line_start":209,"line_end":209,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42927,"byte_end":42930,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42935,"byte_end":43010,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43015,"byte_end":43030,"line_start":212,"line_end":212,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43247,"byte_end":43254,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43185,"byte_end":43235,"line_start":219,"line_end":219,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43531,"byte_end":43538,"line_start":228,"line_end":228,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43310,"byte_end":43368,"line_start":224,"line_end":224,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43373,"byte_end":43376,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43381,"byte_end":43457,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43462,"byte_end":43519,"line_start":227,"line_end":227,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44319,"byte_end":44324,"line_start":247,"line_end":247,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43602,"byte_end":43672,"line_start":232,"line_end":232,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43677,"byte_end":43700,"line_start":233,"line_end":233,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43705,"byte_end":43708,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43713,"byte_end":43787,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43792,"byte_end":43853,"line_start":236,"line_end":236,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43858,"byte_end":43861,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This will then reset the internal state of this decoder and replace the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43866,"byte_end":43941,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":43946,"byte_end":44016,"line_start":239,"line_end":239,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44021,"byte_end":44094,"line_start":240,"line_end":240,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44099,"byte_end":44125,"line_start":241,"line_end":241,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44130,"byte_end":44133,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44138,"byte_end":44150,"line_start":243,"line_end":243,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44155,"byte_end":44158,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, and if that I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44163,"byte_end":44235,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ returns an error then that will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44240,"byte_end":44307,"line_start":246,"line_end":246,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45065,"byte_end":45075,"line_start":268,"line_end":268,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44486,"byte_end":44561,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44566,"byte_end":44569,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44574,"byte_end":44647,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44652,"byte_end":44728,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44733,"byte_end":44776,"line_start":257,"line_end":257,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44781,"byte_end":44784,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44789,"byte_end":44801,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44806,"byte_end":44809,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44814,"byte_end":44888,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44893,"byte_end":44916,"line_start":262,"line_end":262,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44921,"byte_end":44924,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44929,"byte_end":44941,"line_start":264,"line_end":264,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44946,"byte_end":44949,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":44954,"byte_end":45024,"line_start":266,"line_end":266,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45029,"byte_end":45053,"line_start":267,"line_end":267,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45889,"byte_end":45895,"line_start":287,"line_end":287,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45146,"byte_end":45200,"line_start":272,"line_end":272,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45205,"byte_end":45208,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45213,"byte_end":45289,"line_start":274,"line_end":274,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45294,"byte_end":45328,"line_start":275,"line_end":275,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45333,"byte_end":45336,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45341,"byte_end":45417,"line_start":277,"line_end":277,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45422,"byte_end":45497,"line_start":278,"line_end":278,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45502,"byte_end":45572,"line_start":279,"line_end":279,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45577,"byte_end":45650,"line_start":280,"line_end":280,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45655,"byte_end":45704,"line_start":281,"line_end":281,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45709,"byte_end":45712,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45717,"byte_end":45729,"line_start":283,"line_end":283,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45734,"byte_end":45737,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45742,"byte_end":45813,"line_start":285,"line_end":285,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":45818,"byte_end":45877,"line_start":286,"line_end":286,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46257,"byte_end":46265,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46002,"byte_end":46072,"line_start":292,"line_end":292,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46077,"byte_end":46095,"line_start":293,"line_end":293,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46100,"byte_end":46103,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46108,"byte_end":46174,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46179,"byte_end":46245,"line_start":296,"line_end":296,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46435,"byte_end":46444,"line_start":303,"line_end":303,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46328,"byte_end":46400,"line_start":301,"line_end":301,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46405,"byte_end":46423,"line_start":302,"line_end":302,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70540,"byte_end":70549,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69578,"byte_end":69606,"line_start":127,"line_end":127,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69607,"byte_end":69610,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will read uncompressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69611,"byte_end":69694,"line_start":129,"line_end":129,"column_start":1,"column_end":84}},{"value":"/ from the underlying reader and expose the compressed version as a [`BufRead`]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69695,"byte_end":69776,"line_start":130,"line_end":130,"column_start":1,"column_end":82}},{"value":"/ interface.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69777,"byte_end":69791,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69792,"byte_end":69795,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69796,"byte_end":69864,"line_start":133,"line_end":133,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69865,"byte_end":69868,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69869,"byte_end":69883,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69884,"byte_end":69887,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69888,"byte_end":69895,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69896,"byte_end":69924,"line_start":138,"line_end":138,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69925,"byte_end":69941,"line_start":139,"line_end":139,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69942,"byte_end":69970,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":69971,"byte_end":70006,"line_start":141,"line_end":141,"column_start":1,"column_end":36}},{"value":"/ use std::fs::File;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70007,"byte_end":70029,"line_start":142,"line_end":142,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70030,"byte_end":70057,"line_start":143,"line_end":143,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70058,"byte_end":70061,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70062,"byte_end":70141,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/ // File wrapped in a BufReader implements BufRead","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70142,"byte_end":70195,"line_start":146,"line_end":146,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70196,"byte_end":70199,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70200,"byte_end":70250,"line_start":148,"line_end":148,"column_start":1,"column_end":51}},{"value":"/     let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70251,"byte_end":70307,"line_start":149,"line_end":149,"column_start":1,"column_end":57}},{"value":"/     let b = BufReader::new(f);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70308,"byte_end":70342,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/     let mut gz = GzEncoder::new(b, Compression::fast());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70343,"byte_end":70403,"line_start":151,"line_end":151,"column_start":1,"column_end":61}},{"value":"/     let mut buffer = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70404,"byte_end":70440,"line_start":152,"line_end":152,"column_start":1,"column_end":37}},{"value":"/     gz.read_to_end(&mut buffer)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70441,"byte_end":70478,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/     Ok(buffer)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70479,"byte_end":70497,"line_start":154,"line_end":154,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70498,"byte_end":70503,"line_start":155,"line_end":155,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70504,"byte_end":70511,"line_start":156,"line_end":156,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71309,"byte_end":71312,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"pub fn new(R, Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70968,"byte_end":71037,"line_start":176,"line_end":176,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71042,"byte_end":71045,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71050,"byte_end":71121,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71126,"byte_end":71177,"line_start":179,"line_end":179,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71182,"byte_end":71185,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71190,"byte_end":71260,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71265,"byte_end":71297,"line_start":182,"line_end":182,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72067,"byte_end":72074,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72005,"byte_end":72055,"line_start":207,"line_end":207,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72341,"byte_end":72348,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72140,"byte_end":72198,"line_start":212,"line_end":212,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72203,"byte_end":72206,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72211,"byte_end":72283,"line_start":214,"line_end":214,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72288,"byte_end":72329,"line_start":215,"line_end":215,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72491,"byte_end":72501,"line_start":221,"line_end":221,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72422,"byte_end":72479,"line_start":220,"line_end":220,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74865,"byte_end":74874,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":73835,"byte_end":73863,"line_start":273,"line_end":273,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":73864,"byte_end":73867,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading compressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":73868,"byte_end":73944,"line_start":275,"line_end":275,"column_start":1,"column_end":77}},{"value":"/ from the underlying reader, and emitting uncompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":73945,"byte_end":74008,"line_start":276,"line_end":276,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74009,"byte_end":74012,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74013,"byte_end":74081,"line_start":278,"line_end":278,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74082,"byte_end":74085,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74086,"byte_end":74100,"line_start":280,"line_end":280,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74101,"byte_end":74104,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74105,"byte_end":74112,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74113,"byte_end":74141,"line_start":283,"line_end":283,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74142,"byte_end":74158,"line_start":284,"line_end":284,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74159,"byte_end":74189,"line_start":285,"line_end":285,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74190,"byte_end":74225,"line_start":286,"line_end":286,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::GzDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74226,"byte_end":74261,"line_start":287,"line_end":287,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74262,"byte_end":74265,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74266,"byte_end":74283,"line_start":289,"line_end":289,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74284,"byte_end":74355,"line_start":290,"line_end":290,"column_start":1,"column_end":72}},{"value":"/ #   e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74356,"byte_end":74401,"line_start":291,"line_end":291,"column_start":1,"column_end":46}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74402,"byte_end":74442,"line_start":292,"line_end":292,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74443,"byte_end":74497,"line_start":293,"line_end":293,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74498,"byte_end":74505,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74506,"byte_end":74511,"line_start":295,"line_end":295,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74512,"byte_end":74590,"line_start":296,"line_end":296,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74591,"byte_end":74627,"line_start":297,"line_end":297,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74628,"byte_end":74631,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74632,"byte_end":74692,"line_start":299,"line_end":299,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74693,"byte_end":74740,"line_start":300,"line_end":300,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74741,"byte_end":74774,"line_start":301,"line_end":301,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74775,"byte_end":74809,"line_start":302,"line_end":302,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74810,"byte_end":74822,"line_start":303,"line_end":303,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74823,"byte_end":74828,"line_start":304,"line_end":304,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":74829,"byte_end":74836,"line_start":305,"line_end":305,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":78508,"byte_end":78511,"line_start":440,"line_end":440,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"pub fn new(R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":78403,"byte_end":78475,"line_start":438,"line_end":438,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":78480,"byte_end":78496,"line_start":439,"line_end":439,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79458,"byte_end":79464,"line_start":474,"line_end":474,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79379,"byte_end":79446,"line_start":473,"line_end":473,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79597,"byte_end":79604,"line_start":479,"line_end":479,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79535,"byte_end":79585,"line_start":478,"line_end":478,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79872,"byte_end":79879,"line_start":487,"line_end":487,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79671,"byte_end":79729,"line_start":483,"line_end":483,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79734,"byte_end":79737,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79742,"byte_end":79814,"line_start":485,"line_end":485,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79819,"byte_end":79860,"line_start":486,"line_end":486,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":80025,"byte_end":80035,"line_start":492,"line_end":492,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79954,"byte_end":80013,"line_start":491,"line_end":491,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86087,"byte_end":86101,"line_start":659,"line_end":659,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84549,"byte_end":84619,"line_start":618,"line_end":618,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84620,"byte_end":84623,"line_start":619,"line_end":619,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84624,"byte_end":84704,"line_start":620,"line_end":620,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84705,"byte_end":84786,"line_start":621,"line_end":621,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream. `MultiGzDecoder` will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84787,"byte_end":84858,"line_start":622,"line_end":622,"column_start":1,"column_end":72}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84859,"byte_end":84932,"line_start":623,"line_end":623,"column_start":1,"column_end":74}},{"value":"/ the first gzip member. The multistream format is commonly used in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84933,"byte_end":85002,"line_start":624,"line_end":624,"column_start":1,"column_end":70}},{"value":"/ bioinformatics, for example when using the BGZF compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85003,"byte_end":85071,"line_start":625,"line_end":625,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85072,"byte_end":85075,"line_start":626,"line_end":626,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will consume all gzip members","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85076,"byte_end":85161,"line_start":627,"line_end":627,"column_start":1,"column_end":86}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85162,"byte_end":85220,"line_start":628,"line_end":628,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85221,"byte_end":85224,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85225,"byte_end":85293,"line_start":630,"line_end":630,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85294,"byte_end":85297,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85298,"byte_end":85312,"line_start":632,"line_end":632,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85313,"byte_end":85316,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85317,"byte_end":85324,"line_start":634,"line_end":634,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85325,"byte_end":85353,"line_start":635,"line_end":635,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85354,"byte_end":85370,"line_start":636,"line_end":636,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85371,"byte_end":85401,"line_start":637,"line_end":637,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85402,"byte_end":85437,"line_start":638,"line_end":638,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::MultiGzDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85438,"byte_end":85478,"line_start":639,"line_end":639,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85479,"byte_end":85482,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85483,"byte_end":85500,"line_start":641,"line_end":641,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85501,"byte_end":85572,"line_start":642,"line_end":642,"column_start":1,"column_end":72}},{"value":"/ #   e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85573,"byte_end":85618,"line_start":643,"line_end":643,"column_start":1,"column_end":46}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85619,"byte_end":85659,"line_start":644,"line_end":644,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85660,"byte_end":85714,"line_start":645,"line_end":645,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85715,"byte_end":85722,"line_start":646,"line_end":646,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85723,"byte_end":85728,"line_start":647,"line_end":647,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85729,"byte_end":85807,"line_start":648,"line_end":648,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85808,"byte_end":85844,"line_start":649,"line_end":649,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85845,"byte_end":85848,"line_start":650,"line_end":650,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85849,"byte_end":85909,"line_start":651,"line_end":651,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85910,"byte_end":85962,"line_start":652,"line_end":652,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85963,"byte_end":85996,"line_start":653,"line_end":653,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":85997,"byte_end":86031,"line_start":654,"line_end":654,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86032,"byte_end":86044,"line_start":655,"line_end":655,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86045,"byte_end":86050,"line_start":656,"line_end":656,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86051,"byte_end":86058,"line_start":657,"line_end":657,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86349,"byte_end":86352,"line_start":665,"line_end":665,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"pub fn new(R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86162,"byte_end":86234,"line_start":662,"line_end":662,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86239,"byte_end":86317,"line_start":663,"line_end":663,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86322,"byte_end":86337,"line_start":664,"line_end":664,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86562,"byte_end":86568,"line_start":672,"line_end":672,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86477,"byte_end":86550,"line_start":671,"line_end":671,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86696,"byte_end":86703,"line_start":677,"line_end":677,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86634,"byte_end":86684,"line_start":676,"line_end":676,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86956,"byte_end":86963,"line_start":685,"line_end":685,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86755,"byte_end":86813,"line_start":681,"line_end":681,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86818,"byte_end":86821,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86826,"byte_end":86898,"line_start":683,"line_end":683,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86903,"byte_end":86944,"line_start":684,"line_end":684,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":87094,"byte_end":87104,"line_start":690,"line_end":690,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":87023,"byte_end":87082,"line_start":689,"line_end":689,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92899,"byte_end":92908,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":1230}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92071,"byte_end":92099,"line_start":9,"line_end":9,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92100,"byte_end":92103,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will read uncompressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92104,"byte_end":92184,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ from the underlying reader and expose the compressed version as a [`Read`]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92185,"byte_end":92263,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ interface.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92264,"byte_end":92278,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92279,"byte_end":92282,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92283,"byte_end":92345,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92346,"byte_end":92349,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92350,"byte_end":92364,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92365,"byte_end":92368,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92369,"byte_end":92376,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92377,"byte_end":92405,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92406,"byte_end":92422,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92423,"byte_end":92451,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92452,"byte_end":92484,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92485,"byte_end":92488,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // Return a vector containing the GZ compressed version of hello world","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92489,"byte_end":92563,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92564,"byte_end":92567,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ fn gzencode_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92568,"byte_end":92622,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/     let mut ret_vec = [0;100];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92623,"byte_end":92657,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/     let bytestring = b\"hello world\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92658,"byte_end":92698,"line_start":29,"line_end":29,"column_start":1,"column_end":41}},{"value":"/     let mut gz = GzEncoder::new(&bytestring[..], Compression::fast());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92699,"byte_end":92773,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/     let count = gz.read(&mut ret_vec)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92774,"byte_end":92817,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/     Ok(ret_vec[0..count].to_vec())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92818,"byte_end":92856,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92857,"byte_end":92862,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":92863,"byte_end":92870,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93449,"byte_end":93452,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"pub fn new(R, Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93108,"byte_end":93177,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93182,"byte_end":93185,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93190,"byte_end":93261,"line_start":47,"line_end":47,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93266,"byte_end":93317,"line_start":48,"line_end":48,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93322,"byte_end":93325,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93330,"byte_end":93400,"line_start":50,"line_end":50,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93405,"byte_end":93437,"line_start":51,"line_end":51,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93635,"byte_end":93642,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93573,"byte_end":93623,"line_start":58,"line_end":58,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93909,"byte_end":93916,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93708,"byte_end":93766,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93771,"byte_end":93774,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93779,"byte_end":93851,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93856,"byte_end":93897,"line_start":66,"line_end":66,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94059,"byte_end":94069,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93990,"byte_end":94047,"line_start":71,"line_end":71,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95534,"byte_end":95543,"line_start":128,"line_end":128,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":1236}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94508,"byte_end":94536,"line_start":93,"line_end":93,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94537,"byte_end":94540,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94541,"byte_end":94617,"line_start":95,"line_end":95,"column_start":1,"column_end":77}},{"value":"/ data from the underlying reader and emit uncompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94618,"byte_end":94681,"line_start":96,"line_end":96,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94682,"byte_end":94685,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94686,"byte_end":94748,"line_start":98,"line_end":98,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94749,"byte_end":94752,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94753,"byte_end":94767,"line_start":100,"line_end":100,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94768,"byte_end":94771,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94772,"byte_end":94779,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94780,"byte_end":94783,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94784,"byte_end":94812,"line_start":104,"line_end":104,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94813,"byte_end":94829,"line_start":105,"line_end":105,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94830,"byte_end":94860,"line_start":106,"line_end":106,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94861,"byte_end":94896,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::GzDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94897,"byte_end":94929,"line_start":108,"line_end":108,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94930,"byte_end":94933,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94934,"byte_end":94951,"line_start":110,"line_end":110,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94952,"byte_end":95024,"line_start":111,"line_end":111,"column_start":1,"column_end":73}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95025,"byte_end":95071,"line_start":112,"line_end":112,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95072,"byte_end":95113,"line_start":113,"line_end":113,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95114,"byte_end":95169,"line_start":114,"line_end":114,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95170,"byte_end":95177,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95178,"byte_end":95183,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95184,"byte_end":95262,"line_start":117,"line_end":117,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95263,"byte_end":95296,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95297,"byte_end":95300,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95301,"byte_end":95361,"line_start":120,"line_end":120,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95362,"byte_end":95409,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95410,"byte_end":95443,"line_start":122,"line_end":122,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95444,"byte_end":95478,"line_start":123,"line_end":123,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95479,"byte_end":95491,"line_start":124,"line_end":124,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95492,"byte_end":95497,"line_start":125,"line_end":125,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95498,"byte_end":95505,"line_start":126,"line_end":126,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95735,"byte_end":95738,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"pub fn new(R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95630,"byte_end":95702,"line_start":133,"line_end":133,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95707,"byte_end":95723,"line_start":134,"line_end":134,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95972,"byte_end":95978,"line_start":144,"line_end":144,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95892,"byte_end":95960,"line_start":143,"line_end":143,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96110,"byte_end":96117,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96048,"byte_end":96098,"line_start":148,"line_end":148,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96384,"byte_end":96391,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96183,"byte_end":96241,"line_start":153,"line_end":153,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96246,"byte_end":96249,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96254,"byte_end":96326,"line_start":155,"line_end":155,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96331,"byte_end":96372,"line_start":156,"line_end":156,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96536,"byte_end":96546,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96465,"byte_end":96524,"line_start":161,"line_end":161,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98513,"byte_end":98527,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":1242}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96985,"byte_end":97055,"line_start":183,"line_end":183,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97056,"byte_end":97059,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97060,"byte_end":97140,"line_start":185,"line_end":185,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97141,"byte_end":97222,"line_start":186,"line_end":186,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream.  `MultiGzDecoder` will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97223,"byte_end":97295,"line_start":187,"line_end":187,"column_start":1,"column_end":73}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97296,"byte_end":97373,"line_start":188,"line_end":188,"column_start":1,"column_end":78}},{"value":"/ first gzip member. The multistream format is commonly used in bioinformatics,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97374,"byte_end":97455,"line_start":189,"line_end":189,"column_start":1,"column_end":82}},{"value":"/ for example when using the BGZF compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97456,"byte_end":97508,"line_start":190,"line_end":190,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97509,"byte_end":97512,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume all gzip members","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97513,"byte_end":97595,"line_start":192,"line_end":192,"column_start":1,"column_end":83}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97596,"byte_end":97654,"line_start":193,"line_end":193,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97655,"byte_end":97658,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97659,"byte_end":97721,"line_start":195,"line_end":195,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97722,"byte_end":97725,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97726,"byte_end":97740,"line_start":197,"line_end":197,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97741,"byte_end":97744,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97745,"byte_end":97752,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97753,"byte_end":97781,"line_start":200,"line_end":200,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97782,"byte_end":97798,"line_start":201,"line_end":201,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97799,"byte_end":97829,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97830,"byte_end":97865,"line_start":203,"line_end":203,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::MultiGzDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97866,"byte_end":97903,"line_start":204,"line_end":204,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97904,"byte_end":97907,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97908,"byte_end":97925,"line_start":206,"line_end":206,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97926,"byte_end":97998,"line_start":207,"line_end":207,"column_start":1,"column_end":73}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":97999,"byte_end":98045,"line_start":208,"line_end":208,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98046,"byte_end":98087,"line_start":209,"line_end":209,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98088,"byte_end":98143,"line_start":210,"line_end":210,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98144,"byte_end":98151,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98152,"byte_end":98157,"line_start":212,"line_end":212,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98158,"byte_end":98236,"line_start":213,"line_end":213,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98237,"byte_end":98270,"line_start":214,"line_end":214,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98271,"byte_end":98274,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98275,"byte_end":98335,"line_start":216,"line_end":216,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98336,"byte_end":98388,"line_start":217,"line_end":217,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98389,"byte_end":98422,"line_start":218,"line_end":218,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98423,"byte_end":98457,"line_start":219,"line_end":219,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98458,"byte_end":98470,"line_start":220,"line_end":220,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98471,"byte_end":98476,"line_start":221,"line_end":221,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98477,"byte_end":98484,"line_start":222,"line_end":222,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98811,"byte_end":98814,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"pub fn new(R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98624,"byte_end":98696,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98701,"byte_end":98779,"line_start":230,"line_end":230,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98784,"byte_end":98799,"line_start":231,"line_end":231,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99074,"byte_end":99080,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98988,"byte_end":99062,"line_start":240,"line_end":240,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99212,"byte_end":99219,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99150,"byte_end":99200,"line_start":245,"line_end":245,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99486,"byte_end":99493,"line_start":254,"line_end":254,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99285,"byte_end":99343,"line_start":250,"line_end":250,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99348,"byte_end":99351,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99356,"byte_end":99428,"line_start":252,"line_end":252,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99433,"byte_end":99474,"line_start":253,"line_end":253,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99638,"byte_end":99648,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99567,"byte_end":99626,"line_start":258,"line_end":258,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100979,"byte_end":100988,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100338,"byte_end":100366,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100367,"byte_end":100370,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100371,"byte_end":100450,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100451,"byte_end":100484,"line_start":14,"line_end":14,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100485,"byte_end":100488,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100489,"byte_end":100553,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100554,"byte_end":100557,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100558,"byte_end":100572,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100573,"byte_end":100576,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100577,"byte_end":100584,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100585,"byte_end":100613,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100614,"byte_end":100642,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100643,"byte_end":100676,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100677,"byte_end":100680,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100681,"byte_end":100759,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100760,"byte_end":100777,"line_start":26,"line_end":26,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100778,"byte_end":100781,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100782,"byte_end":100849,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100850,"byte_end":100891,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100892,"byte_end":100934,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100935,"byte_end":100942,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":100943,"byte_end":100950,"line_start":32,"line_end":32,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101727,"byte_end":101730,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"pub fn new(W, Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101386,"byte_end":101455,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101460,"byte_end":101463,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101468,"byte_end":101539,"line_start":53,"line_end":53,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101544,"byte_end":101595,"line_start":54,"line_end":54,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101600,"byte_end":101603,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101608,"byte_end":101680,"line_start":56,"line_end":56,"column_start":5,"column_end":77}},{"value":"/ written to the stream `w`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101685,"byte_end":101715,"line_start":57,"line_end":57,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101889,"byte_end":101896,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101827,"byte_end":101877,"line_start":62,"line_end":62,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102153,"byte_end":102160,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101952,"byte_end":102010,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102015,"byte_end":102018,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102023,"byte_end":102095,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102100,"byte_end":102141,"line_start":70,"line_end":70,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102839,"byte_end":102849,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102224,"byte_end":102299,"line_start":75,"line_end":75,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102304,"byte_end":102307,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102312,"byte_end":102385,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102390,"byte_end":102466,"line_start":78,"line_end":78,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102471,"byte_end":102514,"line_start":79,"line_end":79,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102519,"byte_end":102522,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102527,"byte_end":102539,"line_start":81,"line_end":81,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102544,"byte_end":102547,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102552,"byte_end":102626,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102631,"byte_end":102654,"line_start":84,"line_end":84,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102659,"byte_end":102662,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102667,"byte_end":102679,"line_start":86,"line_end":86,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102684,"byte_end":102687,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102692,"byte_end":102763,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":102768,"byte_end":102827,"line_start":89,"line_end":89,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104222,"byte_end":104228,"line_start":126,"line_end":126,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[{"value":"/ Finish encoding this stream, returning the underlying writer once the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103562,"byte_end":103635,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ encoding is done.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103640,"byte_end":103661,"line_start":114,"line_end":114,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103666,"byte_end":103669,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103674,"byte_end":103750,"line_start":116,"line_end":116,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103755,"byte_end":103830,"line_start":117,"line_end":117,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103835,"byte_end":103905,"line_start":118,"line_end":118,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103910,"byte_end":103983,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":103988,"byte_end":104037,"line_start":120,"line_end":120,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104042,"byte_end":104045,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104050,"byte_end":104062,"line_start":122,"line_end":122,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104067,"byte_end":104070,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104075,"byte_end":104146,"line_start":124,"line_end":124,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104151,"byte_end":104210,"line_start":125,"line_end":125,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106406,"byte_end":106415,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105292,"byte_end":105320,"line_start":170,"line_end":170,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105321,"byte_end":105324,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105325,"byte_end":105404,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105405,"byte_end":105438,"line_start":173,"line_end":173,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105439,"byte_end":105442,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105443,"byte_end":105507,"line_start":175,"line_end":175,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105508,"byte_end":105511,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105512,"byte_end":105526,"line_start":177,"line_end":177,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105527,"byte_end":105530,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105531,"byte_end":105538,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105539,"byte_end":105567,"line_start":180,"line_end":180,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105568,"byte_end":105584,"line_start":181,"line_end":181,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105585,"byte_end":105613,"line_start":182,"line_end":182,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::{GzEncoder, GzDecoder};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105614,"byte_end":105660,"line_start":183,"line_end":183,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105661,"byte_end":105664,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105665,"byte_end":105682,"line_start":185,"line_end":185,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105683,"byte_end":105755,"line_start":186,"line_end":186,"column_start":1,"column_end":73}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105756,"byte_end":105798,"line_start":187,"line_end":187,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105799,"byte_end":105840,"line_start":188,"line_end":188,"column_start":1,"column_end":42}},{"value":"/ #    assert_eq!(\"Hello World\", decode_writer(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105841,"byte_end":105907,"line_start":189,"line_end":189,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105908,"byte_end":105915,"line_start":190,"line_end":190,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a gzip encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105916,"byte_end":105996,"line_start":191,"line_end":191,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105997,"byte_end":106033,"line_start":192,"line_end":192,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106034,"byte_end":106094,"line_start":193,"line_end":193,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106095,"byte_end":106130,"line_start":194,"line_end":194,"column_start":1,"column_end":36}},{"value":"/    let mut decoder = GzDecoder::new(writer);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106131,"byte_end":106179,"line_start":195,"line_end":195,"column_start":1,"column_end":49}},{"value":"/    decoder.write_all(&bytes[..])?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106180,"byte_end":106218,"line_start":196,"line_end":196,"column_start":1,"column_end":39}},{"value":"/    writer = decoder.finish()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106219,"byte_end":106253,"line_start":197,"line_end":197,"column_start":1,"column_end":35}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106254,"byte_end":106338,"line_start":198,"line_end":198,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106339,"byte_end":106363,"line_start":199,"line_end":199,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106364,"byte_end":106369,"line_start":200,"line_end":200,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106370,"byte_end":106377,"line_start":201,"line_end":201,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106822,"byte_end":106825,"line_start":217,"line_end":217,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"pub fn new(W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106627,"byte_end":106702,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106707,"byte_end":106710,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106715,"byte_end":106790,"line_start":215,"line_end":215,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106795,"byte_end":106810,"line_start":216,"line_end":216,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107154,"byte_end":107160,"line_start":227,"line_end":227,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107091,"byte_end":107142,"line_start":226,"line_end":226,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107293,"byte_end":107300,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107231,"byte_end":107281,"line_start":231,"line_end":231,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107587,"byte_end":107594,"line_start":240,"line_end":240,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107366,"byte_end":107424,"line_start":236,"line_end":236,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107429,"byte_end":107432,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107437,"byte_end":107513,"line_start":238,"line_end":238,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107518,"byte_end":107575,"line_start":239,"line_end":239,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108247,"byte_end":108257,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107668,"byte_end":107743,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107748,"byte_end":107751,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107756,"byte_end":107829,"line_start":246,"line_end":246,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107834,"byte_end":107910,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107915,"byte_end":107958,"line_start":248,"line_end":248,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107963,"byte_end":107966,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107971,"byte_end":107983,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107988,"byte_end":107991,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":107996,"byte_end":108070,"line_start":252,"line_end":252,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108075,"byte_end":108098,"line_start":253,"line_end":253,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108103,"byte_end":108106,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108111,"byte_end":108123,"line_start":255,"line_end":255,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108128,"byte_end":108131,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108136,"byte_end":108206,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108211,"byte_end":108235,"line_start":258,"line_end":258,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":109096,"byte_end":109102,"line_start":279,"line_end":279,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this decoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108353,"byte_end":108407,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108412,"byte_end":108415,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108420,"byte_end":108496,"line_start":266,"line_end":266,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108501,"byte_end":108535,"line_start":267,"line_end":267,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108540,"byte_end":108543,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108548,"byte_end":108624,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108629,"byte_end":108704,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108709,"byte_end":108779,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108784,"byte_end":108857,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108862,"byte_end":108911,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108916,"byte_end":108919,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108924,"byte_end":108936,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108941,"byte_end":108944,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":108949,"byte_end":109020,"line_start":277,"line_end":277,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":109025,"byte_end":109084,"line_start":278,"line_end":278,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53666,"byte_end":53674,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[{"value":"/ A structure representing the header of a gzip stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53461,"byte_end":53518,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53519,"byte_end":53522,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The header can contain metadata about the file that was compressed, if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53523,"byte_end":53597,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ present.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53598,"byte_end":53610,"line_start":20,"line_end":20,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53917,"byte_end":53925,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"pub fn filename(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `filename` field of this gzip stream's header, if present.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53831,"byte_end":53905,"line_start":31,"line_end":31,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54093,"byte_end":54098,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"pub fn extra(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `extra` field of this gzip stream's header, if present.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54010,"byte_end":54081,"line_start":36,"line_end":36,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54265,"byte_end":54272,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"pub fn comment(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `comment` field of this gzip stream's header, if present.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54180,"byte_end":54253,"line_start":41,"line_end":41,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54558,"byte_end":54574,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"pub fn operating_system(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[{"value":"/ Returns the `operating_system` field of this gzip stream's header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54356,"byte_end":54426,"line_start":46,"line_end":46,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54431,"byte_end":54434,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ There are predefined values for various operating systems.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54439,"byte_end":54501,"line_start":48,"line_end":48,"column_start":5,"column_end":67}},{"value":"/ 255 means that the value is unknown.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54506,"byte_end":54546,"line_start":49,"line_end":49,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55196,"byte_end":55201,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"pub fn mtime(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[{"value":"/ This gives the most recent modification time of the original file being compressed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54631,"byte_end":54718,"line_start":54,"line_end":54,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54723,"byte_end":54726,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The time is in Unix format, i.e., seconds since 00:00:00 GMT, Jan. 1, 1970.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54731,"byte_end":54810,"line_start":56,"line_end":56,"column_start":5,"column_end":84}},{"value":"/ (Note that this may cause problems for MS-DOS and other systems that use local","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54815,"byte_end":54897,"line_start":57,"line_end":57,"column_start":5,"column_end":87}},{"value":"/ rather than Universal time.) If the compressed data did not come from a file,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54902,"byte_end":54983,"line_start":58,"line_end":58,"column_start":5,"column_end":86}},{"value":"/ `mtime` is set to the time at which compression started.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":54988,"byte_end":55048,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ `mtime` = 0 means no time stamp is available.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55053,"byte_end":55102,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55107,"byte_end":55110,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The usage of `mtime` is discouraged because of Year 2038 problem.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55115,"byte_end":55184,"line_start":62,"line_end":62,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55596,"byte_end":55613,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"pub fn mtime_as_datetime(&Self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[{"value":"/ Returns the most recent modification time represented by a date-time type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55248,"byte_end":55326,"line_start":67,"line_end":67,"column_start":5,"column_end":83}},{"value":"/ Returns `None` if the value of the underlying counter is 0,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55331,"byte_end":55394,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"/ indicating no time stamp is available.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55399,"byte_end":55441,"line_start":69,"line_end":69,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55446,"byte_end":55449,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55454,"byte_end":55457,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The time is measured as seconds since 00:00:00 GMT, Jan. 1 1970.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55462,"byte_end":55530,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ See [`mtime`](#method.mtime) for more detail.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55535,"byte_end":55584,"line_start":73,"line_end":73,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56686,"byte_end":56695,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[{"value":"/ A builder structure to create a new gzip Encoder.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55890,"byte_end":55943,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55944,"byte_end":55947,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This structure controls header configuration options such as the filename.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":55948,"byte_end":56026,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56027,"byte_end":56030,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56031,"byte_end":56045,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56046,"byte_end":56049,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56050,"byte_end":56057,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56058,"byte_end":56086,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ # use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56087,"byte_end":56105,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/ use std::fs::File;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56106,"byte_end":56128,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/ use flate2::GzBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56129,"byte_end":56155,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56156,"byte_end":56184,"line_start":96,"line_end":96,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56185,"byte_end":56188,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // GzBuilder opens a file and writes a sample string using GzBuilder pattern","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56189,"byte_end":56269,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56270,"byte_end":56273,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ # fn sample_builder() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56274,"byte_end":56326,"line_start":100,"line_end":100,"column_start":1,"column_end":53}},{"value":"/ let f = File::create(\"examples/hello_world.gz\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56327,"byte_end":56380,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/ let mut gz = GzBuilder::new()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56381,"byte_end":56414,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/                 .filename(\"hello_world.txt\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56415,"byte_end":56463,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/                 .comment(\"test file, please delete\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56464,"byte_end":56520,"line_start":104,"line_end":104,"column_start":1,"column_end":57}},{"value":"/                 .write(f, Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56521,"byte_end":56575,"line_start":105,"line_end":105,"column_start":1,"column_end":55}},{"value":"/ gz.write_all(b\"hello world\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56576,"byte_end":56610,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ gz.finish()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56611,"byte_end":56628,"line_start":107,"line_end":107,"column_start":1,"column_end":18}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56629,"byte_end":56641,"line_start":108,"line_end":108,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56642,"byte_end":56649,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56650,"byte_end":56657,"line_start":110,"line_end":110,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57015,"byte_end":57018,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"pub fn new() -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[{"value":"/ Create a new blank builder with no header by default.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56946,"byte_end":57003,"line_start":127,"line_end":127,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57278,"byte_end":57283,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"pub fn mtime(Self, u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `mtime` field in the gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57215,"byte_end":57266,"line_start":138,"line_end":138,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57447,"byte_end":57463,"line_start":145,"line_end":145,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"pub fn operating_system(Self, u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `operating_system` field in the gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57373,"byte_end":57435,"line_start":144,"line_end":144,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57626,"byte_end":57631,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"pub fn extra<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `extra` field in the gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57563,"byte_end":57614,"line_start":150,"line_end":150,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57905,"byte_end":57913,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"pub fn filename<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `filename` field in the gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57750,"byte_end":57804,"line_start":156,"line_end":156,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57809,"byte_end":57812,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57817,"byte_end":57829,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57834,"byte_end":57837,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Panics if the `filename` slice contains a zero.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":57842,"byte_end":57893,"line_start":160,"line_end":160,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58217,"byte_end":58224,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"pub fn comment<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `comment` field in the gzip header.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58064,"byte_end":58117,"line_start":166,"line_end":166,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58122,"byte_end":58125,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58130,"byte_end":58142,"line_start":168,"line_end":168,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58147,"byte_end":58150,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Panics if the `comment` slice contains a zero.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58155,"byte_end":58205,"line_start":170,"line_end":170,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58587,"byte_end":58592,"line_start":180,"line_end":180,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"pub fn write<W: Write>(Self, W, Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a writer encoder in the process.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58372,"byte_end":58439,"line_start":176,"line_end":176,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58444,"byte_end":58447,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58452,"byte_end":58524,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ written out to the supplied parameter `w`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58529,"byte_end":58575,"line_start":179,"line_end":179,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58936,"byte_end":58940,"line_start":188,"line_end":188,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"pub fn read<R: Read>(Self, R, Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58726,"byte_end":58793,"line_start":184,"line_end":184,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58798,"byte_end":58801,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58806,"byte_end":58879,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":58884,"byte_end":58924,"line_start":187,"line_end":187,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":59289,"byte_end":59297,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"pub fn buf_read<R>(Self, R, Compression) -> bufread::GzEncoder<R> where\nR: BufRead","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":59079,"byte_end":59146,"line_start":192,"line_end":192,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":59151,"byte_end":59154,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":59159,"byte_end":59232,"line_start":194,"line_end":194,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":59237,"byte_end":59277,"line_start":195,"line_end":195,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115848,"byte_end":115856,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":1289}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory compression stream for blocks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115243,"byte_end":115299,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115300,"byte_end":115303,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115304,"byte_end":115379,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115380,"byte_end":115457,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115458,"byte_end":115534,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115535,"byte_end":115585,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115586,"byte_end":115589,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115590,"byte_end":115668,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115669,"byte_end":115687,"line_start":17,"line_end":17,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115688,"byte_end":115691,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115692,"byte_end":115754,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115755,"byte_end":115819,"line_start":20,"line_end":20,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116489,"byte_end":116499,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":1293}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory decompression stream for blocks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115882,"byte_end":115940,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115941,"byte_end":115944,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":115945,"byte_end":116020,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116021,"byte_end":116098,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116099,"byte_end":116175,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116176,"byte_end":116226,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116227,"byte_end":116230,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116231,"byte_end":116309,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116310,"byte_end":116328,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116329,"byte_end":116332,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116333,"byte_end":116395,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116396,"byte_end":116460,"line_start":37,"line_end":37,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116928,"byte_end":116932,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116694,"byte_end":116769,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116774,"byte_end":116846,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116851,"byte_end":116923,"line_start":49,"line_end":49,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1300},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117383,"byte_end":117387,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116967,"byte_end":117039,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117044,"byte_end":117117,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117122,"byte_end":117148,"line_start":54,"line_end":54,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117153,"byte_end":117156,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117161,"byte_end":117236,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117241,"byte_end":117314,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117319,"byte_end":117378,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1303},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117921,"byte_end":117928,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer, but the output is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117424,"byte_end":117497,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ not aligned to a byte boundary.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117502,"byte_end":117537,"line_start":62,"line_end":62,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117542,"byte_end":117545,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ All of the input data so far will be available to the decompressor (as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117550,"byte_end":117624,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/ with `Flush::Sync`. This completes the current deflate block and follows","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117629,"byte_end":117705,"line_start":65,"line_end":65,"column_start":5,"column_end":81}},{"value":"/ it with an empty fixed codes block that is 10 bites long, and it assures","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117710,"byte_end":117786,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ that enough bytes are output in order for the decompressor to finish the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117791,"byte_end":117867,"line_start":67,"line_end":67,"column_start":5,"column_end":81}},{"value":"/ block before the empty fixed code block.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117872,"byte_end":117916,"line_start":68,"line_end":68,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118272,"byte_end":118276,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[{"value":"/ All output is flushed as with `Flush::Sync` and the compression state is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":117968,"byte_end":118044,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ reset so decompression can restart from this point if previous","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118049,"byte_end":118115,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ compressed data has been damaged or if random access is desired.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118120,"byte_end":118188,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118193,"byte_end":118196,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Using this option too often can seriously degrade compression.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118201,"byte_end":118267,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118504,"byte_end":118510,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118313,"byte_end":118374,"line_start":78,"line_end":78,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118379,"byte_end":118382,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118387,"byte_end":118461,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118466,"byte_end":118499,"line_start":81,"line_end":81,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1312},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118562,"byte_end":118576,"line_start":85,"line_end":85,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116674,"byte_end":116687,"line_start":46,"line_end":46,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"pub enum FlushCompress {\n    None = ,\n    Sync = ,\n    Partial = ,\n    Full = ,\n    Finish = ,\n    _Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1300},{"krate":0,"index":1303},{"krate":0,"index":1306},{"krate":0,"index":1309},{"krate":0,"index":1312}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when compressing","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116570,"byte_end":116644,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ in-memory data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":116645,"byte_end":116664,"line_start":45,"line_end":45,"column_start":1,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118988,"byte_end":118992,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118754,"byte_end":118829,"line_start":92,"line_end":92,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118834,"byte_end":118906,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118911,"byte_end":118983,"line_start":94,"line_end":94,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1329},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119443,"byte_end":119447,"line_start":104,"line_end":104,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119027,"byte_end":119099,"line_start":97,"line_end":97,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119104,"byte_end":119177,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119182,"byte_end":119208,"line_start":99,"line_end":99,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119213,"byte_end":119216,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119221,"byte_end":119296,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119301,"byte_end":119374,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119379,"byte_end":119438,"line_start":103,"line_end":103,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1332},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119675,"byte_end":119681,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119484,"byte_end":119545,"line_start":106,"line_end":106,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119550,"byte_end":119553,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119558,"byte_end":119632,"line_start":108,"line_end":108,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119637,"byte_end":119670,"line_start":109,"line_end":109,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119733,"byte_end":119747,"line_start":113,"line_end":113,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118732,"byte_end":118747,"line_start":91,"line_end":91,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"pub enum FlushDecompress { None = , Sync = , Finish = , _Nonexhaustive, }","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1335}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118626,"byte_end":118688,"line_start":89,"line_end":89,"column_start":1,"column_end":63}},{"value":"/ decompressing in-memory data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":118689,"byte_end":118722,"line_start":90,"line_end":90,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120079,"byte_end":120094,"line_start":126,"line_end":126,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[{"value":"/ Error returned when a decompression object finds that the input stream of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":119924,"byte_end":120001,"line_start":123,"line_end":123,"column_start":1,"column_end":78}},{"value":"/ bytes was not a valid input stream of bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120002,"byte_end":120050,"line_start":124,"line_end":124,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120341,"byte_end":120357,"line_start":133,"line_end":133,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"pub fn needs_dictionary(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[{"value":"/ Indicates whether decompression failed due to requiring a dictionary.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120157,"byte_end":120230,"line_start":129,"line_end":129,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120235,"byte_end":120238,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The resulting integer is the Adler-32 checksum of the dictionary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120243,"byte_end":120311,"line_start":131,"line_end":131,"column_start":5,"column_end":73}},{"value":"/ required.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120316,"byte_end":120329,"line_start":132,"line_end":132,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120994,"byte_end":121007,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"CompressError {  }","parent":null,"children":[{"krate":0,"index":1362}],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[{"value":"/ Error returned when a compression object is used incorrectly or otherwise","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120864,"byte_end":120941,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/ generates an error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120942,"byte_end":120965,"line_start":154,"line_end":154,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121523,"byte_end":121525,"line_start":173,"line_end":173,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[{"value":"/ Indicates success.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121344,"byte_end":121366,"line_start":169,"line_end":169,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121371,"byte_end":121374,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Means that more input may be needed but isn't available","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121379,"byte_end":121438,"line_start":171,"line_end":171,"column_start":5,"column_end":64}},{"value":"/ and/or there's more output to be written but the output buffer is full.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121443,"byte_end":121518,"line_start":172,"line_end":172,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122004,"byte_end":122012,"line_start":184,"line_end":184,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[{"value":"/ Indicates that forward progress is not possible due to input or output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121532,"byte_end":121606,"line_start":175,"line_end":175,"column_start":5,"column_end":79}},{"value":"/ buffers being empty.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121611,"byte_end":121635,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121640,"byte_end":121643,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ For compression it means the input buffer needs some more data or the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121648,"byte_end":121721,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ output buffer needs to be freed up before trying again.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121726,"byte_end":121785,"line_start":179,"line_end":179,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121790,"byte_end":121793,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ For decompression this means that more input is needed to continue or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121798,"byte_end":121871,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/ the output buffer isn't large enough to contain the result. The function","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121876,"byte_end":121952,"line_start":182,"line_end":182,"column_start":5,"column_end":81}},{"value":"/ can be called again after fixing both.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121957,"byte_end":121999,"line_start":183,"line_end":183,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122294,"byte_end":122303,"line_start":191,"line_end":191,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[{"value":"/ Indicates that all input has been consumed and all output bytes have","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122019,"byte_end":122091,"line_start":186,"line_end":186,"column_start":5,"column_end":77}},{"value":"/ been written. Decompression/compression should not be called again.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122096,"byte_end":122167,"line_start":187,"line_end":187,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122172,"byte_end":122175,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ For decompression with zlib streams the adler-32 of the decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122180,"byte_end":122252,"line_start":189,"line_end":189,"column_start":5,"column_end":77}},{"value":"/ data has also been verified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122257,"byte_end":122289,"line_start":190,"line_end":190,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121331,"byte_end":121337,"line_start":168,"line_end":168,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"pub enum Status { Ok, BufError, StreamEnd, }","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"/ Possible status results of compressing some data or successfully","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121173,"byte_end":121241,"line_start":165,"line_end":165,"column_start":1,"column_end":69}},{"value":"/ decompressing a block of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":121242,"byte_end":121276,"line_start":166,"line_end":166,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122627,"byte_end":122630,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"pub fn new(Compression, bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for compressing data that it's given.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122328,"byte_end":122396,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122401,"byte_end":122404,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here indicates what level of compression is going","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122409,"byte_end":122483,"line_start":197,"line_end":197,"column_start":5,"column_end":79}},{"value":"/ to be performed, and the `zlib_header` argument indicates whether the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122488,"byte_end":122561,"line_start":198,"line_end":198,"column_start":5,"column_end":78}},{"value":"/ output data should have a zlib header or not.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122566,"byte_end":122615,"line_start":199,"line_end":199,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":125023,"byte_end":125031,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":124906,"byte_end":124978,"line_start":266,"line_end":266,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":124983,"byte_end":125011,"line_start":267,"line_end":267,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":125206,"byte_end":125215,"line_start":274,"line_end":274,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":125089,"byte_end":125161,"line_start":272,"line_end":272,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":125166,"byte_end":125194,"line_start":273,"line_end":273,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":126209,"byte_end":126214,"line_start":300,"line_end":300,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[{"value":"/ Quickly resets this compressor without having to reallocate anything.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":126036,"byte_end":126109,"line_start":297,"line_end":297,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":126114,"byte_end":126117,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to dropping this object and then creating a new one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":126122,"byte_end":126197,"line_start":299,"line_end":299,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127767,"byte_end":127775,"line_start":336,"line_end":336,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"pub fn compress(&mut Self, &[u8], &mut [u8], FlushCompress)\n-> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the output, consuming only as much","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127366,"byte_end":127435,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127440,"byte_end":127499,"line_start":330,"line_end":330,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127504,"byte_end":127507,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushCompress` parameters.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127512,"byte_end":127588,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127593,"byte_end":127596,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127601,"byte_end":127677,"line_start":334,"line_end":334,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127682,"byte_end":127755,"line_start":335,"line_end":335,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128476,"byte_end":128488,"line_start":353,"line_end":353,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"pub fn compress_vec(&mut Self, &[u8], &mut Vec<u8>, FlushCompress)\n-> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the extra space of the output, consuming","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":127977,"byte_end":128052,"line_start":345,"line_end":345,"column_start":5,"column_end":80}},{"value":"/ only as much input as needed and writing as much output as possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128057,"byte_end":128129,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128134,"byte_end":128137,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `compress`, except that the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128142,"byte_end":128213,"line_start":348,"line_end":348,"column_start":5,"column_end":76}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128218,"byte_end":128291,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128296,"byte_end":128371,"line_start":350,"line_end":350,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128376,"byte_end":128446,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":128451,"byte_end":128464,"line_start":352,"line_end":352,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129324,"byte_end":129327,"line_start":380,"line_end":380,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"pub fn new(bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for decompressing data that it's given.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129116,"byte_end":129186,"line_start":376,"line_end":376,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129191,"byte_end":129194,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The `zlib_header` argument indicates whether the input data is expected","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129199,"byte_end":129274,"line_start":378,"line_end":378,"column_start":5,"column_end":80}},{"value":"/ to have a zlib header or not.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129279,"byte_end":129312,"line_start":379,"line_end":379,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131417,"byte_end":131425,"line_start":439,"line_end":439,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131298,"byte_end":131370,"line_start":437,"line_end":437,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131375,"byte_end":131405,"line_start":438,"line_end":438,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131602,"byte_end":131611,"line_start":445,"line_end":445,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131483,"byte_end":131555,"line_start":443,"line_end":443,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131560,"byte_end":131590,"line_start":444,"line_end":444,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132810,"byte_end":132820,"line_start":471,"line_end":471,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"pub fn decompress(&mut Self, &[u8], &mut [u8], FlushDecompress)\n-> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the output, consuming only as much","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131670,"byte_end":131741,"line_start":449,"line_end":449,"column_start":5,"column_end":76}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131746,"byte_end":131805,"line_start":450,"line_end":450,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131810,"byte_end":131813,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushDecompress` parameters.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131818,"byte_end":131896,"line_start":452,"line_end":452,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131901,"byte_end":131904,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ If the first call passes `FlushDecompress::Finish` it is assumed that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131909,"byte_end":131982,"line_start":454,"line_end":454,"column_start":5,"column_end":78}},{"value":"/ the input and output buffers are both sized large enough to decompress","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":131987,"byte_end":132061,"line_start":455,"line_end":455,"column_start":5,"column_end":79}},{"value":"/ the entire stream in a single call.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132066,"byte_end":132105,"line_start":456,"line_end":456,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132110,"byte_end":132113,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ A flush value of `FlushDecompress::Finish` indicates that there are no","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132118,"byte_end":132192,"line_start":458,"line_end":458,"column_start":5,"column_end":79}},{"value":"/ more source bytes available beside what's already in the input buffer,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132197,"byte_end":132271,"line_start":459,"line_end":459,"column_start":5,"column_end":79}},{"value":"/ and the output buffer is large enough to hold the rest of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132276,"byte_end":132341,"line_start":460,"line_end":460,"column_start":5,"column_end":70}},{"value":"/ decompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132346,"byte_end":132368,"line_start":461,"line_end":461,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132373,"byte_end":132376,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132381,"byte_end":132457,"line_start":463,"line_end":463,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132462,"byte_end":132535,"line_start":464,"line_end":464,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132540,"byte_end":132543,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132548,"byte_end":132560,"line_start":466,"line_end":466,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132565,"byte_end":132568,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132573,"byte_end":132642,"line_start":468,"line_end":468,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132647,"byte_end":132715,"line_start":469,"line_end":469,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":132720,"byte_end":132798,"line_start":470,"line_end":470,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133744,"byte_end":133758,"line_start":494,"line_end":494,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"pub fn decompress_vec(&mut Self, &[u8], &mut Vec<u8>, FlushDecompress)\n-> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the extra space in the output vector","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133028,"byte_end":133101,"line_start":480,"line_end":480,"column_start":5,"column_end":78}},{"value":"/ specified by `output`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133106,"byte_end":133132,"line_start":481,"line_end":481,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133137,"byte_end":133140,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `decompress`, except that the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133145,"byte_end":133218,"line_start":483,"line_end":483,"column_start":5,"column_end":78}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133223,"byte_end":133296,"line_start":484,"line_end":484,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133301,"byte_end":133376,"line_start":485,"line_end":485,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133381,"byte_end":133451,"line_start":486,"line_end":486,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133456,"byte_end":133469,"line_start":487,"line_end":487,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133474,"byte_end":133477,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133482,"byte_end":133494,"line_start":489,"line_end":489,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133499,"byte_end":133502,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133507,"byte_end":133576,"line_start":491,"line_end":491,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133581,"byte_end":133649,"line_start":492,"line_end":492,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":133654,"byte_end":133732,"line_start":493,"line_end":493,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135532,"byte_end":135537,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"pub fn reset(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[{"value":"/ Performs the equivalent of replacing this decompression state with a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135152,"byte_end":135224,"line_start":533,"line_end":533,"column_start":5,"column_end":77}},{"value":"/ freshly allocated copy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135229,"byte_end":135256,"line_start":534,"line_end":534,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135261,"byte_end":135264,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This function may not allocate memory, though, and attempts to reuse any","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135269,"byte_end":135345,"line_start":536,"line_end":536,"column_start":5,"column_end":81}},{"value":"/ previously existing resources.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135350,"byte_end":135384,"line_start":537,"line_end":537,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135389,"byte_end":135392,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ The argument provided here indicates whether the reset state will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135397,"byte_end":135466,"line_start":539,"line_end":539,"column_start":5,"column_end":74}},{"value":"/ attempt to decode a zlib header first or not.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135471,"byte_end":135520,"line_start":540,"line_end":540,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135780,"byte_end":135787,"line_start":550,"line_end":550,"column_start":12,"column_end":19},"name":"message","qualname":"<DecompressError>::message","value":"pub fn message(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the implementation's message about why the operation failed, if one exists.\n","sig":null,"attributes":[{"value":"/ Retrieve the implementation's message about why the operation failed, if one exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135680,"byte_end":135768,"line_start":549,"line_end":549,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136730,"byte_end":136737,"line_start":581,"line_end":581,"column_start":12,"column_end":19},"name":"message","qualname":"<CompressError>::message","value":"pub fn message(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the implementation's message about why the operation failed, if one exists.\n","sig":null,"attributes":[{"value":"/ Retrieve the implementation's message about why the operation failed, if one exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136630,"byte_end":136718,"line_start":580,"line_end":580,"column_start":5,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":144100,"byte_end":144105,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":814},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1393},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157813,"byte_end":157824,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1396}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":156984,"byte_end":157018,"line_start":8,"line_end":8,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157019,"byte_end":157022,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading uncompressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157023,"byte_end":157101,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ from the underlying reader, and emitting compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157102,"byte_end":157163,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157164,"byte_end":157167,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157168,"byte_end":157236,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157237,"byte_end":157240,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157241,"byte_end":157255,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157256,"byte_end":157259,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157260,"byte_end":157267,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157268,"byte_end":157296,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157297,"byte_end":157325,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::ZlibEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157326,"byte_end":157363,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/ use std::fs::File;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157364,"byte_end":157386,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157387,"byte_end":157414,"line_start":22,"line_end":22,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157415,"byte_end":157418,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Use a buffered file to compress contents into a Vec<u8>","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157419,"byte_end":157481,"line_start":24,"line_end":24,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157482,"byte_end":157485,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157486,"byte_end":157543,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157544,"byte_end":157596,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ let b = BufReader::new(f);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157597,"byte_end":157627,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ let mut z = ZlibEncoder::new(b, Compression::fast());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157628,"byte_end":157685,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157686,"byte_end":157718,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ z.read_to_end(&mut buffer)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157719,"byte_end":157751,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ # Ok(buffer)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157752,"byte_end":157768,"line_start":32,"line_end":32,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157769,"byte_end":157776,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157777,"byte_end":157784,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158036,"byte_end":158039,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157903,"byte_end":157977,"line_start":42,"line_end":42,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157982,"byte_end":158024,"line_start":43,"line_end":43,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158691,"byte_end":158696,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158312,"byte_end":158381,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158386,"byte_end":158409,"line_start":58,"line_end":58,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158414,"byte_end":158417,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158422,"byte_end":158497,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158502,"byte_end":158574,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158579,"byte_end":158648,"line_start":62,"line_end":62,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158653,"byte_end":158679,"line_start":63,"line_end":63,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158866,"byte_end":158873,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158805,"byte_end":158854,"line_start":69,"line_end":69,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159118,"byte_end":159125,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158918,"byte_end":158975,"line_start":74,"line_end":74,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158980,"byte_end":158983,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158988,"byte_end":159060,"line_start":76,"line_end":76,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159065,"byte_end":159106,"line_start":77,"line_end":77,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159253,"byte_end":159263,"line_start":83,"line_end":83,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159182,"byte_end":159241,"line_start":82,"line_end":82,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159534,"byte_end":159542,"line_start":91,"line_end":91,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159305,"byte_end":159378,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159383,"byte_end":159386,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159391,"byte_end":159467,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159472,"byte_end":159522,"line_start":90,"line_end":90,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159776,"byte_end":159785,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159599,"byte_end":159664,"line_start":95,"line_end":95,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159669,"byte_end":159672,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159677,"byte_end":159746,"line_start":97,"line_end":97,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159751,"byte_end":159764,"line_start":98,"line_end":98,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161293,"byte_end":161304,"line_start":154,"line_end":154,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1402},{"krate":0,"index":1403}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160245,"byte_end":160281,"line_start":120,"line_end":120,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160282,"byte_end":160285,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading compressed data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160286,"byte_end":160362,"line_start":122,"line_end":122,"column_start":1,"column_end":77}},{"value":"/ from the underlying reader, and emitting uncompressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160363,"byte_end":160426,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160427,"byte_end":160430,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160431,"byte_end":160499,"line_start":125,"line_end":125,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160500,"byte_end":160503,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160504,"byte_end":160518,"line_start":127,"line_end":127,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160519,"byte_end":160522,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160523,"byte_end":160530,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160531,"byte_end":160559,"line_start":130,"line_end":130,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160560,"byte_end":160576,"line_start":131,"line_end":131,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160577,"byte_end":160607,"line_start":132,"line_end":132,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160608,"byte_end":160645,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/ use flate2::bufread::ZlibDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160646,"byte_end":160683,"line_start":134,"line_end":134,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160684,"byte_end":160687,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160688,"byte_end":160705,"line_start":136,"line_end":136,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160706,"byte_end":160777,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/ # e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160778,"byte_end":160821,"line_start":138,"line_end":138,"column_start":1,"column_end":44}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160822,"byte_end":160860,"line_start":139,"line_end":139,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_bufreader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160861,"byte_end":160916,"line_start":140,"line_end":140,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160917,"byte_end":160924,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160925,"byte_end":160930,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160931,"byte_end":161011,"line_start":143,"line_end":143,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161012,"byte_end":161048,"line_start":144,"line_end":144,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161049,"byte_end":161052,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ fn decode_bufreader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161053,"byte_end":161116,"line_start":146,"line_end":146,"column_start":1,"column_end":64}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161117,"byte_end":161166,"line_start":147,"line_end":147,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161167,"byte_end":161201,"line_start":148,"line_end":148,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161202,"byte_end":161236,"line_start":149,"line_end":149,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161237,"byte_end":161250,"line_start":150,"line_end":150,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161251,"byte_end":161256,"line_start":151,"line_end":151,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161257,"byte_end":161264,"line_start":152,"line_end":152,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161485,"byte_end":161488,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"pub fn new(R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161385,"byte_end":161457,"line_start":160,"line_end":160,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161462,"byte_end":161473,"line_start":161,"line_end":161,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162118,"byte_end":162123,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161746,"byte_end":161815,"line_start":175,"line_end":175,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161820,"byte_end":161843,"line_start":176,"line_end":176,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161848,"byte_end":161851,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161856,"byte_end":161926,"line_start":178,"line_end":178,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161931,"byte_end":161999,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162004,"byte_end":162075,"line_start":180,"line_end":180,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162080,"byte_end":162106,"line_start":181,"line_end":181,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162293,"byte_end":162300,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162232,"byte_end":162281,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162545,"byte_end":162552,"line_start":196,"line_end":196,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162345,"byte_end":162402,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162407,"byte_end":162410,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162415,"byte_end":162487,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162492,"byte_end":162533,"line_start":195,"line_end":195,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162680,"byte_end":162690,"line_start":201,"line_end":201,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162609,"byte_end":162668,"line_start":200,"line_end":200,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162959,"byte_end":162967,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162732,"byte_end":162799,"line_start":205,"line_end":205,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162804,"byte_end":162807,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162812,"byte_end":162880,"line_start":207,"line_end":207,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":162885,"byte_end":162947,"line_start":208,"line_end":208,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":163103,"byte_end":163112,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":163024,"byte_end":163091,"line_start":213,"line_end":213,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164477,"byte_end":164488,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1409}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163667,"byte_end":163701,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163702,"byte_end":163705,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163706,"byte_end":163783,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163784,"byte_end":163856,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163857,"byte_end":163860,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163861,"byte_end":163923,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163924,"byte_end":163927,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163928,"byte_end":163942,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163943,"byte_end":163946,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163947,"byte_end":163954,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163955,"byte_end":163983,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":163984,"byte_end":164012,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::ZlibEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164013,"byte_end":164047,"line_start":19,"line_end":19,"column_start":1,"column_end":35}},{"value":"/ use std::fs::File;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164048,"byte_end":164070,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164071,"byte_end":164074,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Open example file and compress the contents using Read interface","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164075,"byte_end":164146,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164147,"byte_end":164150,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164151,"byte_end":164208,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164209,"byte_end":164261,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ let mut z = ZlibEncoder::new(f, Compression::fast());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164262,"byte_end":164319,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = [0;50];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164320,"byte_end":164348,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ let byte_count = z.read(&mut buffer)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164349,"byte_end":164391,"line_start":28,"line_end":28,"column_start":1,"column_end":43}},{"value":"/ # Ok(buffer[0..byte_count].to_vec())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164392,"byte_end":164432,"line_start":29,"line_end":29,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164433,"byte_end":164440,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164441,"byte_end":164448,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164712,"byte_end":164715,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164579,"byte_end":164653,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164658,"byte_end":164700,"line_start":39,"line_end":39,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165440,"byte_end":165445,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164911,"byte_end":164980,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164985,"byte_end":165008,"line_start":49,"line_end":49,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165013,"byte_end":165016,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165021,"byte_end":165096,"line_start":51,"line_end":51,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165101,"byte_end":165173,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165178,"byte_end":165247,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165252,"byte_end":165278,"line_start":54,"line_end":54,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165283,"byte_end":165286,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165291,"byte_end":165363,"line_start":56,"line_end":56,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165368,"byte_end":165428,"line_start":57,"line_end":57,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165641,"byte_end":165648,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165580,"byte_end":165629,"line_start":63,"line_end":63,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165914,"byte_end":165921,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165714,"byte_end":165771,"line_start":68,"line_end":68,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165776,"byte_end":165779,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165784,"byte_end":165856,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165861,"byte_end":165902,"line_start":71,"line_end":71,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166262,"byte_end":166272,"line_start":81,"line_end":81,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":165995,"byte_end":166054,"line_start":76,"line_end":76,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166059,"byte_end":166062,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166067,"byte_end":166142,"line_start":78,"line_end":78,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166147,"byte_end":166220,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166225,"byte_end":166250,"line_start":80,"line_end":80,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166571,"byte_end":166579,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166342,"byte_end":166415,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166420,"byte_end":166423,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166428,"byte_end":166504,"line_start":87,"line_end":87,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166509,"byte_end":166559,"line_start":88,"line_end":88,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166814,"byte_end":166823,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166637,"byte_end":166702,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166707,"byte_end":166710,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166715,"byte_end":166784,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166789,"byte_end":166802,"line_start":96,"line_end":96,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168293,"byte_end":168304,"line_start":152,"line_end":152,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1415}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167253,"byte_end":167289,"line_start":118,"line_end":118,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167290,"byte_end":167293,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167294,"byte_end":167366,"line_start":120,"line_end":120,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167367,"byte_end":167444,"line_start":121,"line_end":121,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167445,"byte_end":167448,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167449,"byte_end":167511,"line_start":123,"line_end":123,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167512,"byte_end":167515,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167516,"byte_end":167530,"line_start":125,"line_end":125,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167531,"byte_end":167534,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167535,"byte_end":167542,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167543,"byte_end":167571,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167572,"byte_end":167588,"line_start":129,"line_end":129,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167589,"byte_end":167619,"line_start":130,"line_end":130,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167620,"byte_end":167657,"line_start":131,"line_end":131,"column_start":1,"column_end":38}},{"value":"/ use flate2::read::ZlibDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167658,"byte_end":167692,"line_start":132,"line_end":132,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167693,"byte_end":167696,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167697,"byte_end":167714,"line_start":134,"line_end":134,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167715,"byte_end":167786,"line_start":135,"line_end":135,"column_start":1,"column_end":72}},{"value":"/ # e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167787,"byte_end":167830,"line_start":136,"line_end":136,"column_start":1,"column_end":44}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167831,"byte_end":167869,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167870,"byte_end":167922,"line_start":138,"line_end":138,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167923,"byte_end":167930,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167931,"byte_end":167936,"line_start":140,"line_end":140,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167937,"byte_end":168017,"line_start":141,"line_end":141,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168018,"byte_end":168051,"line_start":142,"line_end":142,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168052,"byte_end":168055,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168056,"byte_end":168116,"line_start":144,"line_end":144,"column_start":1,"column_end":61}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168117,"byte_end":168166,"line_start":145,"line_end":145,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168167,"byte_end":168201,"line_start":146,"line_end":146,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168202,"byte_end":168236,"line_start":147,"line_end":147,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168237,"byte_end":168250,"line_start":148,"line_end":148,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168251,"byte_end":168256,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168257,"byte_end":168264,"line_start":150,"line_end":150,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168495,"byte_end":168498,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"pub fn new(R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168395,"byte_end":168467,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168472,"byte_end":168483,"line_start":158,"line_end":158,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168825,"byte_end":168837,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"pub fn new_with_buf(R, Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168593,"byte_end":168662,"line_start":163,"line_end":163,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168667,"byte_end":168670,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Note that the specified buffer will only be used up to its current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168675,"byte_end":168745,"line_start":165,"line_end":165,"column_start":5,"column_end":75}},{"value":"/ length. The buffer's capacity will also not grow over time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168750,"byte_end":168813,"line_start":166,"line_end":166,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169545,"byte_end":169550,"line_start":185,"line_end":185,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169023,"byte_end":169092,"line_start":175,"line_end":175,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169097,"byte_end":169120,"line_start":176,"line_end":176,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169125,"byte_end":169128,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169133,"byte_end":169203,"line_start":178,"line_end":178,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169208,"byte_end":169276,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169281,"byte_end":169352,"line_start":180,"line_end":180,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169357,"byte_end":169383,"line_start":181,"line_end":181,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169388,"byte_end":169391,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169396,"byte_end":169468,"line_start":183,"line_end":183,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169473,"byte_end":169533,"line_start":184,"line_end":184,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169746,"byte_end":169753,"line_start":191,"line_end":191,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169685,"byte_end":169734,"line_start":190,"line_end":190,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170019,"byte_end":170026,"line_start":199,"line_end":199,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169819,"byte_end":169876,"line_start":195,"line_end":195,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169881,"byte_end":169884,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169889,"byte_end":169961,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169966,"byte_end":170007,"line_start":198,"line_end":198,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170367,"byte_end":170377,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170100,"byte_end":170159,"line_start":203,"line_end":203,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170164,"byte_end":170167,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170172,"byte_end":170247,"line_start":205,"line_end":205,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170252,"byte_end":170325,"line_start":206,"line_end":206,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170330,"byte_end":170355,"line_start":207,"line_end":207,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170674,"byte_end":170682,"line_start":216,"line_end":216,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170447,"byte_end":170514,"line_start":212,"line_end":212,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170519,"byte_end":170522,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170527,"byte_end":170595,"line_start":214,"line_end":214,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170600,"byte_end":170662,"line_start":215,"line_end":215,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170819,"byte_end":170828,"line_start":221,"line_end":221,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170740,"byte_end":170807,"line_start":220,"line_end":220,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172066,"byte_end":172077,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1421}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171351,"byte_end":171385,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171386,"byte_end":171389,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171390,"byte_end":171463,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171464,"byte_end":171537,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171538,"byte_end":171541,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171542,"byte_end":171606,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171607,"byte_end":171610,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171611,"byte_end":171625,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171626,"byte_end":171629,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171630,"byte_end":171637,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171638,"byte_end":171666,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171667,"byte_end":171695,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::ZlibEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171696,"byte_end":171731,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171732,"byte_end":171735,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write, assigning the compressed bytes of sample string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171736,"byte_end":171816,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171817,"byte_end":171820,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # fn zlib_encoding() -> std::io::Result<()> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171821,"byte_end":171870,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/ let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171871,"byte_end":171940,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"/ e.write_all(b\"Hello World\")?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171941,"byte_end":171974,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/ let compressed = e.finish()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":171975,"byte_end":172008,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172009,"byte_end":172021,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172022,"byte_end":172029,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172030,"byte_end":172037,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172404,"byte_end":172407,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"pub fn new(W, crate::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172166,"byte_end":172238,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172243,"byte_end":172284,"line_start":37,"line_end":37,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172289,"byte_end":172292,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172297,"byte_end":172372,"line_start":39,"line_end":39,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172377,"byte_end":172392,"line_start":40,"line_end":40,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172634,"byte_end":172641,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172572,"byte_end":172622,"line_start":47,"line_end":47,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172918,"byte_end":172925,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172697,"byte_end":172755,"line_start":52,"line_end":52,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172760,"byte_end":172763,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172768,"byte_end":172844,"line_start":54,"line_end":54,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172849,"byte_end":172906,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173740,"byte_end":173745,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172989,"byte_end":173059,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173064,"byte_end":173087,"line_start":61,"line_end":61,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173092,"byte_end":173095,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173100,"byte_end":173174,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173179,"byte_end":173240,"line_start":64,"line_end":64,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173245,"byte_end":173248,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173253,"byte_end":173329,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173334,"byte_end":173402,"line_start":67,"line_end":67,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173407,"byte_end":173481,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173486,"byte_end":173555,"line_start":69,"line_end":69,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173560,"byte_end":173563,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173568,"byte_end":173580,"line_start":71,"line_end":71,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173585,"byte_end":173588,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173593,"byte_end":173664,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173669,"byte_end":173728,"line_start":74,"line_end":74,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174505,"byte_end":174515,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173890,"byte_end":173965,"line_start":81,"line_end":81,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173970,"byte_end":173973,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":173978,"byte_end":174051,"line_start":83,"line_end":83,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174056,"byte_end":174132,"line_start":84,"line_end":84,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174137,"byte_end":174180,"line_start":85,"line_end":85,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174185,"byte_end":174188,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174193,"byte_end":174205,"line_start":87,"line_end":87,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174210,"byte_end":174213,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174218,"byte_end":174292,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174297,"byte_end":174320,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174325,"byte_end":174328,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174333,"byte_end":174345,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174350,"byte_end":174353,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174358,"byte_end":174429,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174434,"byte_end":174493,"line_start":95,"line_end":95,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175350,"byte_end":175356,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174586,"byte_end":174640,"line_start":100,"line_end":100,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174645,"byte_end":174648,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174653,"byte_end":174725,"line_start":102,"line_end":102,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174730,"byte_end":174789,"line_start":103,"line_end":103,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174794,"byte_end":174797,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174802,"byte_end":174878,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174883,"byte_end":174958,"line_start":106,"line_end":106,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":174963,"byte_end":175033,"line_start":107,"line_end":107,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175038,"byte_end":175111,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175116,"byte_end":175165,"line_start":109,"line_end":109,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175170,"byte_end":175173,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175178,"byte_end":175190,"line_start":111,"line_end":111,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175195,"byte_end":175198,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175203,"byte_end":175274,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175279,"byte_end":175338,"line_start":114,"line_end":114,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176041,"byte_end":176053,"line_start":132,"line_end":132,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"pub fn flush_finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175463,"byte_end":175517,"line_start":120,"line_end":120,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175522,"byte_end":175525,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175530,"byte_end":175606,"line_start":122,"line_end":122,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175611,"byte_end":175645,"line_start":123,"line_end":123,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175650,"byte_end":175714,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175719,"byte_end":175789,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175794,"byte_end":175856,"line_start":126,"line_end":126,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175861,"byte_end":175864,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175869,"byte_end":175881,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175886,"byte_end":175889,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175894,"byte_end":175965,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":175970,"byte_end":176029,"line_start":131,"line_end":131,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176380,"byte_end":176388,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176159,"byte_end":176233,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176238,"byte_end":176241,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176246,"byte_end":176318,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176323,"byte_end":176368,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176631,"byte_end":176640,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176451,"byte_end":176516,"line_start":145,"line_end":145,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176521,"byte_end":176524,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176529,"byte_end":176601,"line_start":147,"line_end":147,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176606,"byte_end":176619,"line_start":148,"line_end":148,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178226,"byte_end":178237,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1427}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177072,"byte_end":177108,"line_start":170,"line_end":170,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177109,"byte_end":177112,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177113,"byte_end":177193,"line_start":172,"line_end":172,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177194,"byte_end":177240,"line_start":173,"line_end":173,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177241,"byte_end":177244,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177245,"byte_end":177309,"line_start":175,"line_end":175,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177310,"byte_end":177313,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177314,"byte_end":177328,"line_start":177,"line_end":177,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177329,"byte_end":177332,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177333,"byte_end":177340,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177341,"byte_end":177369,"line_start":180,"line_end":180,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177370,"byte_end":177386,"line_start":181,"line_end":181,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177387,"byte_end":177417,"line_start":182,"line_end":182,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177418,"byte_end":177455,"line_start":183,"line_end":183,"column_start":1,"column_end":38}},{"value":"/ use flate2::write::ZlibDecoder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177456,"byte_end":177491,"line_start":184,"line_end":184,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177492,"byte_end":177495,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177496,"byte_end":177513,"line_start":186,"line_end":186,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177514,"byte_end":177588,"line_start":187,"line_end":187,"column_start":1,"column_end":75}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177589,"byte_end":177635,"line_start":188,"line_end":188,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177636,"byte_end":177677,"line_start":189,"line_end":189,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177678,"byte_end":177733,"line_start":190,"line_end":190,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177734,"byte_end":177741,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177742,"byte_end":177747,"line_start":192,"line_end":192,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177748,"byte_end":177828,"line_start":193,"line_end":193,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177829,"byte_end":177865,"line_start":194,"line_end":194,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177866,"byte_end":177869,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177870,"byte_end":177930,"line_start":196,"line_end":196,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177931,"byte_end":177966,"line_start":197,"line_end":197,"column_start":1,"column_end":36}},{"value":"/    let mut z = ZlibDecoder::new(writer);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":177967,"byte_end":178011,"line_start":198,"line_end":198,"column_start":1,"column_end":45}},{"value":"/    z.write_all(&bytes[..])?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178012,"byte_end":178044,"line_start":199,"line_end":199,"column_start":1,"column_end":33}},{"value":"/    writer = z.finish()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178045,"byte_end":178073,"line_start":200,"line_end":200,"column_start":1,"column_end":29}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178074,"byte_end":178158,"line_start":201,"line_end":201,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178159,"byte_end":178183,"line_start":202,"line_end":202,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178184,"byte_end":178189,"line_start":203,"line_end":203,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178190,"byte_end":178197,"line_start":204,"line_end":204,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178523,"byte_end":178526,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"pub fn new(W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178328,"byte_end":178403,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178408,"byte_end":178411,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ When this decoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178416,"byte_end":178491,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178496,"byte_end":178511,"line_start":214,"line_end":214,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178721,"byte_end":178728,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178659,"byte_end":178709,"line_start":221,"line_end":221,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179005,"byte_end":179012,"line_start":230,"line_end":230,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178784,"byte_end":178842,"line_start":226,"line_end":226,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178847,"byte_end":178850,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178855,"byte_end":178931,"line_start":228,"line_end":228,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178936,"byte_end":178993,"line_start":229,"line_end":229,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179626,"byte_end":179631,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179076,"byte_end":179146,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179151,"byte_end":179174,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179179,"byte_end":179182,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179187,"byte_end":179257,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179262,"byte_end":179332,"line_start":238,"line_end":238,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179337,"byte_end":179410,"line_start":239,"line_end":239,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179415,"byte_end":179441,"line_start":240,"line_end":240,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179446,"byte_end":179449,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179454,"byte_end":179466,"line_start":242,"line_end":242,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179471,"byte_end":179474,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179479,"byte_end":179550,"line_start":244,"line_end":244,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179555,"byte_end":179614,"line_start":245,"line_end":245,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180407,"byte_end":180417,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179792,"byte_end":179867,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179872,"byte_end":179875,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179880,"byte_end":179953,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":179958,"byte_end":180034,"line_start":255,"line_end":255,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180039,"byte_end":180082,"line_start":256,"line_end":256,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180087,"byte_end":180090,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180095,"byte_end":180107,"line_start":258,"line_end":258,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180112,"byte_end":180115,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180120,"byte_end":180194,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180199,"byte_end":180222,"line_start":261,"line_end":261,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180227,"byte_end":180230,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180235,"byte_end":180247,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180252,"byte_end":180255,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180260,"byte_end":180331,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180336,"byte_end":180395,"line_start":266,"line_end":266,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181231,"byte_end":181237,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180488,"byte_end":180542,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180547,"byte_end":180550,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180555,"byte_end":180631,"line_start":273,"line_end":273,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180636,"byte_end":180670,"line_start":274,"line_end":274,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180675,"byte_end":180678,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180683,"byte_end":180759,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180764,"byte_end":180839,"line_start":277,"line_end":277,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180844,"byte_end":180914,"line_start":278,"line_end":278,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180919,"byte_end":180992,"line_start":279,"line_end":279,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":180997,"byte_end":181046,"line_start":280,"line_end":280,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181051,"byte_end":181054,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181059,"byte_end":181071,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181076,"byte_end":181079,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181084,"byte_end":181155,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181160,"byte_end":181219,"line_start":285,"line_end":285,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181599,"byte_end":181607,"line_start":296,"line_end":296,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181344,"byte_end":181414,"line_start":291,"line_end":291,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181419,"byte_end":181437,"line_start":292,"line_end":292,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181442,"byte_end":181445,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181450,"byte_end":181516,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181521,"byte_end":181587,"line_start":295,"line_end":295,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181777,"byte_end":181786,"line_start":302,"line_end":302,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181670,"byte_end":181742,"line_start":300,"line_end":300,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181747,"byte_end":181765,"line_start":301,"line_end":301,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3970,"byte_end":3974,"line_start":99,"line_end":99,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Read`] streams, both encoders and decoders for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3796,"byte_end":3873,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/ various formats.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3874,"byte_end":3894,"line_start":96,"line_end":96,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3895,"byte_end":3898,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":3899,"byte_end":3961,"line_start":98,"line_end":98,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4470,"byte_end":4475,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Write`] streams, both encoders and decoders for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4293,"byte_end":4371,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ various formats.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4372,"byte_end":4392,"line_start":110,"line_end":110,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4393,"byte_end":4396,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4397,"byte_end":4461,"line_start":112,"line_end":112,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4938,"byte_end":4945,"line_start":126,"line_end":126,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1086}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`BufRead`] streams, both encoders and decoders for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4755,"byte_end":4835,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ various formats.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4836,"byte_end":4856,"line_start":123,"line_end":123,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4857,"byte_end":4860,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":4861,"byte_end":4929,"line_start":125,"line_end":125,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6225,"byte_end":6236,"line_start":157,"line_end":157,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"/ When compressing data, the compression level can be specified by a value in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6074,"byte_end":6153,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ this enum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6154,"byte_end":6168,"line_start":155,"line_end":155,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6530,"byte_end":6533,"line_start":165,"line_end":165,"column_start":18,"column_end":21},"name":"new","qualname":"<Compression>::new","value":"pub const fn new(u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[{"value":"/ Creates a new description of the compression level with an explicitly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6267,"byte_end":6340,"line_start":160,"line_end":160,"column_start":5,"column_end":78}},{"value":"/ specified integer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6345,"byte_end":6367,"line_start":161,"line_end":161,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6372,"byte_end":6375,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ The integer here is typically on a scale of 0-9 where 0 means \"no","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6380,"byte_end":6449,"line_start":163,"line_end":163,"column_start":5,"column_end":74}},{"value":"/ compression\" and 9 means \"take as long as you'd like\".","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6454,"byte_end":6512,"line_start":164,"line_end":164,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6720,"byte_end":6724,"line_start":171,"line_end":171,"column_start":18,"column_end":22},"name":"none","qualname":"<Compression>::none","value":"pub const fn none() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[{"value":"/ No compression is to be performed, this may actually inflate data","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6601,"byte_end":6670,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/ slightly when encoding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6675,"byte_end":6702,"line_start":170,"line_end":170,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6840,"byte_end":6844,"line_start":176,"line_end":176,"column_start":18,"column_end":22},"name":"fast","qualname":"<Compression>::fast","value":"pub const fn fast() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[{"value":"/ Optimize for the best speed of encoding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6778,"byte_end":6822,"line_start":175,"line_end":175,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6964,"byte_end":6968,"line_start":181,"line_end":181,"column_start":18,"column_end":22},"name":"best","qualname":"<Compression>::best","value":"pub const fn best() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[{"value":"/ Optimize for the size of data being encoded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6898,"byte_end":6946,"line_start":180,"line_end":180,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":7128,"byte_end":7133,"line_start":187,"line_end":187,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"pub fn level(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[{"value":"/ Returns an integer representing the compression level, typically on a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":7022,"byte_end":7095,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/ scale of 0-9","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":7100,"byte_end":7116,"line_start":186,"line_end":186,"column_start":5,"column_end":21}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":8115,"byte_end":8124,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":8510,"byte_end":8519,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":8839,"byte_end":8848,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":9215,"byte_end":9224,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":9765,"byte_end":9774,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10724,"byte_end":10727,"line_start":26,"line_end":26,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10791,"byte_end":10794,"line_start":32,"line_end":32,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11812,"byte_end":11821,"line_start":71,"line_end":71,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11996,"byte_end":12005,"line_start":81,"line_end":81,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12642,"byte_end":12651,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12855,"byte_end":12864,"line_start":116,"line_end":116,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13350,"byte_end":13359,"line_start":137,"line_end":137,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13988,"byte_end":13997,"line_start":164,"line_end":164,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":14189,"byte_end":14198,"line_start":174,"line_end":174,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21791,"byte_end":21805,"line_start":45,"line_end":45,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22214,"byte_end":22228,"line_start":60,"line_end":60,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23793,"byte_end":23807,"line_start":108,"line_end":108,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23973,"byte_end":23987,"line_start":114,"line_end":114,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25424,"byte_end":25438,"line_start":165,"line_end":165,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25695,"byte_end":25709,"line_start":176,"line_end":176,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27414,"byte_end":27428,"line_start":229,"line_end":229,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27596,"byte_end":27610,"line_start":235,"line_end":235,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28907,"byte_end":28921,"line_start":40,"line_end":40,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29251,"byte_end":29265,"line_start":50,"line_end":50,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31267,"byte_end":31281,"line_start":105,"line_end":105,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31419,"byte_end":31433,"line_start":111,"line_end":111,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32780,"byte_end":32794,"line_start":157,"line_end":157,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33411,"byte_end":33425,"line_start":175,"line_end":175,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35320,"byte_end":35334,"line_start":227,"line_end":227,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35474,"byte_end":35488,"line_start":233,"line_end":233,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36545,"byte_end":36559,"line_start":34,"line_end":34,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41200,"byte_end":41214,"line_start":154,"line_end":154,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41427,"byte_end":41441,"line_start":164,"line_end":164,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42823,"byte_end":42837,"line_start":208,"line_end":208,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46531,"byte_end":46545,"line_start":308,"line_end":308,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46758,"byte_end":46772,"line_start":318,"line_end":318,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":48954,"byte_end":48966,"line_start":23,"line_end":23,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":49291,"byte_end":49298,"line_start":43,"line_end":43,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":49567,"byte_end":49574,"line_start":53,"line_end":53,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":50952,"byte_end":50959,"line_start":98,"line_end":98,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":51232,"byte_end":51239,"line_start":116,"line_end":116,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":51508,"byte_end":51515,"line_start":126,"line_end":126,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":52999,"byte_end":53006,"line_start":173,"line_end":173,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\mod.rs","byte_start":48195,"byte_end":48207,"line_start":48,"line_end":48,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70949,"byte_end":70958,"line_start":175,"line_end":175,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71986,"byte_end":71995,"line_start":206,"line_end":206,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72942,"byte_end":72951,"line_start":239,"line_end":239,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":73636,"byte_end":73645,"line_start":263,"line_end":263,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":75299,"byte_end":75314,"line_start":334,"line_end":334,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":76328,"byte_end":76334,"line_start":376,"line_end":376,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":76586,"byte_end":76592,"line_start":387,"line_end":387,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":77891,"byte_end":77897,"line_start":420,"line_end":420,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":78384,"byte_end":78393,"line_start":437,"line_end":437,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79360,"byte_end":79369,"line_start":472,"line_end":472,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":80130,"byte_end":80139,"line_start":497,"line_end":497,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84350,"byte_end":84359,"line_start":608,"line_end":608,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86138,"byte_end":86152,"line_start":661,"line_end":661,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86453,"byte_end":86467,"line_start":670,"line_end":670,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":87181,"byte_end":87195,"line_start":695,"line_end":695,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93089,"byte_end":93098,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93554,"byte_end":93563,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94160,"byte_end":94169,"line_start":77,"line_end":77,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94309,"byte_end":94318,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95611,"byte_end":95620,"line_start":132,"line_end":132,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95873,"byte_end":95882,"line_start":142,"line_end":142,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96637,"byte_end":96646,"line_start":167,"line_end":167,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96786,"byte_end":96795,"line_start":173,"line_end":173,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98600,"byte_end":98614,"line_start":228,"line_end":228,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98964,"byte_end":98978,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99739,"byte_end":99753,"line_start":264,"line_end":264,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99893,"byte_end":99907,"line_start":270,"line_end":270,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101367,"byte_end":101376,"line_start":50,"line_end":50,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104578,"byte_end":104587,"line_start":140,"line_end":140,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105014,"byte_end":105023,"line_start":156,"line_end":156,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105157,"byte_end":105166,"line_start":162,"line_end":162,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106608,"byte_end":106617,"line_start":212,"line_end":212,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":110111,"byte_end":110118,"line_start":314,"line_end":314,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":110302,"byte_end":110311,"line_start":322,"line_end":322,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":111953,"byte_end":111962,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53816,"byte_end":53824,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56857,"byte_end":56866,"line_start":120,"line_end":120,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56930,"byte_end":56939,"line_start":126,"line_end":126,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120135,"byte_end":120150,"line_start":128,"line_end":128,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122313,"byte_end":122321,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129099,"byte_end":129109,"line_start":375,"line_end":375,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135633,"byte_end":135648,"line_start":546,"line_end":546,"column_start":16,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135658,"byte_end":135673,"line_start":548,"line_end":548,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135978,"byte_end":135983,"line_start":558,"line_end":558,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136118,"byte_end":136133,"line_start":564,"line_end":564,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136587,"byte_end":136600,"line_start":577,"line_end":577,"column_start":16,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136610,"byte_end":136623,"line_start":579,"line_end":579,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136828,"byte_end":136833,"line_start":586,"line_end":586,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136966,"byte_end":136979,"line_start":592,"line_end":592,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":144500,"byte_end":144508,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":145128,"byte_end":145138,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":145836,"byte_end":145849,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":146050,"byte_end":146065,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":147694,"byte_end":147700,"line_start":161,"line_end":161,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":150653,"byte_end":150659,"line_start":252,"line_end":252,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":151687,"byte_end":151693,"line_start":282,"line_end":282,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157882,"byte_end":157893,"line_start":41,"line_end":41,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158291,"byte_end":158302,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159867,"byte_end":159878,"line_start":104,"line_end":104,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160044,"byte_end":160055,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161364,"byte_end":161375,"line_start":159,"line_end":159,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161725,"byte_end":161736,"line_start":174,"line_end":174,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":163194,"byte_end":163205,"line_start":219,"line_end":219,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":163373,"byte_end":163384,"line_start":225,"line_end":225,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164558,"byte_end":164569,"line_start":37,"line_end":37,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164890,"byte_end":164901,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166903,"byte_end":166914,"line_start":102,"line_end":102,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167052,"byte_end":167063,"line_start":108,"line_end":108,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168374,"byte_end":168385,"line_start":156,"line_end":156,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169002,"byte_end":169013,"line_start":174,"line_end":174,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170908,"byte_end":170919,"line_start":226,"line_end":226,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":171059,"byte_end":171070,"line_start":232,"line_end":232,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172145,"byte_end":172156,"line_start":35,"line_end":35,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176727,"byte_end":176738,"line_start":154,"line_end":154,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176951,"byte_end":176962,"line_start":164,"line_end":164,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178307,"byte_end":178318,"line_start":210,"line_end":210,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181873,"byte_end":181884,"line_start":307,"line_end":307,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":182097,"byte_end":182108,"line_start":317,"line_end":317,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6249,"byte_end":6260,"line_start":159,"line_end":159,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":7191,"byte_end":7202,"line_start":192,"line_end":192,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":8115,"byte_end":8124,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":8510,"byte_end":8519,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":8839,"byte_end":8848,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":9215,"byte_end":9224,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":53},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\bufreader.rs","byte_start":9765,"byte_end":9774,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":53},"to":{"krate":1,"index":4805}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10724,"byte_end":10727,"line_start":26,"line_end":26,"column_start":18,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":10791,"byte_end":10794,"line_start":32,"line_end":32,"column_start":6,"column_end":9},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11812,"byte_end":11821,"line_start":71,"line_end":71,"column_start":15,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":11996,"byte_end":12005,"line_start":81,"line_end":81,"column_start":9,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12642,"byte_end":12651,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1105},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":12855,"byte_end":12864,"line_start":116,"line_end":116,"column_start":30,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1105},"to":{"krate":1,"index":4805}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13350,"byte_end":13359,"line_start":137,"line_end":137,"column_start":9,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":13988,"byte_end":13997,"line_start":164,"line_end":164,"column_start":16,"column_end":25},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\crc.rs","byte_start":14189,"byte_end":14198,"line_start":174,"line_end":174,"column_start":26,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1112},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":21791,"byte_end":21805,"line_start":45,"line_end":45,"column_start":18,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":22214,"byte_end":22228,"line_start":60,"line_end":60,"column_start":9,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23793,"byte_end":23807,"line_start":108,"line_end":108,"column_start":27,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1119},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":23973,"byte_end":23987,"line_start":114,"line_end":114,"column_start":36,"column_end":50},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1119},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25424,"byte_end":25438,"line_start":165,"line_end":165,"column_start":18,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":25695,"byte_end":25709,"line_start":176,"line_end":176,"column_start":9,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27414,"byte_end":27428,"line_start":229,"line_end":229,"column_start":27,"column_end":41},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1126},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\bufread.rs","byte_start":27596,"byte_end":27610,"line_start":235,"line_end":235,"column_start":36,"column_end":50},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1126},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":28907,"byte_end":28921,"line_start":40,"line_end":40,"column_start":15,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":29251,"byte_end":29265,"line_start":50,"line_end":50,"column_start":9,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31267,"byte_end":31281,"line_start":105,"line_end":105,"column_start":24,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1133},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":31419,"byte_end":31433,"line_start":111,"line_end":111,"column_start":33,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1133},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":32780,"byte_end":32794,"line_start":157,"line_end":157,"column_start":15,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":33411,"byte_end":33425,"line_start":175,"line_end":175,"column_start":9,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35320,"byte_end":35334,"line_start":227,"line_end":227,"column_start":24,"column_end":38},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1139},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\read.rs","byte_start":35474,"byte_end":35488,"line_start":233,"line_end":233,"column_start":33,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1139},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":36545,"byte_end":36559,"line_start":34,"line_end":34,"column_start":16,"column_end":30},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41200,"byte_end":41214,"line_start":154,"line_end":154,"column_start":26,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":41427,"byte_end":41441,"line_start":164,"line_end":164,"column_start":32,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":42823,"byte_end":42837,"line_start":208,"line_end":208,"column_start":16,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46531,"byte_end":46545,"line_start":308,"line_end":308,"column_start":26,"column_end":40},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1151},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\deflate\\write.rs","byte_start":46758,"byte_end":46772,"line_start":318,"line_end":318,"column_start":32,"column_end":46},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1151},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\mod.rs","byte_start":47220,"byte_end":47224,"line_start":10,"line_end":10,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3069},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\mod.rs","byte_start":47227,"byte_end":47231,"line_start":10,"line_end":10,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3057},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\mod.rs","byte_start":47326,"byte_end":47333,"line_start":15,"line_end":15,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":305},"to":{"krate":0,"index":308}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\mod.rs","byte_start":47627,"byte_end":47634,"line_start":26,"line_end":26,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":305},"to":{"krate":0,"index":312}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":48954,"byte_end":48966,"line_start":23,"line_end":23,"column_start":6,"column_end":18},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":49291,"byte_end":49298,"line_start":43,"line_end":43,"column_start":21,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":342},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":49567,"byte_end":49574,"line_start":53,"line_end":53,"column_start":25,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":342},"to":{"krate":0,"index":308}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":50952,"byte_end":50959,"line_start":98,"line_end":98,"column_start":18,"column_end":25},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":342},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":51232,"byte_end":51239,"line_start":116,"line_end":116,"column_start":21,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":51508,"byte_end":51515,"line_start":126,"line_end":126,"column_start":25,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":355},"to":{"krate":0,"index":312}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\rust.rs","byte_start":52999,"byte_end":53006,"line_start":173,"line_end":173,"column_start":18,"column_end":25},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":355},"to":{"krate":0,"index":305}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\ffi\\mod.rs","byte_start":48195,"byte_end":48207,"line_start":48,"line_end":48,"column_start":26,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":70949,"byte_end":70958,"line_start":175,"line_end":175,"column_start":18,"column_end":27},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":71986,"byte_end":71995,"line_start":206,"line_end":206,"column_start":9,"column_end":18},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":72942,"byte_end":72951,"line_start":239,"line_end":239,"column_start":27,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":73636,"byte_end":73645,"line_start":263,"line_end":263,"column_start":36,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":75299,"byte_end":75314,"line_start":334,"line_end":334,"column_start":6,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":76328,"byte_end":76334,"line_start":376,"line_end":376,"column_start":13,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":76586,"byte_end":76592,"line_start":387,"line_end":387,"column_start":28,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":469},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":77891,"byte_end":77897,"line_start":420,"line_end":420,"column_start":13,"column_end":19},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":78384,"byte_end":78393,"line_start":437,"line_end":437,"column_start":18,"column_end":27},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":79360,"byte_end":79369,"line_start":472,"line_end":472,"column_start":9,"column_end":18},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":80130,"byte_end":80139,"line_start":497,"line_end":497,"column_start":27,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1170},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":84350,"byte_end":84359,"line_start":608,"line_end":608,"column_start":36,"column_end":45},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1170},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86138,"byte_end":86152,"line_start":661,"line_end":661,"column_start":18,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":86453,"byte_end":86467,"line_start":670,"line_end":670,"column_start":9,"column_end":23},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\bufread.rs","byte_start":87181,"byte_end":87195,"line_start":695,"line_end":695,"column_start":27,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93089,"byte_end":93098,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":93554,"byte_end":93563,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94160,"byte_end":94169,"line_start":77,"line_end":77,"column_start":24,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1228},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":94309,"byte_end":94318,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1228},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95611,"byte_end":95620,"line_start":132,"line_end":132,"column_start":15,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":95873,"byte_end":95882,"line_start":142,"line_end":142,"column_start":9,"column_end":18},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96637,"byte_end":96646,"line_start":167,"line_end":167,"column_start":24,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1234},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":96786,"byte_end":96795,"line_start":173,"line_end":173,"column_start":33,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1234},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98600,"byte_end":98614,"line_start":228,"line_end":228,"column_start":15,"column_end":29},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":98964,"byte_end":98978,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99739,"byte_end":99753,"line_start":264,"line_end":264,"column_start":24,"column_end":38},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1240},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\read.rs","byte_start":99893,"byte_end":99907,"line_start":270,"line_end":270,"column_start":33,"column_end":47},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1240},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":101367,"byte_end":101376,"line_start":50,"line_end":50,"column_start":16,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":104578,"byte_end":104587,"line_start":140,"line_end":140,"column_start":26,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1246},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105014,"byte_end":105023,"line_start":156,"line_end":156,"column_start":32,"column_end":41},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1246},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":105157,"byte_end":105166,"line_start":162,"line_end":162,"column_start":25,"column_end":34},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1246},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":106608,"byte_end":106617,"line_start":212,"line_end":212,"column_start":16,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":110111,"byte_end":110118,"line_start":314,"line_end":314,"column_start":24,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":668},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":110302,"byte_end":110311,"line_start":322,"line_end":322,"column_start":26,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1255},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\write.rs","byte_start":111953,"byte_end":111962,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1255},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":53816,"byte_end":53824,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56857,"byte_end":56866,"line_start":120,"line_end":120,"column_start":18,"column_end":27},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1280},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\gz\\mod.rs","byte_start":56930,"byte_end":56939,"line_start":126,"line_end":126,"column_start":6,"column_end":15},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":120135,"byte_end":120150,"line_start":128,"line_end":128,"column_start":6,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":122313,"byte_end":122321,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":129099,"byte_end":129109,"line_start":375,"line_end":375,"column_start":6,"column_end":16},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135633,"byte_end":135648,"line_start":546,"line_end":546,"column_start":16,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1356},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135658,"byte_end":135673,"line_start":548,"line_end":548,"column_start":6,"column_end":21},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":135978,"byte_end":135983,"line_start":558,"line_end":558,"column_start":36,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":4154},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136118,"byte_end":136133,"line_start":564,"line_end":564,"column_start":23,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1356},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136587,"byte_end":136600,"line_start":577,"line_end":577,"column_start":16,"column_end":29},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1361},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136610,"byte_end":136623,"line_start":579,"line_end":579,"column_start":6,"column_end":19},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136828,"byte_end":136833,"line_start":586,"line_end":586,"column_start":34,"column_end":39},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":4154},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\mem.rs","byte_start":136966,"byte_end":136979,"line_start":592,"line_end":592,"column_start":23,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1361},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":144500,"byte_end":144508,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1288},"to":{"krate":0,"index":814}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":145128,"byte_end":145138,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1292},"to":{"krate":0,"index":814}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":145836,"byte_end":145849,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1296},"to":{"krate":0,"index":832}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":146050,"byte_end":146065,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1325},"to":{"krate":0,"index":832}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":147694,"byte_end":147700,"line_start":161,"line_end":161,"column_start":24,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":150653,"byte_end":150659,"line_start":252,"line_end":252,"column_start":34,"column_end":40},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1383},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zio.rs","byte_start":151687,"byte_end":151693,"line_start":282,"line_end":282,"column_start":33,"column_end":39},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1383},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":157882,"byte_end":157893,"line_start":41,"line_end":41,"column_start":18,"column_end":29},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":158291,"byte_end":158302,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":159867,"byte_end":159878,"line_start":104,"line_end":104,"column_start":27,"column_end":38},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":160044,"byte_end":160055,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161364,"byte_end":161375,"line_start":159,"line_end":159,"column_start":18,"column_end":29},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":161725,"byte_end":161736,"line_start":174,"line_end":174,"column_start":9,"column_end":20},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":163194,"byte_end":163205,"line_start":219,"line_end":219,"column_start":27,"column_end":38},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1400},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\bufread.rs","byte_start":163373,"byte_end":163384,"line_start":225,"line_end":225,"column_start":36,"column_end":47},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1400},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164558,"byte_end":164569,"line_start":37,"line_end":37,"column_start":15,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":164890,"byte_end":164901,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":166903,"byte_end":166914,"line_start":102,"line_end":102,"column_start":24,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1407},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":167052,"byte_end":167063,"line_start":108,"line_end":108,"column_start":33,"column_end":44},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1407},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":168374,"byte_end":168385,"line_start":156,"line_end":156,"column_start":15,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":169002,"byte_end":169013,"line_start":174,"line_end":174,"column_start":9,"column_end":20},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":170908,"byte_end":170919,"line_start":226,"line_end":226,"column_start":24,"column_end":35},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1413},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\read.rs","byte_start":171059,"byte_end":171070,"line_start":232,"line_end":232,"column_start":33,"column_end":44},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1413},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":172145,"byte_end":172156,"line_start":35,"line_end":35,"column_start":16,"column_end":27},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176727,"byte_end":176738,"line_start":154,"line_end":154,"column_start":26,"column_end":37},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":176951,"byte_end":176962,"line_start":164,"line_end":164,"column_start":32,"column_end":43},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1419},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":178307,"byte_end":178318,"line_start":210,"line_end":210,"column_start":16,"column_end":27},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":181873,"byte_end":181884,"line_start":307,"line_end":307,"column_start":26,"column_end":37},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1425},"to":{"krate":1,"index":4780}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\zlib\\write.rs","byte_start":182097,"byte_end":182108,"line_start":317,"line_end":317,"column_start":32,"column_end":43},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1425},"to":{"krate":1,"index":4723}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":6249,"byte_end":6260,"line_start":159,"line_end":159,"column_start":6,"column_end":17},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flate2-1.0.24\\src\\lib.rs","byte_start":7191,"byte_end":7202,"line_start":192,"line_end":192,"column_start":18,"column_end":29},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1431},"to":{"krate":2,"index":3035}}]}
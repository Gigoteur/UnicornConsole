{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","crc32fast","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=709d1338336be821","-C","extra-filename=-709d1338336be821","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps","--extern","cfg_if=d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps\\libcfg_if-ddb6074893328897.rmeta","--cap-lints","allow","--cfg","crc32fast_stdarchx86","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-piston\\target\\rls\\debug\\deps\\libcrc32fast-709d1338336be821.rmeta"},"prelude":{"crate_id":{"name":"crc32fast","disambiguator":[7521281354712788951,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[17941200006019888196,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":0,"byte_end":6655,"line_start":1,"line_end":235,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":0,"byte_end":6655,"line_start":1,"line_end":235,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":27},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":99},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":59}],"decl_id":null,"docs":" Fast, SIMD-accelerated CRC32 (IEEE) checksum computation.","sig":null,"attributes":[{"value":"/ Fast, SIMD-accelerated CRC32 (IEEE) checksum computation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":0,"byte_end":61,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":62,"byte_end":65,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":66,"byte_end":78,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":79,"byte_end":82,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ### Simple usage","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":83,"byte_end":103,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":104,"byte_end":107,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ For simple use-cases, you can call the [`hash()`] convenience function to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":108,"byte_end":185,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ directly compute the CRC32 checksum for a given byte slice:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":186,"byte_end":249,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":250,"byte_end":253,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":254,"byte_end":265,"line_start":10,"line_end":10,"column_start":1,"column_end":12}},{"value":"/ let checksum = crc32fast::hash(b\"foo bar baz\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":266,"byte_end":317,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":318,"byte_end":325,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":326,"byte_end":329,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ### Advanced usage","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":330,"byte_end":352,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":353,"byte_end":356,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ For use-cases that require more flexibility or performance, for example when","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":357,"byte_end":437,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ processing large amounts of data, you can create and manipulate a [`Hasher`]:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":438,"byte_end":519,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":520,"byte_end":523,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":524,"byte_end":535,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"/ use crc32fast::Hasher;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":536,"byte_end":562,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":563,"byte_end":566,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut hasher = Hasher::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":567,"byte_end":602,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ hasher.update(b\"foo bar baz\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":603,"byte_end":637,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"/ let checksum = hasher.finalize();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":638,"byte_end":675,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":676,"byte_end":683,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":684,"byte_end":687,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ## Performance","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":688,"byte_end":706,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":707,"byte_end":710,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This crate contains multiple CRC32 implementations:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":711,"byte_end":766,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":767,"byte_end":770,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ - A fast baseline implementation which processes up to 16 bytes per iteration","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":771,"byte_end":852,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"/ - An optimized implementation for modern `x86` using `sse` and `pclmulqdq` instructions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":853,"byte_end":944,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":945,"byte_end":948,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Calling the [`Hasher::new`] constructor at runtime will perform a feature detection to select the most","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":949,"byte_end":1055,"line_start":34,"line_end":34,"column_start":1,"column_end":107}},{"value":"/ optimal implementation for the current CPU feature set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1056,"byte_end":1115,"line_start":35,"line_end":35,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1626,"byte_end":1630,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"hash","qualname":"::hash","value":"pub fn hash(&[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Computes the CRC32 hash of a byte slice.","sig":null,"attributes":[{"value":"/ Computes the CRC32 hash of a byte slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1516,"byte_end":1560,"line_start":62,"line_end":62,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1561,"byte_end":1564,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Check out [`Hasher`] for more advanced use-cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1565,"byte_end":1618,"line_start":64,"line_end":64,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1900,"byte_end":1906,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"Hasher","qualname":"::Hasher","value":"Hasher {  }","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" Represents an in-progress CRC32 computation.\n","sig":null,"attributes":[{"value":"/ Represents an in-progress CRC32 computation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1840,"byte_end":1888,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2198,"byte_end":2201,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<Hasher>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Hasher`.","sig":null,"attributes":[{"value":"/ Create a new `Hasher`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2001,"byte_end":2027,"line_start":87,"line_end":87,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2032,"byte_end":2035,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ This will perform a CPU feature detection at runtime to select the most","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2040,"byte_end":2115,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ optimal implementation for the current processor architecture.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2120,"byte_end":2186,"line_start":90,"line_end":90,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2468,"byte_end":2484,"line_start":99,"line_end":99,"column_start":12,"column_end":28},"name":"new_with_initial","qualname":"<Hasher>::new_with_initial","value":"pub fn new_with_initial(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Hasher` with an initial CRC32 state.","sig":null,"attributes":[{"value":"/ Create a new `Hasher` with an initial CRC32 state.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2276,"byte_end":2330,"line_start":95,"line_end":95,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2335,"byte_end":2338,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ This works just like `Hasher::new`, except that it allows for an initial","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2343,"byte_end":2419,"line_start":97,"line_end":97,"column_start":5,"column_end":81}},{"value":"/ CRC32 state to be passed in.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2424,"byte_end":2456,"line_start":98,"line_end":98,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2837,"byte_end":2857,"line_start":108,"line_end":108,"column_start":12,"column_end":32},"name":"new_with_initial_len","qualname":"<Hasher>::new_with_initial_len","value":"pub fn new_with_initial_len(u32, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Hasher` with an initial CRC32 state.","sig":null,"attributes":[{"value":"/ Create a new `Hasher` with an initial CRC32 state.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2561,"byte_end":2615,"line_start":103,"line_end":103,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2620,"byte_end":2623,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ As `new_with_initial`, but also accepts a length (in bytes). The","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2628,"byte_end":2696,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/ resulting object can then be used with `combine` to compute `crc(a ||","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2701,"byte_end":2774,"line_start":106,"line_end":106,"column_start":5,"column_end":78}},{"value":"/ b)` from `crc(a)`, `crc(b)`, and `len(b)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":2779,"byte_end":2825,"line_start":107,"line_end":107,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":3093,"byte_end":3114,"line_start":115,"line_end":115,"column_start":12,"column_end":33},"name":"internal_new_baseline","qualname":"<Hasher>::internal_new_baseline","value":"pub fn internal_new_baseline(u32, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":3334,"byte_end":3358,"line_start":124,"line_end":124,"column_start":12,"column_end":36},"name":"internal_new_specialized","qualname":"<Hasher>::internal_new_specialized","value":"pub fn internal_new_specialized(u32, u64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":3734,"byte_end":3740,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"update","qualname":"<Hasher>::update","value":"pub fn update(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Process the given byte slice and update the hash state.\n","sig":null,"attributes":[{"value":"/ Process the given byte slice and update the hash state.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":3663,"byte_end":3722,"line_start":136,"line_end":136,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4064,"byte_end":4072,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Hasher>::finalize","value":"pub fn finalize(Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Finalize the hash state and return the computed CRC32 value.\n","sig":null,"attributes":[{"value":"/ Finalize the hash state and return the computed CRC32 value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":3988,"byte_end":4052,"line_start":145,"line_end":145,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4288,"byte_end":4293,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"reset","qualname":"<Hasher>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the hash state.\n","sig":null,"attributes":[{"value":"/ Reset the hash state.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4251,"byte_end":4276,"line_start":153,"line_end":153,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4598,"byte_end":4605,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"combine","qualname":"<Hasher>::combine","value":"pub fn combine(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Combine the hash state with the hash state for the subsequent block of bytes.\n","sig":null,"attributes":[{"value":"/ Combine the hash state with the hash state for the subsequent block of bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4505,"byte_end":4586,"line_start":162,"line_end":162,"column_start":5,"column_end":86}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\baseline.rs","byte_start":6742,"byte_end":6747,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\specialized\\pclmulqdq.rs","byte_start":13521597,"byte_end":13521602,"line_start":11,"line_end":11,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1988,"byte_end":1994,"line_start":86,"line_end":86,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4961,"byte_end":4967,"line_start":173,"line_end":173,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":5108,"byte_end":5114,"line_start":179,"line_end":179,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":5195,"byte_end":5201,"line_start":185,"line_end":185,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\baseline.rs","byte_start":6742,"byte_end":6747,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":62},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\specialized\\pclmulqdq.rs","byte_start":13521597,"byte_end":13521602,"line_start":11,"line_end":11,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":1988,"byte_end":1994,"line_start":86,"line_end":86,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":4961,"byte_end":4967,"line_start":173,"line_end":173,"column_start":21,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":5108,"byte_end":5114,"line_start":179,"line_end":179,"column_start":18,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.3.2\\src\\lib.rs","byte_start":5195,"byte_end":5201,"line_start":185,"line_end":185,"column_start":23,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":9902}}]}
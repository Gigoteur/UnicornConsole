{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","byteorder","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=28560ac13332040e","-C","extra-filename=-28560ac13332040e","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-libretro\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-libretro\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-libretro\\target\\rls\\debug\\deps\\libbyteorder-28560ac13332040e.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[11419227432139273805,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":0,"byte_end":108834,"line_start":1,"line_end":4052,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":2555,"byte_end":2567,"line_start":78,"line_end":78,"column_start":21,"column_end":33},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":2569,"byte_end":2582,"line_start":78,"line_end":78,"column_start":35,"column_end":48},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":0,"byte_end":108834,"line_start":1,"line_end":4052,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":312}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":0,"byte_end":2347,"line_start":1,"line_end":68,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":2349,"byte_end":2371,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109726,"byte_end":109738,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Read`] with methods for reading numbers. (For `std::io`.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":108909,"byte_end":108980,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":108981,"byte_end":108984,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":108985,"byte_end":109063,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109064,"byte_end":109142,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109143,"byte_end":109213,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109214,"byte_end":109217,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109218,"byte_end":109232,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109233,"byte_end":109236,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109237,"byte_end":109298,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109299,"byte_end":109302,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109303,"byte_end":109314,"line_start":18,"line_end":18,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109315,"byte_end":109339,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109340,"byte_end":109385,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109386,"byte_end":109389,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109390,"byte_end":109438,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109439,"byte_end":109497,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109498,"byte_end":109556,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109557,"byte_end":109564,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109565,"byte_end":109568,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109569,"byte_end":109607,"line_start":27,"line_end":27,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109608,"byte_end":109652,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109653,"byte_end":109715,"line_start":29,"line_end":29,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110520,"byte_end":110527,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109755,"byte_end":109818,"line_start":31,"line_end":31,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109823,"byte_end":109826,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109831,"byte_end":109902,"line_start":33,"line_end":33,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109907,"byte_end":109953,"line_start":34,"line_end":34,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109958,"byte_end":109961,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109966,"byte_end":109978,"line_start":36,"line_end":36,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109983,"byte_end":109986,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109991,"byte_end":110055,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110060,"byte_end":110063,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110068,"byte_end":110160,"line_start":40,"line_end":40,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110165,"byte_end":110168,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110173,"byte_end":110187,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110192,"byte_end":110195,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110200,"byte_end":110247,"line_start":44,"line_end":44,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110252,"byte_end":110255,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110260,"byte_end":110271,"line_start":46,"line_end":46,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110276,"byte_end":110300,"line_start":47,"line_end":47,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110305,"byte_end":110337,"line_start":48,"line_end":48,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110342,"byte_end":110345,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110350,"byte_end":110392,"line_start":50,"line_end":50,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(2, rdr.read_u8().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110397,"byte_end":110439,"line_start":51,"line_end":51,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(5, rdr.read_u8().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110444,"byte_end":110486,"line_start":52,"line_end":52,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110491,"byte_end":110498,"line_start":53,"line_end":53,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110503,"byte_end":110512,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111418,"byte_end":111425,"line_start":85,"line_end":85,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110651,"byte_end":110711,"line_start":61,"line_end":61,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110716,"byte_end":110719,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110724,"byte_end":110795,"line_start":63,"line_end":63,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110800,"byte_end":110846,"line_start":64,"line_end":64,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110851,"byte_end":110854,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110859,"byte_end":110871,"line_start":66,"line_end":66,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110876,"byte_end":110879,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110884,"byte_end":110948,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110953,"byte_end":110956,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":110961,"byte_end":111053,"line_start":70,"line_end":70,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111058,"byte_end":111061,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111066,"byte_end":111080,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111085,"byte_end":111088,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Read signed 8 bit integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111093,"byte_end":111138,"line_start":74,"line_end":74,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111143,"byte_end":111146,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111151,"byte_end":111162,"line_start":76,"line_end":76,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111167,"byte_end":111191,"line_start":77,"line_end":77,"column_start":5,"column_end":29}},{"value":"/ use byteorder::ReadBytesExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111196,"byte_end":111228,"line_start":78,"line_end":78,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111233,"byte_end":111236,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111241,"byte_end":111289,"line_start":80,"line_end":80,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(2, rdr.read_i8().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111294,"byte_end":111336,"line_start":81,"line_end":81,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(-5, rdr.read_i8().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111341,"byte_end":111384,"line_start":82,"line_end":82,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111389,"byte_end":111396,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111401,"byte_end":111410,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112249,"byte_end":112257,"line_start":112,"line_end":112,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111555,"byte_end":111619,"line_start":91,"line_end":91,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111624,"byte_end":111627,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111632,"byte_end":111644,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111649,"byte_end":111652,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111657,"byte_end":111721,"line_start":95,"line_end":95,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111726,"byte_end":111729,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111734,"byte_end":111826,"line_start":97,"line_end":97,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111831,"byte_end":111834,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111839,"byte_end":111853,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111858,"byte_end":111861,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111866,"byte_end":111925,"line_start":101,"line_end":101,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111930,"byte_end":111933,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111938,"byte_end":111949,"line_start":103,"line_end":103,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111954,"byte_end":111978,"line_start":104,"line_end":104,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":111983,"byte_end":112028,"line_start":105,"line_end":105,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112033,"byte_end":112036,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112041,"byte_end":112089,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112094,"byte_end":112152,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112157,"byte_end":112215,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112220,"byte_end":112227,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112232,"byte_end":112241,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113109,"byte_end":113117,"line_start":139,"line_end":139,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112407,"byte_end":112468,"line_start":118,"line_end":118,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112473,"byte_end":112476,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112481,"byte_end":112493,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112498,"byte_end":112501,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112506,"byte_end":112570,"line_start":122,"line_end":122,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112575,"byte_end":112578,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112583,"byte_end":112675,"line_start":124,"line_end":124,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112680,"byte_end":112683,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112688,"byte_end":112702,"line_start":126,"line_end":126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112707,"byte_end":112710,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Read signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112715,"byte_end":112772,"line_start":128,"line_end":128,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112777,"byte_end":112780,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112785,"byte_end":112796,"line_start":130,"line_end":130,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112801,"byte_end":112825,"line_start":131,"line_end":131,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112830,"byte_end":112875,"line_start":132,"line_end":132,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112880,"byte_end":112883,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112888,"byte_end":112948,"line_start":134,"line_end":134,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":112953,"byte_end":113011,"line_start":135,"line_end":135,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113016,"byte_end":113075,"line_start":136,"line_end":136,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113080,"byte_end":113087,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113092,"byte_end":113101,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113904,"byte_end":113912,"line_start":165,"line_end":165,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"pub fn read_u24<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113267,"byte_end":113331,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113336,"byte_end":113339,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113344,"byte_end":113356,"line_start":147,"line_end":147,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113361,"byte_end":113364,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113369,"byte_end":113433,"line_start":149,"line_end":149,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113438,"byte_end":113441,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113446,"byte_end":113538,"line_start":151,"line_end":151,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113543,"byte_end":113546,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113551,"byte_end":113565,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113570,"byte_end":113573,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 24 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113578,"byte_end":113637,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113642,"byte_end":113645,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113650,"byte_end":113661,"line_start":157,"line_end":157,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113666,"byte_end":113690,"line_start":158,"line_end":158,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113695,"byte_end":113740,"line_start":159,"line_end":159,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113745,"byte_end":113748,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113753,"byte_end":113807,"line_start":161,"line_end":161,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113812,"byte_end":113870,"line_start":162,"line_end":162,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113875,"byte_end":113882,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":113887,"byte_end":113896,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114697,"byte_end":114705,"line_start":191,"line_end":191,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"pub fn read_i24<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114062,"byte_end":114123,"line_start":171,"line_end":171,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114128,"byte_end":114131,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114136,"byte_end":114148,"line_start":173,"line_end":173,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114153,"byte_end":114156,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114161,"byte_end":114225,"line_start":175,"line_end":175,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114230,"byte_end":114233,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114238,"byte_end":114330,"line_start":177,"line_end":177,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114335,"byte_end":114338,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114343,"byte_end":114357,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114362,"byte_end":114365,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Read signed 24 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114370,"byte_end":114427,"line_start":181,"line_end":181,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114432,"byte_end":114435,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114440,"byte_end":114451,"line_start":183,"line_end":183,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114456,"byte_end":114480,"line_start":184,"line_end":184,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114485,"byte_end":114530,"line_start":185,"line_end":185,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114535,"byte_end":114538,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114543,"byte_end":114597,"line_start":187,"line_end":187,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114602,"byte_end":114663,"line_start":188,"line_end":188,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114668,"byte_end":114675,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114680,"byte_end":114689,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115498,"byte_end":115506,"line_start":217,"line_end":217,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114855,"byte_end":114919,"line_start":197,"line_end":197,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114924,"byte_end":114927,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114932,"byte_end":114944,"line_start":199,"line_end":199,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114949,"byte_end":114952,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":114957,"byte_end":115021,"line_start":201,"line_end":201,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115026,"byte_end":115029,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115034,"byte_end":115126,"line_start":203,"line_end":203,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115131,"byte_end":115134,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115139,"byte_end":115153,"line_start":205,"line_end":205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115158,"byte_end":115161,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115166,"byte_end":115225,"line_start":207,"line_end":207,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115230,"byte_end":115233,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115238,"byte_end":115249,"line_start":209,"line_end":209,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115254,"byte_end":115278,"line_start":210,"line_end":210,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115283,"byte_end":115328,"line_start":211,"line_end":211,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115333,"byte_end":115336,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115341,"byte_end":115401,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115406,"byte_end":115464,"line_start":214,"line_end":214,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115469,"byte_end":115476,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115481,"byte_end":115490,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116297,"byte_end":116305,"line_start":243,"line_end":243,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115656,"byte_end":115717,"line_start":223,"line_end":223,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115722,"byte_end":115725,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115730,"byte_end":115742,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115747,"byte_end":115750,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115755,"byte_end":115819,"line_start":227,"line_end":227,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115824,"byte_end":115827,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115832,"byte_end":115924,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115929,"byte_end":115932,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115937,"byte_end":115951,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115956,"byte_end":115959,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Read signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":115964,"byte_end":116021,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116026,"byte_end":116029,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116034,"byte_end":116045,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116050,"byte_end":116074,"line_start":236,"line_end":236,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116079,"byte_end":116124,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116129,"byte_end":116132,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116137,"byte_end":116197,"line_start":239,"line_end":239,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116202,"byte_end":116263,"line_start":240,"line_end":240,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116268,"byte_end":116275,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116280,"byte_end":116289,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117122,"byte_end":117130,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::io::ReadBytesExt::read_u48","value":"pub fn read_u48<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116455,"byte_end":116519,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116524,"byte_end":116527,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116532,"byte_end":116544,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116549,"byte_end":116552,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116557,"byte_end":116621,"line_start":253,"line_end":253,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116626,"byte_end":116629,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116634,"byte_end":116726,"line_start":255,"line_end":255,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116731,"byte_end":116734,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116739,"byte_end":116753,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116758,"byte_end":116761,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 48 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116766,"byte_end":116825,"line_start":259,"line_end":259,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116830,"byte_end":116833,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116838,"byte_end":116849,"line_start":261,"line_end":261,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116854,"byte_end":116878,"line_start":262,"line_end":262,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116883,"byte_end":116928,"line_start":263,"line_end":263,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116933,"byte_end":116936,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":116941,"byte_end":117013,"line_start":265,"line_end":265,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117018,"byte_end":117088,"line_start":266,"line_end":266,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117093,"byte_end":117100,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117105,"byte_end":117114,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117943,"byte_end":117951,"line_start":295,"line_end":295,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::io::ReadBytesExt::read_i48","value":"pub fn read_i48<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117280,"byte_end":117341,"line_start":275,"line_end":275,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117346,"byte_end":117349,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117354,"byte_end":117366,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117371,"byte_end":117374,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117379,"byte_end":117443,"line_start":279,"line_end":279,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117448,"byte_end":117451,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117456,"byte_end":117548,"line_start":281,"line_end":281,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117553,"byte_end":117556,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117561,"byte_end":117575,"line_start":283,"line_end":283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117580,"byte_end":117583,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Read signed 48 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117588,"byte_end":117645,"line_start":285,"line_end":285,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117650,"byte_end":117653,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117658,"byte_end":117669,"line_start":287,"line_end":287,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117674,"byte_end":117698,"line_start":288,"line_end":288,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117703,"byte_end":117748,"line_start":289,"line_end":289,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117753,"byte_end":117756,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117761,"byte_end":117833,"line_start":291,"line_end":291,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117838,"byte_end":117909,"line_start":292,"line_end":292,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117914,"byte_end":117921,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":117926,"byte_end":117935,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118782,"byte_end":118790,"line_start":321,"line_end":321,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118101,"byte_end":118165,"line_start":301,"line_end":301,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118170,"byte_end":118173,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118178,"byte_end":118190,"line_start":303,"line_end":303,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118195,"byte_end":118198,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118203,"byte_end":118267,"line_start":305,"line_end":305,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118272,"byte_end":118275,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118280,"byte_end":118372,"line_start":307,"line_end":307,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118377,"byte_end":118380,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118385,"byte_end":118399,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118404,"byte_end":118407,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 64 bit big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118412,"byte_end":118473,"line_start":311,"line_end":311,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118478,"byte_end":118481,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118486,"byte_end":118497,"line_start":313,"line_end":313,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118502,"byte_end":118526,"line_start":314,"line_end":314,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118531,"byte_end":118576,"line_start":315,"line_end":315,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118581,"byte_end":118584,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118589,"byte_end":118673,"line_start":317,"line_end":317,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118678,"byte_end":118748,"line_start":318,"line_end":318,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118753,"byte_end":118760,"line_start":319,"line_end":319,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118765,"byte_end":118774,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119595,"byte_end":119603,"line_start":347,"line_end":347,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":118940,"byte_end":119001,"line_start":327,"line_end":327,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119006,"byte_end":119009,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119014,"byte_end":119026,"line_start":329,"line_end":329,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119031,"byte_end":119034,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119039,"byte_end":119103,"line_start":331,"line_end":331,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119108,"byte_end":119111,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119116,"byte_end":119208,"line_start":333,"line_end":333,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119213,"byte_end":119216,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119221,"byte_end":119235,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119240,"byte_end":119243,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Read a signed 64 bit big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119248,"byte_end":119306,"line_start":337,"line_end":337,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119311,"byte_end":119314,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119319,"byte_end":119330,"line_start":339,"line_end":339,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119335,"byte_end":119359,"line_start":340,"line_end":340,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119364,"byte_end":119409,"line_start":341,"line_end":341,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119414,"byte_end":119417,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119422,"byte_end":119485,"line_start":343,"line_end":343,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119490,"byte_end":119561,"line_start":344,"line_end":344,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119566,"byte_end":119573,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119578,"byte_end":119587,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120539,"byte_end":120548,"line_start":376,"line_end":376,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::io::ReadBytesExt::read_u128","value":"pub fn read_u128<T: ByteOrder>(&mut Self) -> Result<u128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119753,"byte_end":119818,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119823,"byte_end":119826,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119831,"byte_end":119843,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119848,"byte_end":119851,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119856,"byte_end":119920,"line_start":357,"line_end":357,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119925,"byte_end":119928,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":119933,"byte_end":120025,"line_start":359,"line_end":359,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120030,"byte_end":120033,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120038,"byte_end":120052,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120057,"byte_end":120060,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned 128 bit big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120065,"byte_end":120127,"line_start":363,"line_end":363,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120132,"byte_end":120135,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120140,"byte_end":120151,"line_start":365,"line_end":365,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120156,"byte_end":120180,"line_start":366,"line_end":366,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120185,"byte_end":120230,"line_start":367,"line_end":367,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120235,"byte_end":120238,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120243,"byte_end":120278,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120283,"byte_end":120338,"line_start":370,"line_end":370,"column_start":5,"column_end":60}},{"value":"/     0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120343,"byte_end":120397,"line_start":371,"line_end":371,"column_start":5,"column_end":59}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120402,"byte_end":120409,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120414,"byte_end":120505,"line_start":373,"line_end":373,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120510,"byte_end":120517,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120522,"byte_end":120531,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121384,"byte_end":121393,"line_start":402,"line_end":402,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::io::ReadBytesExt::read_i128","value":"pub fn read_i128<T: ByteOrder>(&mut Self) -> Result<i128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120701,"byte_end":120763,"line_start":382,"line_end":382,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120768,"byte_end":120771,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120776,"byte_end":120788,"line_start":384,"line_end":384,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120793,"byte_end":120796,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120801,"byte_end":120865,"line_start":386,"line_end":386,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120870,"byte_end":120873,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120878,"byte_end":120970,"line_start":388,"line_end":388,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120975,"byte_end":120978,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":120983,"byte_end":120997,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121002,"byte_end":121005,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Read a signed 128 bit big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121010,"byte_end":121069,"line_start":392,"line_end":392,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121074,"byte_end":121077,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121082,"byte_end":121093,"line_start":394,"line_end":394,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121098,"byte_end":121122,"line_start":395,"line_end":395,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121127,"byte_end":121172,"line_start":396,"line_end":396,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121177,"byte_end":121180,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121185,"byte_end":121272,"line_start":398,"line_end":398,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121277,"byte_end":121350,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121355,"byte_end":121362,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121367,"byte_end":121376,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122180,"byte_end":122189,"line_start":427,"line_end":427,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121546,"byte_end":121611,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121616,"byte_end":121619,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121624,"byte_end":121636,"line_start":410,"line_end":410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121641,"byte_end":121644,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121649,"byte_end":121713,"line_start":412,"line_end":412,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121718,"byte_end":121721,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121726,"byte_end":121818,"line_start":414,"line_end":414,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121823,"byte_end":121826,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121831,"byte_end":121845,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121850,"byte_end":121853,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121858,"byte_end":121919,"line_start":418,"line_end":418,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121924,"byte_end":121927,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121932,"byte_end":121943,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121948,"byte_end":121972,"line_start":421,"line_end":421,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":121977,"byte_end":122022,"line_start":422,"line_end":422,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122027,"byte_end":122030,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122035,"byte_end":122089,"line_start":424,"line_end":424,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122094,"byte_end":122158,"line_start":425,"line_end":425,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122163,"byte_end":122172,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123014,"byte_end":123022,"line_start":452,"line_end":452,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122383,"byte_end":122445,"line_start":433,"line_end":433,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122450,"byte_end":122453,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122458,"byte_end":122470,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122475,"byte_end":122478,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122483,"byte_end":122547,"line_start":437,"line_end":437,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122552,"byte_end":122555,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122560,"byte_end":122652,"line_start":439,"line_end":439,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122657,"byte_end":122660,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122665,"byte_end":122679,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122684,"byte_end":122687,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Read an unsigned n-byte big-endian integer from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122692,"byte_end":122753,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122758,"byte_end":122761,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122766,"byte_end":122777,"line_start":445,"line_end":445,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122782,"byte_end":122806,"line_start":446,"line_end":446,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122811,"byte_end":122856,"line_start":447,"line_end":447,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122861,"byte_end":122864,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122869,"byte_end":122923,"line_start":449,"line_end":449,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122928,"byte_end":122992,"line_start":450,"line_end":450,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":122997,"byte_end":123006,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123302,"byte_end":123314,"line_start":460,"line_end":460,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::io::ReadBytesExt::read_uint128","value":"pub fn read_uint128<T: ByteOrder>(&mut Self, usize) -> Result<u128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123215,"byte_end":123280,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123285,"byte_end":123294,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123597,"byte_end":123608,"line_start":468,"line_end":468,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::io::ReadBytesExt::read_int128","value":"pub fn read_int128<T: ByteOrder>(&mut Self, usize) -> Result<i128>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123513,"byte_end":123575,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123580,"byte_end":123589,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124570,"byte_end":124578,"line_start":499,"line_end":499,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123806,"byte_end":123879,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123884,"byte_end":123910,"line_start":475,"line_end":475,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123915,"byte_end":123918,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123923,"byte_end":123935,"line_start":477,"line_end":477,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123940,"byte_end":123943,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":123948,"byte_end":124012,"line_start":479,"line_end":479,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124017,"byte_end":124020,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124025,"byte_end":124117,"line_start":481,"line_end":481,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124122,"byte_end":124125,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124130,"byte_end":124144,"line_start":483,"line_end":483,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124149,"byte_end":124152,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian single-precision floating point number from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124157,"byte_end":124232,"line_start":485,"line_end":485,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124237,"byte_end":124240,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124245,"byte_end":124256,"line_start":487,"line_end":487,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124261,"byte_end":124278,"line_start":488,"line_end":488,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124283,"byte_end":124307,"line_start":489,"line_end":489,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124312,"byte_end":124315,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124320,"byte_end":124365,"line_start":491,"line_end":491,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124370,"byte_end":124373,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124378,"byte_end":124413,"line_start":493,"line_end":493,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124418,"byte_end":124449,"line_start":494,"line_end":494,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124454,"byte_end":124461,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124466,"byte_end":124536,"line_start":496,"line_end":496,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124541,"byte_end":124548,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124553,"byte_end":124562,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125516,"byte_end":125524,"line_start":530,"line_end":530,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124728,"byte_end":124801,"line_start":505,"line_end":505,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124806,"byte_end":124832,"line_start":506,"line_end":506,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124837,"byte_end":124840,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124845,"byte_end":124857,"line_start":508,"line_end":508,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124862,"byte_end":124865,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124870,"byte_end":124934,"line_start":510,"line_end":510,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124939,"byte_end":124942,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":124947,"byte_end":125039,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125044,"byte_end":125047,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125052,"byte_end":125066,"line_start":514,"line_end":514,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125071,"byte_end":125074,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Read a big-endian double-precision floating point number from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125079,"byte_end":125154,"line_start":516,"line_end":516,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125159,"byte_end":125162,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125167,"byte_end":125178,"line_start":518,"line_end":518,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125183,"byte_end":125200,"line_start":519,"line_end":519,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125205,"byte_end":125229,"line_start":520,"line_end":520,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125234,"byte_end":125237,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125242,"byte_end":125287,"line_start":522,"line_end":522,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125292,"byte_end":125295,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125300,"byte_end":125335,"line_start":524,"line_end":524,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125340,"byte_end":125395,"line_start":525,"line_end":525,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125400,"byte_end":125407,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125412,"byte_end":125482,"line_start":527,"line_end":527,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125487,"byte_end":125494,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125499,"byte_end":125508,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126560,"byte_end":126573,"line_start":562,"line_end":562,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"pub fn read_u16_into<T: ByteOrder>(&mut Self, &mut [u16]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 16 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125674,"byte_end":125742,"line_start":536,"line_end":536,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125747,"byte_end":125758,"line_start":537,"line_end":537,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125763,"byte_end":125766,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125771,"byte_end":125844,"line_start":539,"line_end":539,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125849,"byte_end":125916,"line_start":540,"line_end":540,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125921,"byte_end":125924,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125929,"byte_end":125941,"line_start":542,"line_end":542,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125946,"byte_end":125949,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":125954,"byte_end":126018,"line_start":544,"line_end":544,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126023,"byte_end":126026,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126031,"byte_end":126123,"line_start":546,"line_end":546,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126128,"byte_end":126131,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126136,"byte_end":126150,"line_start":548,"line_end":548,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126155,"byte_end":126158,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126163,"byte_end":126236,"line_start":550,"line_end":550,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126241,"byte_end":126244,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126249,"byte_end":126260,"line_start":552,"line_end":552,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126265,"byte_end":126289,"line_start":553,"line_end":553,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126294,"byte_end":126339,"line_start":554,"line_end":554,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126344,"byte_end":126347,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126352,"byte_end":126400,"line_start":556,"line_end":556,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126405,"byte_end":126430,"line_start":557,"line_end":557,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126435,"byte_end":126489,"line_start":558,"line_end":558,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126494,"byte_end":126526,"line_start":559,"line_end":559,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126531,"byte_end":126538,"line_start":560,"line_end":560,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126543,"byte_end":126552,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127698,"byte_end":127711,"line_start":597,"line_end":597,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"pub fn read_u32_into<T: ByteOrder>(&mut Self, &mut [u32]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 32 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126800,"byte_end":126868,"line_start":571,"line_end":571,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126873,"byte_end":126884,"line_start":572,"line_end":572,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126889,"byte_end":126892,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126897,"byte_end":126970,"line_start":574,"line_end":574,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":126975,"byte_end":127042,"line_start":575,"line_end":575,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127047,"byte_end":127050,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127055,"byte_end":127067,"line_start":577,"line_end":577,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127072,"byte_end":127075,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127080,"byte_end":127144,"line_start":579,"line_end":579,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127149,"byte_end":127152,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127157,"byte_end":127249,"line_start":581,"line_end":581,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127254,"byte_end":127257,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127262,"byte_end":127276,"line_start":583,"line_end":583,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127281,"byte_end":127284,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127289,"byte_end":127362,"line_start":585,"line_end":585,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127367,"byte_end":127370,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127375,"byte_end":127386,"line_start":587,"line_end":587,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127391,"byte_end":127415,"line_start":588,"line_end":588,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127420,"byte_end":127465,"line_start":589,"line_end":589,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127470,"byte_end":127473,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127478,"byte_end":127538,"line_start":591,"line_end":591,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127543,"byte_end":127568,"line_start":592,"line_end":592,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127573,"byte_end":127627,"line_start":593,"line_end":593,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127632,"byte_end":127664,"line_start":594,"line_end":594,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127669,"byte_end":127676,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127681,"byte_end":127690,"line_start":596,"line_end":596,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128895,"byte_end":128908,"line_start":635,"line_end":635,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"pub fn read_u64_into<T: ByteOrder>(&mut Self, &mut [u64]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 64 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":127938,"byte_end":128006,"line_start":606,"line_end":606,"column_start":5,"column_end":73}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128011,"byte_end":128022,"line_start":607,"line_end":607,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128027,"byte_end":128030,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128035,"byte_end":128108,"line_start":609,"line_end":609,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128113,"byte_end":128180,"line_start":610,"line_end":610,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128185,"byte_end":128188,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128193,"byte_end":128205,"line_start":612,"line_end":612,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128210,"byte_end":128213,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128218,"byte_end":128282,"line_start":614,"line_end":614,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128287,"byte_end":128290,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128295,"byte_end":128387,"line_start":616,"line_end":616,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128392,"byte_end":128395,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128400,"byte_end":128414,"line_start":618,"line_end":618,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128419,"byte_end":128422,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 64 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128427,"byte_end":128500,"line_start":620,"line_end":620,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128505,"byte_end":128508,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128513,"byte_end":128524,"line_start":622,"line_end":622,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128529,"byte_end":128553,"line_start":623,"line_end":623,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128558,"byte_end":128603,"line_start":624,"line_end":624,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128608,"byte_end":128611,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128616,"byte_end":128651,"line_start":626,"line_end":626,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128656,"byte_end":128687,"line_start":627,"line_end":627,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128692,"byte_end":128723,"line_start":628,"line_end":628,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128728,"byte_end":128735,"line_start":629,"line_end":629,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128740,"byte_end":128765,"line_start":630,"line_end":630,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128770,"byte_end":128824,"line_start":631,"line_end":631,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128829,"byte_end":128861,"line_start":632,"line_end":632,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128866,"byte_end":128873,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":128878,"byte_end":128887,"line_start":634,"line_end":634,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130143,"byte_end":130157,"line_start":673,"line_end":673,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::io::ReadBytesExt::read_u128_into","value":"pub fn read_u128_into<T: ByteOrder>(&mut Self, &mut [u128]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 128 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of unsigned 128 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129135,"byte_end":129204,"line_start":644,"line_end":644,"column_start":5,"column_end":74}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129209,"byte_end":129220,"line_start":645,"line_end":645,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129225,"byte_end":129228,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129233,"byte_end":129306,"line_start":647,"line_end":647,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129311,"byte_end":129378,"line_start":648,"line_end":648,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129383,"byte_end":129386,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129391,"byte_end":129403,"line_start":650,"line_end":650,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129408,"byte_end":129411,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129416,"byte_end":129480,"line_start":652,"line_end":652,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129485,"byte_end":129488,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129493,"byte_end":129585,"line_start":654,"line_end":654,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129590,"byte_end":129593,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129598,"byte_end":129612,"line_start":656,"line_end":656,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129617,"byte_end":129620,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of unsigned 128 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129625,"byte_end":129699,"line_start":658,"line_end":658,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129704,"byte_end":129707,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129712,"byte_end":129723,"line_start":660,"line_end":660,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129728,"byte_end":129752,"line_start":661,"line_end":661,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129757,"byte_end":129802,"line_start":662,"line_end":662,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129807,"byte_end":129810,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129815,"byte_end":129850,"line_start":664,"line_end":664,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129855,"byte_end":129910,"line_start":665,"line_end":665,"column_start":5,"column_end":60}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129915,"byte_end":129970,"line_start":666,"line_end":666,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129975,"byte_end":129982,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":129987,"byte_end":130012,"line_start":668,"line_end":668,"column_start":5,"column_end":30}},{"value":"/ rdr.read_u128_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130017,"byte_end":130072,"line_start":669,"line_end":669,"column_start":5,"column_end":60}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130077,"byte_end":130109,"line_start":670,"line_end":670,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130114,"byte_end":130121,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130126,"byte_end":130135,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131612,"byte_end":131624,"line_start":716,"line_end":716,"column_start":8,"column_end":20},"name":"read_i8_into","qualname":"::io::ReadBytesExt::read_i8_into","value":"pub fn read_i8_into(&mut Self, &mut [i8]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 8 bit integers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 8 bit integers from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130409,"byte_end":130482,"line_start":685,"line_end":685,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130487,"byte_end":130490,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130495,"byte_end":130568,"line_start":687,"line_end":687,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130573,"byte_end":130640,"line_start":688,"line_end":688,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130645,"byte_end":130648,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Note that since each `i8` is a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130653,"byte_end":130726,"line_start":690,"line_end":690,"column_start":5,"column_end":78}},{"value":"/ are used. This method is included because it provides a safe, simple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130731,"byte_end":130803,"line_start":691,"line_end":691,"column_start":5,"column_end":77}},{"value":"/ way for the caller to read into a `&mut [i8]` buffer. (Without this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130808,"byte_end":130879,"line_start":692,"line_end":692,"column_start":5,"column_end":76}},{"value":"/ method, the caller would have to either use `unsafe` code or convert","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130884,"byte_end":130956,"line_start":693,"line_end":693,"column_start":5,"column_end":77}},{"value":"/ each byte to `i8` individually.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":130961,"byte_end":130997,"line_start":694,"line_end":694,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131002,"byte_end":131005,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131010,"byte_end":131022,"line_start":696,"line_end":696,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131027,"byte_end":131030,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131035,"byte_end":131099,"line_start":698,"line_end":698,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131104,"byte_end":131107,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131112,"byte_end":131204,"line_start":700,"line_end":700,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131209,"byte_end":131212,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131217,"byte_end":131231,"line_start":702,"line_end":702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131236,"byte_end":131239,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 8 bit integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131244,"byte_end":131303,"line_start":704,"line_end":704,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131308,"byte_end":131311,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131316,"byte_end":131327,"line_start":706,"line_end":706,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131332,"byte_end":131356,"line_start":707,"line_end":707,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131361,"byte_end":131406,"line_start":708,"line_end":708,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131411,"byte_end":131414,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 251, 3]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131419,"byte_end":131466,"line_start":710,"line_end":710,"column_start":5,"column_end":52}},{"value":"/ let mut dst = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131471,"byte_end":131496,"line_start":711,"line_end":711,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i8_into(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131501,"byte_end":131541,"line_start":712,"line_end":712,"column_start":5,"column_end":45}},{"value":"/ assert_eq!([2, -5, 3], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131546,"byte_end":131578,"line_start":713,"line_end":713,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131583,"byte_end":131590,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131595,"byte_end":131604,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132641,"byte_end":132654,"line_start":747,"line_end":747,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"pub fn read_i16_into<T: ByteOrder>(&mut Self, &mut [i16]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 16 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131759,"byte_end":131825,"line_start":721,"line_end":721,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131830,"byte_end":131841,"line_start":722,"line_end":722,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131846,"byte_end":131849,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131854,"byte_end":131927,"line_start":724,"line_end":724,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":131932,"byte_end":131999,"line_start":725,"line_end":725,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132004,"byte_end":132007,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132012,"byte_end":132024,"line_start":727,"line_end":727,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132029,"byte_end":132032,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132037,"byte_end":132101,"line_start":729,"line_end":729,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132106,"byte_end":132109,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132114,"byte_end":132206,"line_start":731,"line_end":731,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132211,"byte_end":132214,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132219,"byte_end":132233,"line_start":733,"line_end":733,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132238,"byte_end":132241,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132246,"byte_end":132317,"line_start":735,"line_end":735,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132322,"byte_end":132325,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132330,"byte_end":132341,"line_start":737,"line_end":737,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132346,"byte_end":132370,"line_start":738,"line_end":738,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132375,"byte_end":132420,"line_start":739,"line_end":739,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132425,"byte_end":132428,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132433,"byte_end":132481,"line_start":741,"line_end":741,"column_start":5,"column_end":53}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132486,"byte_end":132511,"line_start":742,"line_end":742,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i16_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132516,"byte_end":132570,"line_start":743,"line_end":743,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132575,"byte_end":132607,"line_start":744,"line_end":744,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132612,"byte_end":132619,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132624,"byte_end":132633,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133775,"byte_end":133788,"line_start":782,"line_end":782,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"pub fn read_i32_into<T: ByteOrder>(&mut Self, &mut [i32]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 32 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132881,"byte_end":132947,"line_start":756,"line_end":756,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132952,"byte_end":132963,"line_start":757,"line_end":757,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132968,"byte_end":132971,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":132976,"byte_end":133049,"line_start":759,"line_end":759,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133054,"byte_end":133121,"line_start":760,"line_end":760,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133126,"byte_end":133129,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133134,"byte_end":133146,"line_start":762,"line_end":762,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133151,"byte_end":133154,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133159,"byte_end":133223,"line_start":764,"line_end":764,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133228,"byte_end":133231,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133236,"byte_end":133328,"line_start":766,"line_end":766,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133333,"byte_end":133336,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133341,"byte_end":133355,"line_start":768,"line_end":768,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133360,"byte_end":133363,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 32 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133368,"byte_end":133439,"line_start":770,"line_end":770,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133444,"byte_end":133447,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133452,"byte_end":133463,"line_start":772,"line_end":772,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133468,"byte_end":133492,"line_start":773,"line_end":773,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133497,"byte_end":133542,"line_start":774,"line_end":774,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133547,"byte_end":133550,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133555,"byte_end":133615,"line_start":776,"line_end":776,"column_start":5,"column_end":65}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133620,"byte_end":133645,"line_start":777,"line_end":777,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133650,"byte_end":133704,"line_start":778,"line_end":778,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133709,"byte_end":133741,"line_start":779,"line_end":779,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133746,"byte_end":133753,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":133758,"byte_end":133767,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134968,"byte_end":134981,"line_start":820,"line_end":820,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"pub fn read_i64_into<T: ByteOrder>(&mut Self, &mut [i64]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 64 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134015,"byte_end":134081,"line_start":791,"line_end":791,"column_start":5,"column_end":71}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134086,"byte_end":134097,"line_start":792,"line_end":792,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134102,"byte_end":134105,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134110,"byte_end":134183,"line_start":794,"line_end":794,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134188,"byte_end":134255,"line_start":795,"line_end":795,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134260,"byte_end":134263,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134268,"byte_end":134280,"line_start":797,"line_end":797,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134285,"byte_end":134288,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134293,"byte_end":134357,"line_start":799,"line_end":799,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134362,"byte_end":134365,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134370,"byte_end":134462,"line_start":801,"line_end":801,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134467,"byte_end":134470,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134475,"byte_end":134489,"line_start":803,"line_end":803,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134494,"byte_end":134497,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 64 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134502,"byte_end":134573,"line_start":805,"line_end":805,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134578,"byte_end":134581,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134586,"byte_end":134597,"line_start":807,"line_end":807,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134602,"byte_end":134626,"line_start":808,"line_end":808,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134631,"byte_end":134676,"line_start":809,"line_end":809,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134681,"byte_end":134684,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134689,"byte_end":134724,"line_start":811,"line_end":811,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134729,"byte_end":134760,"line_start":812,"line_end":812,"column_start":5,"column_end":36}},{"value":"/     0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134765,"byte_end":134796,"line_start":813,"line_end":813,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134801,"byte_end":134808,"line_start":814,"line_end":814,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134813,"byte_end":134838,"line_start":815,"line_end":815,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134843,"byte_end":134897,"line_start":816,"line_end":816,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134902,"byte_end":134934,"line_start":817,"line_end":817,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134939,"byte_end":134946,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":134951,"byte_end":134960,"line_start":819,"line_end":819,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136212,"byte_end":136226,"line_start":858,"line_end":858,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::io::ReadBytesExt::read_i128_into","value":"pub fn read_i128_into<T: ByteOrder>(&mut Self, &mut [i128]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 128 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of signed 128 bit integers from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135208,"byte_end":135275,"line_start":829,"line_end":829,"column_start":5,"column_end":72}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135280,"byte_end":135291,"line_start":830,"line_end":830,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135296,"byte_end":135299,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135304,"byte_end":135377,"line_start":832,"line_end":832,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135382,"byte_end":135449,"line_start":833,"line_end":833,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135454,"byte_end":135457,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135462,"byte_end":135474,"line_start":835,"line_end":835,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135479,"byte_end":135482,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135487,"byte_end":135551,"line_start":837,"line_end":837,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135556,"byte_end":135559,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135564,"byte_end":135656,"line_start":839,"line_end":839,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135661,"byte_end":135664,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135669,"byte_end":135683,"line_start":841,"line_end":841,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135688,"byte_end":135691,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of signed 128 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135696,"byte_end":135768,"line_start":843,"line_end":843,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135773,"byte_end":135776,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135781,"byte_end":135792,"line_start":845,"line_end":845,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135797,"byte_end":135821,"line_start":846,"line_end":846,"column_start":5,"column_end":29}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135826,"byte_end":135871,"line_start":847,"line_end":847,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135876,"byte_end":135879,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135884,"byte_end":135919,"line_start":849,"line_end":849,"column_start":5,"column_end":40}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135924,"byte_end":135979,"line_start":850,"line_end":850,"column_start":5,"column_end":60}},{"value":"/     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":135984,"byte_end":136039,"line_start":851,"line_end":851,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136044,"byte_end":136051,"line_start":852,"line_end":852,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136056,"byte_end":136081,"line_start":853,"line_end":853,"column_start":5,"column_end":30}},{"value":"/ rdr.read_i128_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136086,"byte_end":136141,"line_start":854,"line_end":854,"column_start":5,"column_end":60}},{"value":"/ assert_eq!([517, 768], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136146,"byte_end":136178,"line_start":855,"line_end":855,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136183,"byte_end":136190,"line_start":856,"line_end":856,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136195,"byte_end":136204,"line_start":857,"line_end":857,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137534,"byte_end":137547,"line_start":902,"line_end":902,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"pub fn read_f32_into<T: ByteOrder>(&mut Self, &mut [f32]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136478,"byte_end":136545,"line_start":870,"line_end":870,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136550,"byte_end":136595,"line_start":871,"line_end":871,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136600,"byte_end":136603,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136608,"byte_end":136681,"line_start":873,"line_end":873,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136686,"byte_end":136753,"line_start":874,"line_end":874,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136758,"byte_end":136761,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136766,"byte_end":136778,"line_start":876,"line_end":876,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136783,"byte_end":136786,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136791,"byte_end":136855,"line_start":878,"line_end":878,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136860,"byte_end":136863,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136868,"byte_end":136960,"line_start":880,"line_end":880,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136965,"byte_end":136968,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136973,"byte_end":136987,"line_start":882,"line_end":882,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":136992,"byte_end":136995,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137000,"byte_end":137072,"line_start":884,"line_end":884,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137077,"byte_end":137095,"line_start":885,"line_end":885,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137100,"byte_end":137103,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137108,"byte_end":137119,"line_start":887,"line_end":887,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137124,"byte_end":137141,"line_start":888,"line_end":888,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137146,"byte_end":137170,"line_start":889,"line_end":889,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137175,"byte_end":137178,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137183,"byte_end":137228,"line_start":891,"line_end":891,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137233,"byte_end":137236,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137241,"byte_end":137276,"line_start":893,"line_end":893,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137281,"byte_end":137312,"line_start":894,"line_end":894,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137317,"byte_end":137348,"line_start":895,"line_end":895,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137353,"byte_end":137360,"line_start":896,"line_end":896,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137365,"byte_end":137392,"line_start":897,"line_end":897,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137397,"byte_end":137451,"line_start":898,"line_end":898,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137456,"byte_end":137500,"line_start":899,"line_end":899,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137505,"byte_end":137512,"line_start":900,"line_end":900,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137517,"byte_end":137526,"line_start":901,"line_end":901,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139024,"byte_end":139047,"line_start":948,"line_end":948,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked<T: ByteOrder>(&mut Self, &mut [f32])\n-> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137774,"byte_end":137793,"line_start":911,"line_end":911,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137798,"byte_end":137801,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137806,"byte_end":137865,"line_start":913,"line_end":913,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137870,"byte_end":137873,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137878,"byte_end":137945,"line_start":915,"line_end":915,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":137950,"byte_end":137995,"line_start":916,"line_end":916,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138000,"byte_end":138003,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138008,"byte_end":138081,"line_start":918,"line_end":918,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138086,"byte_end":138153,"line_start":919,"line_end":919,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138158,"byte_end":138161,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138166,"byte_end":138178,"line_start":921,"line_end":921,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138183,"byte_end":138186,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138191,"byte_end":138255,"line_start":923,"line_end":923,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138260,"byte_end":138263,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138268,"byte_end":138360,"line_start":925,"line_end":925,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138365,"byte_end":138368,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138373,"byte_end":138387,"line_start":927,"line_end":927,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138392,"byte_end":138395,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138400,"byte_end":138472,"line_start":929,"line_end":929,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138477,"byte_end":138495,"line_start":930,"line_end":930,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138500,"byte_end":138503,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138508,"byte_end":138519,"line_start":932,"line_end":932,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138524,"byte_end":138541,"line_start":933,"line_end":933,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138546,"byte_end":138570,"line_start":934,"line_end":934,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138575,"byte_end":138578,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138583,"byte_end":138628,"line_start":936,"line_end":936,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138633,"byte_end":138636,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138641,"byte_end":138676,"line_start":938,"line_end":938,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x49, 0x0f, 0xdb,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138681,"byte_end":138712,"line_start":939,"line_end":939,"column_start":5,"column_end":36}},{"value":"/     0x3f, 0x80, 0x00, 0x00,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138717,"byte_end":138748,"line_start":940,"line_end":940,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138753,"byte_end":138760,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138765,"byte_end":138792,"line_start":942,"line_end":942,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138797,"byte_end":138861,"line_start":943,"line_end":943,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f32::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138866,"byte_end":138910,"line_start":944,"line_end":944,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138915,"byte_end":138922,"line_start":945,"line_end":945,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138927,"byte_end":138936,"line_start":946,"line_end":946,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":138941,"byte_end":139016,"line_start":947,"line_end":947,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140281,"byte_end":140294,"line_start":987,"line_end":987,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"pub fn read_f64_into<T: ByteOrder>(&mut Self, &mut [f64]) -> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139177,"byte_end":139244,"line_start":955,"line_end":955,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139249,"byte_end":139294,"line_start":956,"line_end":956,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139299,"byte_end":139302,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139307,"byte_end":139380,"line_start":958,"line_end":958,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139385,"byte_end":139452,"line_start":959,"line_end":959,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139457,"byte_end":139460,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139465,"byte_end":139477,"line_start":961,"line_end":961,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139482,"byte_end":139485,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139490,"byte_end":139554,"line_start":963,"line_end":963,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139559,"byte_end":139562,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139567,"byte_end":139659,"line_start":965,"line_end":965,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139664,"byte_end":139667,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139672,"byte_end":139686,"line_start":967,"line_end":967,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139691,"byte_end":139694,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139699,"byte_end":139771,"line_start":969,"line_end":969,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139776,"byte_end":139794,"line_start":970,"line_end":970,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139799,"byte_end":139802,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139807,"byte_end":139818,"line_start":972,"line_end":972,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139823,"byte_end":139840,"line_start":973,"line_end":973,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139845,"byte_end":139869,"line_start":974,"line_end":974,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139874,"byte_end":139877,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139882,"byte_end":139927,"line_start":976,"line_end":976,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139932,"byte_end":139935,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139940,"byte_end":139975,"line_start":978,"line_end":978,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":139980,"byte_end":140035,"line_start":979,"line_end":979,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140040,"byte_end":140095,"line_start":980,"line_end":980,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140100,"byte_end":140107,"line_start":981,"line_end":981,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140112,"byte_end":140139,"line_start":982,"line_end":982,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140144,"byte_end":140198,"line_start":983,"line_end":983,"column_start":5,"column_end":59}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140203,"byte_end":140247,"line_start":984,"line_end":984,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140252,"byte_end":140259,"line_start":985,"line_end":985,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140264,"byte_end":140273,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142070,"byte_end":142093,"line_start":1039,"line_end":1039,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked<T: ByteOrder>(&mut Self, &mut [f64])\n-> Result<()>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140521,"byte_end":140540,"line_start":996,"line_end":996,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140545,"byte_end":140548,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140553,"byte_end":140612,"line_start":998,"line_end":998,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140617,"byte_end":140620,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ Reads a sequence of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140625,"byte_end":140692,"line_start":1000,"line_end":1000,"column_start":5,"column_end":72}},{"value":"/ point numbers from the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140697,"byte_end":140742,"line_start":1001,"line_end":1001,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140747,"byte_end":140750,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ The given buffer is either filled completely or an error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140755,"byte_end":140828,"line_start":1003,"line_end":1003,"column_start":5,"column_end":78}},{"value":"/ If an error is returned, the contents of `dst` are unspecified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140833,"byte_end":140900,"line_start":1004,"line_end":1004,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140905,"byte_end":140908,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140913,"byte_end":140925,"line_start":1006,"line_end":1006,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140930,"byte_end":140933,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because there are no guarantees made about the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":140938,"byte_end":141010,"line_start":1008,"line_end":1008,"column_start":5,"column_end":77}},{"value":"/ floating point values. In particular, this method does not check for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141015,"byte_end":141087,"line_start":1009,"line_end":1009,"column_start":5,"column_end":77}},{"value":"/ signaling NaNs, which may result in undefined behavior.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141092,"byte_end":141151,"line_start":1010,"line_end":1010,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141156,"byte_end":141159,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141164,"byte_end":141176,"line_start":1012,"line_end":1012,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141181,"byte_end":141184,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141189,"byte_end":141253,"line_start":1014,"line_end":1014,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141258,"byte_end":141261,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141266,"byte_end":141358,"line_start":1016,"line_end":1016,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141363,"byte_end":141366,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141371,"byte_end":141385,"line_start":1018,"line_end":1018,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141390,"byte_end":141393,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ Read a sequence of big-endian single-precision floating point number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141398,"byte_end":141470,"line_start":1020,"line_end":1020,"column_start":5,"column_end":77}},{"value":"/ from a `Read`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141475,"byte_end":141493,"line_start":1021,"line_end":1021,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141498,"byte_end":141501,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141506,"byte_end":141517,"line_start":1023,"line_end":1023,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141522,"byte_end":141539,"line_start":1024,"line_end":1024,"column_start":5,"column_end":22}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141544,"byte_end":141568,"line_start":1025,"line_end":1025,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141573,"byte_end":141576,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141581,"byte_end":141626,"line_start":1027,"line_end":1027,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141631,"byte_end":141634,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ let mut rdr = Cursor::new(vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141639,"byte_end":141674,"line_start":1029,"line_end":1029,"column_start":5,"column_end":40}},{"value":"/     0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141679,"byte_end":141734,"line_start":1030,"line_end":1030,"column_start":5,"column_end":60}},{"value":"/     0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141739,"byte_end":141794,"line_start":1031,"line_end":1031,"column_start":5,"column_end":60}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141799,"byte_end":141806,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}},{"value":"/ let mut dst = [0.0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141811,"byte_end":141838,"line_start":1033,"line_end":1033,"column_start":5,"column_end":32}},{"value":"/ rdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141843,"byte_end":141907,"line_start":1034,"line_end":1034,"column_start":5,"column_end":69}},{"value":"/ assert_eq!([f64::consts::PI, 1.0], dst);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141912,"byte_end":141956,"line_start":1035,"line_end":1035,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141961,"byte_end":141968,"line_start":1036,"line_end":1036,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141973,"byte_end":141982,"line_start":1037,"line_end":1037,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":141987,"byte_end":142062,"line_start":1038,"line_end":1038,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143145,"byte_end":143158,"line_start":1073,"line_end":1073,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends [`Write`] with methods for writing numbers. (For `std::io`.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142359,"byte_end":142431,"line_start":1051,"line_end":1051,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142432,"byte_end":142435,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142436,"byte_end":142514,"line_start":1053,"line_end":1053,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142515,"byte_end":142593,"line_start":1054,"line_end":1054,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142594,"byte_end":142664,"line_start":1055,"line_end":1055,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142665,"byte_end":142668,"line_start":1056,"line_end":1056,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142669,"byte_end":142683,"line_start":1057,"line_end":1057,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142684,"byte_end":142687,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a [`Write`]:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142688,"byte_end":142749,"line_start":1059,"line_end":1059,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142750,"byte_end":142753,"line_start":1060,"line_end":1060,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142754,"byte_end":142765,"line_start":1061,"line_end":1061,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142766,"byte_end":142812,"line_start":1062,"line_end":1062,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142813,"byte_end":142816,"line_start":1063,"line_end":1063,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142817,"byte_end":142842,"line_start":1064,"line_end":1064,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142843,"byte_end":142888,"line_start":1065,"line_end":1065,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142889,"byte_end":142934,"line_start":1066,"line_end":1066,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142935,"byte_end":142973,"line_start":1067,"line_end":1067,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142974,"byte_end":142981,"line_start":1068,"line_end":1068,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142982,"byte_end":142985,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142986,"byte_end":143024,"line_start":1070,"line_end":1070,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143025,"byte_end":143069,"line_start":1071,"line_end":1071,"column_start":1,"column_end":45}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143070,"byte_end":143134,"line_start":1072,"line_end":1072,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143912,"byte_end":143920,"line_start":1098,"line_end":1098,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143176,"byte_end":143238,"line_start":1074,"line_end":1074,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143243,"byte_end":143246,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143251,"byte_end":143323,"line_start":1076,"line_end":1076,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143328,"byte_end":143374,"line_start":1077,"line_end":1077,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143379,"byte_end":143382,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143387,"byte_end":143399,"line_start":1079,"line_end":1079,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143404,"byte_end":143407,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143412,"byte_end":143476,"line_start":1081,"line_end":1081,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143481,"byte_end":143484,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143489,"byte_end":143581,"line_start":1083,"line_end":1083,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143586,"byte_end":143589,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143594,"byte_end":143608,"line_start":1085,"line_end":1085,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143613,"byte_end":143616,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 8 bit integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143621,"byte_end":143668,"line_start":1087,"line_end":1087,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143673,"byte_end":143676,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143681,"byte_end":143692,"line_start":1089,"line_end":1089,"column_start":5,"column_end":16}},{"value":"/ use byteorder::WriteBytesExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143697,"byte_end":143730,"line_start":1090,"line_end":1090,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143735,"byte_end":143738,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143743,"byte_end":143772,"line_start":1092,"line_end":1092,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u8(2).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143777,"byte_end":143806,"line_start":1093,"line_end":1093,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u8(5).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143811,"byte_end":143840,"line_start":1094,"line_end":1094,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(wtr, b\"\\x02\\x05\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143845,"byte_end":143878,"line_start":1095,"line_end":1095,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143883,"byte_end":143890,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143895,"byte_end":143904,"line_start":1097,"line_end":1097,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144727,"byte_end":144735,"line_start":1126,"line_end":1126,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143995,"byte_end":144054,"line_start":1102,"line_end":1102,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144059,"byte_end":144062,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144067,"byte_end":144139,"line_start":1104,"line_end":1104,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144144,"byte_end":144190,"line_start":1105,"line_end":1105,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144195,"byte_end":144198,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144203,"byte_end":144215,"line_start":1107,"line_end":1107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144220,"byte_end":144223,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144228,"byte_end":144292,"line_start":1109,"line_end":1109,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144297,"byte_end":144300,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144305,"byte_end":144397,"line_start":1111,"line_end":1111,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144402,"byte_end":144405,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144410,"byte_end":144424,"line_start":1113,"line_end":1113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144429,"byte_end":144432,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ Write signed 8 bit integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144437,"byte_end":144482,"line_start":1115,"line_end":1115,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144487,"byte_end":144490,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144495,"byte_end":144506,"line_start":1117,"line_end":1117,"column_start":5,"column_end":16}},{"value":"/ use byteorder::WriteBytesExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144511,"byte_end":144544,"line_start":1118,"line_end":1118,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144549,"byte_end":144552,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144557,"byte_end":144586,"line_start":1120,"line_end":1120,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i8(2).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144591,"byte_end":144620,"line_start":1121,"line_end":1121,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i8(-5).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144625,"byte_end":144655,"line_start":1122,"line_end":1122,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(wtr, b\"\\x02\\xfb\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144660,"byte_end":144693,"line_start":1123,"line_end":1123,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144698,"byte_end":144705,"line_start":1124,"line_end":1124,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144710,"byte_end":144719,"line_start":1125,"line_end":1125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145482,"byte_end":145491,"line_start":1151,"line_end":1151,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144816,"byte_end":144879,"line_start":1130,"line_end":1130,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144884,"byte_end":144887,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144892,"byte_end":144904,"line_start":1132,"line_end":1132,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144909,"byte_end":144912,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144917,"byte_end":144981,"line_start":1134,"line_end":1134,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144986,"byte_end":144989,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":144994,"byte_end":145086,"line_start":1136,"line_end":1136,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145091,"byte_end":145094,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145099,"byte_end":145113,"line_start":1138,"line_end":1138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145118,"byte_end":145121,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 16 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145126,"byte_end":145185,"line_start":1140,"line_end":1140,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145190,"byte_end":145193,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145198,"byte_end":145209,"line_start":1142,"line_end":1142,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145214,"byte_end":145260,"line_start":1143,"line_end":1143,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145265,"byte_end":145268,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145273,"byte_end":145302,"line_start":1145,"line_end":1145,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145307,"byte_end":145352,"line_start":1146,"line_end":1146,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145357,"byte_end":145402,"line_start":1147,"line_end":1147,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145407,"byte_end":145448,"line_start":1148,"line_end":1148,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145453,"byte_end":145460,"line_start":1149,"line_end":1149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145465,"byte_end":145474,"line_start":1150,"line_end":1150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146308,"byte_end":146317,"line_start":1178,"line_end":1178,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145646,"byte_end":145706,"line_start":1157,"line_end":1157,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145711,"byte_end":145714,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145719,"byte_end":145731,"line_start":1159,"line_end":1159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145736,"byte_end":145739,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145744,"byte_end":145808,"line_start":1161,"line_end":1161,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145813,"byte_end":145816,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145821,"byte_end":145913,"line_start":1163,"line_end":1163,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145918,"byte_end":145921,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145926,"byte_end":145940,"line_start":1165,"line_end":1165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145945,"byte_end":145948,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Write signed 16 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":145953,"byte_end":146010,"line_start":1167,"line_end":1167,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146015,"byte_end":146018,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146023,"byte_end":146034,"line_start":1169,"line_end":1169,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146039,"byte_end":146085,"line_start":1170,"line_end":1170,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146090,"byte_end":146093,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146098,"byte_end":146127,"line_start":1172,"line_end":1172,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i16::<BigEndian>(193).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146132,"byte_end":146177,"line_start":1173,"line_end":1173,"column_start":5,"column_end":50}},{"value":"/ wtr.write_i16::<BigEndian>(-132).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146182,"byte_end":146228,"line_start":1174,"line_end":1174,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146233,"byte_end":146274,"line_start":1175,"line_end":1175,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146279,"byte_end":146286,"line_start":1176,"line_end":1176,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146291,"byte_end":146300,"line_start":1177,"line_end":1177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147149,"byte_end":147158,"line_start":1205,"line_end":1205,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"pub fn write_u24<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146472,"byte_end":146535,"line_start":1184,"line_end":1184,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146540,"byte_end":146543,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146548,"byte_end":146560,"line_start":1186,"line_end":1186,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146565,"byte_end":146568,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146573,"byte_end":146637,"line_start":1188,"line_end":1188,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146642,"byte_end":146645,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146650,"byte_end":146742,"line_start":1190,"line_end":1190,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146747,"byte_end":146750,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146755,"byte_end":146769,"line_start":1192,"line_end":1192,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146774,"byte_end":146777,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 24 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146782,"byte_end":146841,"line_start":1194,"line_end":1194,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146846,"byte_end":146849,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146854,"byte_end":146865,"line_start":1196,"line_end":1196,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146870,"byte_end":146916,"line_start":1197,"line_end":1197,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146921,"byte_end":146924,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146929,"byte_end":146958,"line_start":1199,"line_end":1199,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u24::<BigEndian>(267).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":146963,"byte_end":147008,"line_start":1200,"line_end":1200,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u24::<BigEndian>(120111).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147013,"byte_end":147061,"line_start":1201,"line_end":1201,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147066,"byte_end":147115,"line_start":1202,"line_end":1202,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147120,"byte_end":147127,"line_start":1203,"line_end":1203,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147132,"byte_end":147141,"line_start":1204,"line_end":1204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147988,"byte_end":147997,"line_start":1232,"line_end":1232,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"pub fn write_i24<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147313,"byte_end":147373,"line_start":1211,"line_end":1211,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147378,"byte_end":147381,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147386,"byte_end":147398,"line_start":1213,"line_end":1213,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147403,"byte_end":147406,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147411,"byte_end":147475,"line_start":1215,"line_end":1215,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147480,"byte_end":147483,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147488,"byte_end":147580,"line_start":1217,"line_end":1217,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147585,"byte_end":147588,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147593,"byte_end":147607,"line_start":1219,"line_end":1219,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147612,"byte_end":147615,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ Write signed 24 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147620,"byte_end":147677,"line_start":1221,"line_end":1221,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147682,"byte_end":147685,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147690,"byte_end":147701,"line_start":1223,"line_end":1223,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147706,"byte_end":147752,"line_start":1224,"line_end":1224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147757,"byte_end":147760,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147765,"byte_end":147794,"line_start":1226,"line_end":1226,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i24::<BigEndian>(-34253).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147799,"byte_end":147847,"line_start":1227,"line_end":1227,"column_start":5,"column_end":53}},{"value":"/ wtr.write_i24::<BigEndian>(120111).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147852,"byte_end":147900,"line_start":1228,"line_end":1228,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147905,"byte_end":147954,"line_start":1229,"line_end":1229,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147959,"byte_end":147966,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":147971,"byte_end":147980,"line_start":1231,"line_end":1231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148841,"byte_end":148850,"line_start":1259,"line_end":1259,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148152,"byte_end":148215,"line_start":1238,"line_end":1238,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148220,"byte_end":148223,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148228,"byte_end":148240,"line_start":1240,"line_end":1240,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148245,"byte_end":148248,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148253,"byte_end":148317,"line_start":1242,"line_end":1242,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148322,"byte_end":148325,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148330,"byte_end":148422,"line_start":1244,"line_end":1244,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148427,"byte_end":148430,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148435,"byte_end":148449,"line_start":1246,"line_end":1246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148454,"byte_end":148457,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 32 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148462,"byte_end":148521,"line_start":1248,"line_end":1248,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148526,"byte_end":148529,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148534,"byte_end":148545,"line_start":1250,"line_end":1250,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148550,"byte_end":148596,"line_start":1251,"line_end":1251,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148601,"byte_end":148604,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148609,"byte_end":148638,"line_start":1253,"line_end":1253,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u32::<BigEndian>(267).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148643,"byte_end":148688,"line_start":1254,"line_end":1254,"column_start":5,"column_end":50}},{"value":"/ wtr.write_u32::<BigEndian>(1205419366).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148693,"byte_end":148745,"line_start":1255,"line_end":1255,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148750,"byte_end":148807,"line_start":1256,"line_end":1256,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148812,"byte_end":148819,"line_start":1257,"line_end":1257,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":148824,"byte_end":148833,"line_start":1258,"line_end":1258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149692,"byte_end":149701,"line_start":1286,"line_end":1286,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149005,"byte_end":149065,"line_start":1265,"line_end":1265,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149070,"byte_end":149073,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149078,"byte_end":149090,"line_start":1267,"line_end":1267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149095,"byte_end":149098,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149103,"byte_end":149167,"line_start":1269,"line_end":1269,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149172,"byte_end":149175,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149180,"byte_end":149272,"line_start":1271,"line_end":1271,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149277,"byte_end":149280,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149285,"byte_end":149299,"line_start":1273,"line_end":1273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149304,"byte_end":149307,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ Write signed 32 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149312,"byte_end":149369,"line_start":1275,"line_end":1275,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149374,"byte_end":149377,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149382,"byte_end":149393,"line_start":1277,"line_end":1277,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149398,"byte_end":149444,"line_start":1278,"line_end":1278,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149449,"byte_end":149452,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149457,"byte_end":149486,"line_start":1280,"line_end":1280,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i32::<BigEndian>(-34253).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149491,"byte_end":149539,"line_start":1281,"line_end":1281,"column_start":5,"column_end":53}},{"value":"/ wtr.write_i32::<BigEndian>(1205419366).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149544,"byte_end":149596,"line_start":1282,"line_end":1282,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149601,"byte_end":149658,"line_start":1283,"line_end":1283,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149663,"byte_end":149670,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149675,"byte_end":149684,"line_start":1285,"line_end":1285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150565,"byte_end":150574,"line_start":1313,"line_end":1313,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::io::WriteBytesExt::write_u48","value":"pub fn write_u48<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 48 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149856,"byte_end":149919,"line_start":1292,"line_end":1292,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149924,"byte_end":149927,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149932,"byte_end":149944,"line_start":1294,"line_end":1294,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149949,"byte_end":149952,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":149957,"byte_end":150021,"line_start":1296,"line_end":1296,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150026,"byte_end":150029,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150034,"byte_end":150126,"line_start":1298,"line_end":1298,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150131,"byte_end":150134,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150139,"byte_end":150153,"line_start":1300,"line_end":1300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150158,"byte_end":150161,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 48 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150166,"byte_end":150225,"line_start":1302,"line_end":1302,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150230,"byte_end":150233,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150238,"byte_end":150249,"line_start":1304,"line_end":1304,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150254,"byte_end":150300,"line_start":1305,"line_end":1305,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150305,"byte_end":150308,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150313,"byte_end":150342,"line_start":1307,"line_end":1307,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u48::<BigEndian>(52360336390828).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150347,"byte_end":150403,"line_start":1308,"line_end":1308,"column_start":5,"column_end":61}},{"value":"/ wtr.write_u48::<BigEndian>(541).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150408,"byte_end":150453,"line_start":1309,"line_end":1309,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150458,"byte_end":150531,"line_start":1310,"line_end":1310,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150536,"byte_end":150543,"line_start":1311,"line_end":1311,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150548,"byte_end":150557,"line_start":1312,"line_end":1312,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151434,"byte_end":151443,"line_start":1340,"line_end":1340,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::io::WriteBytesExt::write_i48","value":"pub fn write_i48<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 48 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150729,"byte_end":150789,"line_start":1319,"line_end":1319,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150794,"byte_end":150797,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150802,"byte_end":150814,"line_start":1321,"line_end":1321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150819,"byte_end":150822,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150827,"byte_end":150891,"line_start":1323,"line_end":1323,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150896,"byte_end":150899,"line_start":1324,"line_end":1324,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":150904,"byte_end":150996,"line_start":1325,"line_end":1325,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151001,"byte_end":151004,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151009,"byte_end":151023,"line_start":1327,"line_end":1327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151028,"byte_end":151031,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ Write signed 48 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151036,"byte_end":151093,"line_start":1329,"line_end":1329,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151098,"byte_end":151101,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151106,"byte_end":151117,"line_start":1331,"line_end":1331,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151122,"byte_end":151168,"line_start":1332,"line_end":1332,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151173,"byte_end":151176,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151181,"byte_end":151210,"line_start":1334,"line_end":1334,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i48::<BigEndian>(-108363435763825).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151215,"byte_end":151273,"line_start":1335,"line_end":1335,"column_start":5,"column_end":63}},{"value":"/ wtr.write_i48::<BigEndian>(77).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151278,"byte_end":151322,"line_start":1336,"line_end":1336,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151327,"byte_end":151400,"line_start":1337,"line_end":1337,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151405,"byte_end":151412,"line_start":1338,"line_end":1338,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151417,"byte_end":151426,"line_start":1339,"line_end":1339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152324,"byte_end":152333,"line_start":1367,"line_end":1367,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151598,"byte_end":151661,"line_start":1346,"line_end":1346,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151666,"byte_end":151669,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151674,"byte_end":151686,"line_start":1348,"line_end":1348,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151691,"byte_end":151694,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151699,"byte_end":151763,"line_start":1350,"line_end":1350,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151768,"byte_end":151771,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151776,"byte_end":151868,"line_start":1352,"line_end":1352,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151873,"byte_end":151876,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151881,"byte_end":151895,"line_start":1354,"line_end":1354,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151900,"byte_end":151903,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 64 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151908,"byte_end":151967,"line_start":1356,"line_end":1356,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151972,"byte_end":151975,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151980,"byte_end":151991,"line_start":1358,"line_end":1358,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":151996,"byte_end":152042,"line_start":1359,"line_end":1359,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152047,"byte_end":152050,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152055,"byte_end":152084,"line_start":1361,"line_end":1361,"column_start":5,"column_end":34}},{"value":"/ wtr.write_u64::<BigEndian>(918733457491587).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152089,"byte_end":152146,"line_start":1362,"line_end":1362,"column_start":5,"column_end":62}},{"value":"/ wtr.write_u64::<BigEndian>(143).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152151,"byte_end":152196,"line_start":1363,"line_end":1363,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152201,"byte_end":152290,"line_start":1364,"line_end":1364,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152295,"byte_end":152302,"line_start":1365,"line_end":1365,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152307,"byte_end":152316,"line_start":1366,"line_end":1366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153223,"byte_end":153232,"line_start":1394,"line_end":1394,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152488,"byte_end":152548,"line_start":1373,"line_end":1373,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152553,"byte_end":152556,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152561,"byte_end":152573,"line_start":1375,"line_end":1375,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152578,"byte_end":152581,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152586,"byte_end":152650,"line_start":1377,"line_end":1377,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152655,"byte_end":152658,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152663,"byte_end":152755,"line_start":1379,"line_end":1379,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152760,"byte_end":152763,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152768,"byte_end":152782,"line_start":1381,"line_end":1381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152787,"byte_end":152790,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ Write signed 64 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152795,"byte_end":152852,"line_start":1383,"line_end":1383,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152857,"byte_end":152860,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152865,"byte_end":152876,"line_start":1385,"line_end":1385,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152881,"byte_end":152927,"line_start":1386,"line_end":1386,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152932,"byte_end":152935,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152940,"byte_end":152969,"line_start":1388,"line_end":1388,"column_start":5,"column_end":34}},{"value":"/ wtr.write_i64::<BigEndian>(i64::min_value()).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":152974,"byte_end":153032,"line_start":1389,"line_end":1389,"column_start":5,"column_end":63}},{"value":"/ wtr.write_i64::<BigEndian>(i64::max_value()).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153037,"byte_end":153095,"line_start":1390,"line_end":1390,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153100,"byte_end":153189,"line_start":1391,"line_end":1391,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153194,"byte_end":153201,"line_start":1392,"line_end":1392,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153206,"byte_end":153215,"line_start":1393,"line_end":1393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153473,"byte_end":153483,"line_start":1402,"line_end":1402,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::io::WriteBytesExt::write_u128","value":"pub fn write_u128<T: ByteOrder>(&mut Self, u128) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153387,"byte_end":153451,"line_start":1400,"line_end":1400,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153456,"byte_end":153465,"line_start":1401,"line_end":1401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153724,"byte_end":153734,"line_start":1410,"line_end":1410,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::io::WriteBytesExt::write_i128","value":"pub fn write_i128<T: ByteOrder>(&mut Self, i128) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153641,"byte_end":153702,"line_start":1408,"line_end":1408,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153707,"byte_end":153716,"line_start":1409,"line_end":1409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154777,"byte_end":154787,"line_start":1442,"line_end":1442,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153892,"byte_end":153956,"line_start":1416,"line_end":1416,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153961,"byte_end":153964,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153969,"byte_end":153981,"line_start":1418,"line_end":1418,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153986,"byte_end":153989,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":153994,"byte_end":154058,"line_start":1420,"line_end":1420,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154063,"byte_end":154066,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154071,"byte_end":154163,"line_start":1422,"line_end":1422,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154168,"byte_end":154171,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154176,"byte_end":154188,"line_start":1424,"line_end":1424,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154193,"byte_end":154196,"line_start":1425,"line_end":1425,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154201,"byte_end":154276,"line_start":1426,"line_end":1426,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154281,"byte_end":154341,"line_start":1427,"line_end":1427,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154346,"byte_end":154349,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154354,"byte_end":154368,"line_start":1429,"line_end":1429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154373,"byte_end":154376,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 40 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154381,"byte_end":154440,"line_start":1431,"line_end":1431,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154445,"byte_end":154448,"line_start":1432,"line_end":1432,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154453,"byte_end":154464,"line_start":1433,"line_end":1433,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154469,"byte_end":154515,"line_start":1434,"line_end":1434,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154520,"byte_end":154523,"line_start":1435,"line_end":1435,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154528,"byte_end":154557,"line_start":1436,"line_end":1436,"column_start":5,"column_end":34}},{"value":"/ wtr.write_uint::<BigEndian>(312550384361, 5).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154562,"byte_end":154620,"line_start":1437,"line_end":1437,"column_start":5,"column_end":63}},{"value":"/ wtr.write_uint::<BigEndian>(43, 5).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154625,"byte_end":154673,"line_start":1438,"line_end":1438,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154678,"byte_end":154743,"line_start":1439,"line_end":1439,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154748,"byte_end":154755,"line_start":1440,"line_end":1440,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":154760,"byte_end":154769,"line_start":1441,"line_end":1441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155907,"byte_end":155916,"line_start":1478,"line_end":1478,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155008,"byte_end":155069,"line_start":1452,"line_end":1452,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155074,"byte_end":155077,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155082,"byte_end":155094,"line_start":1454,"line_end":1454,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155099,"byte_end":155102,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155107,"byte_end":155171,"line_start":1456,"line_end":1456,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155176,"byte_end":155179,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155184,"byte_end":155276,"line_start":1458,"line_end":1458,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155281,"byte_end":155284,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155289,"byte_end":155301,"line_start":1460,"line_end":1460,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155306,"byte_end":155309,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155314,"byte_end":155389,"line_start":1462,"line_end":1462,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155394,"byte_end":155454,"line_start":1463,"line_end":1463,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155459,"byte_end":155462,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155467,"byte_end":155481,"line_start":1465,"line_end":1465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155486,"byte_end":155489,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ Write signed 56 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155494,"byte_end":155551,"line_start":1467,"line_end":1467,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155556,"byte_end":155559,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155564,"byte_end":155575,"line_start":1469,"line_end":1469,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155580,"byte_end":155626,"line_start":1470,"line_end":1470,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155631,"byte_end":155634,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155639,"byte_end":155668,"line_start":1472,"line_end":1472,"column_start":5,"column_end":34}},{"value":"/ wtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155673,"byte_end":155735,"line_start":1473,"line_end":1473,"column_start":5,"column_end":67}},{"value":"/ wtr.write_int::<BigEndian>(43, 7).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155740,"byte_end":155787,"line_start":1474,"line_end":1474,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155792,"byte_end":155873,"line_start":1475,"line_end":1475,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155878,"byte_end":155885,"line_start":1476,"line_end":1476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":155890,"byte_end":155899,"line_start":1477,"line_end":1477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156376,"byte_end":156389,"line_start":1493,"line_end":1493,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::io::WriteBytesExt::write_uint128","value":"pub fn write_uint128<T: ByteOrder>(&mut Self, u128, usize) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156136,"byte_end":156200,"line_start":1488,"line_end":1488,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156205,"byte_end":156208,"line_start":1489,"line_end":1489,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156213,"byte_end":156288,"line_start":1490,"line_end":1490,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 16`, this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156293,"byte_end":156354,"line_start":1491,"line_end":1491,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156359,"byte_end":156368,"line_start":1492,"line_end":1492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156852,"byte_end":156864,"line_start":1508,"line_end":1508,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::io::WriteBytesExt::write_int128","value":"pub fn write_int128<T: ByteOrder>(&mut Self, i128, usize) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156615,"byte_end":156676,"line_start":1503,"line_end":1503,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156681,"byte_end":156684,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156689,"byte_end":156764,"line_start":1505,"line_end":1505,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 16`, this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156769,"byte_end":156830,"line_start":1506,"line_end":1506,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":156835,"byte_end":156844,"line_start":1507,"line_end":1507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157803,"byte_end":157812,"line_start":1541,"line_end":1541,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157089,"byte_end":157161,"line_start":1518,"line_end":1518,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157166,"byte_end":157192,"line_start":1519,"line_end":1519,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157197,"byte_end":157200,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157205,"byte_end":157217,"line_start":1521,"line_end":1521,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157222,"byte_end":157225,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157230,"byte_end":157294,"line_start":1523,"line_end":1523,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157299,"byte_end":157302,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157307,"byte_end":157399,"line_start":1525,"line_end":1525,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157404,"byte_end":157407,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157412,"byte_end":157426,"line_start":1527,"line_end":1527,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157431,"byte_end":157434,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ Write a big-endian single-precision floating point number to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157439,"byte_end":157514,"line_start":1529,"line_end":1529,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157519,"byte_end":157522,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157527,"byte_end":157538,"line_start":1531,"line_end":1531,"column_start":5,"column_end":16}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157543,"byte_end":157560,"line_start":1532,"line_end":1532,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157565,"byte_end":157568,"line_start":1533,"line_end":1533,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157573,"byte_end":157619,"line_start":1534,"line_end":1534,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157624,"byte_end":157627,"line_start":1535,"line_end":1535,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157632,"byte_end":157661,"line_start":1536,"line_end":1536,"column_start":5,"column_end":34}},{"value":"/ wtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157666,"byte_end":157723,"line_start":1537,"line_end":1537,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157728,"byte_end":157769,"line_start":1538,"line_end":1538,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157774,"byte_end":157781,"line_start":1539,"line_end":1539,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157786,"byte_end":157795,"line_start":1540,"line_end":1540,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158697,"byte_end":158706,"line_start":1570,"line_end":1570,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":157967,"byte_end":158039,"line_start":1547,"line_end":1547,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158044,"byte_end":158070,"line_start":1548,"line_end":1548,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158075,"byte_end":158078,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158083,"byte_end":158095,"line_start":1550,"line_end":1550,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158100,"byte_end":158103,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158108,"byte_end":158172,"line_start":1552,"line_end":1552,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158177,"byte_end":158180,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158185,"byte_end":158277,"line_start":1554,"line_end":1554,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158282,"byte_end":158285,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158290,"byte_end":158304,"line_start":1556,"line_end":1556,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158309,"byte_end":158312,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ Write a big-endian double-precision floating point number to a `Write`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158317,"byte_end":158392,"line_start":1558,"line_end":1558,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158397,"byte_end":158400,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158405,"byte_end":158416,"line_start":1560,"line_end":1560,"column_start":5,"column_end":16}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158421,"byte_end":158438,"line_start":1561,"line_end":1561,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158443,"byte_end":158446,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158451,"byte_end":158497,"line_start":1563,"line_end":1563,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158502,"byte_end":158505,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ let mut wtr = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158510,"byte_end":158539,"line_start":1565,"line_end":1565,"column_start":5,"column_end":34}},{"value":"/ wtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158544,"byte_end":158601,"line_start":1566,"line_end":1566,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158606,"byte_end":158663,"line_start":1567,"line_end":1567,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158668,"byte_end":158675,"line_start":1568,"line_end":1568,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158680,"byte_end":158689,"line_start":1569,"line_end":1569,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4270,"byte_end":4276,"line_start":168,"line_end":168,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[{"value":"/ Sealed stops crates other than byteorder from implementing any traits","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4161,"byte_end":4234,"line_start":166,"line_end":166,"column_start":5,"column_end":78}},{"value":"/ that use it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4239,"byte_end":4255,"line_start":167,"line_end":167,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5523,"byte_end":5532,"line_start":208,"line_end":208,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ `ByteOrder` describes types that can serialize integers as bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4366,"byte_end":4435,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4436,"byte_end":4439,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4440,"byte_end":4513,"line_start":175,"line_end":175,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4514,"byte_end":4579,"line_start":176,"line_end":176,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4580,"byte_end":4640,"line_start":177,"line_end":177,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4641,"byte_end":4644,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: [`BigEndian`]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4645,"byte_end":4720,"line_start":179,"line_end":179,"column_start":1,"column_end":76}},{"value":"/ and [`LittleEndian`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4721,"byte_end":4746,"line_start":180,"line_end":180,"column_start":1,"column_end":26}},{"value":"/ This trait is sealed and cannot be implemented for callers to avoid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4747,"byte_end":4818,"line_start":181,"line_end":181,"column_start":1,"column_end":72}},{"value":"/ breaking backwards compatibility when adding new derived traits.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4819,"byte_end":4887,"line_start":182,"line_end":182,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4888,"byte_end":4891,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4892,"byte_end":4906,"line_start":184,"line_end":184,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4907,"byte_end":4910,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4911,"byte_end":4967,"line_start":186,"line_end":186,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4968,"byte_end":4971,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4972,"byte_end":4983,"line_start":188,"line_end":188,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4984,"byte_end":5029,"line_start":189,"line_end":189,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5030,"byte_end":5033,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5034,"byte_end":5059,"line_start":191,"line_end":191,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5060,"byte_end":5109,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5110,"byte_end":5166,"line_start":193,"line_end":193,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5167,"byte_end":5174,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5175,"byte_end":5178,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5179,"byte_end":5232,"line_start":196,"line_end":196,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5233,"byte_end":5236,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5237,"byte_end":5248,"line_start":198,"line_end":198,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5249,"byte_end":5291,"line_start":199,"line_end":199,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5292,"byte_end":5295,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5296,"byte_end":5321,"line_start":201,"line_end":201,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -5_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5322,"byte_end":5365,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(-5_000, BigEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5366,"byte_end":5416,"line_start":203,"line_end":203,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5417,"byte_end":5424,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5425,"byte_end":5428,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5429,"byte_end":5467,"line_start":206,"line_end":206,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5468,"byte_end":5512,"line_start":207,"line_end":207,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5798,"byte_end":5806,"line_start":225,"line_end":225,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5672,"byte_end":5720,"line_start":220,"line_end":220,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5725,"byte_end":5728,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5733,"byte_end":5745,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5750,"byte_end":5753,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5758,"byte_end":5790,"line_start":224,"line_end":224,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6315,"byte_end":6323,"line_start":244,"line_end":244,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"pub fn read_u24(&[u8]) -> u32","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Reads an unsigned 24 bit integer from `buf`, stored in u32.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5832,"byte_end":5895,"line_start":227,"line_end":227,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5900,"byte_end":5903,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5908,"byte_end":5920,"line_start":229,"line_end":229,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5925,"byte_end":5928,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5933,"byte_end":5965,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5970,"byte_end":5973,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5978,"byte_end":5992,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5997,"byte_end":6000,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6005,"byte_end":6068,"line_start":235,"line_end":235,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6073,"byte_end":6076,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6081,"byte_end":6092,"line_start":237,"line_end":237,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6097,"byte_end":6142,"line_start":238,"line_end":238,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6147,"byte_end":6150,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6155,"byte_end":6180,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6185,"byte_end":6234,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6239,"byte_end":6295,"line_start":242,"line_end":242,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6300,"byte_end":6307,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6856,"byte_end":6864,"line_start":265,"line_end":265,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6395,"byte_end":6443,"line_start":248,"line_end":248,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6448,"byte_end":6451,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6456,"byte_end":6468,"line_start":250,"line_end":250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6473,"byte_end":6476,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6481,"byte_end":6513,"line_start":252,"line_end":252,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6518,"byte_end":6521,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6526,"byte_end":6540,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6545,"byte_end":6548,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6553,"byte_end":6609,"line_start":256,"line_end":256,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6614,"byte_end":6617,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6622,"byte_end":6633,"line_start":258,"line_end":258,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6638,"byte_end":6683,"line_start":259,"line_end":259,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6688,"byte_end":6691,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6696,"byte_end":6721,"line_start":261,"line_end":261,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6726,"byte_end":6775,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6780,"byte_end":6836,"line_start":263,"line_end":263,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6841,"byte_end":6848,"line_start":264,"line_end":264,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7389,"byte_end":7397,"line_start":284,"line_end":284,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"pub fn read_u48(&[u8]) -> u64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[{"value":"/ Reads an unsigned 48 bit integer from `buf`, stored in u64.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6890,"byte_end":6953,"line_start":267,"line_end":267,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6958,"byte_end":6961,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6966,"byte_end":6978,"line_start":269,"line_end":269,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6983,"byte_end":6986,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":6991,"byte_end":7023,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7028,"byte_end":7031,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7036,"byte_end":7050,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7055,"byte_end":7058,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7063,"byte_end":7126,"line_start":275,"line_end":275,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7131,"byte_end":7134,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7139,"byte_end":7150,"line_start":277,"line_end":277,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7155,"byte_end":7200,"line_start":278,"line_end":278,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7205,"byte_end":7208,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7213,"byte_end":7238,"line_start":280,"line_end":280,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u48(&mut buf, 1_000_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7243,"byte_end":7300,"line_start":281,"line_end":281,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7305,"byte_end":7369,"line_start":282,"line_end":282,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7374,"byte_end":7381,"line_start":283,"line_end":283,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7930,"byte_end":7938,"line_start":305,"line_end":305,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7469,"byte_end":7517,"line_start":288,"line_end":288,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7522,"byte_end":7525,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7530,"byte_end":7542,"line_start":290,"line_end":290,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7547,"byte_end":7550,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7555,"byte_end":7587,"line_start":292,"line_end":292,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7592,"byte_end":7595,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7600,"byte_end":7614,"line_start":294,"line_end":294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7619,"byte_end":7622,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7627,"byte_end":7683,"line_start":296,"line_end":296,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7688,"byte_end":7691,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7696,"byte_end":7707,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7712,"byte_end":7757,"line_start":299,"line_end":299,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7762,"byte_end":7765,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7770,"byte_end":7795,"line_start":301,"line_end":301,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7800,"byte_end":7849,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7854,"byte_end":7910,"line_start":303,"line_end":303,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7915,"byte_end":7922,"line_start":304,"line_end":304,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8431,"byte_end":8440,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"pub fn read_u128(&[u8]) -> u128","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 128 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":7964,"byte_end":8013,"line_start":307,"line_end":307,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8018,"byte_end":8021,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8026,"byte_end":8038,"line_start":309,"line_end":309,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8043,"byte_end":8046,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8051,"byte_end":8084,"line_start":311,"line_end":311,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8089,"byte_end":8092,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8097,"byte_end":8111,"line_start":313,"line_end":313,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8116,"byte_end":8119,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8124,"byte_end":8181,"line_start":315,"line_end":315,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8186,"byte_end":8189,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8194,"byte_end":8205,"line_start":317,"line_end":317,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8210,"byte_end":8255,"line_start":318,"line_end":318,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8260,"byte_end":8263,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8268,"byte_end":8294,"line_start":320,"line_end":320,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_u128(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8299,"byte_end":8349,"line_start":321,"line_end":321,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u128(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8354,"byte_end":8411,"line_start":322,"line_end":322,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8416,"byte_end":8423,"line_start":323,"line_end":323,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8984,"byte_end":8993,"line_start":344,"line_end":344,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8467,"byte_end":8516,"line_start":326,"line_end":326,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8521,"byte_end":8524,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8529,"byte_end":8541,"line_start":328,"line_end":328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8546,"byte_end":8549,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8554,"byte_end":8601,"line_start":330,"line_end":330,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8606,"byte_end":8630,"line_start":331,"line_end":331,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8635,"byte_end":8638,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8643,"byte_end":8657,"line_start":333,"line_end":333,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8662,"byte_end":8665,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8670,"byte_end":8729,"line_start":335,"line_end":335,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8734,"byte_end":8737,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8742,"byte_end":8753,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8758,"byte_end":8803,"line_start":338,"line_end":338,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8808,"byte_end":8811,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8816,"byte_end":8841,"line_start":340,"line_end":340,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8846,"byte_end":8899,"line_start":341,"line_end":341,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8904,"byte_end":8964,"line_start":342,"line_end":342,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":8969,"byte_end":8976,"line_start":343,"line_end":343,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9558,"byte_end":9570,"line_start":364,"line_end":364,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"pub fn read_uint128(&[u8], usize) -> u128","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9034,"byte_end":9083,"line_start":346,"line_end":346,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9088,"byte_end":9091,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9096,"byte_end":9108,"line_start":348,"line_end":348,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9113,"byte_end":9116,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 16` or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9121,"byte_end":9169,"line_start":350,"line_end":350,"column_start":5,"column_end":53}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9174,"byte_end":9198,"line_start":351,"line_end":351,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9203,"byte_end":9206,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9211,"byte_end":9225,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9230,"byte_end":9233,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9238,"byte_end":9297,"line_start":355,"line_end":355,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9302,"byte_end":9305,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9310,"byte_end":9321,"line_start":357,"line_end":357,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9326,"byte_end":9371,"line_start":358,"line_end":358,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9376,"byte_end":9379,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9384,"byte_end":9409,"line_start":360,"line_end":360,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint128(&mut buf, 1_000_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9414,"byte_end":9470,"line_start":361,"line_end":361,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9475,"byte_end":9538,"line_start":362,"line_end":362,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9543,"byte_end":9550,"line_start":363,"line_end":363,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10068,"byte_end":10077,"line_start":383,"line_end":383,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9612,"byte_end":9663,"line_start":366,"line_end":366,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9668,"byte_end":9671,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9676,"byte_end":9688,"line_start":368,"line_end":368,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9693,"byte_end":9696,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9701,"byte_end":9733,"line_start":370,"line_end":370,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9738,"byte_end":9741,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9746,"byte_end":9760,"line_start":372,"line_end":372,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9765,"byte_end":9768,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9773,"byte_end":9829,"line_start":374,"line_end":374,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9834,"byte_end":9837,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9842,"byte_end":9853,"line_start":376,"line_end":376,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9858,"byte_end":9903,"line_start":377,"line_end":377,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9908,"byte_end":9911,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9916,"byte_end":9941,"line_start":379,"line_end":379,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u16(&mut buf, 1_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9946,"byte_end":9991,"line_start":380,"line_end":380,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(1_000, LittleEndian::read_u16(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":9996,"byte_end":10048,"line_start":381,"line_end":381,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10053,"byte_end":10060,"line_start":382,"line_end":382,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10594,"byte_end":10603,"line_start":402,"line_end":402,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"pub fn write_u24(&mut [u8], u32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[{"value":"/ Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10108,"byte_end":10174,"line_start":385,"line_end":385,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10179,"byte_end":10182,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10187,"byte_end":10199,"line_start":387,"line_end":387,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10204,"byte_end":10207,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10212,"byte_end":10244,"line_start":389,"line_end":389,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10249,"byte_end":10252,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10257,"byte_end":10271,"line_start":391,"line_end":391,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10276,"byte_end":10279,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10284,"byte_end":10347,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10352,"byte_end":10355,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10360,"byte_end":10371,"line_start":395,"line_end":395,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10376,"byte_end":10421,"line_start":396,"line_end":396,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10426,"byte_end":10429,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10434,"byte_end":10459,"line_start":398,"line_end":398,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u24(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10464,"byte_end":10513,"line_start":399,"line_end":399,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u24(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10518,"byte_end":10574,"line_start":400,"line_end":400,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10579,"byte_end":10586,"line_start":401,"line_end":401,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11148,"byte_end":11157,"line_start":423,"line_end":423,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10684,"byte_end":10735,"line_start":406,"line_end":406,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10740,"byte_end":10743,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10748,"byte_end":10760,"line_start":408,"line_end":408,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10765,"byte_end":10768,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10773,"byte_end":10805,"line_start":410,"line_end":410,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10810,"byte_end":10813,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10818,"byte_end":10832,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10837,"byte_end":10840,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10845,"byte_end":10901,"line_start":414,"line_end":414,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10906,"byte_end":10909,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10914,"byte_end":10925,"line_start":416,"line_end":416,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10930,"byte_end":10975,"line_start":417,"line_end":417,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10980,"byte_end":10983,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":10988,"byte_end":11013,"line_start":419,"line_end":419,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11018,"byte_end":11067,"line_start":420,"line_end":420,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11072,"byte_end":11128,"line_start":421,"line_end":421,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11133,"byte_end":11140,"line_start":422,"line_end":422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11690,"byte_end":11699,"line_start":442,"line_end":442,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"pub fn write_u48(&mut [u8], u64)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[{"value":"/ Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11188,"byte_end":11254,"line_start":425,"line_end":425,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11259,"byte_end":11262,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11267,"byte_end":11279,"line_start":427,"line_end":427,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11284,"byte_end":11287,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11292,"byte_end":11324,"line_start":429,"line_end":429,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11329,"byte_end":11332,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11337,"byte_end":11351,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11356,"byte_end":11359,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11364,"byte_end":11427,"line_start":433,"line_end":433,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11432,"byte_end":11435,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11440,"byte_end":11451,"line_start":435,"line_end":435,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11456,"byte_end":11501,"line_start":436,"line_end":436,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11506,"byte_end":11509,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11514,"byte_end":11539,"line_start":438,"line_end":438,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u48(&mut buf, 1_000_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11544,"byte_end":11601,"line_start":439,"line_end":439,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11606,"byte_end":11670,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11675,"byte_end":11682,"line_start":441,"line_end":441,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12244,"byte_end":12253,"line_start":463,"line_end":463,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11780,"byte_end":11831,"line_start":446,"line_end":446,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11836,"byte_end":11839,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11844,"byte_end":11856,"line_start":448,"line_end":448,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11861,"byte_end":11864,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11869,"byte_end":11901,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11906,"byte_end":11909,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11914,"byte_end":11928,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11933,"byte_end":11936,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":11941,"byte_end":11997,"line_start":454,"line_end":454,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12002,"byte_end":12005,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12010,"byte_end":12021,"line_start":456,"line_end":456,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12026,"byte_end":12071,"line_start":457,"line_end":457,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12076,"byte_end":12079,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12084,"byte_end":12109,"line_start":459,"line_end":459,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_u64(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12114,"byte_end":12163,"line_start":460,"line_end":460,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u64(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12168,"byte_end":12224,"line_start":461,"line_end":461,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12229,"byte_end":12236,"line_start":462,"line_end":462,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12754,"byte_end":12764,"line_start":482,"line_end":482,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"pub fn write_u128(&mut [u8], u128)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 128 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12284,"byte_end":12336,"line_start":465,"line_end":465,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12341,"byte_end":12344,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12349,"byte_end":12361,"line_start":467,"line_end":467,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12366,"byte_end":12369,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12374,"byte_end":12407,"line_start":469,"line_end":469,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12412,"byte_end":12415,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12420,"byte_end":12434,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12439,"byte_end":12442,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12447,"byte_end":12504,"line_start":473,"line_end":473,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12509,"byte_end":12512,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12517,"byte_end":12528,"line_start":475,"line_end":475,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12533,"byte_end":12578,"line_start":476,"line_end":476,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12583,"byte_end":12586,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12591,"byte_end":12617,"line_start":478,"line_end":478,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_u128(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12622,"byte_end":12672,"line_start":479,"line_end":479,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u128(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12677,"byte_end":12734,"line_start":480,"line_end":480,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12739,"byte_end":12746,"line_start":481,"line_end":481,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13354,"byte_end":13364,"line_start":502,"line_end":502,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12796,"byte_end":12860,"line_start":484,"line_end":484,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12865,"byte_end":12868,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12873,"byte_end":12885,"line_start":486,"line_end":486,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12890,"byte_end":12893,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12898,"byte_end":12972,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":12977,"byte_end":13000,"line_start":489,"line_end":489,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13005,"byte_end":13008,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13013,"byte_end":13027,"line_start":491,"line_end":491,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13032,"byte_end":13035,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13040,"byte_end":13099,"line_start":493,"line_end":493,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13104,"byte_end":13107,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13112,"byte_end":13123,"line_start":495,"line_end":495,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13128,"byte_end":13173,"line_start":496,"line_end":496,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13178,"byte_end":13181,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13186,"byte_end":13211,"line_start":498,"line_end":498,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint(&mut buf, 1_000_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13216,"byte_end":13269,"line_start":499,"line_end":499,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13274,"byte_end":13334,"line_start":500,"line_end":500,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13339,"byte_end":13346,"line_start":501,"line_end":501,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13975,"byte_end":13988,"line_start":522,"line_end":522,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"pub fn write_uint128(&mut [u8], u128, usize)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13410,"byte_end":13474,"line_start":504,"line_end":504,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13479,"byte_end":13482,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13487,"byte_end":13499,"line_start":506,"line_end":506,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13504,"byte_end":13507,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13512,"byte_end":13587,"line_start":508,"line_end":508,"column_start":5,"column_end":80}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13592,"byte_end":13615,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13620,"byte_end":13623,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13628,"byte_end":13642,"line_start":511,"line_end":511,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13647,"byte_end":13650,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13655,"byte_end":13714,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13719,"byte_end":13722,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13727,"byte_end":13738,"line_start":515,"line_end":515,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13743,"byte_end":13788,"line_start":516,"line_end":516,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13793,"byte_end":13796,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13801,"byte_end":13826,"line_start":518,"line_end":518,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_uint128(&mut buf, 1_000_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13831,"byte_end":13887,"line_start":519,"line_end":519,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13892,"byte_end":13955,"line_start":520,"line_end":520,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":13960,"byte_end":13967,"line_start":521,"line_end":521,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14501,"byte_end":14509,"line_start":542,"line_end":542,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14035,"byte_end":14080,"line_start":524,"line_end":524,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14085,"byte_end":14088,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14093,"byte_end":14105,"line_start":526,"line_end":526,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14110,"byte_end":14113,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14118,"byte_end":14150,"line_start":528,"line_end":528,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14155,"byte_end":14158,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14163,"byte_end":14177,"line_start":530,"line_end":530,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14182,"byte_end":14185,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14190,"byte_end":14246,"line_start":532,"line_end":532,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14251,"byte_end":14254,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14259,"byte_end":14270,"line_start":534,"line_end":534,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14275,"byte_end":14320,"line_start":535,"line_end":535,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14325,"byte_end":14328,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14333,"byte_end":14358,"line_start":537,"line_end":537,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14363,"byte_end":14409,"line_start":538,"line_end":538,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14414,"byte_end":14467,"line_start":539,"line_end":539,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14472,"byte_end":14479,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14484,"byte_end":14493,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15073,"byte_end":15081,"line_start":564,"line_end":564,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"pub fn read_i24(&[u8]) -> i32","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Reads a signed 24 bit integer from `buf`, stored in i32.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14577,"byte_end":14637,"line_start":546,"line_end":546,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14642,"byte_end":14645,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14650,"byte_end":14662,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14667,"byte_end":14670,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14675,"byte_end":14707,"line_start":550,"line_end":550,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14712,"byte_end":14715,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14720,"byte_end":14734,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14739,"byte_end":14742,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14747,"byte_end":14810,"line_start":554,"line_end":554,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14815,"byte_end":14818,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14823,"byte_end":14834,"line_start":556,"line_end":556,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14839,"byte_end":14884,"line_start":557,"line_end":557,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14889,"byte_end":14892,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14897,"byte_end":14922,"line_start":559,"line_end":559,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14927,"byte_end":14977,"line_start":560,"line_end":560,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":14982,"byte_end":15039,"line_start":561,"line_end":561,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15044,"byte_end":15051,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15056,"byte_end":15065,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15626,"byte_end":15634,"line_start":586,"line_end":586,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15152,"byte_end":15197,"line_start":568,"line_end":568,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15202,"byte_end":15205,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15210,"byte_end":15222,"line_start":570,"line_end":570,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15227,"byte_end":15230,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15235,"byte_end":15267,"line_start":572,"line_end":572,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15272,"byte_end":15275,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15280,"byte_end":15294,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15299,"byte_end":15302,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15307,"byte_end":15363,"line_start":576,"line_end":576,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15368,"byte_end":15371,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15376,"byte_end":15387,"line_start":578,"line_end":578,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15392,"byte_end":15437,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15442,"byte_end":15445,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15450,"byte_end":15475,"line_start":581,"line_end":581,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15480,"byte_end":15530,"line_start":582,"line_end":582,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15535,"byte_end":15592,"line_start":583,"line_end":583,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15597,"byte_end":15604,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15609,"byte_end":15618,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16214,"byte_end":16222,"line_start":608,"line_end":608,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"pub fn read_i48(&[u8]) -> i64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"/ Reads a signed 48 bit integer from `buf`, stored in i64.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15702,"byte_end":15762,"line_start":590,"line_end":590,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15767,"byte_end":15770,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15775,"byte_end":15787,"line_start":592,"line_end":592,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15792,"byte_end":15795,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15800,"byte_end":15832,"line_start":594,"line_end":594,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15837,"byte_end":15840,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15845,"byte_end":15859,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15864,"byte_end":15867,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15872,"byte_end":15935,"line_start":598,"line_end":598,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15940,"byte_end":15943,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15948,"byte_end":15959,"line_start":600,"line_end":600,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":15964,"byte_end":16009,"line_start":601,"line_end":601,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16014,"byte_end":16017,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16022,"byte_end":16047,"line_start":603,"line_end":603,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i48(&mut buf, -1_000_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16052,"byte_end":16110,"line_start":604,"line_end":604,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16115,"byte_end":16180,"line_start":605,"line_end":605,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16185,"byte_end":16192,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16197,"byte_end":16206,"line_start":607,"line_end":607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16775,"byte_end":16783,"line_start":630,"line_end":630,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16293,"byte_end":16338,"line_start":612,"line_end":612,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16343,"byte_end":16346,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16351,"byte_end":16363,"line_start":614,"line_end":614,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16368,"byte_end":16371,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16376,"byte_end":16408,"line_start":616,"line_end":616,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16413,"byte_end":16416,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16421,"byte_end":16435,"line_start":618,"line_end":618,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16440,"byte_end":16443,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16448,"byte_end":16504,"line_start":620,"line_end":620,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16509,"byte_end":16512,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16517,"byte_end":16528,"line_start":622,"line_end":622,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16533,"byte_end":16578,"line_start":623,"line_end":623,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16583,"byte_end":16586,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16591,"byte_end":16616,"line_start":625,"line_end":625,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16621,"byte_end":16675,"line_start":626,"line_end":626,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16680,"byte_end":16741,"line_start":627,"line_end":627,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16746,"byte_end":16753,"line_start":628,"line_end":628,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16758,"byte_end":16767,"line_start":629,"line_end":629,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17339,"byte_end":17348,"line_start":652,"line_end":652,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"pub fn read_i128(&[u8]) -> i128","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 128 bit integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16851,"byte_end":16897,"line_start":634,"line_end":634,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16902,"byte_end":16905,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16910,"byte_end":16922,"line_start":636,"line_end":636,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16927,"byte_end":16930,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16935,"byte_end":16968,"line_start":638,"line_end":638,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16973,"byte_end":16976,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":16981,"byte_end":16995,"line_start":640,"line_end":640,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17000,"byte_end":17003,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17008,"byte_end":17065,"line_start":642,"line_end":642,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17070,"byte_end":17073,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17078,"byte_end":17089,"line_start":644,"line_end":644,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17094,"byte_end":17139,"line_start":645,"line_end":645,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17144,"byte_end":17147,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17152,"byte_end":17178,"line_start":647,"line_end":647,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_i128(&mut buf, -1_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17183,"byte_end":17238,"line_start":648,"line_end":648,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17243,"byte_end":17305,"line_start":649,"line_end":649,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17310,"byte_end":17317,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17322,"byte_end":17331,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17946,"byte_end":17954,"line_start":675,"line_end":675,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17419,"byte_end":17465,"line_start":656,"line_end":656,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17470,"byte_end":17473,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17478,"byte_end":17490,"line_start":658,"line_end":658,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17495,"byte_end":17498,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17503,"byte_end":17550,"line_start":660,"line_end":660,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17555,"byte_end":17579,"line_start":661,"line_end":661,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17584,"byte_end":17587,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17592,"byte_end":17606,"line_start":663,"line_end":663,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17611,"byte_end":17614,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17619,"byte_end":17685,"line_start":665,"line_end":665,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17690,"byte_end":17693,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17698,"byte_end":17709,"line_start":667,"line_end":667,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17714,"byte_end":17759,"line_start":668,"line_end":668,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17764,"byte_end":17767,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17772,"byte_end":17797,"line_start":670,"line_end":670,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17802,"byte_end":17851,"line_start":671,"line_end":671,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17856,"byte_end":17912,"line_start":672,"line_end":672,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17917,"byte_end":17924,"line_start":673,"line_end":673,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":17929,"byte_end":17938,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18594,"byte_end":18605,"line_start":698,"line_end":698,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"pub fn read_int128(&[u8], usize) -> i128","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18060,"byte_end":18106,"line_start":679,"line_end":679,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18111,"byte_end":18114,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18119,"byte_end":18131,"line_start":681,"line_end":681,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18136,"byte_end":18139,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 16` or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18144,"byte_end":18192,"line_start":683,"line_end":683,"column_start":5,"column_end":53}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18197,"byte_end":18221,"line_start":684,"line_end":684,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18226,"byte_end":18229,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18234,"byte_end":18248,"line_start":686,"line_end":686,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18253,"byte_end":18256,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18261,"byte_end":18327,"line_start":688,"line_end":688,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18332,"byte_end":18335,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18340,"byte_end":18351,"line_start":690,"line_end":690,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18356,"byte_end":18401,"line_start":691,"line_end":691,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18406,"byte_end":18409,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18414,"byte_end":18439,"line_start":693,"line_end":693,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int128(&mut buf, -1_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18444,"byte_end":18496,"line_start":694,"line_end":694,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18501,"byte_end":18560,"line_start":695,"line_end":695,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18565,"byte_end":18572,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18577,"byte_end":18586,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19223,"byte_end":19231,"line_start":721,"line_end":721,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18718,"byte_end":18787,"line_start":702,"line_end":702,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18792,"byte_end":18795,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18800,"byte_end":18812,"line_start":704,"line_end":704,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18817,"byte_end":18820,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18825,"byte_end":18857,"line_start":706,"line_end":706,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18862,"byte_end":18865,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18870,"byte_end":18884,"line_start":708,"line_end":708,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18889,"byte_end":18892,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18897,"byte_end":18953,"line_start":710,"line_end":710,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18958,"byte_end":18961,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18966,"byte_end":18977,"line_start":712,"line_end":712,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":18982,"byte_end":19027,"line_start":713,"line_end":713,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19032,"byte_end":19035,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19040,"byte_end":19060,"line_start":715,"line_end":715,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19065,"byte_end":19090,"line_start":716,"line_end":716,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19095,"byte_end":19136,"line_start":717,"line_end":717,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19141,"byte_end":19189,"line_start":718,"line_end":718,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19194,"byte_end":19201,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19206,"byte_end":19215,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19824,"byte_end":19832,"line_start":744,"line_end":744,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19308,"byte_end":19377,"line_start":725,"line_end":725,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19382,"byte_end":19385,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19390,"byte_end":19402,"line_start":727,"line_end":727,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19407,"byte_end":19410,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19415,"byte_end":19447,"line_start":729,"line_end":729,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19452,"byte_end":19455,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19460,"byte_end":19474,"line_start":731,"line_end":731,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19479,"byte_end":19482,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19487,"byte_end":19543,"line_start":733,"line_end":733,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19548,"byte_end":19551,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19556,"byte_end":19567,"line_start":735,"line_end":735,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19572,"byte_end":19617,"line_start":736,"line_end":736,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19622,"byte_end":19625,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19630,"byte_end":19657,"line_start":738,"line_end":738,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19662,"byte_end":19687,"line_start":739,"line_end":739,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19692,"byte_end":19735,"line_start":740,"line_end":740,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19740,"byte_end":19790,"line_start":741,"line_end":741,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19795,"byte_end":19802,"line_start":742,"line_end":742,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19807,"byte_end":19816,"line_start":743,"line_end":743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20378,"byte_end":20387,"line_start":766,"line_end":766,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19909,"byte_end":19957,"line_start":748,"line_end":748,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19962,"byte_end":19965,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19970,"byte_end":19982,"line_start":750,"line_end":750,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19987,"byte_end":19990,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":19995,"byte_end":20027,"line_start":752,"line_end":752,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20032,"byte_end":20035,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20040,"byte_end":20054,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20059,"byte_end":20062,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20067,"byte_end":20123,"line_start":756,"line_end":756,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20128,"byte_end":20131,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20136,"byte_end":20147,"line_start":758,"line_end":758,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20152,"byte_end":20197,"line_start":759,"line_end":759,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20202,"byte_end":20205,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20210,"byte_end":20235,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i16(&mut buf, -1_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20240,"byte_end":20286,"line_start":762,"line_end":762,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20291,"byte_end":20344,"line_start":763,"line_end":763,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20349,"byte_end":20356,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20361,"byte_end":20370,"line_start":765,"line_end":765,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20963,"byte_end":20972,"line_start":788,"line_end":788,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"pub fn write_i24(&mut [u8], i32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"/ Writes a signed 24 bit integer `n` to `buf`, stored in i32.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20464,"byte_end":20527,"line_start":770,"line_end":770,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20532,"byte_end":20535,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20540,"byte_end":20552,"line_start":772,"line_end":772,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20557,"byte_end":20560,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 3`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20565,"byte_end":20597,"line_start":774,"line_end":774,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20602,"byte_end":20605,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20610,"byte_end":20624,"line_start":776,"line_end":776,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20629,"byte_end":20632,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Write and read 24 bit `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20637,"byte_end":20700,"line_start":778,"line_end":778,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20705,"byte_end":20708,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20713,"byte_end":20724,"line_start":780,"line_end":780,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20729,"byte_end":20774,"line_start":781,"line_end":781,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20779,"byte_end":20782,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20787,"byte_end":20812,"line_start":783,"line_end":783,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i24(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20817,"byte_end":20867,"line_start":784,"line_end":784,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20872,"byte_end":20929,"line_start":785,"line_end":785,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20934,"byte_end":20941,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":20946,"byte_end":20955,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21529,"byte_end":21538,"line_start":810,"line_end":810,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21052,"byte_end":21100,"line_start":792,"line_end":792,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21105,"byte_end":21108,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21113,"byte_end":21125,"line_start":794,"line_end":794,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21130,"byte_end":21133,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21138,"byte_end":21170,"line_start":796,"line_end":796,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21175,"byte_end":21178,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21183,"byte_end":21197,"line_start":798,"line_end":798,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21202,"byte_end":21205,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21210,"byte_end":21266,"line_start":800,"line_end":800,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21271,"byte_end":21274,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21279,"byte_end":21290,"line_start":802,"line_end":802,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21295,"byte_end":21340,"line_start":803,"line_end":803,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21345,"byte_end":21348,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21353,"byte_end":21378,"line_start":805,"line_end":805,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i32(&mut buf, -1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21383,"byte_end":21433,"line_start":806,"line_end":806,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21438,"byte_end":21495,"line_start":807,"line_end":807,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21500,"byte_end":21507,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21512,"byte_end":21521,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22130,"byte_end":22139,"line_start":832,"line_end":832,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"pub fn write_i48(&mut [u8], i64)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"/ Writes a signed 48 bit integer `n` to `buf`, stored in i64.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21615,"byte_end":21678,"line_start":814,"line_end":814,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21683,"byte_end":21686,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21691,"byte_end":21703,"line_start":816,"line_end":816,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21708,"byte_end":21711,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 6`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21716,"byte_end":21748,"line_start":818,"line_end":818,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21753,"byte_end":21756,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21761,"byte_end":21775,"line_start":820,"line_end":820,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21780,"byte_end":21783,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Write and read 48 bit `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21788,"byte_end":21851,"line_start":822,"line_end":822,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21856,"byte_end":21859,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21864,"byte_end":21875,"line_start":824,"line_end":824,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21880,"byte_end":21925,"line_start":825,"line_end":825,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21930,"byte_end":21933,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 6];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21938,"byte_end":21963,"line_start":827,"line_end":827,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i48(&mut buf, -1_000_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":21968,"byte_end":22026,"line_start":828,"line_end":828,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22031,"byte_end":22096,"line_start":829,"line_end":829,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22101,"byte_end":22108,"line_start":830,"line_end":830,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22113,"byte_end":22122,"line_start":831,"line_end":831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22704,"byte_end":22713,"line_start":854,"line_end":854,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22219,"byte_end":22267,"line_start":836,"line_end":836,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22272,"byte_end":22275,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22280,"byte_end":22292,"line_start":838,"line_end":838,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22297,"byte_end":22300,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22305,"byte_end":22337,"line_start":840,"line_end":840,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22342,"byte_end":22345,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22350,"byte_end":22364,"line_start":842,"line_end":842,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22369,"byte_end":22372,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22377,"byte_end":22433,"line_start":844,"line_end":844,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22438,"byte_end":22441,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22446,"byte_end":22457,"line_start":846,"line_end":846,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22462,"byte_end":22507,"line_start":847,"line_end":847,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22512,"byte_end":22515,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22520,"byte_end":22545,"line_start":849,"line_end":849,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_i64(&mut buf, -1_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22550,"byte_end":22604,"line_start":850,"line_end":850,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22609,"byte_end":22670,"line_start":851,"line_end":851,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22675,"byte_end":22682,"line_start":852,"line_end":852,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22687,"byte_end":22696,"line_start":853,"line_end":853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23288,"byte_end":23298,"line_start":876,"line_end":876,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"pub fn write_i128(&mut [u8], i128)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 128 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22790,"byte_end":22839,"line_start":858,"line_end":858,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22844,"byte_end":22847,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22852,"byte_end":22864,"line_start":860,"line_end":860,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22869,"byte_end":22872,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 16`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22877,"byte_end":22910,"line_start":862,"line_end":862,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22915,"byte_end":22918,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22923,"byte_end":22937,"line_start":864,"line_end":864,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22942,"byte_end":22945,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Write and read n-byte `i128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":22950,"byte_end":23014,"line_start":866,"line_end":866,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23019,"byte_end":23022,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23027,"byte_end":23038,"line_start":868,"line_end":868,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23043,"byte_end":23088,"line_start":869,"line_end":869,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23093,"byte_end":23096,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23101,"byte_end":23127,"line_start":871,"line_end":871,"column_start":5,"column_end":31}},{"value":"/ LittleEndian::write_i128(&mut buf, -1_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23132,"byte_end":23187,"line_start":872,"line_end":872,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23192,"byte_end":23254,"line_start":873,"line_end":873,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23259,"byte_end":23266,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23271,"byte_end":23280,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23939,"byte_end":23948,"line_start":899,"line_end":899,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23378,"byte_end":23439,"line_start":880,"line_end":880,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23444,"byte_end":23447,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23452,"byte_end":23464,"line_start":882,"line_end":882,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23469,"byte_end":23472,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23477,"byte_end":23551,"line_start":884,"line_end":884,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23556,"byte_end":23579,"line_start":885,"line_end":885,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23584,"byte_end":23587,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23592,"byte_end":23606,"line_start":887,"line_end":887,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23611,"byte_end":23614,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ Write and read an n-byte number in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23619,"byte_end":23678,"line_start":889,"line_end":889,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23683,"byte_end":23686,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23691,"byte_end":23702,"line_start":891,"line_end":891,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23707,"byte_end":23752,"line_start":892,"line_end":892,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23757,"byte_end":23760,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23765,"byte_end":23790,"line_start":894,"line_end":894,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int(&mut buf, -1_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23795,"byte_end":23844,"line_start":895,"line_end":895,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23849,"byte_end":23905,"line_start":896,"line_end":896,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23910,"byte_end":23917,"line_start":897,"line_end":897,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":23922,"byte_end":23931,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24640,"byte_end":24652,"line_start":922,"line_end":922,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"pub fn write_int128(&mut [u8], i128, usize)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24065,"byte_end":24126,"line_start":903,"line_end":903,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24131,"byte_end":24134,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24139,"byte_end":24151,"line_start":905,"line_end":905,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24156,"byte_end":24159,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24164,"byte_end":24239,"line_start":907,"line_end":907,"column_start":5,"column_end":80}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24244,"byte_end":24267,"line_start":908,"line_end":908,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24272,"byte_end":24275,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24280,"byte_end":24294,"line_start":910,"line_end":910,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24299,"byte_end":24302,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ Write and read n-length signed numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24307,"byte_end":24373,"line_start":912,"line_end":912,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24378,"byte_end":24381,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24386,"byte_end":24397,"line_start":914,"line_end":914,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24402,"byte_end":24447,"line_start":915,"line_end":915,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24452,"byte_end":24455,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ let mut buf = [0; 3];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24460,"byte_end":24485,"line_start":917,"line_end":917,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_int128(&mut buf, -1_000, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24490,"byte_end":24542,"line_start":918,"line_end":918,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24547,"byte_end":24606,"line_start":919,"line_end":919,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24611,"byte_end":24618,"line_start":920,"line_end":920,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24623,"byte_end":24632,"line_start":921,"line_end":921,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25282,"byte_end":25291,"line_start":945,"line_end":945,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24776,"byte_end":24846,"line_start":926,"line_end":926,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24851,"byte_end":24854,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24859,"byte_end":24871,"line_start":928,"line_end":928,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24876,"byte_end":24879,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24884,"byte_end":24916,"line_start":930,"line_end":930,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24921,"byte_end":24924,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24929,"byte_end":24943,"line_start":932,"line_end":932,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24948,"byte_end":24951,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":24956,"byte_end":25012,"line_start":934,"line_end":934,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25017,"byte_end":25020,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25025,"byte_end":25036,"line_start":936,"line_end":936,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25041,"byte_end":25086,"line_start":937,"line_end":937,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25091,"byte_end":25094,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ let e = 2.71828;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25099,"byte_end":25119,"line_start":939,"line_end":939,"column_start":5,"column_end":25}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25124,"byte_end":25149,"line_start":940,"line_end":940,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f32(&mut buf, e);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25154,"byte_end":25195,"line_start":941,"line_end":941,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(e, LittleEndian::read_f32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25200,"byte_end":25248,"line_start":942,"line_end":942,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25253,"byte_end":25260,"line_start":943,"line_end":943,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25265,"byte_end":25274,"line_start":944,"line_end":944,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25888,"byte_end":25897,"line_start":968,"line_end":968,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25371,"byte_end":25441,"line_start":949,"line_end":949,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25446,"byte_end":25449,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25454,"byte_end":25466,"line_start":951,"line_end":951,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25471,"byte_end":25474,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25479,"byte_end":25511,"line_start":953,"line_end":953,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25516,"byte_end":25519,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25524,"byte_end":25538,"line_start":955,"line_end":955,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25543,"byte_end":25546,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25551,"byte_end":25607,"line_start":957,"line_end":957,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25612,"byte_end":25615,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25620,"byte_end":25631,"line_start":959,"line_end":959,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25636,"byte_end":25681,"line_start":960,"line_end":960,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25686,"byte_end":25689,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ let phi = 1.6180339887;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25694,"byte_end":25721,"line_start":962,"line_end":962,"column_start":5,"column_end":32}},{"value":"/ let mut buf = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25726,"byte_end":25751,"line_start":963,"line_end":963,"column_start":5,"column_end":30}},{"value":"/ LittleEndian::write_f64(&mut buf, phi);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25756,"byte_end":25799,"line_start":964,"line_end":964,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(phi, LittleEndian::read_f64(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25804,"byte_end":25854,"line_start":965,"line_end":965,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25859,"byte_end":25866,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25871,"byte_end":25880,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26620,"byte_end":26633,"line_start":993,"line_end":993,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"pub fn read_u16_into(&[u8], &mut [u16])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":25977,"byte_end":26034,"line_start":972,"line_end":972,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26039,"byte_end":26042,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26047,"byte_end":26059,"line_start":974,"line_end":974,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26064,"byte_end":26067,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 2*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26072,"byte_end":26115,"line_start":976,"line_end":976,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26120,"byte_end":26123,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26128,"byte_end":26142,"line_start":978,"line_end":978,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26147,"byte_end":26150,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26155,"byte_end":26211,"line_start":980,"line_end":980,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26216,"byte_end":26219,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26224,"byte_end":26235,"line_start":982,"line_end":982,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26240,"byte_end":26285,"line_start":983,"line_end":983,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26290,"byte_end":26293,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26298,"byte_end":26325,"line_start":985,"line_end":985,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26330,"byte_end":26377,"line_start":986,"line_end":986,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26382,"byte_end":26443,"line_start":987,"line_end":987,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26448,"byte_end":26451,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26456,"byte_end":26489,"line_start":989,"line_end":989,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26494,"byte_end":26552,"line_start":990,"line_end":990,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26557,"byte_end":26600,"line_start":991,"line_end":991,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26605,"byte_end":26612,"line_start":992,"line_end":992,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27313,"byte_end":27326,"line_start":1016,"line_end":1016,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26669,"byte_end":26726,"line_start":995,"line_end":995,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26731,"byte_end":26734,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26739,"byte_end":26751,"line_start":997,"line_end":997,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26756,"byte_end":26759,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26764,"byte_end":26807,"line_start":999,"line_end":999,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26812,"byte_end":26815,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26820,"byte_end":26834,"line_start":1001,"line_end":1001,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26839,"byte_end":26842,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26847,"byte_end":26903,"line_start":1003,"line_end":1003,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26908,"byte_end":26911,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26916,"byte_end":26927,"line_start":1005,"line_end":1005,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26932,"byte_end":26977,"line_start":1006,"line_end":1006,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26982,"byte_end":26985,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":26990,"byte_end":27018,"line_start":1008,"line_end":1008,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27023,"byte_end":27070,"line_start":1009,"line_end":1009,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27075,"byte_end":27136,"line_start":1010,"line_end":1010,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27141,"byte_end":27144,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27149,"byte_end":27182,"line_start":1012,"line_end":1012,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27187,"byte_end":27245,"line_start":1013,"line_end":1013,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27250,"byte_end":27293,"line_start":1014,"line_end":1014,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27298,"byte_end":27305,"line_start":1015,"line_end":1015,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28006,"byte_end":28019,"line_start":1039,"line_end":1039,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27362,"byte_end":27419,"line_start":1018,"line_end":1018,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27424,"byte_end":27427,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27432,"byte_end":27444,"line_start":1020,"line_end":1020,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27449,"byte_end":27452,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27457,"byte_end":27500,"line_start":1022,"line_end":1022,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27505,"byte_end":27508,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27513,"byte_end":27527,"line_start":1024,"line_end":1024,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27532,"byte_end":27535,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27540,"byte_end":27596,"line_start":1026,"line_end":1026,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27601,"byte_end":27604,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27609,"byte_end":27620,"line_start":1028,"line_end":1028,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27625,"byte_end":27670,"line_start":1029,"line_end":1029,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27675,"byte_end":27678,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27683,"byte_end":27711,"line_start":1031,"line_end":1031,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27716,"byte_end":27763,"line_start":1032,"line_end":1032,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27768,"byte_end":27829,"line_start":1033,"line_end":1033,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27834,"byte_end":27837,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27842,"byte_end":27875,"line_start":1035,"line_end":1035,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27880,"byte_end":27938,"line_start":1036,"line_end":1036,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27943,"byte_end":27986,"line_start":1037,"line_end":1037,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":27991,"byte_end":27998,"line_start":1038,"line_end":1038,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28704,"byte_end":28718,"line_start":1062,"line_end":1062,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"pub fn read_u128_into(&[u8], &mut [u128])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads unsigned 128 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28055,"byte_end":28113,"line_start":1041,"line_end":1041,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28118,"byte_end":28121,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28126,"byte_end":28138,"line_start":1043,"line_end":1043,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28143,"byte_end":28146,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 16*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28151,"byte_end":28195,"line_start":1045,"line_end":1045,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28200,"byte_end":28203,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28208,"byte_end":28222,"line_start":1047,"line_end":1047,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28227,"byte_end":28230,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28235,"byte_end":28292,"line_start":1049,"line_end":1049,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28297,"byte_end":28300,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28305,"byte_end":28316,"line_start":1051,"line_end":1051,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28321,"byte_end":28366,"line_start":1052,"line_end":1052,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28371,"byte_end":28374,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28379,"byte_end":28407,"line_start":1054,"line_end":1054,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28412,"byte_end":28459,"line_start":1055,"line_end":1055,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u128_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28464,"byte_end":28526,"line_start":1056,"line_end":1056,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28531,"byte_end":28534,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28539,"byte_end":28572,"line_start":1058,"line_end":1058,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u128_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28577,"byte_end":28636,"line_start":1059,"line_end":1059,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28641,"byte_end":28684,"line_start":1060,"line_end":1060,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28689,"byte_end":28696,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29404,"byte_end":29417,"line_start":1086,"line_end":1086,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"pub fn read_i16_into(&[u8], &mut [i16])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 16 bit integers from `src` to `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28755,"byte_end":28808,"line_start":1064,"line_end":1064,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28813,"byte_end":28816,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28821,"byte_end":28833,"line_start":1066,"line_end":1066,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28838,"byte_end":28841,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28846,"byte_end":28889,"line_start":1068,"line_end":1068,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28894,"byte_end":28897,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28902,"byte_end":28916,"line_start":1070,"line_end":1070,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28921,"byte_end":28924,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28929,"byte_end":28985,"line_start":1072,"line_end":1072,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28990,"byte_end":28993,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":28998,"byte_end":29009,"line_start":1074,"line_end":1074,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29014,"byte_end":29059,"line_start":1075,"line_end":1075,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29064,"byte_end":29067,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29072,"byte_end":29099,"line_start":1077,"line_end":1077,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0x0f, 0xee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29104,"byte_end":29147,"line_start":1078,"line_end":1078,"column_start":5,"column_end":48}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29152,"byte_end":29213,"line_start":1079,"line_end":1079,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29218,"byte_end":29221,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29226,"byte_end":29259,"line_start":1081,"line_end":1081,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29264,"byte_end":29322,"line_start":1082,"line_end":1082,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29327,"byte_end":29370,"line_start":1083,"line_end":1083,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29375,"byte_end":29382,"line_start":1084,"line_end":1084,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29387,"byte_end":29396,"line_start":1085,"line_end":1085,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30271,"byte_end":30284,"line_start":1115,"line_end":1115,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"pub fn read_i32_into(&[u8], &mut [i32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29615,"byte_end":29670,"line_start":1093,"line_end":1093,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29675,"byte_end":29678,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29683,"byte_end":29695,"line_start":1095,"line_end":1095,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29700,"byte_end":29703,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29708,"byte_end":29751,"line_start":1097,"line_end":1097,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29756,"byte_end":29759,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29764,"byte_end":29778,"line_start":1099,"line_end":1099,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29783,"byte_end":29786,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29791,"byte_end":29847,"line_start":1101,"line_end":1101,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29852,"byte_end":29855,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29860,"byte_end":29871,"line_start":1103,"line_end":1103,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29876,"byte_end":29921,"line_start":1104,"line_end":1104,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29926,"byte_end":29929,"line_start":1105,"line_end":1105,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29934,"byte_end":29962,"line_start":1106,"line_end":1106,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":29967,"byte_end":30014,"line_start":1107,"line_end":1107,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30019,"byte_end":30080,"line_start":1108,"line_end":1108,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30085,"byte_end":30088,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30093,"byte_end":30126,"line_start":1110,"line_end":1110,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30131,"byte_end":30189,"line_start":1111,"line_end":1111,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30194,"byte_end":30237,"line_start":1112,"line_end":1112,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30242,"byte_end":30249,"line_start":1113,"line_end":1113,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30254,"byte_end":30263,"line_start":1114,"line_end":1114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31139,"byte_end":31152,"line_start":1144,"line_end":1144,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"pub fn read_i64_into(&[u8], &mut [i64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30483,"byte_end":30538,"line_start":1122,"line_end":1122,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30543,"byte_end":30546,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30551,"byte_end":30563,"line_start":1124,"line_end":1124,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30568,"byte_end":30571,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30576,"byte_end":30619,"line_start":1126,"line_end":1126,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30624,"byte_end":30627,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30632,"byte_end":30646,"line_start":1128,"line_end":1128,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30651,"byte_end":30654,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30659,"byte_end":30715,"line_start":1130,"line_end":1130,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30720,"byte_end":30723,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30728,"byte_end":30739,"line_start":1132,"line_end":1132,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30744,"byte_end":30789,"line_start":1133,"line_end":1133,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30794,"byte_end":30797,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30802,"byte_end":30830,"line_start":1135,"line_end":1135,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30835,"byte_end":30882,"line_start":1136,"line_end":1136,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30887,"byte_end":30948,"line_start":1137,"line_end":1137,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30953,"byte_end":30956,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30961,"byte_end":30994,"line_start":1139,"line_end":1139,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":30999,"byte_end":31057,"line_start":1140,"line_end":1140,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31062,"byte_end":31105,"line_start":1141,"line_end":1141,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31110,"byte_end":31117,"line_start":1142,"line_end":1142,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31122,"byte_end":31131,"line_start":1143,"line_end":1143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32012,"byte_end":32026,"line_start":1173,"line_end":1173,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"pub fn read_i128_into(&[u8], &mut [i128])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads signed 128 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31351,"byte_end":31407,"line_start":1151,"line_end":1151,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31412,"byte_end":31415,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31420,"byte_end":31432,"line_start":1153,"line_end":1153,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31437,"byte_end":31440,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 16*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31445,"byte_end":31489,"line_start":1155,"line_end":1155,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31494,"byte_end":31497,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31502,"byte_end":31516,"line_start":1157,"line_end":1157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31521,"byte_end":31524,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31529,"byte_end":31586,"line_start":1159,"line_end":1159,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31591,"byte_end":31594,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31599,"byte_end":31610,"line_start":1161,"line_end":1161,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31615,"byte_end":31660,"line_start":1162,"line_end":1162,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31665,"byte_end":31668,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31673,"byte_end":31701,"line_start":1164,"line_end":1164,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31706,"byte_end":31753,"line_start":1165,"line_end":1165,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i128_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31758,"byte_end":31820,"line_start":1166,"line_end":1166,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31825,"byte_end":31828,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31833,"byte_end":31866,"line_start":1168,"line_end":1168,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i128_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31871,"byte_end":31930,"line_start":1169,"line_end":1169,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31935,"byte_end":31978,"line_start":1170,"line_end":1170,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31983,"byte_end":31990,"line_start":1171,"line_end":1171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":31995,"byte_end":32004,"line_start":1172,"line_end":1172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32939,"byte_end":32952,"line_start":1203,"line_end":1203,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::ByteOrder::read_f32_into","value":"pub fn read_f32_into(&[u8], &mut [f32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32228,"byte_end":32300,"line_start":1180,"line_end":1180,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32305,"byte_end":32326,"line_start":1181,"line_end":1181,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32331,"byte_end":32334,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32339,"byte_end":32351,"line_start":1183,"line_end":1183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32356,"byte_end":32359,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32364,"byte_end":32407,"line_start":1185,"line_end":1185,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32412,"byte_end":32415,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32420,"byte_end":32434,"line_start":1187,"line_end":1187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32439,"byte_end":32442,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32447,"byte_end":32503,"line_start":1189,"line_end":1189,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32508,"byte_end":32511,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32516,"byte_end":32527,"line_start":1191,"line_end":1191,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32532,"byte_end":32577,"line_start":1192,"line_end":1192,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32582,"byte_end":32585,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32590,"byte_end":32618,"line_start":1194,"line_end":1194,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32623,"byte_end":32680,"line_start":1195,"line_end":1195,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32685,"byte_end":32746,"line_start":1196,"line_end":1196,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32751,"byte_end":32754,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32759,"byte_end":32794,"line_start":1198,"line_end":1198,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32799,"byte_end":32857,"line_start":1199,"line_end":1199,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32862,"byte_end":32905,"line_start":1200,"line_end":1200,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32910,"byte_end":32917,"line_start":1201,"line_end":1201,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":32922,"byte_end":32931,"line_start":1202,"line_end":1202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34048,"byte_end":34071,"line_start":1237,"line_end":1237,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"pub fn read_f32_into_unchecked(&[u8], &mut [f32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33151,"byte_end":33170,"line_start":1210,"line_end":1210,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33175,"byte_end":33178,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f32_into` instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33183,"byte_end":33242,"line_start":1212,"line_end":1212,"column_start":5,"column_end":64}},{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33247,"byte_end":33319,"line_start":1213,"line_end":1213,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33324,"byte_end":33345,"line_start":1214,"line_end":1214,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33350,"byte_end":33353,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33358,"byte_end":33370,"line_start":1216,"line_end":1216,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33375,"byte_end":33378,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33383,"byte_end":33426,"line_start":1218,"line_end":1218,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33431,"byte_end":33434,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33439,"byte_end":33453,"line_start":1220,"line_end":1220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33458,"byte_end":33461,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33466,"byte_end":33522,"line_start":1222,"line_end":1222,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33527,"byte_end":33530,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33535,"byte_end":33546,"line_start":1224,"line_end":1224,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33551,"byte_end":33596,"line_start":1225,"line_end":1225,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33601,"byte_end":33604,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33609,"byte_end":33637,"line_start":1227,"line_end":1227,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33642,"byte_end":33699,"line_start":1228,"line_end":1228,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33704,"byte_end":33765,"line_start":1229,"line_end":1229,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33770,"byte_end":33773,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33778,"byte_end":33813,"line_start":1231,"line_end":1231,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33818,"byte_end":33886,"line_start":1232,"line_end":1232,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33891,"byte_end":33934,"line_start":1233,"line_end":1233,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33939,"byte_end":33946,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33951,"byte_end":33960,"line_start":1235,"line_end":1235,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":33965,"byte_end":34040,"line_start":1236,"line_end":1236,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34865,"byte_end":34878,"line_start":1264,"line_end":1264,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::ByteOrder::read_f64_into","value":"pub fn read_f64_into(&[u8], &mut [f64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34153,"byte_end":34225,"line_start":1241,"line_end":1241,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34230,"byte_end":34251,"line_start":1242,"line_end":1242,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34256,"byte_end":34259,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34264,"byte_end":34276,"line_start":1244,"line_end":1244,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34281,"byte_end":34284,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34289,"byte_end":34332,"line_start":1246,"line_end":1246,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34337,"byte_end":34340,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34345,"byte_end":34359,"line_start":1248,"line_end":1248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34364,"byte_end":34367,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34372,"byte_end":34428,"line_start":1250,"line_end":1250,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34433,"byte_end":34436,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34441,"byte_end":34452,"line_start":1252,"line_end":1252,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34457,"byte_end":34502,"line_start":1253,"line_end":1253,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34507,"byte_end":34510,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34515,"byte_end":34543,"line_start":1255,"line_end":1255,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34548,"byte_end":34606,"line_start":1256,"line_end":1256,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34611,"byte_end":34672,"line_start":1257,"line_end":1257,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34677,"byte_end":34680,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34685,"byte_end":34720,"line_start":1259,"line_end":1259,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34725,"byte_end":34783,"line_start":1260,"line_end":1260,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34788,"byte_end":34831,"line_start":1261,"line_end":1261,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34836,"byte_end":34843,"line_start":1262,"line_end":1262,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":34848,"byte_end":34857,"line_start":1263,"line_end":1263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35983,"byte_end":36006,"line_start":1299,"line_end":1299,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"pub fn read_f64_into_unchecked(&[u8], &mut [f64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"/ **DEPRECATED**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35077,"byte_end":35096,"line_start":1271,"line_end":1271,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35101,"byte_end":35104,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ This method is deprecated. Use `read_f64_into` instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35109,"byte_end":35168,"line_start":1273,"line_end":1273,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35173,"byte_end":35176,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ Reads IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35181,"byte_end":35253,"line_start":1275,"line_end":1275,"column_start":5,"column_end":77}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35258,"byte_end":35279,"line_start":1276,"line_end":1276,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35284,"byte_end":35287,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35292,"byte_end":35304,"line_start":1278,"line_end":1278,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35309,"byte_end":35312,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35317,"byte_end":35360,"line_start":1280,"line_end":1280,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35365,"byte_end":35368,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35373,"byte_end":35387,"line_start":1282,"line_end":1282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35392,"byte_end":35395,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35400,"byte_end":35456,"line_start":1284,"line_end":1284,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35461,"byte_end":35464,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35469,"byte_end":35480,"line_start":1286,"line_end":1286,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35485,"byte_end":35530,"line_start":1287,"line_end":1287,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35535,"byte_end":35538,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35543,"byte_end":35571,"line_start":1289,"line_end":1289,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35576,"byte_end":35634,"line_start":1290,"line_end":1290,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35639,"byte_end":35700,"line_start":1291,"line_end":1291,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35705,"byte_end":35708,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35713,"byte_end":35748,"line_start":1293,"line_end":1293,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35753,"byte_end":35821,"line_start":1294,"line_end":1294,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35826,"byte_end":35869,"line_start":1295,"line_end":1295,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35874,"byte_end":35881,"line_start":1296,"line_end":1296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35886,"byte_end":35895,"line_start":1297,"line_end":1297,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":35900,"byte_end":35975,"line_start":1298,"line_end":1298,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36732,"byte_end":36746,"line_start":1324,"line_end":1324,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"pub fn write_u16_into(&[u16], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 16 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36088,"byte_end":36146,"line_start":1303,"line_end":1303,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36151,"byte_end":36154,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36159,"byte_end":36171,"line_start":1305,"line_end":1305,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36176,"byte_end":36179,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 2*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36184,"byte_end":36227,"line_start":1307,"line_end":1307,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36232,"byte_end":36235,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36240,"byte_end":36254,"line_start":1309,"line_end":1309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36259,"byte_end":36262,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ Write and read `u16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36267,"byte_end":36323,"line_start":1311,"line_end":1311,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36328,"byte_end":36331,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36336,"byte_end":36347,"line_start":1313,"line_end":1313,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36352,"byte_end":36397,"line_start":1314,"line_end":1314,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36402,"byte_end":36405,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36410,"byte_end":36437,"line_start":1316,"line_end":1316,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36442,"byte_end":36489,"line_start":1317,"line_end":1317,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36494,"byte_end":36555,"line_start":1318,"line_end":1318,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36560,"byte_end":36563,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36568,"byte_end":36601,"line_start":1320,"line_end":1320,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36606,"byte_end":36664,"line_start":1321,"line_end":1321,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36669,"byte_end":36712,"line_start":1322,"line_end":1322,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36717,"byte_end":36724,"line_start":1323,"line_end":1323,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37427,"byte_end":37441,"line_start":1347,"line_end":1347,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"pub fn write_u32_into(&[u32], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36782,"byte_end":36840,"line_start":1326,"line_end":1326,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36845,"byte_end":36848,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36853,"byte_end":36865,"line_start":1328,"line_end":1328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36870,"byte_end":36873,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36878,"byte_end":36921,"line_start":1330,"line_end":1330,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36926,"byte_end":36929,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36934,"byte_end":36948,"line_start":1332,"line_end":1332,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36953,"byte_end":36956,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":36961,"byte_end":37017,"line_start":1334,"line_end":1334,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37022,"byte_end":37025,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37030,"byte_end":37041,"line_start":1336,"line_end":1336,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37046,"byte_end":37091,"line_start":1337,"line_end":1337,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37096,"byte_end":37099,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37104,"byte_end":37132,"line_start":1339,"line_end":1339,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37137,"byte_end":37184,"line_start":1340,"line_end":1340,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37189,"byte_end":37250,"line_start":1341,"line_end":1341,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37255,"byte_end":37258,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37263,"byte_end":37296,"line_start":1343,"line_end":1343,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37301,"byte_end":37359,"line_start":1344,"line_end":1344,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37364,"byte_end":37407,"line_start":1345,"line_end":1345,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37412,"byte_end":37419,"line_start":1346,"line_end":1346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38122,"byte_end":38136,"line_start":1370,"line_end":1370,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"pub fn write_u64_into(&[u64], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37477,"byte_end":37535,"line_start":1349,"line_end":1349,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37540,"byte_end":37543,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37548,"byte_end":37560,"line_start":1351,"line_end":1351,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37565,"byte_end":37568,"line_start":1352,"line_end":1352,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37573,"byte_end":37616,"line_start":1353,"line_end":1353,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37621,"byte_end":37624,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37629,"byte_end":37643,"line_start":1355,"line_end":1355,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37648,"byte_end":37651,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ Write and read `u64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37656,"byte_end":37712,"line_start":1357,"line_end":1357,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37717,"byte_end":37720,"line_start":1358,"line_end":1358,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37725,"byte_end":37736,"line_start":1359,"line_end":1359,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37741,"byte_end":37786,"line_start":1360,"line_end":1360,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37791,"byte_end":37794,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37799,"byte_end":37827,"line_start":1362,"line_end":1362,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37832,"byte_end":37879,"line_start":1363,"line_end":1363,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37884,"byte_end":37945,"line_start":1364,"line_end":1364,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37950,"byte_end":37953,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37958,"byte_end":37991,"line_start":1366,"line_end":1366,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":37996,"byte_end":38054,"line_start":1367,"line_end":1367,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38059,"byte_end":38102,"line_start":1368,"line_end":1368,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38107,"byte_end":38114,"line_start":1369,"line_end":1369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38822,"byte_end":38837,"line_start":1393,"line_end":1393,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"pub fn write_u128_into(&[u128], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes unsigned 128 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38172,"byte_end":38231,"line_start":1372,"line_end":1372,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38236,"byte_end":38239,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38244,"byte_end":38256,"line_start":1374,"line_end":1374,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38261,"byte_end":38264,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 16*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38269,"byte_end":38313,"line_start":1376,"line_end":1376,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38318,"byte_end":38321,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38326,"byte_end":38340,"line_start":1378,"line_end":1378,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38345,"byte_end":38348,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ Write and read `u128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38353,"byte_end":38410,"line_start":1380,"line_end":1380,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38415,"byte_end":38418,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38423,"byte_end":38434,"line_start":1382,"line_end":1382,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38439,"byte_end":38484,"line_start":1383,"line_end":1383,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38489,"byte_end":38492,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38497,"byte_end":38525,"line_start":1385,"line_end":1385,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38530,"byte_end":38577,"line_start":1386,"line_end":1386,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_u128_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38582,"byte_end":38644,"line_start":1387,"line_end":1387,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38649,"byte_end":38652,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38657,"byte_end":38690,"line_start":1389,"line_end":1389,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_u128_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38695,"byte_end":38754,"line_start":1390,"line_end":1390,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38759,"byte_end":38802,"line_start":1391,"line_end":1391,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38807,"byte_end":38814,"line_start":1392,"line_end":1392,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39865,"byte_end":39878,"line_start":1422,"line_end":1422,"column_start":8,"column_end":21},"name":"write_i8_into","qualname":"::ByteOrder::write_i8_into","value":"pub fn write_i8_into(&[i8], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes signed 8 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 8 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38874,"byte_end":38929,"line_start":1395,"line_end":1395,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38934,"byte_end":38937,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ Note that since each `i8` is a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":38942,"byte_end":39015,"line_start":1397,"line_end":1397,"column_start":5,"column_end":78}},{"value":"/ are used. This method is included because it provides a safe, simple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39020,"byte_end":39092,"line_start":1398,"line_end":1398,"column_start":5,"column_end":77}},{"value":"/ way for the caller to write from a `&[i8]` buffer. (Without this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39097,"byte_end":39165,"line_start":1399,"line_end":1399,"column_start":5,"column_end":73}},{"value":"/ method, the caller would have to either use `unsafe` code or convert","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39170,"byte_end":39242,"line_start":1400,"line_end":1400,"column_start":5,"column_end":77}},{"value":"/ each byte to `u8` individually.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39247,"byte_end":39283,"line_start":1401,"line_end":1401,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39288,"byte_end":39291,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39296,"byte_end":39308,"line_start":1403,"line_end":1403,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39313,"byte_end":39316,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39321,"byte_end":39362,"line_start":1405,"line_end":1405,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39367,"byte_end":39370,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39375,"byte_end":39389,"line_start":1407,"line_end":1407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39394,"byte_end":39397,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ Write and read `i8` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39402,"byte_end":39457,"line_start":1409,"line_end":1409,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39462,"byte_end":39465,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39470,"byte_end":39481,"line_start":1411,"line_end":1411,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39486,"byte_end":39545,"line_start":1412,"line_end":1412,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39550,"byte_end":39553,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39558,"byte_end":39585,"line_start":1414,"line_end":1414,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0xf, 0xe];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39590,"byte_end":39631,"line_start":1415,"line_end":1415,"column_start":5,"column_end":46}},{"value":"/ LittleEndian::write_i8_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39636,"byte_end":39696,"line_start":1416,"line_end":1416,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39701,"byte_end":39704,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39709,"byte_end":39742,"line_start":1418,"line_end":1418,"column_start":5,"column_end":38}},{"value":"/ bytes.as_ref().read_i8_into(&mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39747,"byte_end":39797,"line_start":1419,"line_end":1419,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39802,"byte_end":39845,"line_start":1420,"line_end":1420,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":39850,"byte_end":39857,"line_start":1421,"line_end":1421,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40702,"byte_end":40716,"line_start":1450,"line_end":1450,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"pub fn write_i16_into(&[i16], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 16 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40064,"byte_end":40120,"line_start":1429,"line_end":1429,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40125,"byte_end":40128,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40133,"byte_end":40145,"line_start":1431,"line_end":1431,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40150,"byte_end":40153,"line_start":1432,"line_end":1432,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() != 2*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40158,"byte_end":40201,"line_start":1433,"line_end":1433,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40206,"byte_end":40209,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40214,"byte_end":40228,"line_start":1435,"line_end":1435,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40233,"byte_end":40236,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ Write and read `i16` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40241,"byte_end":40297,"line_start":1437,"line_end":1437,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40302,"byte_end":40305,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40310,"byte_end":40321,"line_start":1439,"line_end":1439,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40326,"byte_end":40371,"line_start":1440,"line_end":1440,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40376,"byte_end":40379,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 8];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40384,"byte_end":40411,"line_start":1442,"line_end":1442,"column_start":5,"column_end":32}},{"value":"/ let numbers_given = [1, 2, 0x0f, 0xee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40416,"byte_end":40459,"line_start":1443,"line_end":1443,"column_start":5,"column_end":48}},{"value":"/ LittleEndian::write_i16_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40464,"byte_end":40525,"line_start":1444,"line_end":1444,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40530,"byte_end":40533,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40538,"byte_end":40571,"line_start":1446,"line_end":1446,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i16_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40576,"byte_end":40634,"line_start":1447,"line_end":1447,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40639,"byte_end":40682,"line_start":1448,"line_end":1448,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40687,"byte_end":40694,"line_start":1449,"line_end":1449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41553,"byte_end":41567,"line_start":1478,"line_end":1478,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"pub fn write_i32_into(&[i32], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40910,"byte_end":40966,"line_start":1457,"line_end":1457,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40971,"byte_end":40974,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40979,"byte_end":40991,"line_start":1459,"line_end":1459,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":40996,"byte_end":40999,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 4*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41004,"byte_end":41047,"line_start":1461,"line_end":1461,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41052,"byte_end":41055,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41060,"byte_end":41074,"line_start":1463,"line_end":1463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41079,"byte_end":41082,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ Write and read `i32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41087,"byte_end":41143,"line_start":1465,"line_end":1465,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41148,"byte_end":41151,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41156,"byte_end":41167,"line_start":1467,"line_end":1467,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41172,"byte_end":41217,"line_start":1468,"line_end":1468,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41222,"byte_end":41225,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41230,"byte_end":41258,"line_start":1470,"line_end":1470,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41263,"byte_end":41310,"line_start":1471,"line_end":1471,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41315,"byte_end":41376,"line_start":1472,"line_end":1472,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41381,"byte_end":41384,"line_start":1473,"line_end":1473,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41389,"byte_end":41422,"line_start":1474,"line_end":1474,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41427,"byte_end":41485,"line_start":1475,"line_end":1475,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41490,"byte_end":41533,"line_start":1476,"line_end":1476,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41538,"byte_end":41545,"line_start":1477,"line_end":1477,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42404,"byte_end":42418,"line_start":1506,"line_end":1506,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"pub fn write_i64_into(&[i64], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41761,"byte_end":41817,"line_start":1485,"line_end":1485,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41822,"byte_end":41825,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41830,"byte_end":41842,"line_start":1487,"line_end":1487,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41847,"byte_end":41850,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 8*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41855,"byte_end":41898,"line_start":1489,"line_end":1489,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41903,"byte_end":41906,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41911,"byte_end":41925,"line_start":1491,"line_end":1491,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41930,"byte_end":41933,"line_start":1492,"line_end":1492,"column_start":5,"column_end":8}},{"value":"/ Write and read `i64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41938,"byte_end":41994,"line_start":1493,"line_end":1493,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":41999,"byte_end":42002,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42007,"byte_end":42018,"line_start":1495,"line_end":1495,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42023,"byte_end":42068,"line_start":1496,"line_end":1496,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42073,"byte_end":42076,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42081,"byte_end":42109,"line_start":1498,"line_end":1498,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42114,"byte_end":42161,"line_start":1499,"line_end":1499,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42166,"byte_end":42227,"line_start":1500,"line_end":1500,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42232,"byte_end":42235,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42240,"byte_end":42273,"line_start":1502,"line_end":1502,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42278,"byte_end":42336,"line_start":1503,"line_end":1503,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42341,"byte_end":42384,"line_start":1504,"line_end":1504,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42389,"byte_end":42396,"line_start":1505,"line_end":1505,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43260,"byte_end":43275,"line_start":1534,"line_end":1534,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"pub fn write_i128_into(&[i128], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes signed 128 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42612,"byte_end":42669,"line_start":1513,"line_end":1513,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42674,"byte_end":42677,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42682,"byte_end":42694,"line_start":1515,"line_end":1515,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42699,"byte_end":42702,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ Panics when `dst.len() != 16*src.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42707,"byte_end":42751,"line_start":1517,"line_end":1517,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42756,"byte_end":42759,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42764,"byte_end":42778,"line_start":1519,"line_end":1519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42783,"byte_end":42786,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ Write and read `i128` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42791,"byte_end":42848,"line_start":1521,"line_end":1521,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42853,"byte_end":42856,"line_start":1522,"line_end":1522,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42861,"byte_end":42872,"line_start":1523,"line_end":1523,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42877,"byte_end":42922,"line_start":1524,"line_end":1524,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42927,"byte_end":42930,"line_start":1525,"line_end":1525,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 64];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42935,"byte_end":42963,"line_start":1526,"line_end":1526,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1, 2, 0xf00f, 0xffee];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":42968,"byte_end":43015,"line_start":1527,"line_end":1527,"column_start":5,"column_end":52}},{"value":"/ LittleEndian::write_i128_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43020,"byte_end":43082,"line_start":1528,"line_end":1528,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43087,"byte_end":43090,"line_start":1529,"line_end":1529,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43095,"byte_end":43128,"line_start":1530,"line_end":1530,"column_start":5,"column_end":38}},{"value":"/ LittleEndian::read_i128_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43133,"byte_end":43192,"line_start":1531,"line_end":1531,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43197,"byte_end":43240,"line_start":1532,"line_end":1532,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43245,"byte_end":43252,"line_start":1533,"line_end":1533,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44170,"byte_end":44184,"line_start":1563,"line_end":1563,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"pub fn write_f32_into(&[f32], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 single-precision (4 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43472,"byte_end":43545,"line_start":1541,"line_end":1541,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43550,"byte_end":43571,"line_start":1542,"line_end":1542,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43576,"byte_end":43579,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43584,"byte_end":43596,"line_start":1544,"line_end":1544,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43601,"byte_end":43604,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 4*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43609,"byte_end":43652,"line_start":1546,"line_end":1546,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43657,"byte_end":43660,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43665,"byte_end":43679,"line_start":1548,"line_end":1548,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43684,"byte_end":43687,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ Write and read `f32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43692,"byte_end":43748,"line_start":1550,"line_end":1550,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43753,"byte_end":43756,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43761,"byte_end":43772,"line_start":1552,"line_end":1552,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43777,"byte_end":43822,"line_start":1553,"line_end":1553,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43827,"byte_end":43830,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 16];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43835,"byte_end":43863,"line_start":1555,"line_end":1555,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43868,"byte_end":43925,"line_start":1556,"line_end":1556,"column_start":5,"column_end":62}},{"value":"/ LittleEndian::write_f32_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43930,"byte_end":43991,"line_start":1557,"line_end":1557,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":43996,"byte_end":43999,"line_start":1558,"line_end":1558,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44004,"byte_end":44039,"line_start":1559,"line_end":1559,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f32_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44044,"byte_end":44102,"line_start":1560,"line_end":1560,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44107,"byte_end":44150,"line_start":1561,"line_end":1561,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44155,"byte_end":44162,"line_start":1562,"line_end":1562,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45077,"byte_end":45091,"line_start":1592,"line_end":1592,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"pub fn write_f64_into(&[f64], &mut [u8])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"/ Writes IEEE754 double-precision (8 bytes) floating point numbers from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44378,"byte_end":44451,"line_start":1570,"line_end":1570,"column_start":5,"column_end":78}},{"value":"/ `src` into `dst`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44456,"byte_end":44477,"line_start":1571,"line_end":1571,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44482,"byte_end":44485,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44490,"byte_end":44502,"line_start":1573,"line_end":1573,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44507,"byte_end":44510,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ Panics when `src.len() != 8*dst.len()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44515,"byte_end":44558,"line_start":1575,"line_end":1575,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44563,"byte_end":44566,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44571,"byte_end":44585,"line_start":1577,"line_end":1577,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44590,"byte_end":44593,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ Write and read `f64` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44598,"byte_end":44654,"line_start":1579,"line_end":1579,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44659,"byte_end":44662,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44667,"byte_end":44678,"line_start":1581,"line_end":1581,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44683,"byte_end":44728,"line_start":1582,"line_end":1582,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44733,"byte_end":44736,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0; 32];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44741,"byte_end":44769,"line_start":1584,"line_end":1584,"column_start":5,"column_end":33}},{"value":"/ let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44774,"byte_end":44832,"line_start":1585,"line_end":1585,"column_start":5,"column_end":63}},{"value":"/ LittleEndian::write_f64_into(&numbers_given, &mut bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44837,"byte_end":44898,"line_start":1586,"line_end":1586,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44903,"byte_end":44906,"line_start":1587,"line_end":1587,"column_start":5,"column_end":8}},{"value":"/ let mut numbers_got = [0.0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44911,"byte_end":44946,"line_start":1588,"line_end":1588,"column_start":5,"column_end":40}},{"value":"/ LittleEndian::read_f64_into(&bytes, &mut numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":44951,"byte_end":45009,"line_start":1589,"line_end":1589,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(numbers_given, numbers_got);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45014,"byte_end":45057,"line_start":1590,"line_end":1590,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45062,"byte_end":45069,"line_start":1591,"line_end":1591,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45832,"byte_end":45846,"line_start":1616,"line_end":1616,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"pub fn from_slice_u16(&mut [u16])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 16 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45285,"byte_end":45357,"line_start":1599,"line_end":1599,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45362,"byte_end":45377,"line_start":1600,"line_end":1600,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45382,"byte_end":45385,"line_start":1601,"line_end":1601,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45390,"byte_end":45461,"line_start":1602,"line_end":1602,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45466,"byte_end":45486,"line_start":1603,"line_end":1603,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45491,"byte_end":45494,"line_start":1604,"line_end":1604,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45499,"byte_end":45513,"line_start":1605,"line_end":1605,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45518,"byte_end":45521,"line_start":1606,"line_end":1606,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45526,"byte_end":45583,"line_start":1607,"line_end":1607,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45588,"byte_end":45591,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45596,"byte_end":45607,"line_start":1609,"line_end":1609,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45612,"byte_end":45654,"line_start":1610,"line_end":1610,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45659,"byte_end":45662,"line_start":1611,"line_end":1611,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45667,"byte_end":45700,"line_start":1612,"line_end":1612,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u16(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45705,"byte_end":45749,"line_start":1613,"line_end":1613,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45754,"byte_end":45812,"line_start":1614,"line_end":1614,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45817,"byte_end":45824,"line_start":1615,"line_end":1615,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46421,"byte_end":46435,"line_start":1635,"line_end":1635,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"pub fn from_slice_u32(&mut [u32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 32 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45874,"byte_end":45946,"line_start":1618,"line_end":1618,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45951,"byte_end":45966,"line_start":1619,"line_end":1619,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45971,"byte_end":45974,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":45979,"byte_end":46050,"line_start":1621,"line_end":1621,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46055,"byte_end":46075,"line_start":1622,"line_end":1622,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46080,"byte_end":46083,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46088,"byte_end":46102,"line_start":1624,"line_end":1624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46107,"byte_end":46110,"line_start":1625,"line_end":1625,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46115,"byte_end":46172,"line_start":1626,"line_end":1626,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46177,"byte_end":46180,"line_start":1627,"line_end":1627,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46185,"byte_end":46196,"line_start":1628,"line_end":1628,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46201,"byte_end":46243,"line_start":1629,"line_end":1629,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46248,"byte_end":46251,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46256,"byte_end":46289,"line_start":1631,"line_end":1631,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u32(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46294,"byte_end":46338,"line_start":1632,"line_end":1632,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46343,"byte_end":46401,"line_start":1633,"line_end":1633,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46406,"byte_end":46413,"line_start":1634,"line_end":1634,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47010,"byte_end":47024,"line_start":1654,"line_end":1654,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"pub fn from_slice_u64(&mut [u64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 64 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46463,"byte_end":46535,"line_start":1637,"line_end":1637,"column_start":5,"column_end":77}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46540,"byte_end":46555,"line_start":1638,"line_end":1638,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46560,"byte_end":46563,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46568,"byte_end":46639,"line_start":1640,"line_end":1640,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46644,"byte_end":46664,"line_start":1641,"line_end":1641,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46669,"byte_end":46672,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46677,"byte_end":46691,"line_start":1643,"line_end":1643,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46696,"byte_end":46699,"line_start":1644,"line_end":1644,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46704,"byte_end":46761,"line_start":1645,"line_end":1645,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46766,"byte_end":46769,"line_start":1646,"line_end":1646,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46774,"byte_end":46785,"line_start":1647,"line_end":1647,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46790,"byte_end":46832,"line_start":1648,"line_end":1648,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46837,"byte_end":46840,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46845,"byte_end":46878,"line_start":1650,"line_end":1650,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u64(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46883,"byte_end":46927,"line_start":1651,"line_end":1651,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46932,"byte_end":46990,"line_start":1652,"line_end":1652,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":46995,"byte_end":47002,"line_start":1653,"line_end":1653,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47603,"byte_end":47618,"line_start":1673,"line_end":1673,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"pub fn from_slice_u128(&mut [u128])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of unsigned 128 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47052,"byte_end":47125,"line_start":1656,"line_end":1656,"column_start":5,"column_end":78}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47130,"byte_end":47145,"line_start":1657,"line_end":1657,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47150,"byte_end":47153,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47158,"byte_end":47229,"line_start":1659,"line_end":1659,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47234,"byte_end":47254,"line_start":1660,"line_end":1660,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47259,"byte_end":47262,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47267,"byte_end":47281,"line_start":1662,"line_end":1662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47286,"byte_end":47289,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47294,"byte_end":47351,"line_start":1664,"line_end":1664,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47356,"byte_end":47359,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47364,"byte_end":47375,"line_start":1666,"line_end":1666,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47380,"byte_end":47422,"line_start":1667,"line_end":1667,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47427,"byte_end":47430,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47435,"byte_end":47468,"line_start":1669,"line_end":1669,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_u128(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47473,"byte_end":47518,"line_start":1670,"line_end":1670,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47523,"byte_end":47583,"line_start":1671,"line_end":1671,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47588,"byte_end":47595,"line_start":1672,"line_end":1672,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48204,"byte_end":48218,"line_start":1693,"line_end":1693,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"pub fn from_slice_i16(&mut [i16])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 16 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47647,"byte_end":47717,"line_start":1675,"line_end":1675,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47722,"byte_end":47737,"line_start":1676,"line_end":1676,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47742,"byte_end":47745,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47750,"byte_end":47821,"line_start":1678,"line_end":1678,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47826,"byte_end":47846,"line_start":1679,"line_end":1679,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47851,"byte_end":47854,"line_start":1680,"line_end":1680,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47859,"byte_end":47873,"line_start":1681,"line_end":1681,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47878,"byte_end":47881,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47886,"byte_end":47943,"line_start":1683,"line_end":1683,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47948,"byte_end":47951,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47956,"byte_end":47967,"line_start":1685,"line_end":1685,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":47972,"byte_end":48014,"line_start":1686,"line_end":1686,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48019,"byte_end":48022,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 6500];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48027,"byte_end":48059,"line_start":1688,"line_end":1688,"column_start":5,"column_end":37}},{"value":"/ BigEndian::from_slice_i16(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48064,"byte_end":48108,"line_start":1689,"line_end":1689,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48113,"byte_end":48170,"line_start":1690,"line_end":1690,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48175,"byte_end":48182,"line_start":1691,"line_end":1691,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48187,"byte_end":48196,"line_start":1692,"line_end":1692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48960,"byte_end":48974,"line_start":1718,"line_end":1718,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"pub fn from_slice_i32(&mut [i32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 32 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48401,"byte_end":48471,"line_start":1700,"line_end":1700,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48476,"byte_end":48491,"line_start":1701,"line_end":1701,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48496,"byte_end":48499,"line_start":1702,"line_end":1702,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48504,"byte_end":48575,"line_start":1703,"line_end":1703,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48580,"byte_end":48600,"line_start":1704,"line_end":1704,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48605,"byte_end":48608,"line_start":1705,"line_end":1705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48613,"byte_end":48627,"line_start":1706,"line_end":1706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48632,"byte_end":48635,"line_start":1707,"line_end":1707,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48640,"byte_end":48697,"line_start":1708,"line_end":1708,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48702,"byte_end":48705,"line_start":1709,"line_end":1709,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48710,"byte_end":48721,"line_start":1710,"line_end":1710,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48726,"byte_end":48768,"line_start":1711,"line_end":1711,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48773,"byte_end":48776,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48781,"byte_end":48814,"line_start":1713,"line_end":1713,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i32(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48819,"byte_end":48863,"line_start":1714,"line_end":1714,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48868,"byte_end":48926,"line_start":1715,"line_end":1715,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48931,"byte_end":48938,"line_start":1716,"line_end":1716,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":48943,"byte_end":48952,"line_start":1717,"line_end":1717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49716,"byte_end":49730,"line_start":1743,"line_end":1743,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"pub fn from_slice_i64(&mut [i64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 64 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49157,"byte_end":49227,"line_start":1725,"line_end":1725,"column_start":5,"column_end":75}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49232,"byte_end":49247,"line_start":1726,"line_end":1726,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49252,"byte_end":49255,"line_start":1727,"line_end":1727,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49260,"byte_end":49331,"line_start":1728,"line_end":1728,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49336,"byte_end":49356,"line_start":1729,"line_end":1729,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49361,"byte_end":49364,"line_start":1730,"line_end":1730,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49369,"byte_end":49383,"line_start":1731,"line_end":1731,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49388,"byte_end":49391,"line_start":1732,"line_end":1732,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49396,"byte_end":49453,"line_start":1733,"line_end":1733,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49458,"byte_end":49461,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49466,"byte_end":49477,"line_start":1735,"line_end":1735,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49482,"byte_end":49524,"line_start":1736,"line_end":1736,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49529,"byte_end":49532,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49537,"byte_end":49570,"line_start":1738,"line_end":1738,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i64(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49575,"byte_end":49619,"line_start":1739,"line_end":1739,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49624,"byte_end":49682,"line_start":1740,"line_end":1740,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49687,"byte_end":49694,"line_start":1741,"line_end":1741,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49699,"byte_end":49708,"line_start":1742,"line_end":1742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50476,"byte_end":50491,"line_start":1768,"line_end":1768,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"pub fn from_slice_i128(&mut [i128])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of signed 128 bit integers to a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49913,"byte_end":49984,"line_start":1750,"line_end":1750,"column_start":5,"column_end":76}},{"value":"/ endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":49989,"byte_end":50004,"line_start":1751,"line_end":1751,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50009,"byte_end":50012,"line_start":1752,"line_end":1752,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50017,"byte_end":50088,"line_start":1753,"line_end":1753,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50093,"byte_end":50113,"line_start":1754,"line_end":1754,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50118,"byte_end":50121,"line_start":1755,"line_end":1755,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50126,"byte_end":50140,"line_start":1756,"line_end":1756,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50145,"byte_end":50148,"line_start":1757,"line_end":1757,"column_start":5,"column_end":8}},{"value":"/ Convert the host platform's endianness to big-endian:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50153,"byte_end":50210,"line_start":1758,"line_end":1758,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50215,"byte_end":50218,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50223,"byte_end":50234,"line_start":1760,"line_end":1760,"column_start":5,"column_end":16}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50239,"byte_end":50281,"line_start":1761,"line_end":1761,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50286,"byte_end":50289,"line_start":1762,"line_end":1762,"column_start":5,"column_end":8}},{"value":"/ let mut numbers = [5, 65000];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50294,"byte_end":50327,"line_start":1763,"line_end":1763,"column_start":5,"column_end":38}},{"value":"/ BigEndian::from_slice_i128(&mut numbers);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50332,"byte_end":50377,"line_start":1764,"line_end":1764,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50382,"byte_end":50442,"line_start":1765,"line_end":1765,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50447,"byte_end":50454,"line_start":1766,"line_end":1766,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50459,"byte_end":50468,"line_start":1767,"line_end":1767,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50919,"byte_end":50933,"line_start":1780,"line_end":1780,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"pub fn from_slice_f32(&mut [f32])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 single-precision (4 bytes) floating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50677,"byte_end":50752,"line_start":1775,"line_end":1775,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50757,"byte_end":50802,"line_start":1776,"line_end":1776,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50807,"byte_end":50810,"line_start":1777,"line_end":1777,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50815,"byte_end":50886,"line_start":1778,"line_end":1778,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50891,"byte_end":50911,"line_start":1779,"line_end":1779,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51203,"byte_end":51217,"line_start":1787,"line_end":1787,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"pub fn from_slice_f64(&mut [f64])","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[{"value":"/ Converts the given slice of IEEE754 double-precision (8 bytes) floating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":50961,"byte_end":51036,"line_start":1782,"line_end":1782,"column_start":5,"column_end":80}},{"value":"/ point numbers to a particular endianness.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51041,"byte_end":51086,"line_start":1783,"line_end":1783,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51091,"byte_end":51094,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ If the endianness matches the endianness of the host platform, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51099,"byte_end":51170,"line_start":1785,"line_end":1785,"column_start":5,"column_end":76}},{"value":"/ this is a no-op.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51175,"byte_end":51195,"line_start":1786,"line_end":1786,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51728,"byte_end":51737,"line_start":1807,"line_end":1807,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51243,"byte_end":51280,"line_start":1790,"line_end":1790,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51281,"byte_end":51284,"line_start":1791,"line_end":1791,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51285,"byte_end":51359,"line_start":1792,"line_end":1792,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51360,"byte_end":51375,"line_start":1793,"line_end":1793,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51376,"byte_end":51379,"line_start":1794,"line_end":1794,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51380,"byte_end":51394,"line_start":1795,"line_end":1795,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51395,"byte_end":51398,"line_start":1796,"line_end":1796,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in big endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51399,"byte_end":51452,"line_start":1797,"line_end":1797,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51453,"byte_end":51456,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51457,"byte_end":51468,"line_start":1799,"line_end":1799,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51469,"byte_end":51511,"line_start":1800,"line_end":1800,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51512,"byte_end":51515,"line_start":1801,"line_end":1801,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51516,"byte_end":51541,"line_start":1802,"line_end":1802,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51542,"byte_end":51588,"line_start":1803,"line_end":1803,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(1_000_000, BigEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51589,"byte_end":51642,"line_start":1804,"line_end":1804,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51643,"byte_end":51650,"line_start":1805,"line_end":1805,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51936,"byte_end":51938,"line_start":1818,"line_end":1818,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`BigEndian`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51848,"byte_end":51883,"line_start":1815,"line_end":1815,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51884,"byte_end":51887,"line_start":1816,"line_end":1816,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51888,"byte_end":51926,"line_start":1817,"line_end":1817,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52453,"byte_end":52465,"line_start":1837,"line_end":1837,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51953,"byte_end":51993,"line_start":1820,"line_end":1820,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51994,"byte_end":51997,"line_start":1821,"line_end":1821,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51998,"byte_end":52072,"line_start":1822,"line_end":1822,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52073,"byte_end":52088,"line_start":1823,"line_end":1823,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52089,"byte_end":52092,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52093,"byte_end":52107,"line_start":1825,"line_end":1825,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52108,"byte_end":52111,"line_start":1826,"line_end":1826,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52112,"byte_end":52168,"line_start":1827,"line_end":1827,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52169,"byte_end":52172,"line_start":1828,"line_end":1828,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52173,"byte_end":52184,"line_start":1829,"line_end":1829,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52185,"byte_end":52230,"line_start":1830,"line_end":1830,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52231,"byte_end":52234,"line_start":1831,"line_end":1831,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52235,"byte_end":52260,"line_start":1832,"line_end":1832,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52261,"byte_end":52310,"line_start":1833,"line_end":1833,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52311,"byte_end":52367,"line_start":1834,"line_end":1834,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52368,"byte_end":52375,"line_start":1835,"line_end":1835,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52682,"byte_end":52684,"line_start":1848,"line_end":1848,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[{"value":"/ A type alias for [`LittleEndian`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52585,"byte_end":52623,"line_start":1845,"line_end":1845,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52624,"byte_end":52627,"line_start":1846,"line_end":1846,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52628,"byte_end":52672,"line_start":1847,"line_end":1847,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53409,"byte_end":53422,"line_start":1874,"line_end":1874,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[{"value":"/ Defines network byte order serialization.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52702,"byte_end":52747,"line_start":1850,"line_end":1850,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52748,"byte_end":52751,"line_start":1851,"line_end":1851,"column_start":1,"column_end":4}},{"value":"/ Network byte order is defined by [RFC 1700][1] to be big-endian, and is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52752,"byte_end":52827,"line_start":1852,"line_end":1852,"column_start":1,"column_end":76}},{"value":"/ referred to in several protocol specifications.  This type is an alias of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52828,"byte_end":52905,"line_start":1853,"line_end":1853,"column_start":1,"column_end":78}},{"value":"/ [`BigEndian`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52906,"byte_end":52924,"line_start":1854,"line_end":1854,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52925,"byte_end":52928,"line_start":1855,"line_end":1855,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc1700","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52929,"byte_end":52973,"line_start":1856,"line_end":1856,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52974,"byte_end":52977,"line_start":1857,"line_end":1857,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52978,"byte_end":53052,"line_start":1858,"line_end":1858,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53053,"byte_end":53068,"line_start":1859,"line_end":1859,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53069,"byte_end":53072,"line_start":1860,"line_end":1860,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53073,"byte_end":53087,"line_start":1861,"line_end":1861,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53088,"byte_end":53091,"line_start":1862,"line_end":1862,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53092,"byte_end":53145,"line_start":1863,"line_end":1863,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53146,"byte_end":53149,"line_start":1864,"line_end":1864,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53150,"byte_end":53161,"line_start":1865,"line_end":1865,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, NetworkEndian, BigEndian};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53162,"byte_end":53219,"line_start":1866,"line_end":1866,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53220,"byte_end":53223,"line_start":1867,"line_end":1867,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53224,"byte_end":53249,"line_start":1868,"line_end":1868,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -5_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53250,"byte_end":53293,"line_start":1869,"line_end":1869,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(-5_000, NetworkEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53294,"byte_end":53348,"line_start":1870,"line_end":1870,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53349,"byte_end":53356,"line_start":1871,"line_end":1871,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53357,"byte_end":53360,"line_start":1872,"line_end":1872,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53361,"byte_end":53399,"line_start":1873,"line_end":1873,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53736,"byte_end":53748,"line_start":1885,"line_end":1885,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53437,"byte_end":53484,"line_start":1876,"line_end":1876,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53485,"byte_end":53488,"line_start":1877,"line_end":1877,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53489,"byte_end":53563,"line_start":1878,"line_end":1878,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53564,"byte_end":53579,"line_start":1879,"line_end":1879,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53580,"byte_end":53583,"line_start":1880,"line_end":1880,"column_start":1,"column_end":4}},{"value":"/ On this platform, this is an alias for [`LittleEndian`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53584,"byte_end":53644,"line_start":1881,"line_end":1881,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53645,"byte_end":53648,"line_start":1882,"line_end":1882,"column_start":1,"column_end":4}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53649,"byte_end":53693,"line_start":1883,"line_end":1883,"column_start":1,"column_end":45}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":53694,"byte_end":53726,"line_start":1884,"line_end":1884,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142353,"byte_end":142354,"line_start":1049,"line_end":1049,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158995,"byte_end":158996,"line_start":1579,"line_end":1579,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4307,"byte_end":4319,"line_start":169,"line_end":169,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4350,"byte_end":4359,"line_start":170,"line_end":170,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51759,"byte_end":51768,"line_start":1809,"line_end":1809,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52487,"byte_end":52499,"line_start":1839,"line_end":1839,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":56625,"byte_end":56634,"line_start":1970,"line_end":1970,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":62364,"byte_end":62376,"line_start":2186,"line_end":2186,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":109744,"byte_end":109748,"line_start":30,"line_end":30,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4723},"to":{"krate":0,"index":41}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":142353,"byte_end":142354,"line_start":1049,"line_end":1049,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":126},"to":{"krate":0,"index":41}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":143164,"byte_end":143169,"line_start":1073,"line_end":1073,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4780},"to":{"krate":0,"index":127}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\io.rs","byte_start":158995,"byte_end":158996,"line_start":1579,"line_end":1579,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":185},"to":{"krate":0,"index":127}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4307,"byte_end":4319,"line_start":169,"line_end":169,"column_start":28,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":360},"to":{"krate":0,"index":198}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":4350,"byte_end":4359,"line_start":170,"line_end":170,"column_start":28,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":341},"to":{"krate":0,"index":198}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5538,"byte_end":5543,"line_start":209,"line_end":209,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5550,"byte_end":5554,"line_start":210,"line_end":210,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3067},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5561,"byte_end":5566,"line_start":211,"line_end":211,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5573,"byte_end":5580,"line_start":212,"line_end":212,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":3035},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5587,"byte_end":5589,"line_start":213,"line_end":213,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":2714},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5596,"byte_end":5600,"line_start":214,"line_end":214,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":9892},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5607,"byte_end":5610,"line_start":215,"line_end":215,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2745},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5617,"byte_end":5626,"line_start":216,"line_end":216,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":2709},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5633,"byte_end":5643,"line_start":217,"line_end":217,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2755},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":5659,"byte_end":5665,"line_start":218,"line_end":218,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":198},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":51759,"byte_end":51768,"line_start":1809,"line_end":1809,"column_start":18,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":341},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":52487,"byte_end":52499,"line_start":1839,"line_end":1839,"column_start":18,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":360},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":56625,"byte_end":56634,"line_start":1970,"line_end":1970,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":341},"to":{"krate":0,"index":201}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.4.3\\src\\lib.rs","byte_start":62364,"byte_end":62376,"line_start":2186,"line_end":2186,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":360},"to":{"krate":0,"index":201}}]}
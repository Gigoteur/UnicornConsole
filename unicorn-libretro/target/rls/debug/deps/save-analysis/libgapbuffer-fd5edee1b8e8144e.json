{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","gapbuffer","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","-C","metadata=fd5edee1b8e8144e","-C","extra-filename=-fd5edee1b8e8144e","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-libretro\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-libretro\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-libretro\\target\\rls\\debug\\deps\\libgapbuffer-fd5edee1b8e8144e.rmeta"},"prelude":{"crate_id":{"name":"gapbuffer","disambiguator":[8898613395581938875,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":710,"byte_end":12885,"line_start":13,"line_end":406,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":710,"byte_end":12885,"line_start":13,"line_end":406,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":82},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":26},{"krate":0,"index":43},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":92},{"krate":0,"index":97},{"krate":0,"index":76}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1240,"byte_end":1249,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"GapBuffer","qualname":"::GapBuffer","value":"GapBuffer {  }","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" A GapBuffer is a dynamic array which implements methods to shift the empty portion of the\n array around so that modifications can occur at any point in the array. It is optimized for\n data structures in which insertions and deletions tend to occur in sequence within the same\n area of the array, such as a buffer for a text editor.\n","sig":null,"attributes":[{"value":"/ A GapBuffer is a dynamic array which implements methods to shift the empty portion of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":859,"byte_end":952,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/ array around so that modifications can occur at any point in the array. It is optimized for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":953,"byte_end":1048,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ data structures in which insertions and deletions tend to occur in sequence within the same","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1049,"byte_end":1144,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ area of the array, such as a buffer for a text editor.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1145,"byte_end":1203,"line_start":22,"line_end":22,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1952,"byte_end":1955,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<GapBuffer<T>>::new","value":"pub fn new() -> GapBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":"Constructs an empty GapBuffer.\n","sig":null,"attributes":[{"value":"/Constructs an empty GapBuffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1907,"byte_end":1940,"line_start":37,"line_end":37,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":2142,"byte_end":2155,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<GapBuffer<T>>::with_capacity","value":"pub fn with_capacity(usize) -> GapBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":"Constructs a GapBuffer with a given initial capacity.\n","sig":null,"attributes":[{"value":"/Constructs a GapBuffer with a given initial capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":2074,"byte_end":2130,"line_start":45,"line_end":45,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4402,"byte_end":4405,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"get","qualname":"<GapBuffer<T>>::get","value":"pub fn get(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"Get a reference to the element at the index.\n","sig":null,"attributes":[{"value":"/Get a reference to the element at the index.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4343,"byte_end":4390,"line_start":104,"line_end":104,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4574,"byte_end":4581,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GapBuffer<T>>::get_mut","value":"pub fn get_mut(&mut Self, usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"Get a mutable reference to the element at the index.\n","sig":null,"attributes":[{"value":"/Get a mutable reference to the element at the index.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4507,"byte_end":4562,"line_start":110,"line_end":110,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4837,"byte_end":4841,"line_start":120,"line_end":120,"column_start":12,"column_end":16},"name":"swap","qualname":"<GapBuffer<T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swap the elements at the index.\n i and j may be equal.","sig":null,"attributes":[{"value":"/ Swap the elements at the index.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4695,"byte_end":4730,"line_start":116,"line_end":116,"column_start":5,"column_end":40}},{"value":"/ i and j may be equal.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4735,"byte_end":4760,"line_start":117,"line_end":117,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4765,"byte_end":4768,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Panics if there is no element with either index.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4773,"byte_end":4825,"line_start":119,"line_end":119,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5062,"byte_end":5070,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"capacity","qualname":"<GapBuffer<T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Get the capacity of the GapBuffer without expanding.\n","sig":null,"attributes":[{"value":"/Get the capacity of the GapBuffer without expanding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":4981,"byte_end":5036,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5041,"byte_end":5050,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5332,"byte_end":5339,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"reserve","qualname":"<GapBuffer<T>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve at least this much additional space for the GapBuffer.\n The collection may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserve at least this much additional space for the GapBuffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5116,"byte_end":5182,"line_start":130,"line_end":130,"column_start":5,"column_end":71}},{"value":"/ The collection may reserve more space to avoid frequent reallocations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5187,"byte_end":5261,"line_start":131,"line_end":131,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5266,"byte_end":5269,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows uint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5274,"byte_end":5320,"line_start":133,"line_end":133,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5469,"byte_end":5473,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"iter","qualname":"<GapBuffer<T>>::iter","value":"pub fn iter(&Self) -> Items<, T>","parent":null,"children":[],"decl_id":null,"docs":"Get an iterator of this GapBuffer.\n","sig":null,"attributes":[{"value":"/Get an iterator of this GapBuffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5420,"byte_end":5457,"line_start":138,"line_end":138,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5623,"byte_end":5626,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"len","qualname":"<GapBuffer<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Get the length of the GapBuffer.\n","sig":null,"attributes":[{"value":"/Get the length of the GapBuffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5576,"byte_end":5611,"line_start":146,"line_end":146,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5705,"byte_end":5713,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<GapBuffer<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Is the GapBuffer empty?\n","sig":null,"attributes":[{"value":"/Is the GapBuffer empty?","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5667,"byte_end":5693,"line_start":149,"line_end":149,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5808,"byte_end":5813,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"clear","qualname":"<GapBuffer<T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"Clears the buffer, removing all values.\n","sig":null,"attributes":[{"value":"/Clears the buffer, removing all values.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5754,"byte_end":5796,"line_start":152,"line_end":152,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":6040,"byte_end":6046,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"insert","qualname":"<GapBuffer<T>>::insert","value":"pub fn insert(&mut Self, usize, T)","parent":null,"children":[],"decl_id":null,"docs":" Insert a new T at a given index (the gap will be shifted to that index).","sig":null,"attributes":[{"value":"/ Insert a new T at a given index (the gap will be shifted to that index).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5889,"byte_end":5965,"line_start":158,"line_end":158,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5970,"byte_end":5973,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Panics if i is greater than VecDeque's length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":5978,"byte_end":6028,"line_start":160,"line_end":160,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":6545,"byte_end":6551,"line_start":173,"line_end":173,"column_start":12,"column_end":18},"name":"remove","qualname":"<GapBuffer<T>>::remove","value":"pub fn remove(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the element at position i from the gap buffer.  The gap will be shifted\n to just before the index.  Returns None if i is out of bounds.\n","sig":null,"attributes":[{"value":"/ Removes and returns the element at position i from the gap buffer.  The gap will be shifted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":6367,"byte_end":6462,"line_start":171,"line_end":171,"column_start":5,"column_end":100}},{"value":"/ to just before the index.  Returns None if i is out of bounds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":6467,"byte_end":6533,"line_start":172,"line_end":172,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":10096,"byte_end":10101,"line_start":293,"line_end":293,"column_start":12,"column_end":17},"name":"Items","qualname":"::Items","value":"Items {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1888,"byte_end":1897,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":6909,"byte_end":6918,"line_start":185,"line_end":185,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":7201,"byte_end":7210,"line_start":194,"line_end":194,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":7272,"byte_end":7281,"line_start":197,"line_end":197,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":7835,"byte_end":7844,"line_start":215,"line_end":215,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":8376,"byte_end":8385,"line_start":234,"line_end":234,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":8629,"byte_end":8638,"line_start":245,"line_end":245,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":9121,"byte_end":9130,"line_start":258,"line_end":258,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":9518,"byte_end":9527,"line_start":272,"line_end":272,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":9724,"byte_end":9733,"line_start":282,"line_end":282,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":10187,"byte_end":10192,"line_start":298,"line_end":298,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":1888,"byte_end":1897,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":6909,"byte_end":6918,"line_start":185,"line_end":185,"column_start":41,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":7201,"byte_end":7210,"line_start":194,"line_end":194,"column_start":16,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":7272,"byte_end":7281,"line_start":197,"line_end":197,"column_start":24,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":7835,"byte_end":7844,"line_start":215,"line_end":215,"column_start":17,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":8376,"byte_end":8385,"line_start":234,"line_end":234,"column_start":29,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":8629,"byte_end":8638,"line_start":245,"line_end":245,"column_start":23,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":7799}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":9121,"byte_end":9130,"line_start":258,"line_end":258,"column_start":24,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":9518,"byte_end":9527,"line_start":272,"line_end":272,"column_start":26,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":9724,"byte_end":9733,"line_start":282,"line_end":282,"column_start":29,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gapbuffer-0.1.1\\src\\lib.rs","byte_start":10187,"byte_end":10192,"line_start":298,"line_end":298,"column_start":26,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":7985}}]}
{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","hashbrown","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"raw\"","-C","metadata=eb0aa1bf05f03bbb","-C","extra-filename=-eb0aa1bf05f03bbb","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libhashbrown-eb0aa1bf05f03bbb.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[2649603941116771106,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":0,"byte_end":4820,"line_start":1,"line_end":161,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1623,"byte_end":1624,"line_start":60,"line_end":60,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"RawTable, Bucket, RawIntoIter, RawIter, Global, RawDrain, Allocator","parent":{"krate":0,"index":8}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":2255,"byte_end":2256,"line_start":84,"line_end":84,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1804}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":2810,"byte_end":2811,"line_start":101,"line_end":101,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1806}},{"kind":"Use","ref_id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3193,"byte_end":3200,"line_start":114,"line_end":114,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3222,"byte_end":3229,"line_start":115,"line_end":115,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":0,"byte_end":4820,"line_start":1,"line_end":161,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":1310},{"krate":0,"index":1339},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1885},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1899}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"/ This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ and `HashSet` types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: option_if_let_else, clippy :: redundant_else,\nclippy :: manual_map)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":861,"byte_end":1051,"line_start":27,"line_end":34,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1052,"byte_end":1074,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1075,"byte_end":1101,"line_start":36,"line_end":36,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1451,"byte_end":1454,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":473}],"decl_id":null,"docs":" Experimental and unsafe `RawTable` API. This module is only available if the\n `raw` feature is enabled.\n","sig":null,"attributes":[{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1308,"byte_end":1331,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ Experimental and unsafe `RawTable` API. This module is only available if the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1332,"byte_end":1412,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ `raw` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":1413,"byte_end":1442,"line_start":54,"line_end":54,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":91638,"byte_end":91647,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"name":"Allocator","qualname":"::raw::inner::alloc::inner::Allocator","value":"Allocator","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":91661,"byte_end":91669,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"allocate","qualname":"::raw::inner::alloc::inner::Allocator::allocate","value":"pub fn allocate(&Self, Layout) -> Result<NonNull<u8>, ()>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":91739,"byte_end":91749,"line_start":38,"line_end":38,"column_start":19,"column_end":29},"name":"deallocate","qualname":"::raw::inner::alloc::inner::Allocator::deallocate","value":"pub unsafe fn deallocate(&Self, NonNull<u8>, Layout)","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":91841,"byte_end":91847,"line_start":42,"line_end":42,"column_start":16,"column_end":22},"name":"Global","qualname":"::raw::inner::alloc::inner::Global","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16164,"byte_end":16170,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::inner::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":156}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[{"value":"/ A reference to a hash table bucket containing a `T`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":15901,"byte_end":15957,"line_start":277,"line_end":277,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":15958,"byte_end":15961,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ This is usually just a pointer to the element itself. However if the element","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":15962,"byte_end":16042,"line_start":279,"line_end":279,"column_start":1,"column_end":81}},{"value":"/ is a ZST, then we instead track the index of the element in the table so","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16043,"byte_end":16119,"line_start":280,"line_end":280,"column_start":1,"column_end":77}},{"value":"/ that `erase` works properly.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16120,"byte_end":16152,"line_start":281,"line_end":281,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":17523,"byte_end":17529,"line_start":323,"line_end":323,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18213,"byte_end":18217,"line_start":343,"line_end":343,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"pub unsafe fn drop(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18339,"byte_end":18343,"line_start":347,"line_end":347,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"pub unsafe fn read(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18460,"byte_end":18465,"line_start":351,"line_end":351,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"pub unsafe fn write(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18590,"byte_end":18596,"line_start":355,"line_end":355,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"pub unsafe fn as_ref<'a>(&Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18716,"byte_end":18722,"line_start":359,"line_end":359,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"pub unsafe fn as_mut<'a>(&Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18850,"byte_end":18874,"line_start":363,"line_end":363,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping(&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":19026,"byte_end":19034,"line_start":369,"line_end":369,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::inner::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[{"value":"/ A raw hash table with an unsafe API.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":18974,"byte_end":19014,"line_start":368,"line_end":368,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20239,"byte_end":20242,"line_start":402,"line_end":402,"column_start":18,"column_end":21},"name":"new","qualname":"<RawTable<T, Global>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":19863,"byte_end":19928,"line_start":396,"line_end":396,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":19933,"byte_end":19936,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":19941,"byte_end":20013,"line_start":398,"line_end":398,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20018,"byte_end":20091,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20096,"byte_end":20172,"line_start":400,"line_end":400,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20558,"byte_end":20575,"line_start":412,"line_end":412,"column_start":12,"column_end":29},"name":"try_with_capacity","qualname":"<RawTable<T, Global>>::try_with_capacity","value":"pub fn try_with_capacity(usize) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table with at least enough capacity\n for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table with at least enough capacity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20374,"byte_end":20445,"line_start":409,"line_end":409,"column_start":5,"column_end":76}},{"value":"/ for inserting the given number of elements without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20450,"byte_end":20518,"line_start":410,"line_end":410,"column_start":5,"column_end":73}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20523,"byte_end":20546,"line_start":411,"line_end":411,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20837,"byte_end":20850,"line_start":418,"line_end":418,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T, Global>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table with at least enough capacity for inserting","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20692,"byte_end":20766,"line_start":416,"line_end":416,"column_start":5,"column_end":79}},{"value":"/ the given number of elements without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20771,"byte_end":20825,"line_start":417,"line_end":417,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":21392,"byte_end":21398,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"new_in","qualname":"<RawTable<T, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory, using the\n given allocator.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory, using the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20987,"byte_end":21062,"line_start":424,"line_end":424,"column_start":5,"column_end":80}},{"value":"/ given allocator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":21067,"byte_end":21087,"line_start":425,"line_end":425,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":21092,"byte_end":21095,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":21100,"byte_end":21172,"line_start":427,"line_end":427,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":21177,"byte_end":21250,"line_start":428,"line_end":428,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":21255,"byte_end":21331,"line_start":429,"line_end":429,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":22941,"byte_end":22961,"line_start":481,"line_end":481,"column_start":12,"column_end":32},"name":"try_with_capacity_in","qualname":"<RawTable<T, A>>::try_with_capacity_in","value":"pub fn try_with_capacity_in(usize, A) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table using the given allocator, with at least enough\n capacity for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table using the given allocator, with at least enough","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":22730,"byte_end":22819,"line_start":478,"line_end":478,"column_start":5,"column_end":94}},{"value":"/ capacity for inserting the given number of elements without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":22824,"byte_end":22901,"line_start":479,"line_end":479,"column_start":5,"column_end":82}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":22906,"byte_end":22929,"line_start":480,"line_end":480,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":23284,"byte_end":23300,"line_start":487,"line_end":487,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<RawTable<T, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table using the given allocator, with at least enough capacity for\n inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table using the given allocator, with at least enough capacity for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":23112,"byte_end":23203,"line_start":485,"line_end":485,"column_start":5,"column_end":96}},{"value":"/ inserting the given number of elements without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":23208,"byte_end":23272,"line_start":486,"line_end":486,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":23957,"byte_end":23965,"line_start":503,"line_end":503,"column_start":19,"column_end":27},"name":"data_end","qualname":"<RawTable<T, A>>::data_end","value":"pub unsafe fn data_end(&Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns pointer to one past last element of data table.\n","sig":null,"attributes":[{"value":"/ Returns pointer to one past last element of data table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":23830,"byte_end":23889,"line_start":501,"line_end":501,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":24428,"byte_end":24440,"line_start":516,"line_end":516,"column_start":19,"column_end":31},"name":"bucket_index","qualname":"<RawTable<T, A>>::bucket_index","value":"pub unsafe fn bucket_index(&Self, &Bucket<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of a bucket from a `Bucket`.\n","sig":null,"attributes":[{"value":"/ Returns the index of a bucket from a `Bucket`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":24310,"byte_end":24360,"line_start":514,"line_end":514,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":24653,"byte_end":24659,"line_start":522,"line_end":522,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T, A>>::bucket","value":"pub unsafe fn bucket(&Self, usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to an element in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":24536,"byte_end":24585,"line_start":520,"line_end":520,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25061,"byte_end":25074,"line_start":531,"line_end":531,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T, A>>::erase_no_drop","value":"pub unsafe fn erase_no_drop(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table without dropping it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":24863,"byte_end":24920,"line_start":528,"line_end":528,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"0.8.1\", note = \"use erase or remove instead\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":24974,"byte_end":25042,"line_start":530,"line_end":530,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25391,"byte_end":25396,"line_start":540,"line_end":540,"column_start":19,"column_end":24},"name":"erase","qualname":"<RawTable<T, A>>::erase","value":"pub unsafe fn erase(&mut Self, Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table, dropping it in place.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table, dropping it in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25194,"byte_end":25253,"line_start":536,"line_end":536,"column_start":5,"column_end":64}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25307,"byte_end":25347,"line_start":538,"line_end":538,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25352,"byte_end":25372,"line_start":539,"line_end":539,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25772,"byte_end":25783,"line_start":550,"line_end":550,"column_start":12,"column_end":23},"name":"erase_entry","qualname":"<RawTable<T, A>>::erase_entry","value":"pub fn erase_entry<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds and erases an element from the table, dropping it in place.\n Returns true if an element was found.\n","sig":null,"attributes":[{"value":"/ Finds and erases an element from the table, dropping it in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25568,"byte_end":25637,"line_start":546,"line_end":546,"column_start":5,"column_end":74}},{"value":"/ Returns true if an element was found.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25642,"byte_end":25683,"line_start":547,"line_end":547,"column_start":5,"column_end":46}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":25688,"byte_end":25711,"line_start":548,"line_end":548,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26260,"byte_end":26266,"line_start":564,"line_end":564,"column_start":19,"column_end":25},"name":"remove","qualname":"<RawTable<T, A>>::remove","value":"pub unsafe fn remove(&mut Self, Bucket<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Removes an element from the table, returning it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26070,"byte_end":26122,"line_start":560,"line_end":560,"column_start":5,"column_end":57}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26176,"byte_end":26216,"line_start":562,"line_end":562,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26221,"byte_end":26241,"line_start":563,"line_end":563,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26491,"byte_end":26503,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawTable<T, A>>::remove_entry","value":"pub fn remove_entry<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Finds and removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Finds and removes an element from the table, returning it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26368,"byte_end":26430,"line_start":569,"line_end":569,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26906,"byte_end":26919,"line_start":581,"line_end":581,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T, A>>::clear_no_drop","value":"pub fn clear_no_drop(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"/ Marks all table buckets as empty without dropping their contents.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26776,"byte_end":26845,"line_start":579,"line_end":579,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":27115,"byte_end":27120,"line_start":587,"line_end":587,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"/ Removes all elements from the table without freeing the backing memory.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":26979,"byte_end":27054,"line_start":585,"line_end":585,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":27669,"byte_end":27678,"line_start":605,"line_end":605,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T, A>>::shrink_to","value":"pub fn shrink_to<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"/ Shrinks the table to fit `max(self.len(), min_size)` elements.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":27542,"byte_end":27608,"line_start":603,"line_end":603,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":29205,"byte_end":29212,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T, A>>::reserve","value":"pub fn reserve<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"/ Ensures that at least `additional` items can be inserted into the table","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":29039,"byte_end":29114,"line_start":640,"line_end":640,"column_start":5,"column_end":80}},{"value":"/ without reallocation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":29119,"byte_end":29144,"line_start":641,"line_end":641,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":29798,"byte_end":29809,"line_start":658,"line_end":658,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T, A>>::try_reserve","value":"pub fn try_reserve<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"/ Tries to ensure that at least `additional` items can be inserted into","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":29624,"byte_end":29697,"line_start":655,"line_end":655,"column_start":5,"column_end":78}},{"value":"/ the table without reallocation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":29702,"byte_end":29737,"line_start":656,"line_end":656,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":36478,"byte_end":36484,"line_start":818,"line_end":818,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T, A>>::insert","value":"pub fn insert<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, and returns its raw bucket.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, and returns its raw bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":36262,"byte_end":36331,"line_start":814,"line_end":814,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":36336,"byte_end":36339,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":36344,"byte_end":36417,"line_start":816,"line_end":816,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37683,"byte_end":37701,"line_start":847,"line_end":847,"column_start":12,"column_end":30},"name":"try_insert_no_grow","qualname":"<RawTable<T, A>>::try_insert_no_grow","value":"pub fn try_insert_no_grow(&mut Self, u64, T) -> Result<Bucket<T>, T>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to insert a new element without growing the table and return its raw bucket.","sig":null,"attributes":[{"value":"/ Attempts to insert a new element without growing the table and return its raw bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37300,"byte_end":37389,"line_start":839,"line_end":839,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37394,"byte_end":37397,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err` containing the given element if inserting it would require growing the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37402,"byte_end":37493,"line_start":841,"line_end":841,"column_start":5,"column_end":96}},{"value":"/ table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37498,"byte_end":37508,"line_start":842,"line_end":842,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37513,"byte_end":37516,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37521,"byte_end":37594,"line_start":844,"line_end":844,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":37599,"byte_end":37622,"line_start":845,"line_end":845,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38312,"byte_end":38324,"line_start":864,"line_end":864,"column_start":12,"column_end":24},"name":"insert_entry","qualname":"<RawTable<T, A>>::insert_entry","value":"pub fn insert_entry<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38085,"byte_end":38165,"line_start":860,"line_end":860,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38170,"byte_end":38173,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38178,"byte_end":38251,"line_start":862,"line_end":862,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38832,"byte_end":38846,"line_start":875,"line_end":875,"column_start":12,"column_end":26},"name":"insert_no_grow","qualname":"<RawTable<T, A>>::insert_no_grow","value":"pub fn insert_no_grow(&mut Self, u64, T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, without growing the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38469,"byte_end":38537,"line_start":868,"line_end":868,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38542,"byte_end":38545,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ There must be enough space in the table to insert the new element.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38550,"byte_end":38620,"line_start":870,"line_end":870,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38625,"byte_end":38628,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38633,"byte_end":38706,"line_start":872,"line_end":872,"column_start":5,"column_end":78}},{"value":"cfg(any(feature = \"raw\", feature = \"rustc-internal-api\"))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":38760,"byte_end":38820,"line_start":874,"line_end":874,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39704,"byte_end":39723,"line_start":897,"line_end":897,"column_start":19,"column_end":38},"name":"replace_bucket_with","qualname":"<RawTable<T, A>>::replace_bucket_with","value":"pub unsafe fn replace_bucket_with<F>(&mut Self, Bucket<T>, F) -> bool where\nF: FnOnce(T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Temporary removes a bucket, applying the given function to the removed\n element and optionally put back the returned value in the same bucket.","sig":null,"attributes":[{"value":"/ Temporary removes a bucket, applying the given function to the removed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39334,"byte_end":39408,"line_start":890,"line_end":890,"column_start":5,"column_end":79}},{"value":"/ element and optionally put back the returned value in the same bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39413,"byte_end":39487,"line_start":891,"line_end":891,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39492,"byte_end":39495,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the bucket still contains an element","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39500,"byte_end":39558,"line_start":893,"line_end":893,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39563,"byte_end":39566,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given bucket is actually occupied.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":39571,"byte_end":39636,"line_start":895,"line_end":895,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":40423,"byte_end":40427,"line_start":919,"line_end":919,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T, A>>::find","value":"pub fn find<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"/ Searches for an element in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":40356,"byte_end":40397,"line_start":917,"line_end":917,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":40402,"byte_end":40411,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":40832,"byte_end":40835,"line_start":933,"line_end":933,"column_start":12,"column_end":15},"name":"get","qualname":"<RawTable<T, A>>::get","value":"pub fn get<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to an element in the table.\n","sig":null,"attributes":[{"value":"/ Gets a reference to an element in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":40758,"byte_end":40806,"line_start":931,"line_end":931,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":40811,"byte_end":40820,"line_start":932,"line_end":932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":41183,"byte_end":41190,"line_start":943,"line_end":943,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawTable<T, A>>::get_mut","value":"pub fn get_mut<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to an element in the table.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to an element in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":41101,"byte_end":41157,"line_start":941,"line_end":941,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":41162,"byte_end":41171,"line_start":942,"line_end":942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44591,"byte_end":44599,"line_start":1014,"line_end":1014,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44308,"byte_end":44381,"line_start":1009,"line_end":1009,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44386,"byte_end":44389,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the table might be able to hold","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44394,"byte_end":44459,"line_start":1011,"line_end":1011,"column_start":5,"column_end":70}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44464,"byte_end":44530,"line_start":1012,"line_end":1012,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44788,"byte_end":44791,"line_start":1020,"line_end":1020,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44679,"byte_end":44727,"line_start":1018,"line_end":1018,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44954,"byte_end":44961,"line_start":1026,"line_end":1026,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T, A>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":44846,"byte_end":44893,"line_start":1024,"line_end":1024,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45366,"byte_end":45370,"line_start":1035,"line_end":1035,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T, A>>::iter","value":"pub unsafe fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over every element in the table. It is up to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45026,"byte_end":45094,"line_start":1030,"line_end":1030,"column_start":5,"column_end":73}},{"value":"/ the caller to ensure that the `RawTable` outlives the `RawIter`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45099,"byte_end":45167,"line_start":1031,"line_end":1031,"column_start":5,"column_end":73}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIter`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45172,"byte_end":45240,"line_start":1032,"line_end":1032,"column_start":5,"column_end":73}},{"value":"/ struct, we have to make the `iter` method unsafe.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45245,"byte_end":45298,"line_start":1033,"line_end":1033,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46093,"byte_end":46102,"line_start":1051,"line_end":1051,"column_start":19,"column_end":28},"name":"iter_hash","qualname":"<RawTable<T, A>>::iter_hash","value":"pub unsafe fn iter_hash(&Self, u64) -> RawIterHash<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Returns an iterator over occupied buckets that could match a given hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45625,"byte_end":45701,"line_start":1043,"line_end":1043,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45706,"byte_end":45709,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ In rare cases, the iterator may return a bucket with a different hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45714,"byte_end":45788,"line_start":1045,"line_end":1045,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45793,"byte_end":45796,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45801,"byte_end":45870,"line_start":1047,"line_end":1047,"column_start":5,"column_end":74}},{"value":"/ `RawIterHash`. Because we cannot make the `next` method unsafe on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45875,"byte_end":45948,"line_start":1048,"line_end":1048,"column_start":5,"column_end":78}},{"value":"/ `RawIterHash` struct, we have to make the `iter_hash` method unsafe.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":45953,"byte_end":46025,"line_start":1049,"line_end":1049,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46358,"byte_end":46363,"line_start":1058,"line_end":1058,"column_start":12,"column_end":17},"name":"drain","qualname":"<RawTable<T, A>>::drain","value":"pub fn drain(&mut Self) -> RawDrain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46196,"byte_end":46269,"line_start":1055,"line_end":1055,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46274,"byte_end":46297,"line_start":1056,"line_end":1056,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46910,"byte_end":46925,"line_start":1073,"line_end":1073,"column_start":19,"column_end":34},"name":"drain_iter_from","qualname":"<RawTable<T, A>>::drain_iter_from","value":"pub unsafe fn drain_iter_from(&mut Self, RawIter<T>) -> RawDrain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46512,"byte_end":46585,"line_start":1065,"line_end":1065,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46590,"byte_end":46613,"line_start":1066,"line_end":1066,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46618,"byte_end":46621,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46626,"byte_end":46691,"line_start":1068,"line_end":1068,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46696,"byte_end":46699,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the iterator is valid for this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46704,"byte_end":46776,"line_start":1070,"line_end":1070,"column_start":5,"column_end":77}},{"value":"/ `RawTable` and covers all items that remain in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":46781,"byte_end":46842,"line_start":1071,"line_end":1071,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47578,"byte_end":47592,"line_start":1089,"line_end":1089,"column_start":19,"column_end":33},"name":"into_iter_from","qualname":"<RawTable<T, A>>::into_iter_from","value":"pub unsafe fn into_iter_from(Self, RawIter<T>) -> RawIntoIter<T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which consumes all elements from the table.","sig":null,"attributes":[{"value":"/ Returns an iterator which consumes all elements from the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47263,"byte_end":47330,"line_start":1083,"line_end":1083,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47335,"byte_end":47338,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47343,"byte_end":47408,"line_start":1085,"line_end":1085,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47413,"byte_end":47416,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the iterator is valid for this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47421,"byte_end":47493,"line_start":1087,"line_end":1087,"column_start":5,"column_end":77}},{"value":"/ `RawTable` and covers all items that remain in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":47498,"byte_end":47559,"line_start":1088,"line_end":1088,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":66929,"byte_end":66951,"line_start":1609,"line_end":1609,"column_start":12,"column_end":34},"name":"clone_from_with_hasher","qualname":"<RawTable<T, A>>::clone_from_with_hasher","value":"pub fn clone_from_with_hasher<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, &Self, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Variant of `clone_from` to use when a hasher is available.\n","sig":null,"attributes":[{"value":"/ Variant of `clone_from` to use when a hasher is available.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":66827,"byte_end":66889,"line_start":1607,"line_end":1607,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":66894,"byte_end":66917,"line_start":1608,"line_end":1608,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75969,"byte_end":75976,"line_start":1851,"line_end":1851,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::inner::RawIter","value":"RawIter {  }","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.","sig":null,"attributes":[{"value":"/ Iterator which returns a raw pointer to every full bucket in the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75162,"byte_end":75237,"line_start":1839,"line_end":1839,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75238,"byte_end":75241,"line_start":1840,"line_end":1840,"column_start":1,"column_end":4}},{"value":"/ For maximum flexibility this iterator is not bound by a lifetime, but you","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75242,"byte_end":75319,"line_start":1841,"line_end":1841,"column_start":1,"column_end":78}},{"value":"/ must observe several rules when using it:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75320,"byte_end":75365,"line_start":1842,"line_end":1842,"column_start":1,"column_end":46}},{"value":"/ - You must not free the hash table while iterating (including via growing/shrinking).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75366,"byte_end":75455,"line_start":1843,"line_end":1843,"column_start":1,"column_end":90}},{"value":"/ - It is fine to erase a bucket that has been yielded by the iterator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75456,"byte_end":75529,"line_start":1844,"line_end":1844,"column_start":1,"column_end":74}},{"value":"/ - Erasing a bucket that has not yet been yielded by the iterator may still","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75530,"byte_end":75608,"line_start":1845,"line_end":1845,"column_start":1,"column_end":79}},{"value":"/   result in the iterator yielding that bucket (unless `reflect_remove` is called).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75609,"byte_end":75695,"line_start":1846,"line_end":1846,"column_start":1,"column_end":87}},{"value":"/ - It is unspecified whether an element inserted after the iterator was","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75696,"byte_end":75770,"line_start":1847,"line_end":1847,"column_start":1,"column_end":75}},{"value":"/   created will be yielded by that iterator (unless `reflect_insert` is called).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75771,"byte_end":75854,"line_start":1848,"line_end":1848,"column_start":1,"column_end":84}},{"value":"/ - The order in which the iterator yields bucket is unspecified and may","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75855,"byte_end":75929,"line_start":1849,"line_end":1849,"column_start":1,"column_end":75}},{"value":"/   change in the future.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75930,"byte_end":75957,"line_start":1850,"line_end":1850,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76519,"byte_end":76533,"line_start":1865,"line_end":1865,"column_start":12,"column_end":26},"name":"reflect_remove","qualname":"<RawIter<T>>::reflect_remove","value":"pub fn reflect_remove(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects a removal from the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects a removal from the given bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76066,"byte_end":76143,"line_start":1857,"line_end":1857,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76148,"byte_end":76151,"line_start":1858,"line_end":1858,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76156,"byte_end":76225,"line_start":1859,"line_end":1859,"column_start":5,"column_end":74}},{"value":"/ for each removed bucket before `next` is called again.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76230,"byte_end":76288,"line_start":1860,"line_end":1860,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76293,"byte_end":76296,"line_start":1861,"line_end":1861,"column_start":5,"column_end":8}},{"value":"/ This method should be called _before_ the removal is made. It is not necessary to call this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76301,"byte_end":76396,"line_start":1862,"line_end":1862,"column_start":5,"column_end":100}},{"value":"/ method if you are removing an item that this iterator yielded in the past.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76401,"byte_end":76479,"line_start":1863,"line_end":1863,"column_start":5,"column_end":83}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76484,"byte_end":76507,"line_start":1864,"line_end":1864,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":77119,"byte_end":77133,"line_start":1879,"line_end":1879,"column_start":12,"column_end":26},"name":"reflect_insert","qualname":"<RawIter<T>>::reflect_insert","value":"pub fn reflect_insert(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects an insertion into the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects an insertion into the given bucket.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76617,"byte_end":76697,"line_start":1869,"line_end":1869,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76702,"byte_end":76705,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76710,"byte_end":76779,"line_start":1871,"line_end":1871,"column_start":5,"column_end":74}},{"value":"/ for each insert before `next` is called again.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76784,"byte_end":76834,"line_start":1872,"line_end":1872,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76839,"byte_end":76842,"line_start":1873,"line_end":1873,"column_start":5,"column_end":8}},{"value":"/ This method does not guarantee that an insertion of a bucket witha greater","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76847,"byte_end":76925,"line_start":1874,"line_end":1874,"column_start":5,"column_end":83}},{"value":"/ index than the last one yielded will be reflected in the iterator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76930,"byte_end":77000,"line_start":1875,"line_end":1875,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":77005,"byte_end":77008,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ This method should be called _after_ the given insert is made.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":77013,"byte_end":77079,"line_start":1877,"line_end":1877,"column_start":5,"column_end":71}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":77084,"byte_end":77107,"line_start":1878,"line_end":1878,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83213,"byte_end":83224,"line_start":2019,"line_end":2019,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::inner::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes a table and returns elements.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83144,"byte_end":83201,"line_start":2018,"line_end":2018,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83485,"byte_end":83489,"line_start":2028,"line_end":2028,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T, A>>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85199,"byte_end":85207,"line_start":2085,"line_end":2085,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::inner::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes elements without freeing the table storage.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85116,"byte_end":85187,"line_start":2084,"line_end":2084,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85791,"byte_end":85795,"line_start":2101,"line_end":2101,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87344,"byte_end":87355,"line_start":2151,"line_end":2151,"column_start":12,"column_end":23},"name":"RawIterHash","qualname":"::raw::inner::RawIterHash","value":"RawIterHash {  }","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Iterator over occupied buckets that could match a given hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87188,"byte_end":87253,"line_start":2148,"line_end":2148,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87254,"byte_end":87257,"line_start":2149,"line_end":2149,"column_start":1,"column_end":4}},{"value":"/ In rare cases, the iterator may return a bucket with a different hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87258,"byte_end":87332,"line_start":2150,"line_end":2150,"column_start":1,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97443,"byte_end":97461,"line_start":21,"line_end":21,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"pub enum DefaultHashBuilder { }","parent":null,"children":[],"decl_id":null,"docs":" Dummy default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Dummy default hasher for `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97363,"byte_end":97402,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"cfg(not(feature = \"ahash\"))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97403,"byte_end":97433,"line_start":20,"line_end":20,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103732,"byte_end":103739,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97466,"byte_end":97532,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97533,"byte_end":97536,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97537,"byte_end":97609,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97610,"byte_end":97686,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97687,"byte_end":97766,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97767,"byte_end":97803,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97804,"byte_end":97807,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97808,"byte_end":97884,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97885,"byte_end":97965,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":97966,"byte_end":98047,"line_start":32,"line_end":32,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98048,"byte_end":98051,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98052,"byte_end":98135,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98136,"byte_end":98214,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98215,"byte_end":98286,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98287,"byte_end":98306,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98307,"byte_end":98310,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98311,"byte_end":98322,"line_start":39,"line_end":39,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98323,"byte_end":98359,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98360,"byte_end":98367,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98368,"byte_end":98371,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98372,"byte_end":98442,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98443,"byte_end":98446,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98447,"byte_end":98524,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98525,"byte_end":98605,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98606,"byte_end":98681,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98682,"byte_end":98760,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98761,"byte_end":98764,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98765,"byte_end":98844,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98845,"byte_end":98923,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":98924,"byte_end":99004,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99005,"byte_end":99050,"line_start":53,"line_end":53,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99051,"byte_end":99054,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99055,"byte_end":99069,"line_start":55,"line_end":55,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99070,"byte_end":99073,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99074,"byte_end":99081,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99082,"byte_end":99109,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99110,"byte_end":99113,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99114,"byte_end":99182,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99183,"byte_end":99242,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99243,"byte_end":99285,"line_start":62,"line_end":62,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99286,"byte_end":99289,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99290,"byte_end":99315,"line_start":64,"line_end":64,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99316,"byte_end":99340,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99341,"byte_end":99394,"line_start":66,"line_end":66,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99395,"byte_end":99435,"line_start":67,"line_end":67,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99436,"byte_end":99442,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99443,"byte_end":99467,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99468,"byte_end":99510,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99511,"byte_end":99546,"line_start":71,"line_end":71,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99547,"byte_end":99553,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99554,"byte_end":99578,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99579,"byte_end":99621,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99622,"byte_end":99660,"line_start":75,"line_end":75,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99661,"byte_end":99667,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99668,"byte_end":99692,"line_start":77,"line_end":77,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99693,"byte_end":99749,"line_start":78,"line_end":78,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99750,"byte_end":99791,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99792,"byte_end":99798,"line_start":80,"line_end":80,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99799,"byte_end":99802,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99803,"byte_end":99835,"line_start":82,"line_end":82,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99836,"byte_end":99906,"line_start":83,"line_end":83,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99907,"byte_end":99946,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":99947,"byte_end":100001,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100002,"byte_end":100074,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100075,"byte_end":100112,"line_start":87,"line_end":87,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100113,"byte_end":100118,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100119,"byte_end":100122,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100123,"byte_end":100196,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100197,"byte_end":100258,"line_start":91,"line_end":91,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100259,"byte_end":100262,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100263,"byte_end":100315,"line_start":93,"line_end":93,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100316,"byte_end":100393,"line_start":94,"line_end":94,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100394,"byte_end":100421,"line_start":95,"line_end":95,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100422,"byte_end":100460,"line_start":96,"line_end":96,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100461,"byte_end":100522,"line_start":97,"line_end":97,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100523,"byte_end":100578,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100579,"byte_end":100588,"line_start":99,"line_end":99,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100589,"byte_end":100594,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100595,"byte_end":100598,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100599,"byte_end":100671,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100672,"byte_end":100745,"line_start":103,"line_end":103,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100746,"byte_end":100749,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100750,"byte_end":100781,"line_start":105,"line_end":105,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100782,"byte_end":100823,"line_start":106,"line_end":106,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100824,"byte_end":100869,"line_start":107,"line_end":107,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100870,"byte_end":100875,"line_start":108,"line_end":108,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100876,"byte_end":100883,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100884,"byte_end":100887,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100888,"byte_end":100963,"line_start":111,"line_end":111,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":100964,"byte_end":101044,"line_start":112,"line_end":112,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101045,"byte_end":101062,"line_start":113,"line_end":113,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101063,"byte_end":101066,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101067,"byte_end":101074,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101075,"byte_end":101102,"line_start":116,"line_end":116,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101103,"byte_end":101106,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101107,"byte_end":101175,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101176,"byte_end":101229,"line_start":119,"line_end":119,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101230,"byte_end":101272,"line_start":120,"line_end":120,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101273,"byte_end":101276,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101277,"byte_end":101310,"line_start":122,"line_end":122,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101311,"byte_end":101386,"line_start":123,"line_end":123,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101387,"byte_end":101422,"line_start":124,"line_end":124,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101423,"byte_end":101433,"line_start":125,"line_end":125,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101434,"byte_end":101439,"line_start":126,"line_end":126,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101440,"byte_end":101443,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101444,"byte_end":101496,"line_start":128,"line_end":128,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101497,"byte_end":101545,"line_start":129,"line_end":129,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101546,"byte_end":101549,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101550,"byte_end":101623,"line_start":131,"line_end":131,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101624,"byte_end":101652,"line_start":132,"line_end":132,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101653,"byte_end":101720,"line_start":133,"line_end":133,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101721,"byte_end":101724,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101725,"byte_end":101793,"line_start":135,"line_end":135,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101794,"byte_end":101853,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101854,"byte_end":101886,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101887,"byte_end":101894,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101895,"byte_end":101898,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101899,"byte_end":101992,"line_start":140,"line_end":140,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":101993,"byte_end":102031,"line_start":141,"line_end":141,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102032,"byte_end":102035,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102036,"byte_end":102095,"line_start":143,"line_end":143,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102096,"byte_end":102160,"line_start":144,"line_end":144,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102161,"byte_end":102234,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102235,"byte_end":102306,"line_start":146,"line_end":146,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102307,"byte_end":102372,"line_start":147,"line_end":147,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102373,"byte_end":102405,"line_start":148,"line_end":148,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102406,"byte_end":102446,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102447,"byte_end":102513,"line_start":150,"line_end":150,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102514,"byte_end":102555,"line_start":151,"line_end":151,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102556,"byte_end":102601,"line_start":152,"line_end":152,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102602,"byte_end":102605,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102606,"byte_end":102613,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102614,"byte_end":102641,"line_start":155,"line_end":155,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102642,"byte_end":102645,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102646,"byte_end":102687,"line_start":157,"line_end":157,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102688,"byte_end":102707,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102708,"byte_end":102729,"line_start":159,"line_end":159,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102730,"byte_end":102754,"line_start":160,"line_end":160,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102755,"byte_end":102760,"line_start":161,"line_end":161,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102761,"byte_end":102764,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102765,"byte_end":102782,"line_start":163,"line_end":163,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102783,"byte_end":102816,"line_start":164,"line_end":164,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102817,"byte_end":102870,"line_start":165,"line_end":165,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102871,"byte_end":102946,"line_start":166,"line_end":166,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102947,"byte_end":102956,"line_start":167,"line_end":167,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102957,"byte_end":102962,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102963,"byte_end":102966,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":102967,"byte_end":103024,"line_start":170,"line_end":170,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103025,"byte_end":103062,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103063,"byte_end":103066,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103067,"byte_end":103122,"line_start":173,"line_end":173,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103123,"byte_end":103178,"line_start":174,"line_end":174,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103179,"byte_end":103236,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103237,"byte_end":103240,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103241,"byte_end":103310,"line_start":177,"line_end":177,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103311,"byte_end":103349,"line_start":178,"line_end":178,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103350,"byte_end":103401,"line_start":179,"line_end":179,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103402,"byte_end":103407,"line_start":180,"line_end":180,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103408,"byte_end":103415,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103416,"byte_end":103419,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103420,"byte_end":103497,"line_start":183,"line_end":183,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103498,"byte_end":103501,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103502,"byte_end":103509,"line_start":185,"line_end":185,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103510,"byte_end":103537,"line_start":186,"line_end":186,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103538,"byte_end":103541,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103542,"byte_end":103640,"line_start":188,"line_end":188,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103641,"byte_end":103676,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103677,"byte_end":103712,"line_start":190,"line_end":190,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103713,"byte_end":103720,"line_start":191,"line_end":191,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109122,"byte_end":109133,"line_start":355,"line_end":355,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108115,"byte_end":108191,"line_start":329,"line_end":329,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108196,"byte_end":108205,"line_start":330,"line_end":330,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108210,"byte_end":108213,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108218,"byte_end":108271,"line_start":332,"line_end":332,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108276,"byte_end":108279,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108284,"byte_end":108347,"line_start":334,"line_end":334,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108352,"byte_end":108417,"line_start":335,"line_end":335,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108422,"byte_end":108485,"line_start":336,"line_end":336,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108490,"byte_end":108554,"line_start":337,"line_end":337,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108559,"byte_end":108562,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108567,"byte_end":108643,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108648,"byte_end":108712,"line_start":340,"line_end":340,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108717,"byte_end":108720,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108725,"byte_end":108739,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108744,"byte_end":108747,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108752,"byte_end":108759,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108764,"byte_end":108791,"line_start":345,"line_end":345,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108796,"byte_end":108844,"line_start":346,"line_end":346,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108849,"byte_end":108852,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108857,"byte_end":108899,"line_start":348,"line_end":348,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108904,"byte_end":108946,"line_start":349,"line_end":349,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108951,"byte_end":108972,"line_start":350,"line_end":350,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108977,"byte_end":108984,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108989,"byte_end":108992,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108997,"byte_end":109055,"line_start":353,"line_end":353,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110388,"byte_end":110412,"line_start":389,"line_end":389,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109259,"byte_end":109339,"line_start":362,"line_end":362,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109344,"byte_end":109365,"line_start":363,"line_end":363,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109370,"byte_end":109373,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109378,"byte_end":109452,"line_start":365,"line_end":365,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109457,"byte_end":109526,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109531,"byte_end":109534,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109539,"byte_end":109602,"line_start":368,"line_end":368,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109607,"byte_end":109672,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109677,"byte_end":109740,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109745,"byte_end":109809,"line_start":371,"line_end":371,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109814,"byte_end":109817,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109822,"byte_end":109898,"line_start":373,"line_end":373,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109903,"byte_end":109967,"line_start":374,"line_end":374,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109972,"byte_end":109975,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109980,"byte_end":109994,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":109999,"byte_end":110002,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110007,"byte_end":110014,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110019,"byte_end":110046,"line_start":379,"line_end":379,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110051,"byte_end":110099,"line_start":380,"line_end":380,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110104,"byte_end":110107,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110112,"byte_end":110154,"line_start":382,"line_end":382,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110159,"byte_end":110218,"line_start":383,"line_end":383,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110223,"byte_end":110244,"line_start":384,"line_end":384,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110249,"byte_end":110256,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110261,"byte_end":110264,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110269,"byte_end":110327,"line_start":387,"line_end":387,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111452,"byte_end":111466,"line_start":419,"line_end":419,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110633,"byte_end":110709,"line_start":398,"line_end":398,"column_start":5,"column_end":81}},{"value":"/ keys. It will be allocated with the given allocator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110714,"byte_end":110770,"line_start":399,"line_end":399,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110775,"byte_end":110778,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110783,"byte_end":110836,"line_start":401,"line_end":401,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110841,"byte_end":110844,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110849,"byte_end":110912,"line_start":403,"line_end":403,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110917,"byte_end":110982,"line_start":404,"line_end":404,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110987,"byte_end":111050,"line_start":405,"line_end":405,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111055,"byte_end":111119,"line_start":406,"line_end":406,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111124,"byte_end":111127,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111132,"byte_end":111146,"line_start":408,"line_end":408,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111151,"byte_end":111154,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111159,"byte_end":111166,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111171,"byte_end":111198,"line_start":411,"line_end":411,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111203,"byte_end":111251,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111256,"byte_end":111259,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111264,"byte_end":111306,"line_start":414,"line_end":414,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111311,"byte_end":111353,"line_start":415,"line_end":415,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111358,"byte_end":111379,"line_start":416,"line_end":416,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111384,"byte_end":111391,"line_start":417,"line_end":417,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112557,"byte_end":112584,"line_start":448,"line_end":448,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111610,"byte_end":111690,"line_start":426,"line_end":426,"column_start":5,"column_end":85}},{"value":"/ to hash the keys. It will be allocated with the given allocator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111695,"byte_end":111763,"line_start":427,"line_end":427,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111768,"byte_end":111771,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111776,"byte_end":111850,"line_start":429,"line_end":429,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111855,"byte_end":111924,"line_start":430,"line_end":430,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111929,"byte_end":111932,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":111937,"byte_end":112000,"line_start":432,"line_end":432,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112005,"byte_end":112070,"line_start":433,"line_end":433,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112075,"byte_end":112138,"line_start":434,"line_end":434,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112143,"byte_end":112207,"line_start":435,"line_end":435,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112212,"byte_end":112215,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112220,"byte_end":112234,"line_start":437,"line_end":437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112239,"byte_end":112242,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112247,"byte_end":112254,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112259,"byte_end":112286,"line_start":440,"line_end":440,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112291,"byte_end":112339,"line_start":441,"line_end":441,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112344,"byte_end":112347,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112352,"byte_end":112394,"line_start":443,"line_end":443,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112399,"byte_end":112458,"line_start":444,"line_end":444,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112463,"byte_end":112484,"line_start":445,"line_end":445,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112489,"byte_end":112496,"line_start":446,"line_end":446,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113297,"byte_end":113303,"line_start":470,"line_end":470,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112765,"byte_end":112818,"line_start":455,"line_end":455,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112823,"byte_end":112826,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112831,"byte_end":112909,"line_start":457,"line_end":457,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112914,"byte_end":112917,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112922,"byte_end":112936,"line_start":459,"line_end":459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112941,"byte_end":112944,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112949,"byte_end":112956,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112961,"byte_end":112988,"line_start":462,"line_end":462,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":112993,"byte_end":113041,"line_start":463,"line_end":463,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113046,"byte_end":113049,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113054,"byte_end":113101,"line_start":465,"line_end":465,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113106,"byte_end":113168,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113173,"byte_end":113224,"line_start":467,"line_end":467,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113229,"byte_end":113236,"line_start":468,"line_end":468,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113847,"byte_end":113855,"line_start":487,"line_end":487,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113357,"byte_end":113430,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113435,"byte_end":113438,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113443,"byte_end":113518,"line_start":476,"line_end":476,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113523,"byte_end":113589,"line_start":477,"line_end":477,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113594,"byte_end":113597,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113602,"byte_end":113616,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113621,"byte_end":113624,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113629,"byte_end":113636,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113641,"byte_end":113668,"line_start":482,"line_end":482,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113673,"byte_end":113734,"line_start":483,"line_end":483,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113739,"byte_end":113774,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113779,"byte_end":113786,"line_start":485,"line_end":485,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114379,"byte_end":114383,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S, A>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113915,"byte_end":113968,"line_start":491,"line_end":491,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":113973,"byte_end":114014,"line_start":492,"line_end":492,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114019,"byte_end":114022,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114027,"byte_end":114041,"line_start":494,"line_end":494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114046,"byte_end":114049,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114054,"byte_end":114061,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114066,"byte_end":114093,"line_start":497,"line_end":497,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114098,"byte_end":114101,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114106,"byte_end":114139,"line_start":499,"line_end":499,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114144,"byte_end":114167,"line_start":500,"line_end":500,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114172,"byte_end":114195,"line_start":501,"line_end":501,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114200,"byte_end":114223,"line_start":502,"line_end":502,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114228,"byte_end":114231,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114236,"byte_end":114263,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114268,"byte_end":114296,"line_start":505,"line_end":505,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114301,"byte_end":114306,"line_start":506,"line_end":506,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114311,"byte_end":114318,"line_start":507,"line_end":507,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114926,"byte_end":114932,"line_start":531,"line_end":531,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S, A>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114458,"byte_end":114513,"line_start":513,"line_end":513,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114518,"byte_end":114559,"line_start":514,"line_end":514,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114564,"byte_end":114567,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114572,"byte_end":114586,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114591,"byte_end":114594,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114599,"byte_end":114606,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114611,"byte_end":114638,"line_start":519,"line_end":519,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114643,"byte_end":114646,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114651,"byte_end":114684,"line_start":521,"line_end":521,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114689,"byte_end":114712,"line_start":522,"line_end":522,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114717,"byte_end":114740,"line_start":523,"line_end":523,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114745,"byte_end":114768,"line_start":524,"line_end":524,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114773,"byte_end":114776,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114781,"byte_end":114810,"line_start":526,"line_end":526,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114815,"byte_end":114843,"line_start":527,"line_end":527,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114848,"byte_end":114853,"line_start":528,"line_end":528,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":114858,"byte_end":114865,"line_start":529,"line_end":529,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115585,"byte_end":115595,"line_start":558,"line_end":558,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S, A>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115011,"byte_end":115074,"line_start":535,"line_end":535,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115079,"byte_end":115124,"line_start":536,"line_end":536,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115129,"byte_end":115132,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115137,"byte_end":115151,"line_start":538,"line_end":538,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115156,"byte_end":115159,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115164,"byte_end":115171,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115176,"byte_end":115203,"line_start":541,"line_end":541,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115208,"byte_end":115211,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115216,"byte_end":115249,"line_start":543,"line_end":543,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115254,"byte_end":115257,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115262,"byte_end":115285,"line_start":545,"line_end":545,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115290,"byte_end":115313,"line_start":546,"line_end":546,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115318,"byte_end":115341,"line_start":547,"line_end":547,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115346,"byte_end":115349,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115354,"byte_end":115387,"line_start":549,"line_end":549,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115392,"byte_end":115417,"line_start":550,"line_end":550,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115422,"byte_end":115427,"line_start":551,"line_end":551,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115432,"byte_end":115435,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115440,"byte_end":115469,"line_start":553,"line_end":553,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115474,"byte_end":115502,"line_start":554,"line_end":554,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115507,"byte_end":115512,"line_start":555,"line_end":555,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115517,"byte_end":115524,"line_start":556,"line_end":556,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116218,"byte_end":116222,"line_start":582,"line_end":582,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115709,"byte_end":115773,"line_start":564,"line_end":564,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115778,"byte_end":115828,"line_start":565,"line_end":565,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115833,"byte_end":115836,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115841,"byte_end":115855,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115860,"byte_end":115863,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115868,"byte_end":115875,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115880,"byte_end":115907,"line_start":570,"line_end":570,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115912,"byte_end":115915,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115920,"byte_end":115953,"line_start":572,"line_end":572,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115958,"byte_end":115981,"line_start":573,"line_end":573,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":115986,"byte_end":116009,"line_start":574,"line_end":574,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116014,"byte_end":116037,"line_start":575,"line_end":575,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116042,"byte_end":116045,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116050,"byte_end":116084,"line_start":577,"line_end":577,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116089,"byte_end":116135,"line_start":578,"line_end":578,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116140,"byte_end":116145,"line_start":579,"line_end":579,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116150,"byte_end":116157,"line_start":580,"line_end":580,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117122,"byte_end":117130,"line_start":616,"line_end":616,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S, A>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116457,"byte_end":116521,"line_start":592,"line_end":592,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116526,"byte_end":116568,"line_start":593,"line_end":593,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116573,"byte_end":116627,"line_start":594,"line_end":594,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116632,"byte_end":116635,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116640,"byte_end":116654,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116659,"byte_end":116662,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116667,"byte_end":116674,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116679,"byte_end":116706,"line_start":599,"line_end":599,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116711,"byte_end":116714,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116719,"byte_end":116752,"line_start":601,"line_end":601,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116757,"byte_end":116780,"line_start":602,"line_end":602,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116785,"byte_end":116808,"line_start":603,"line_end":603,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116813,"byte_end":116836,"line_start":604,"line_end":604,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116841,"byte_end":116844,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116849,"byte_end":116873,"line_start":606,"line_end":606,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116878,"byte_end":116914,"line_start":607,"line_end":607,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116919,"byte_end":116937,"line_start":608,"line_end":608,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116942,"byte_end":116947,"line_start":609,"line_end":609,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116952,"byte_end":116955,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116960,"byte_end":116988,"line_start":611,"line_end":611,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":116993,"byte_end":117039,"line_start":612,"line_end":612,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117044,"byte_end":117049,"line_start":613,"line_end":613,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117054,"byte_end":117061,"line_start":614,"line_end":614,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117847,"byte_end":117850,"line_start":645,"line_end":645,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117515,"byte_end":117561,"line_start":632,"line_end":632,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117566,"byte_end":117569,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117574,"byte_end":117588,"line_start":634,"line_end":634,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117593,"byte_end":117596,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117601,"byte_end":117608,"line_start":636,"line_end":636,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117613,"byte_end":117640,"line_start":637,"line_end":637,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117645,"byte_end":117648,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117653,"byte_end":117684,"line_start":639,"line_end":639,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117689,"byte_end":117716,"line_start":640,"line_end":640,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117721,"byte_end":117742,"line_start":641,"line_end":641,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117747,"byte_end":117774,"line_start":642,"line_end":642,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117779,"byte_end":117786,"line_start":643,"line_end":643,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118241,"byte_end":118249,"line_start":662,"line_end":662,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117905,"byte_end":117956,"line_start":649,"line_end":649,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117961,"byte_end":117964,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117969,"byte_end":117983,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117988,"byte_end":117991,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":117996,"byte_end":118003,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118008,"byte_end":118035,"line_start":654,"line_end":654,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118040,"byte_end":118043,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118048,"byte_end":118079,"line_start":656,"line_end":656,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118084,"byte_end":118110,"line_start":657,"line_end":657,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118115,"byte_end":118136,"line_start":658,"line_end":658,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118141,"byte_end":118168,"line_start":659,"line_end":659,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118173,"byte_end":118180,"line_start":660,"line_end":660,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118842,"byte_end":118847,"line_start":686,"line_end":686,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118302,"byte_end":118377,"line_start":666,"line_end":666,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118382,"byte_end":118413,"line_start":667,"line_end":667,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118418,"byte_end":118421,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118426,"byte_end":118440,"line_start":669,"line_end":669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118445,"byte_end":118448,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118453,"byte_end":118460,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118465,"byte_end":118492,"line_start":672,"line_end":672,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118497,"byte_end":118500,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118505,"byte_end":118536,"line_start":674,"line_end":674,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118541,"byte_end":118562,"line_start":675,"line_end":675,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118567,"byte_end":118588,"line_start":676,"line_end":676,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118593,"byte_end":118596,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118601,"byte_end":118638,"line_start":678,"line_end":678,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118643,"byte_end":118677,"line_start":679,"line_end":679,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118682,"byte_end":118720,"line_start":680,"line_end":680,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118725,"byte_end":118730,"line_start":681,"line_end":681,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118735,"byte_end":118738,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118743,"byte_end":118769,"line_start":683,"line_end":683,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118774,"byte_end":118781,"line_start":684,"line_end":684,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119378,"byte_end":119384,"line_start":705,"line_end":705,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":118959,"byte_end":119016,"line_start":692,"line_end":692,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119021,"byte_end":119024,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119029,"byte_end":119116,"line_start":694,"line_end":694,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119121,"byte_end":119124,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119129,"byte_end":119143,"line_start":696,"line_end":696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119148,"byte_end":119151,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119156,"byte_end":119163,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119168,"byte_end":119195,"line_start":699,"line_end":699,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119200,"byte_end":119203,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119208,"byte_end":119280,"line_start":701,"line_end":701,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119285,"byte_end":119320,"line_start":702,"line_end":702,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119325,"byte_end":119354,"line_start":703,"line_end":703,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119359,"byte_end":119366,"line_start":704,"line_end":704,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120800,"byte_end":120812,"line_start":746,"line_end":746,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, K, V, F, A> where\nF: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119801,"byte_end":119862,"line_start":720,"line_end":720,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119867,"byte_end":119918,"line_start":721,"line_end":721,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119923,"byte_end":119926,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `true` out","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":119931,"byte_end":120018,"line_start":723,"line_end":723,"column_start":5,"column_end":92}},{"value":"/ into another iterator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120023,"byte_end":120049,"line_start":724,"line_end":724,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120054,"byte_end":120057,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120062,"byte_end":120145,"line_start":726,"line_end":726,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120150,"byte_end":120195,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120200,"byte_end":120203,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120208,"byte_end":120222,"line_start":729,"line_end":729,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120227,"byte_end":120230,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120235,"byte_end":120242,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120247,"byte_end":120274,"line_start":732,"line_end":732,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120279,"byte_end":120282,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120287,"byte_end":120357,"line_start":734,"line_end":734,"column_start":5,"column_end":75}},{"value":"/ let drained: HashMap<i32, i32> = map.drain_filter(|k, _v| k % 2 == 0).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120362,"byte_end":120446,"line_start":735,"line_end":735,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120451,"byte_end":120454,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120459,"byte_end":120523,"line_start":737,"line_end":737,"column_start":5,"column_end":69}},{"value":"/ let mut odds = map.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120528,"byte_end":120587,"line_start":738,"line_end":738,"column_start":5,"column_end":64}},{"value":"/ evens.sort();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120592,"byte_end":120609,"line_start":739,"line_end":739,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120614,"byte_end":120630,"line_start":740,"line_end":740,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120635,"byte_end":120638,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120643,"byte_end":120683,"line_start":742,"line_end":742,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120688,"byte_end":120727,"line_start":743,"line_end":743,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":120732,"byte_end":120739,"line_start":744,"line_end":744,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121488,"byte_end":121493,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121121,"byte_end":121197,"line_start":759,"line_end":759,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121202,"byte_end":121216,"line_start":760,"line_end":760,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121221,"byte_end":121224,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121229,"byte_end":121243,"line_start":762,"line_end":762,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121248,"byte_end":121251,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121256,"byte_end":121263,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121268,"byte_end":121295,"line_start":765,"line_end":765,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121300,"byte_end":121303,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121308,"byte_end":121339,"line_start":767,"line_end":767,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121344,"byte_end":121365,"line_start":768,"line_end":768,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121370,"byte_end":121384,"line_start":769,"line_end":769,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121389,"byte_end":121415,"line_start":770,"line_end":770,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121420,"byte_end":121427,"line_start":771,"line_end":771,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122247,"byte_end":122254,"line_start":802,"line_end":802,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121657,"byte_end":121733,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121738,"byte_end":121806,"line_start":785,"line_end":785,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121811,"byte_end":121838,"line_start":786,"line_end":786,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121843,"byte_end":121846,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121851,"byte_end":121863,"line_start":788,"line_end":788,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121868,"byte_end":121871,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121876,"byte_end":121934,"line_start":790,"line_end":790,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121939,"byte_end":121942,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121947,"byte_end":122012,"line_start":792,"line_end":792,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122017,"byte_end":122020,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122025,"byte_end":122039,"line_start":794,"line_end":794,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122044,"byte_end":122047,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122052,"byte_end":122059,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122064,"byte_end":122091,"line_start":797,"line_end":797,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122096,"byte_end":122149,"line_start":798,"line_end":798,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122154,"byte_end":122174,"line_start":799,"line_end":799,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122179,"byte_end":122186,"line_start":800,"line_end":800,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123032,"byte_end":123043,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122398,"byte_end":122482,"line_start":807,"line_end":807,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122487,"byte_end":122566,"line_start":808,"line_end":808,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122571,"byte_end":122598,"line_start":809,"line_end":809,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122603,"byte_end":122606,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122611,"byte_end":122623,"line_start":811,"line_end":811,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122628,"byte_end":122631,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122636,"byte_end":122716,"line_start":813,"line_end":813,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122721,"byte_end":122737,"line_start":814,"line_end":814,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122742,"byte_end":122745,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122750,"byte_end":122764,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122769,"byte_end":122772,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122777,"byte_end":122784,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122789,"byte_end":122816,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122821,"byte_end":122876,"line_start":820,"line_end":820,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122881,"byte_end":122959,"line_start":821,"line_end":821,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":122964,"byte_end":122971,"line_start":822,"line_end":822,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123827,"byte_end":123840,"line_start":846,"line_end":846,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123221,"byte_end":123290,"line_start":829,"line_end":829,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123295,"byte_end":123360,"line_start":830,"line_end":830,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123365,"byte_end":123438,"line_start":831,"line_end":831,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123443,"byte_end":123446,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123451,"byte_end":123465,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123470,"byte_end":123473,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123478,"byte_end":123485,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123490,"byte_end":123517,"line_start":836,"line_end":836,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123522,"byte_end":123525,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123530,"byte_end":123595,"line_start":838,"line_end":838,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123600,"byte_end":123621,"line_start":839,"line_end":839,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123626,"byte_end":123647,"line_start":840,"line_end":840,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123652,"byte_end":123687,"line_start":841,"line_end":841,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123692,"byte_end":123716,"line_start":842,"line_end":842,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123721,"byte_end":123754,"line_start":843,"line_end":843,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123759,"byte_end":123766,"line_start":844,"line_end":844,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124826,"byte_end":124835,"line_start":875,"line_end":875,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":123958,"byte_end":124026,"line_start":851,"line_end":851,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124031,"byte_end":124109,"line_start":852,"line_end":852,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124114,"byte_end":124187,"line_start":853,"line_end":853,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124192,"byte_end":124195,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124200,"byte_end":124274,"line_start":855,"line_end":855,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124279,"byte_end":124309,"line_start":856,"line_end":856,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124314,"byte_end":124317,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124322,"byte_end":124336,"line_start":858,"line_end":858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124341,"byte_end":124344,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124349,"byte_end":124356,"line_start":860,"line_end":860,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124361,"byte_end":124388,"line_start":861,"line_end":861,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124393,"byte_end":124396,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124401,"byte_end":124466,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124471,"byte_end":124492,"line_start":864,"line_end":864,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124497,"byte_end":124518,"line_start":865,"line_end":865,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124523,"byte_end":124558,"line_start":866,"line_end":866,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124563,"byte_end":124585,"line_start":867,"line_end":867,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124590,"byte_end":124624,"line_start":868,"line_end":868,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124629,"byte_end":124650,"line_start":869,"line_end":869,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124655,"byte_end":124688,"line_start":870,"line_end":870,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124693,"byte_end":124715,"line_start":871,"line_end":871,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124720,"byte_end":124753,"line_start":872,"line_end":872,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124758,"byte_end":124765,"line_start":873,"line_end":873,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125595,"byte_end":125600,"line_start":900,"line_end":900,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S, A>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":124985,"byte_end":125067,"line_start":880,"line_end":880,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125072,"byte_end":125075,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125080,"byte_end":125094,"line_start":882,"line_end":882,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125099,"byte_end":125102,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125107,"byte_end":125114,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125119,"byte_end":125146,"line_start":885,"line_end":885,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125151,"byte_end":125154,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125159,"byte_end":125196,"line_start":887,"line_end":887,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125201,"byte_end":125204,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125209,"byte_end":125260,"line_start":889,"line_end":889,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125265,"byte_end":125318,"line_start":890,"line_end":890,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125323,"byte_end":125345,"line_start":891,"line_end":891,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125350,"byte_end":125355,"line_start":892,"line_end":892,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125360,"byte_end":125363,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125368,"byte_end":125401,"line_start":894,"line_end":894,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125406,"byte_end":125439,"line_start":895,"line_end":895,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125444,"byte_end":125477,"line_start":896,"line_end":896,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125482,"byte_end":125522,"line_start":897,"line_end":897,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":125527,"byte_end":125534,"line_start":898,"line_end":898,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126769,"byte_end":126772,"line_start":938,"line_end":938,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126121,"byte_end":126183,"line_start":918,"line_end":918,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126188,"byte_end":126191,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126196,"byte_end":126259,"line_start":920,"line_end":920,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126264,"byte_end":126331,"line_start":921,"line_end":921,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126336,"byte_end":126353,"line_start":922,"line_end":922,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126358,"byte_end":126361,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126366,"byte_end":126425,"line_start":924,"line_end":924,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126430,"byte_end":126494,"line_start":925,"line_end":925,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126499,"byte_end":126502,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126507,"byte_end":126521,"line_start":927,"line_end":927,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126526,"byte_end":126529,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126534,"byte_end":126541,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126546,"byte_end":126573,"line_start":930,"line_end":930,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126578,"byte_end":126581,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126586,"byte_end":126619,"line_start":932,"line_end":932,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126624,"byte_end":126647,"line_start":933,"line_end":933,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126652,"byte_end":126692,"line_start":934,"line_end":934,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126697,"byte_end":126731,"line_start":935,"line_end":935,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126736,"byte_end":126743,"line_start":936,"line_end":936,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":126748,"byte_end":126757,"line_start":937,"line_end":937,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127739,"byte_end":127752,"line_start":970,"line_end":970,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S, A>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127053,"byte_end":127118,"line_start":950,"line_end":950,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127123,"byte_end":127126,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127131,"byte_end":127203,"line_start":952,"line_end":952,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127208,"byte_end":127275,"line_start":953,"line_end":953,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127280,"byte_end":127297,"line_start":954,"line_end":954,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127302,"byte_end":127305,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127310,"byte_end":127369,"line_start":956,"line_end":956,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127374,"byte_end":127438,"line_start":957,"line_end":957,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127443,"byte_end":127446,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127451,"byte_end":127465,"line_start":959,"line_end":959,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127470,"byte_end":127473,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127478,"byte_end":127485,"line_start":961,"line_end":961,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127490,"byte_end":127517,"line_start":962,"line_end":962,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127522,"byte_end":127525,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127530,"byte_end":127563,"line_start":964,"line_end":964,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127568,"byte_end":127591,"line_start":965,"line_end":965,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127596,"byte_end":127652,"line_start":966,"line_end":966,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127657,"byte_end":127701,"line_start":967,"line_end":967,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127706,"byte_end":127713,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":127718,"byte_end":127727,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129182,"byte_end":129199,"line_start":1016,"line_end":1016,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S, A>>::get_key_value_mut","value":"pub fn get_key_value_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&K, &mut V)>\nwhere K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128314,"byte_end":128414,"line_start":992,"line_end":992,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128419,"byte_end":128422,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128427,"byte_end":128499,"line_start":994,"line_end":994,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128504,"byte_end":128571,"line_start":995,"line_end":995,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128576,"byte_end":128593,"line_start":996,"line_end":996,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128598,"byte_end":128601,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128606,"byte_end":128665,"line_start":998,"line_end":998,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128670,"byte_end":128734,"line_start":999,"line_end":999,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128739,"byte_end":128742,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128747,"byte_end":128761,"line_start":1001,"line_end":1001,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128766,"byte_end":128769,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128774,"byte_end":128781,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128786,"byte_end":128813,"line_start":1004,"line_end":1004,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128818,"byte_end":128821,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128826,"byte_end":128859,"line_start":1006,"line_end":1006,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128864,"byte_end":128887,"line_start":1007,"line_end":1007,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128892,"byte_end":128944,"line_start":1008,"line_end":1008,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128949,"byte_end":128971,"line_start":1009,"line_end":1009,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":128976,"byte_end":129004,"line_start":1010,"line_end":1010,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129009,"byte_end":129022,"line_start":1011,"line_end":1011,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129027,"byte_end":129091,"line_start":1012,"line_end":1012,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129096,"byte_end":129144,"line_start":1013,"line_end":1013,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129149,"byte_end":129156,"line_start":1014,"line_end":1014,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129161,"byte_end":129170,"line_start":1015,"line_end":1015,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130230,"byte_end":130242,"line_start":1048,"line_end":1048,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S, A>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129527,"byte_end":129596,"line_start":1028,"line_end":1028,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129601,"byte_end":129604,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129609,"byte_end":129672,"line_start":1030,"line_end":1030,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129677,"byte_end":129744,"line_start":1031,"line_end":1031,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129749,"byte_end":129766,"line_start":1032,"line_end":1032,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129771,"byte_end":129774,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129779,"byte_end":129838,"line_start":1034,"line_end":1034,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129843,"byte_end":129907,"line_start":1035,"line_end":1035,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129912,"byte_end":129915,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129920,"byte_end":129934,"line_start":1037,"line_end":1037,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129939,"byte_end":129942,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129947,"byte_end":129954,"line_start":1039,"line_end":1039,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129959,"byte_end":129986,"line_start":1040,"line_end":1040,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129991,"byte_end":129994,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":129999,"byte_end":130032,"line_start":1042,"line_end":1042,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130037,"byte_end":130060,"line_start":1043,"line_end":1043,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130065,"byte_end":130108,"line_start":1044,"line_end":1044,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130113,"byte_end":130157,"line_start":1045,"line_end":1045,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130162,"byte_end":130169,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":131099,"byte_end":131106,"line_start":1078,"line_end":1078,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S, A>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130383,"byte_end":130453,"line_start":1056,"line_end":1056,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130458,"byte_end":130461,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130466,"byte_end":130529,"line_start":1058,"line_end":1058,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130534,"byte_end":130601,"line_start":1059,"line_end":1059,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130606,"byte_end":130623,"line_start":1060,"line_end":1060,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130628,"byte_end":130631,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130636,"byte_end":130695,"line_start":1062,"line_end":1062,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130700,"byte_end":130764,"line_start":1063,"line_end":1063,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130769,"byte_end":130772,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130777,"byte_end":130791,"line_start":1065,"line_end":1065,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130796,"byte_end":130799,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130804,"byte_end":130811,"line_start":1067,"line_end":1067,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130816,"byte_end":130843,"line_start":1068,"line_end":1068,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130848,"byte_end":130851,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130856,"byte_end":130889,"line_start":1070,"line_end":1070,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130894,"byte_end":130917,"line_start":1071,"line_end":1071,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130922,"byte_end":130960,"line_start":1072,"line_end":1072,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130965,"byte_end":130982,"line_start":1073,"line_end":1073,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130987,"byte_end":130992,"line_start":1074,"line_end":1074,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":130997,"byte_end":131026,"line_start":1075,"line_end":1075,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":131031,"byte_end":131038,"line_start":1076,"line_end":1076,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137714,"byte_end":137720,"line_start":1261,"line_end":1261,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S, A>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":136739,"byte_end":136781,"line_start":1235,"line_end":1235,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":136786,"byte_end":136789,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":136794,"byte_end":136861,"line_start":1237,"line_end":1237,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":136866,"byte_end":136869,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":136874,"byte_end":136949,"line_start":1239,"line_end":1239,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":136954,"byte_end":137025,"line_start":1240,"line_end":1240,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137030,"byte_end":137103,"line_start":1241,"line_end":1241,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137108,"byte_end":137136,"line_start":1242,"line_end":1242,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137141,"byte_end":137144,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137149,"byte_end":137229,"line_start":1244,"line_end":1244,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137234,"byte_end":137302,"line_start":1245,"line_end":1245,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137307,"byte_end":137310,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137315,"byte_end":137329,"line_start":1247,"line_end":1247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137334,"byte_end":137337,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137342,"byte_end":137349,"line_start":1249,"line_end":1249,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137354,"byte_end":137381,"line_start":1250,"line_end":1250,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137386,"byte_end":137389,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137394,"byte_end":137427,"line_start":1252,"line_end":1252,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137432,"byte_end":137474,"line_start":1253,"line_end":1253,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137479,"byte_end":137517,"line_start":1254,"line_end":1254,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137522,"byte_end":137525,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137530,"byte_end":137554,"line_start":1256,"line_end":1256,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137559,"byte_end":137606,"line_start":1257,"line_end":1257,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137611,"byte_end":137641,"line_start":1258,"line_end":1258,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":137646,"byte_end":137653,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138881,"byte_end":138891,"line_start":1296,"line_end":1296,"column_start":12,"column_end":22},"name":"try_insert","qualname":"<HashMap<K, V, S, A>>::try_insert","value":"pub fn try_insert(&mut Self, K, V)\n-> Result<&mut V, OccupiedError<, K, V, S, A>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to insert a key-value pair into the map, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Tries to insert a key-value pair into the map, and returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138112,"byte_end":138174,"line_start":1272,"line_end":1272,"column_start":5,"column_end":67}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138179,"byte_end":138229,"line_start":1273,"line_end":1273,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138234,"byte_end":138237,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138242,"byte_end":138254,"line_start":1275,"line_end":1275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138259,"byte_end":138262,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ If the map already had this key present, nothing is updated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138267,"byte_end":138335,"line_start":1277,"line_end":1277,"column_start":5,"column_end":73}},{"value":"/ an error containing the occupied entry and the value is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138340,"byte_end":138409,"line_start":1278,"line_end":1278,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138414,"byte_end":138417,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138422,"byte_end":138436,"line_start":1280,"line_end":1280,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138441,"byte_end":138444,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138449,"byte_end":138465,"line_start":1282,"line_end":1282,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138470,"byte_end":138473,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138478,"byte_end":138485,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138490,"byte_end":138517,"line_start":1285,"line_end":1285,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138522,"byte_end":138525,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138530,"byte_end":138563,"line_start":1287,"line_end":1287,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138568,"byte_end":138623,"line_start":1288,"line_end":1288,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138628,"byte_end":138631,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ let err = map.try_insert(37, \"b\").unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138636,"byte_end":138687,"line_start":1290,"line_end":1290,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(err.entry.key(), &37);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138692,"byte_end":138729,"line_start":1291,"line_end":1291,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(err.entry.get(), &\"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138734,"byte_end":138772,"line_start":1292,"line_end":1292,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(err.value, \"b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138777,"byte_end":138808,"line_start":1293,"line_end":1293,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":138813,"byte_end":138820,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139926,"byte_end":139932,"line_start":1328,"line_end":1328,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139192,"byte_end":139265,"line_start":1307,"line_end":1307,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139270,"byte_end":139300,"line_start":1308,"line_end":1308,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139305,"byte_end":139308,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139313,"byte_end":139376,"line_start":1310,"line_end":1310,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139381,"byte_end":139448,"line_start":1311,"line_end":1311,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139453,"byte_end":139470,"line_start":1312,"line_end":1312,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139475,"byte_end":139478,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139483,"byte_end":139542,"line_start":1314,"line_end":1314,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139547,"byte_end":139611,"line_start":1315,"line_end":1315,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139616,"byte_end":139619,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139624,"byte_end":139638,"line_start":1317,"line_end":1317,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139643,"byte_end":139646,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139651,"byte_end":139658,"line_start":1319,"line_end":1319,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139663,"byte_end":139690,"line_start":1320,"line_end":1320,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139695,"byte_end":139698,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139703,"byte_end":139736,"line_start":1322,"line_end":1322,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139741,"byte_end":139764,"line_start":1323,"line_end":1323,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139769,"byte_end":139811,"line_start":1324,"line_end":1324,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139816,"byte_end":139853,"line_start":1325,"line_end":1325,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":139858,"byte_end":139865,"line_start":1326,"line_end":1326,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140963,"byte_end":140975,"line_start":1361,"line_end":1361,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S, A>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140214,"byte_end":140287,"line_start":1340,"line_end":1340,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140292,"byte_end":140326,"line_start":1341,"line_end":1341,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140331,"byte_end":140334,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140339,"byte_end":140402,"line_start":1343,"line_end":1343,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140407,"byte_end":140474,"line_start":1344,"line_end":1344,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140479,"byte_end":140496,"line_start":1345,"line_end":1345,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140501,"byte_end":140504,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140509,"byte_end":140568,"line_start":1347,"line_end":1347,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140573,"byte_end":140637,"line_start":1348,"line_end":1348,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140642,"byte_end":140645,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140650,"byte_end":140664,"line_start":1350,"line_end":1350,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140669,"byte_end":140672,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140677,"byte_end":140684,"line_start":1352,"line_end":1352,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140689,"byte_end":140716,"line_start":1353,"line_end":1353,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140721,"byte_end":140724,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140729,"byte_end":140762,"line_start":1355,"line_end":1355,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140767,"byte_end":140790,"line_start":1356,"line_end":1356,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140795,"byte_end":140848,"line_start":1357,"line_end":1357,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140853,"byte_end":140890,"line_start":1358,"line_end":1358,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":140895,"byte_end":140902,"line_start":1359,"line_end":1359,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143215,"byte_end":143228,"line_start":1404,"line_end":1404,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S, A>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141275,"byte_end":141323,"line_start":1372,"line_end":1372,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141328,"byte_end":141331,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141336,"byte_end":141405,"line_start":1374,"line_end":1374,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141410,"byte_end":141483,"line_start":1375,"line_end":1375,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141488,"byte_end":141558,"line_start":1376,"line_end":1376,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141563,"byte_end":141609,"line_start":1377,"line_end":1377,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141614,"byte_end":141617,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141622,"byte_end":141679,"line_start":1379,"line_end":1379,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141684,"byte_end":141687,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141692,"byte_end":141714,"line_start":1381,"line_end":1381,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141719,"byte_end":141796,"line_start":1382,"line_end":1382,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141801,"byte_end":141865,"line_start":1383,"line_end":1383,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141870,"byte_end":141930,"line_start":1384,"line_end":1384,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141935,"byte_end":141938,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141943,"byte_end":142020,"line_start":1386,"line_end":1386,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142025,"byte_end":142100,"line_start":1387,"line_end":1387,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142105,"byte_end":142181,"line_start":1388,"line_end":1388,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142186,"byte_end":142257,"line_start":1389,"line_end":1389,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142262,"byte_end":142265,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142270,"byte_end":142345,"line_start":1391,"line_end":1391,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142350,"byte_end":142429,"line_start":1392,"line_end":1392,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142434,"byte_end":142509,"line_start":1393,"line_end":1393,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142514,"byte_end":142576,"line_start":1394,"line_end":1394,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142581,"byte_end":142584,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142589,"byte_end":142659,"line_start":1396,"line_end":1396,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142664,"byte_end":142744,"line_start":1397,"line_end":1397,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142749,"byte_end":142821,"line_start":1398,"line_end":1398,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142826,"byte_end":142902,"line_start":1399,"line_end":1399,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142907,"byte_end":142982,"line_start":1400,"line_end":1400,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":142987,"byte_end":143069,"line_start":1401,"line_end":1401,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143074,"byte_end":143154,"line_start":1402,"line_end":1402,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144069,"byte_end":144078,"line_start":1424,"line_end":1424,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S, A>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143332,"byte_end":143390,"line_start":1408,"line_end":1408,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143395,"byte_end":143398,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143403,"byte_end":143472,"line_start":1410,"line_end":1410,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143477,"byte_end":143550,"line_start":1411,"line_end":1411,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143555,"byte_end":143582,"line_start":1412,"line_end":1412,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143587,"byte_end":143590,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143595,"byte_end":143617,"line_start":1414,"line_end":1414,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143622,"byte_end":143644,"line_start":1415,"line_end":1415,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143649,"byte_end":143713,"line_start":1416,"line_end":1416,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143718,"byte_end":143778,"line_start":1417,"line_end":1417,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143783,"byte_end":143786,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143791,"byte_end":143872,"line_start":1419,"line_end":1419,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143877,"byte_end":143907,"line_start":1420,"line_end":1420,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143912,"byte_end":143915,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":143920,"byte_end":144008,"line_start":1422,"line_end":1422,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146025,"byte_end":146029,"line_start":1505,"line_end":1505,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145770,"byte_end":145818,"line_start":1498,"line_end":1498,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145819,"byte_end":145822,"line_start":1499,"line_end":1499,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145823,"byte_end":145898,"line_start":1500,"line_end":1500,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145899,"byte_end":145926,"line_start":1501,"line_end":1501,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145927,"byte_end":145930,"line_start":1502,"line_end":1502,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145931,"byte_end":145976,"line_start":1503,"line_end":1503,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145977,"byte_end":146013,"line_start":1504,"line_end":1504,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146849,"byte_end":146856,"line_start":1534,"line_end":1534,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146575,"byte_end":146630,"line_start":1527,"line_end":1527,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146631,"byte_end":146634,"line_start":1528,"line_end":1528,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146635,"byte_end":146714,"line_start":1529,"line_end":1529,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146715,"byte_end":146742,"line_start":1530,"line_end":1530,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146743,"byte_end":146746,"line_start":1531,"line_end":1531,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146747,"byte_end":146800,"line_start":1532,"line_end":1532,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146801,"byte_end":146837,"line_start":1533,"line_end":1533,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147855,"byte_end":147863,"line_start":1563,"line_end":1563,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":709}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147539,"byte_end":147594,"line_start":1556,"line_end":1556,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147595,"byte_end":147598,"line_start":1557,"line_end":1557,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147599,"byte_end":147670,"line_start":1558,"line_end":1558,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147671,"byte_end":147746,"line_start":1559,"line_end":1559,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147747,"byte_end":147750,"line_start":1560,"line_end":1560,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147751,"byte_end":147806,"line_start":1561,"line_end":1561,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147807,"byte_end":147843,"line_start":1562,"line_end":1562,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148517,"byte_end":148521,"line_start":1585,"line_end":1585,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":719}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148265,"byte_end":148310,"line_start":1578,"line_end":1578,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148311,"byte_end":148314,"line_start":1579,"line_end":1579,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148315,"byte_end":148390,"line_start":1580,"line_end":1580,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148391,"byte_end":148418,"line_start":1581,"line_end":1581,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148419,"byte_end":148422,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148423,"byte_end":148468,"line_start":1583,"line_end":1583,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148469,"byte_end":148505,"line_start":1584,"line_end":1584,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149245,"byte_end":149251,"line_start":1612,"line_end":1612,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":732}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148985,"byte_end":149032,"line_start":1605,"line_end":1605,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149033,"byte_end":149036,"line_start":1606,"line_end":1606,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149037,"byte_end":149114,"line_start":1607,"line_end":1607,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149115,"byte_end":149142,"line_start":1608,"line_end":1608,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149143,"byte_end":149146,"line_start":1609,"line_end":1609,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149147,"byte_end":149196,"line_start":1610,"line_end":1610,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149197,"byte_end":149233,"line_start":1611,"line_end":1611,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149987,"byte_end":149992,"line_start":1639,"line_end":1639,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":746}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149721,"byte_end":149777,"line_start":1632,"line_end":1632,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149778,"byte_end":149781,"line_start":1633,"line_end":1633,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149782,"byte_end":149858,"line_start":1634,"line_end":1634,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149859,"byte_end":149886,"line_start":1635,"line_end":1635,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149887,"byte_end":149890,"line_start":1636,"line_end":1636,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149891,"byte_end":149938,"line_start":1637,"line_end":1637,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149939,"byte_end":149975,"line_start":1638,"line_end":1638,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150721,"byte_end":150732,"line_start":1661,"line_end":1661,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150400,"byte_end":150490,"line_start":1654,"line_end":1654,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150491,"byte_end":150494,"line_start":1655,"line_end":1655,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150495,"byte_end":150578,"line_start":1656,"line_end":1656,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150579,"byte_end":150606,"line_start":1657,"line_end":1657,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150607,"byte_end":150610,"line_start":1658,"line_end":1658,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150611,"byte_end":150672,"line_start":1659,"line_end":1659,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150673,"byte_end":150709,"line_start":1660,"line_end":1660,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152998,"byte_end":153007,"line_start":1744,"line_end":1744,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":804}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152719,"byte_end":152773,"line_start":1737,"line_end":1737,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152774,"byte_end":152777,"line_start":1738,"line_end":1738,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152778,"byte_end":152859,"line_start":1739,"line_end":1739,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152860,"byte_end":152887,"line_start":1740,"line_end":1740,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152888,"byte_end":152891,"line_start":1741,"line_end":1741,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152892,"byte_end":152949,"line_start":1742,"line_end":1742,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152950,"byte_end":152986,"line_start":1743,"line_end":1743,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153294,"byte_end":153312,"line_start":1753,"line_end":1753,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":811}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153053,"byte_end":153137,"line_start":1748,"line_end":1748,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153138,"byte_end":153141,"line_start":1749,"line_end":1749,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153142,"byte_end":153205,"line_start":1750,"line_end":1750,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153206,"byte_end":153209,"line_start":1751,"line_end":1751,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153210,"byte_end":153282,"line_start":1752,"line_end":1752,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153982,"byte_end":153990,"line_start":1770,"line_end":1770,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153955,"byte_end":153977,"line_start":1769,"line_end":1769,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154057,"byte_end":154063,"line_start":1772,"line_end":1772,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":812},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154033,"byte_end":154052,"line_start":1771,"line_end":1771,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153893,"byte_end":153904,"line_start":1768,"line_end":1768,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K, V, S, A: Allocator + Clone = Global> {\n    Occupied(RawOccupiedEntryMut),\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":821}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153400,"byte_end":153480,"line_start":1757,"line_end":1757,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153481,"byte_end":153484,"line_start":1758,"line_end":1758,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153485,"byte_end":153532,"line_start":1759,"line_end":1759,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153533,"byte_end":153536,"line_start":1760,"line_end":1760,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153537,"byte_end":153620,"line_start":1761,"line_end":1761,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153621,"byte_end":153688,"line_start":1762,"line_end":1762,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153689,"byte_end":153692,"line_start":1763,"line_end":1763,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153693,"byte_end":153729,"line_start":1764,"line_end":1764,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153730,"byte_end":153760,"line_start":1765,"line_end":1765,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153761,"byte_end":153824,"line_start":1766,"line_end":1766,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":153825,"byte_end":153883,"line_start":1767,"line_end":1767,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154255,"byte_end":154274,"line_start":1779,"line_end":1779,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154103,"byte_end":154152,"line_start":1775,"line_end":1775,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154153,"byte_end":154196,"line_start":1776,"line_end":1776,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154197,"byte_end":154200,"line_start":1777,"line_end":1777,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154201,"byte_end":154243,"line_start":1778,"line_end":1778,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154841,"byte_end":154858,"line_start":1804,"line_end":1804,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154692,"byte_end":154738,"line_start":1800,"line_end":1800,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154739,"byte_end":154782,"line_start":1801,"line_end":1801,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154783,"byte_end":154786,"line_start":1802,"line_end":1802,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154787,"byte_end":154829,"line_start":1803,"line_end":1803,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155202,"byte_end":155217,"line_start":1814,"line_end":1814,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":857}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154973,"byte_end":155057,"line_start":1809,"line_end":1809,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155058,"byte_end":155061,"line_start":1810,"line_end":1810,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155062,"byte_end":155121,"line_start":1811,"line_end":1811,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155122,"byte_end":155125,"line_start":1812,"line_end":1812,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155126,"byte_end":155190,"line_start":1813,"line_end":1813,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155534,"byte_end":155542,"line_start":1822,"line_end":1822,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where S: BuildHasher,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155382,"byte_end":155429,"line_start":1819,"line_end":1819,"column_start":5,"column_end":52}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155483,"byte_end":155522,"line_start":1821,"line_end":1821,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155937,"byte_end":155960,"line_start":1835,"line_end":1835,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155807,"byte_end":155867,"line_start":1832,"line_end":1832,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155872,"byte_end":155881,"line_start":1833,"line_end":1833,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155886,"byte_end":155925,"line_start":1834,"line_end":1834,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":156367,"byte_end":156376,"line_start":1848,"line_end":1848,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":156214,"byte_end":156262,"line_start":1845,"line_end":1845,"column_start":5,"column_end":53}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":156316,"byte_end":156355,"line_start":1847,"line_end":1847,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157402,"byte_end":157410,"line_start":1878,"line_end":1878,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nS: BuildHasher, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157270,"byte_end":157297,"line_start":1875,"line_end":1875,"column_start":5,"column_end":32}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157351,"byte_end":157390,"line_start":1877,"line_end":1877,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157817,"byte_end":157840,"line_start":1891,"line_end":1891,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157670,"byte_end":157712,"line_start":1888,"line_end":1888,"column_start":5,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157766,"byte_end":157805,"line_start":1890,"line_end":1890,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158484,"byte_end":158493,"line_start":1913,"line_end":1913,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158351,"byte_end":158379,"line_start":1910,"line_end":1910,"column_start":5,"column_end":33}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158433,"byte_end":158472,"line_start":1912,"line_end":1912,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159162,"byte_end":159168,"line_start":1935,"line_end":1935,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"pub fn insert(Self, K, V) -> RawOccupiedEntryMut where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158718,"byte_end":158785,"line_start":1922,"line_end":1922,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158790,"byte_end":158793,"line_start":1923,"line_end":1923,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158798,"byte_end":158812,"line_start":1924,"line_end":1924,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158817,"byte_end":158820,"line_start":1925,"line_end":1925,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158825,"byte_end":158832,"line_start":1926,"line_end":1926,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158837,"byte_end":158864,"line_start":1927,"line_end":1927,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158869,"byte_end":158872,"line_start":1928,"line_end":1928,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158877,"byte_end":158930,"line_start":1929,"line_end":1929,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158935,"byte_end":159019,"line_start":1930,"line_end":1930,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159024,"byte_end":159027,"line_start":1931,"line_end":1931,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159032,"byte_end":159089,"line_start":1932,"line_end":1932,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159094,"byte_end":159101,"line_start":1933,"line_end":1933,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160151,"byte_end":160160,"line_start":1966,"line_end":1966,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159528,"byte_end":159610,"line_start":1949,"line_end":1949,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159615,"byte_end":159672,"line_start":1950,"line_end":1950,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159677,"byte_end":159680,"line_start":1951,"line_end":1951,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159685,"byte_end":159699,"line_start":1952,"line_end":1952,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159704,"byte_end":159707,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159712,"byte_end":159719,"line_start":1954,"line_end":1954,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159724,"byte_end":159751,"line_start":1955,"line_end":1955,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159756,"byte_end":159759,"line_start":1956,"line_end":1956,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159764,"byte_end":159817,"line_start":1957,"line_end":1957,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159822,"byte_end":159825,"line_start":1958,"line_end":1958,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159830,"byte_end":159902,"line_start":1959,"line_end":1959,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159907,"byte_end":159943,"line_start":1960,"line_end":1960,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159948,"byte_end":159951,"line_start":1961,"line_end":1961,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":159956,"byte_end":160037,"line_start":1962,"line_end":1962,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160042,"byte_end":160078,"line_start":1963,"line_end":1963,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160083,"byte_end":160090,"line_start":1964,"line_end":1964,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161064,"byte_end":161078,"line_start":1994,"line_end":1994,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160474,"byte_end":160567,"line_start":1977,"line_end":1977,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160572,"byte_end":160641,"line_start":1978,"line_end":1978,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160646,"byte_end":160649,"line_start":1979,"line_end":1979,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160654,"byte_end":160668,"line_start":1980,"line_end":1980,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160673,"byte_end":160676,"line_start":1981,"line_end":1981,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160681,"byte_end":160688,"line_start":1982,"line_end":1982,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160693,"byte_end":160720,"line_start":1983,"line_end":1983,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160725,"byte_end":160728,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160733,"byte_end":160789,"line_start":1985,"line_end":1985,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160794,"byte_end":160797,"line_start":1986,"line_end":1986,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160802,"byte_end":160867,"line_start":1987,"line_end":1987,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160872,"byte_end":160913,"line_start":1988,"line_end":1988,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160918,"byte_end":160925,"line_start":1989,"line_end":1989,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160930,"byte_end":160933,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160938,"byte_end":160991,"line_start":1991,"line_end":1991,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":160996,"byte_end":161003,"line_start":1992,"line_end":1992,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162174,"byte_end":162184,"line_start":2032,"line_end":2032,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161457,"byte_end":161525,"line_start":2009,"line_end":2009,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161530,"byte_end":161565,"line_start":2010,"line_end":2010,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161570,"byte_end":161573,"line_start":2011,"line_end":2011,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161578,"byte_end":161592,"line_start":2012,"line_end":2012,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161597,"byte_end":161600,"line_start":2013,"line_end":2013,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161605,"byte_end":161612,"line_start":2014,"line_end":2014,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161617,"byte_end":161644,"line_start":2015,"line_end":2015,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161649,"byte_end":161652,"line_start":2016,"line_end":2016,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161657,"byte_end":161710,"line_start":2017,"line_end":2017,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161715,"byte_end":161718,"line_start":2018,"line_end":2018,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161723,"byte_end":161746,"line_start":2019,"line_end":2019,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161751,"byte_end":161780,"line_start":2020,"line_end":2020,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161785,"byte_end":161824,"line_start":2021,"line_end":2021,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161829,"byte_end":161864,"line_start":2022,"line_end":2022,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161869,"byte_end":161906,"line_start":2023,"line_end":2023,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161911,"byte_end":161914,"line_start":2024,"line_end":2024,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161919,"byte_end":161942,"line_start":2025,"line_end":2025,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161947,"byte_end":161976,"line_start":2026,"line_end":2026,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":161981,"byte_end":162020,"line_start":2027,"line_end":2027,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162025,"byte_end":162059,"line_start":2028,"line_end":2028,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162064,"byte_end":162101,"line_start":2029,"line_end":2029,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162106,"byte_end":162113,"line_start":2030,"line_end":2030,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164270,"byte_end":164292,"line_start":2104,"line_end":2104,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<RawEntryMut>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162605,"byte_end":162675,"line_start":2048,"line_end":2048,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162680,"byte_end":162749,"line_start":2049,"line_end":2049,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162754,"byte_end":162787,"line_start":2050,"line_end":2050,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162792,"byte_end":162795,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162800,"byte_end":162814,"line_start":2052,"line_end":2052,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162819,"byte_end":162822,"line_start":2053,"line_end":2053,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162827,"byte_end":162834,"line_start":2054,"line_end":2054,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162839,"byte_end":162866,"line_start":2055,"line_end":2055,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RawEntryMut;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162871,"byte_end":162912,"line_start":2056,"line_end":2056,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162917,"byte_end":162920,"line_start":2057,"line_end":2057,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162925,"byte_end":162978,"line_start":2058,"line_end":2058,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162983,"byte_end":162986,"line_start":2059,"line_end":2059,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":162991,"byte_end":163010,"line_start":2060,"line_end":2060,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163015,"byte_end":163039,"line_start":2061,"line_end":2061,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163044,"byte_end":163074,"line_start":2062,"line_end":2062,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163079,"byte_end":163130,"line_start":2063,"line_end":2063,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163135,"byte_end":163138,"line_start":2064,"line_end":2064,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163143,"byte_end":163160,"line_start":2065,"line_end":2065,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163165,"byte_end":163202,"line_start":2066,"line_end":2066,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163207,"byte_end":163252,"line_start":2067,"line_end":2067,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163257,"byte_end":163262,"line_start":2068,"line_end":2068,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163267,"byte_end":163270,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163275,"byte_end":163307,"line_start":2070,"line_end":2070,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163312,"byte_end":163315,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163320,"byte_end":163339,"line_start":2072,"line_end":2072,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163344,"byte_end":163368,"line_start":2073,"line_end":2073,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163373,"byte_end":163403,"line_start":2074,"line_end":2074,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163408,"byte_end":163448,"line_start":2075,"line_end":2075,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163453,"byte_end":163493,"line_start":2076,"line_end":2076,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163498,"byte_end":163528,"line_start":2077,"line_end":2077,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163533,"byte_end":163556,"line_start":2078,"line_end":2078,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163561,"byte_end":163572,"line_start":2079,"line_end":2079,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163577,"byte_end":163580,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163585,"byte_end":163602,"line_start":2081,"line_end":2081,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Occupied(e) => {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163607,"byte_end":163644,"line_start":2082,"line_end":2082,"column_start":5,"column_end":42}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163649,"byte_end":163695,"line_start":2083,"line_end":2083,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163700,"byte_end":163737,"line_start":2084,"line_end":2084,"column_start":5,"column_end":42}},{"value":"/     },","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163742,"byte_end":163752,"line_start":2085,"line_end":2085,"column_start":5,"column_end":15}},{"value":"/     RawEntryMut::Vacant(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163757,"byte_end":163800,"line_start":2086,"line_end":2086,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163805,"byte_end":163810,"line_start":2087,"line_end":2087,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163815,"byte_end":163818,"line_start":2088,"line_end":2088,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163823,"byte_end":163860,"line_start":2089,"line_end":2089,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163865,"byte_end":163868,"line_start":2090,"line_end":2090,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163873,"byte_end":163892,"line_start":2091,"line_end":2091,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163897,"byte_end":163921,"line_start":2092,"line_end":2092,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163926,"byte_end":163956,"line_start":2093,"line_end":2093,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":163961,"byte_end":164008,"line_start":2094,"line_end":2094,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164013,"byte_end":164016,"line_start":2095,"line_end":2095,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164021,"byte_end":164038,"line_start":2096,"line_end":2096,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164043,"byte_end":164080,"line_start":2097,"line_end":2097,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164085,"byte_end":164130,"line_start":2098,"line_end":2098,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164135,"byte_end":164140,"line_start":2099,"line_end":2099,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164145,"byte_end":164148,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164153,"byte_end":164197,"line_start":2101,"line_end":2101,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164202,"byte_end":164209,"line_start":2102,"line_end":2102,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164716,"byte_end":164719,"line_start":2118,"line_end":2118,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164610,"byte_end":164655,"line_start":2116,"line_end":2116,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164901,"byte_end":164908,"line_start":2124,"line_end":2124,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164787,"byte_end":164840,"line_start":2122,"line_end":2122,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165169,"byte_end":165177,"line_start":2131,"line_end":2131,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164988,"byte_end":165059,"line_start":2128,"line_end":2128,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165064,"byte_end":165108,"line_start":2129,"line_end":2129,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165363,"byte_end":165366,"line_start":2137,"line_end":2137,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165255,"byte_end":165302,"line_start":2135,"line_end":2135,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165625,"byte_end":165633,"line_start":2144,"line_end":2144,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165434,"byte_end":165515,"line_start":2141,"line_end":2141,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165520,"byte_end":165564,"line_start":2142,"line_end":2142,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165827,"byte_end":165834,"line_start":2150,"line_end":2150,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165711,"byte_end":165766,"line_start":2148,"line_end":2148,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166030,"byte_end":166043,"line_start":2156,"line_end":2156,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":165914,"byte_end":165969,"line_start":2154,"line_end":2154,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166316,"byte_end":166333,"line_start":2165,"line_end":2165,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166192,"byte_end":166255,"line_start":2163,"line_end":2163,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166701,"byte_end":166715,"line_start":2175,"line_end":2175,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166502,"byte_end":166591,"line_start":2172,"line_end":2172,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166596,"byte_end":166640,"line_start":2173,"line_end":2173,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167013,"byte_end":167019,"line_start":2184,"line_end":2184,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":166885,"byte_end":166952,"line_start":2182,"line_end":2182,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167231,"byte_end":167241,"line_start":2190,"line_end":2190,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167103,"byte_end":167170,"line_start":2188,"line_end":2188,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167435,"byte_end":167441,"line_start":2196,"line_end":2196,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167321,"byte_end":167374,"line_start":2194,"line_end":2194,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167614,"byte_end":167626,"line_start":2202,"line_end":2202,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167496,"byte_end":167553,"line_start":2200,"line_end":2200,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167939,"byte_end":167957,"line_start":2210,"line_end":2210,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<RawOccupiedEntryMut>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> RawEntryMut where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.\n","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167704,"byte_end":167774,"line_start":2206,"line_end":2206,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167779,"byte_end":167840,"line_start":2207,"line_end":2207,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":167845,"byte_end":167878,"line_start":2208,"line_end":2208,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":168844,"byte_end":168850,"line_start":2237,"line_end":2237,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":168677,"byte_end":168736,"line_start":2234,"line_end":2234,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":168741,"byte_end":168783,"line_start":2235,"line_end":2235,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":169298,"byte_end":169319,"line_start":2250,"line_end":2250,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":169092,"byte_end":169151,"line_start":2246,"line_end":2246,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":169156,"byte_end":169198,"line_start":2247,"line_end":2247,"column_start":5,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":169252,"byte_end":169286,"line_start":2249,"line_end":2249,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":169765,"byte_end":169783,"line_start":2265,"line_end":2265,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"pub fn insert_with_hasher<H>(Self, u64, K, V, H) -> (&'a mut K, &'a mut V)\nwhere H: Fn(&K) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":169644,"byte_end":169704,"line_start":2263,"line_end":2263,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172308,"byte_end":172316,"line_start":2348,"line_end":2348,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":975},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172281,"byte_end":172303,"line_start":2347,"line_end":2347,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172378,"byte_end":172384,"line_start":2351,"line_end":2351,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":975},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172354,"byte_end":172373,"line_start":2350,"line_end":2350,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172212,"byte_end":172217,"line_start":2343,"line_end":2343,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K, V, S, A = Global> where A: Allocator + Clone {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":984}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171956,"byte_end":172036,"line_start":2337,"line_end":2337,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172037,"byte_end":172040,"line_start":2338,"line_end":2338,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172041,"byte_end":172113,"line_start":2339,"line_end":2339,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172114,"byte_end":172117,"line_start":2340,"line_end":2340,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172118,"byte_end":172154,"line_start":2341,"line_end":2341,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172155,"byte_end":172202,"line_start":2342,"line_end":2342,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172898,"byte_end":172911,"line_start":2367,"line_end":2367,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172764,"byte_end":172813,"line_start":2363,"line_end":2363,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172814,"byte_end":172851,"line_start":2364,"line_end":2364,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172852,"byte_end":172855,"line_start":2365,"line_end":2365,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172856,"byte_end":172886,"line_start":2366,"line_end":2366,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173788,"byte_end":173799,"line_start":2404,"line_end":2404,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173657,"byte_end":173703,"line_start":2400,"line_end":2400,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173704,"byte_end":173741,"line_start":2401,"line_end":2401,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173742,"byte_end":173745,"line_start":2402,"line_end":2402,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173746,"byte_end":173776,"line_start":2403,"line_end":2403,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174311,"byte_end":174324,"line_start":2419,"line_end":2419,"column_start":12,"column_end":25},"name":"OccupiedError","qualname":"::map::OccupiedError","value":"OccupiedError { entry, value }","parent":null,"children":[{"krate":0,"index":1040},{"krate":0,"index":1041}],"decl_id":null,"docs":" The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","sig":null,"attributes":[{"value":"/ The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174135,"byte_end":174225,"line_start":2416,"line_end":2416,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174226,"byte_end":174229,"line_start":2417,"line_end":2417,"column_start":1,"column_end":4}},{"value":"/ Contains the occupied entry, and the value that was not inserted.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174230,"byte_end":174299,"line_start":2418,"line_end":2418,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174435,"byte_end":174440,"line_start":2421,"line_end":2421,"column_start":9,"column_end":14},"name":"entry","qualname":"::map::OccupiedError::entry","value":"map::OccupiedEntry<'a, K, V, S, A>","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" The entry in the map that was already occupied.\n","sig":null,"attributes":[{"value":"/ The entry in the map that was already occupied.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174375,"byte_end":174426,"line_start":2420,"line_end":2420,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174563,"byte_end":174568,"line_start":2423,"line_end":2423,"column_start":9,"column_end":14},"name":"value","qualname":"::map::OccupiedError::value","value":"V","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" The value which was not inserted, because the entry was already occupied.\n","sig":null,"attributes":[{"value":"/ The value which was not inserted, because the entry was already occupied.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174477,"byte_end":174554,"line_start":2422,"line_end":2422,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182941,"byte_end":182947,"line_start":2717,"line_end":2717,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"pub fn insert(Self, V) -> OccupiedEntry where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182549,"byte_end":182611,"line_start":2704,"line_end":2704,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182616,"byte_end":182619,"line_start":2705,"line_end":2705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182624,"byte_end":182638,"line_start":2706,"line_end":2706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182643,"byte_end":182646,"line_start":2707,"line_end":2707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182651,"byte_end":182658,"line_start":2708,"line_end":2708,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182663,"byte_end":182690,"line_start":2709,"line_end":2709,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182695,"byte_end":182698,"line_start":2710,"line_end":2710,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182703,"byte_end":182756,"line_start":2711,"line_end":2711,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182761,"byte_end":182812,"line_start":2712,"line_end":2712,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182817,"byte_end":182820,"line_start":2713,"line_end":2713,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182825,"byte_end":182868,"line_start":2714,"line_end":2714,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182873,"byte_end":182880,"line_start":2715,"line_end":2715,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183826,"byte_end":183835,"line_start":2748,"line_end":2748,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183276,"byte_end":183358,"line_start":2731,"line_end":2731,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183363,"byte_end":183413,"line_start":2732,"line_end":2732,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183418,"byte_end":183421,"line_start":2733,"line_end":2733,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183426,"byte_end":183440,"line_start":2734,"line_end":2734,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183445,"byte_end":183448,"line_start":2735,"line_end":2735,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183453,"byte_end":183460,"line_start":2736,"line_end":2736,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183465,"byte_end":183492,"line_start":2737,"line_end":2737,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183497,"byte_end":183500,"line_start":2738,"line_end":2738,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183505,"byte_end":183558,"line_start":2739,"line_end":2739,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183563,"byte_end":183566,"line_start":2740,"line_end":2740,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183571,"byte_end":183611,"line_start":2741,"line_end":2741,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183616,"byte_end":183652,"line_start":2742,"line_end":2742,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183657,"byte_end":183660,"line_start":2743,"line_end":2743,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183665,"byte_end":183712,"line_start":2744,"line_end":2744,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183717,"byte_end":183753,"line_start":2745,"line_end":2745,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":183758,"byte_end":183765,"line_start":2746,"line_end":2746,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184625,"byte_end":184639,"line_start":2775,"line_end":2775,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184081,"byte_end":184174,"line_start":2759,"line_end":2759,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184179,"byte_end":184241,"line_start":2760,"line_end":2760,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184246,"byte_end":184249,"line_start":2761,"line_end":2761,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184254,"byte_end":184268,"line_start":2762,"line_end":2762,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184273,"byte_end":184276,"line_start":2763,"line_end":2763,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184281,"byte_end":184288,"line_start":2764,"line_end":2764,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184293,"byte_end":184320,"line_start":2765,"line_end":2765,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184325,"byte_end":184328,"line_start":2766,"line_end":2766,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184333,"byte_end":184389,"line_start":2767,"line_end":2767,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184394,"byte_end":184425,"line_start":2768,"line_end":2768,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184430,"byte_end":184433,"line_start":2769,"line_end":2769,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184438,"byte_end":184486,"line_start":2770,"line_end":2770,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184491,"byte_end":184494,"line_start":2771,"line_end":2771,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184499,"byte_end":184552,"line_start":2772,"line_end":2772,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184557,"byte_end":184564,"line_start":2773,"line_end":2773,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185706,"byte_end":185724,"line_start":2805,"line_end":2805,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&K) -> V>(Self, F) -> &'a mut V where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function.\n This method allows for generating key-derived values for insertion by providing the default\n function a reference to the key that was moved during the `.entry(key)` method call.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":184905,"byte_end":185000,"line_start":2786,"line_end":2786,"column_start":5,"column_end":100}},{"value":"/ This method allows for generating key-derived values for insertion by providing the default","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185005,"byte_end":185100,"line_start":2787,"line_end":2787,"column_start":5,"column_end":100}},{"value":"/ function a reference to the key that was moved during the `.entry(key)` method call.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185105,"byte_end":185193,"line_start":2788,"line_end":2788,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185198,"byte_end":185201,"line_start":2789,"line_end":2789,"column_start":5,"column_end":8}},{"value":"/ The reference to the moved key is provided so that cloning or copying the key is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185206,"byte_end":185290,"line_start":2790,"line_end":2790,"column_start":5,"column_end":89}},{"value":"/ unnecessary, unlike with `.or_insert_with(|| ... )`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185295,"byte_end":185351,"line_start":2791,"line_end":2791,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185356,"byte_end":185359,"line_start":2792,"line_end":2792,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185364,"byte_end":185378,"line_start":2793,"line_end":2793,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185383,"byte_end":185386,"line_start":2794,"line_end":2794,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185391,"byte_end":185398,"line_start":2795,"line_end":2795,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185403,"byte_end":185430,"line_start":2796,"line_end":2796,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185435,"byte_end":185438,"line_start":2797,"line_end":2797,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185443,"byte_end":185498,"line_start":2798,"line_end":2798,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185503,"byte_end":185506,"line_start":2799,"line_end":2799,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185511,"byte_end":185584,"line_start":2800,"line_end":2800,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185589,"byte_end":185592,"line_start":2801,"line_end":2801,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185597,"byte_end":185633,"line_start":2802,"line_end":2802,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":185638,"byte_end":185645,"line_start":2803,"line_end":2803,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186395,"byte_end":186398,"line_start":2830,"line_end":2830,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186069,"byte_end":186113,"line_start":2819,"line_end":2819,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186118,"byte_end":186121,"line_start":2820,"line_end":2820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186126,"byte_end":186140,"line_start":2821,"line_end":2821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186145,"byte_end":186148,"line_start":2822,"line_end":2822,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186153,"byte_end":186160,"line_start":2823,"line_end":2823,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186165,"byte_end":186192,"line_start":2824,"line_end":2824,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186197,"byte_end":186200,"line_start":2825,"line_end":2825,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186205,"byte_end":186258,"line_start":2826,"line_end":2826,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186263,"byte_end":186322,"line_start":2827,"line_end":2827,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186327,"byte_end":186334,"line_start":2828,"line_end":2828,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187187,"byte_end":187197,"line_start":2858,"line_end":2858,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186565,"byte_end":186633,"line_start":2837,"line_end":2837,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186638,"byte_end":186673,"line_start":2838,"line_end":2838,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186678,"byte_end":186681,"line_start":2839,"line_end":2839,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186686,"byte_end":186700,"line_start":2840,"line_end":2840,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186705,"byte_end":186708,"line_start":2841,"line_end":2841,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186713,"byte_end":186720,"line_start":2842,"line_end":2842,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186725,"byte_end":186752,"line_start":2843,"line_end":2843,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186757,"byte_end":186760,"line_start":2844,"line_end":2844,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186765,"byte_end":186818,"line_start":2845,"line_end":2845,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186823,"byte_end":186826,"line_start":2846,"line_end":2846,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186831,"byte_end":186857,"line_start":2847,"line_end":2847,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186862,"byte_end":186897,"line_start":2848,"line_end":2848,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186902,"byte_end":186924,"line_start":2849,"line_end":2849,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186929,"byte_end":186966,"line_start":2850,"line_end":2850,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186971,"byte_end":186974,"line_start":2851,"line_end":2851,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":186979,"byte_end":187005,"line_start":2852,"line_end":2852,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187010,"byte_end":187045,"line_start":2853,"line_end":2853,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187050,"byte_end":187072,"line_start":2854,"line_end":2854,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187077,"byte_end":187114,"line_start":2855,"line_end":2855,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187119,"byte_end":187126,"line_start":2856,"line_end":2856,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189117,"byte_end":189139,"line_start":2926,"line_end":2926,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<Entry>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187497,"byte_end":187567,"line_start":2871,"line_end":2871,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187572,"byte_end":187641,"line_start":2872,"line_end":2872,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187646,"byte_end":187679,"line_start":2873,"line_end":2873,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187684,"byte_end":187687,"line_start":2874,"line_end":2874,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187692,"byte_end":187706,"line_start":2875,"line_end":2875,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187711,"byte_end":187714,"line_start":2876,"line_end":2876,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187719,"byte_end":187726,"line_start":2877,"line_end":2877,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187731,"byte_end":187758,"line_start":2878,"line_end":2878,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187763,"byte_end":187798,"line_start":2879,"line_end":2879,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187803,"byte_end":187806,"line_start":2880,"line_end":2880,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187811,"byte_end":187864,"line_start":2881,"line_end":2881,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187869,"byte_end":187872,"line_start":2882,"line_end":2882,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187877,"byte_end":187896,"line_start":2883,"line_end":2883,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187901,"byte_end":187928,"line_start":2884,"line_end":2884,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187933,"byte_end":187984,"line_start":2885,"line_end":2885,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187989,"byte_end":187992,"line_start":2886,"line_end":2886,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":187997,"byte_end":188014,"line_start":2887,"line_end":2887,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188019,"byte_end":188048,"line_start":2888,"line_end":2888,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188053,"byte_end":188099,"line_start":2889,"line_end":2889,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188104,"byte_end":188113,"line_start":2890,"line_end":2890,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188118,"byte_end":188157,"line_start":2891,"line_end":2891,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188162,"byte_end":188167,"line_start":2892,"line_end":2892,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188172,"byte_end":188175,"line_start":2893,"line_end":2893,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188180,"byte_end":188212,"line_start":2894,"line_end":2894,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188217,"byte_end":188220,"line_start":2895,"line_end":2895,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188225,"byte_end":188244,"line_start":2896,"line_end":2896,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188249,"byte_end":188276,"line_start":2897,"line_end":2897,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188281,"byte_end":188321,"line_start":2898,"line_end":2898,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188326,"byte_end":188366,"line_start":2899,"line_end":2899,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188371,"byte_end":188401,"line_start":2900,"line_end":2900,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188406,"byte_end":188429,"line_start":2901,"line_end":2901,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188434,"byte_end":188445,"line_start":2902,"line_end":2902,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188450,"byte_end":188453,"line_start":2903,"line_end":2903,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188458,"byte_end":188475,"line_start":2904,"line_end":2904,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188480,"byte_end":188511,"line_start":2905,"line_end":2905,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188516,"byte_end":188562,"line_start":2906,"line_end":2906,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188567,"byte_end":188604,"line_start":2907,"line_end":2907,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188609,"byte_end":188618,"line_start":2908,"line_end":2908,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188623,"byte_end":188660,"line_start":2909,"line_end":2909,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188665,"byte_end":188670,"line_start":2910,"line_end":2910,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188675,"byte_end":188678,"line_start":2911,"line_end":2911,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188683,"byte_end":188720,"line_start":2912,"line_end":2912,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188725,"byte_end":188728,"line_start":2913,"line_end":2913,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188733,"byte_end":188752,"line_start":2914,"line_end":2914,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188757,"byte_end":188784,"line_start":2915,"line_end":2915,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188789,"byte_end":188836,"line_start":2916,"line_end":2916,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188841,"byte_end":188844,"line_start":2917,"line_end":2917,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188849,"byte_end":188866,"line_start":2918,"line_end":2918,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => assert_eq!(e.key(), &\"poneyland\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188871,"byte_end":188933,"line_start":2919,"line_end":2919,"column_start":5,"column_end":67}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188938,"byte_end":188977,"line_start":2920,"line_end":2920,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188982,"byte_end":188987,"line_start":2921,"line_end":2921,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":188992,"byte_end":188995,"line_start":2922,"line_end":2922,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189000,"byte_end":189044,"line_start":2923,"line_end":2923,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189049,"byte_end":189056,"line_start":2924,"line_end":2924,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189906,"byte_end":189916,"line_start":2952,"line_end":2952,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189440,"byte_end":189516,"line_start":2938,"line_end":2938,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189521,"byte_end":189583,"line_start":2939,"line_end":2939,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189588,"byte_end":189591,"line_start":2940,"line_end":2940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189596,"byte_end":189610,"line_start":2941,"line_end":2941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189615,"byte_end":189618,"line_start":2942,"line_end":2942,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189623,"byte_end":189630,"line_start":2943,"line_end":2943,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189635,"byte_end":189662,"line_start":2944,"line_end":2944,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189667,"byte_end":189670,"line_start":2945,"line_end":2945,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189675,"byte_end":189736,"line_start":2946,"line_end":2946,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189741,"byte_end":189781,"line_start":2947,"line_end":2947,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189786,"byte_end":189789,"line_start":2948,"line_end":2948,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189794,"byte_end":189833,"line_start":2949,"line_end":2949,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189838,"byte_end":189845,"line_start":2950,"line_end":2950,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190608,"byte_end":190611,"line_start":2977,"line_end":2977,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190235,"byte_end":190280,"line_start":2965,"line_end":2965,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190285,"byte_end":190288,"line_start":2966,"line_end":2966,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190293,"byte_end":190307,"line_start":2967,"line_end":2967,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190312,"byte_end":190315,"line_start":2968,"line_end":2968,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190320,"byte_end":190327,"line_start":2969,"line_end":2969,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190332,"byte_end":190359,"line_start":2970,"line_end":2970,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190364,"byte_end":190367,"line_start":2971,"line_end":2971,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190372,"byte_end":190425,"line_start":2972,"line_end":2972,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190430,"byte_end":190471,"line_start":2973,"line_end":2973,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190476,"byte_end":190535,"line_start":2974,"line_end":2974,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190540,"byte_end":190547,"line_start":2975,"line_end":2975,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191264,"byte_end":191276,"line_start":3000,"line_end":3000,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190679,"byte_end":190736,"line_start":2981,"line_end":2981,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190741,"byte_end":190744,"line_start":2982,"line_end":2982,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190749,"byte_end":190763,"line_start":2983,"line_end":2983,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190768,"byte_end":190771,"line_start":2984,"line_end":2984,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190776,"byte_end":190783,"line_start":2985,"line_end":2985,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190788,"byte_end":190815,"line_start":2986,"line_end":2986,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190820,"byte_end":190855,"line_start":2987,"line_end":2987,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190860,"byte_end":190863,"line_start":2988,"line_end":2988,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190868,"byte_end":190921,"line_start":2989,"line_end":2989,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190926,"byte_end":190967,"line_start":2990,"line_end":2990,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190972,"byte_end":190975,"line_start":2991,"line_end":2991,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190980,"byte_end":191036,"line_start":2992,"line_end":2992,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191041,"byte_end":191085,"line_start":2993,"line_end":2993,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191090,"byte_end":191115,"line_start":2994,"line_end":2994,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191120,"byte_end":191125,"line_start":2995,"line_end":2995,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191130,"byte_end":191133,"line_start":2996,"line_end":2996,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191138,"byte_end":191191,"line_start":2997,"line_end":2997,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191196,"byte_end":191203,"line_start":2998,"line_end":2998,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191828,"byte_end":191831,"line_start":3020,"line_end":3020,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191360,"byte_end":191407,"line_start":3004,"line_end":3004,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191412,"byte_end":191415,"line_start":3005,"line_end":3005,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191420,"byte_end":191434,"line_start":3006,"line_end":3006,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191439,"byte_end":191442,"line_start":3007,"line_end":3007,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191447,"byte_end":191454,"line_start":3008,"line_end":3008,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191459,"byte_end":191486,"line_start":3009,"line_end":3009,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191491,"byte_end":191526,"line_start":3010,"line_end":3010,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191531,"byte_end":191534,"line_start":3011,"line_end":3011,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191539,"byte_end":191592,"line_start":3012,"line_end":3012,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191597,"byte_end":191638,"line_start":3013,"line_end":3013,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191643,"byte_end":191646,"line_start":3014,"line_end":3014,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191651,"byte_end":191707,"line_start":3015,"line_end":3015,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191712,"byte_end":191745,"line_start":3016,"line_end":3016,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191750,"byte_end":191755,"line_start":3017,"line_end":3017,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191760,"byte_end":191767,"line_start":3018,"line_end":3018,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192791,"byte_end":192798,"line_start":3052,"line_end":3052,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191899,"byte_end":191954,"line_start":3024,"line_end":3024,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191959,"byte_end":191962,"line_start":3025,"line_end":3025,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":191967,"byte_end":192039,"line_start":3026,"line_end":3026,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192044,"byte_end":192099,"line_start":3027,"line_end":3027,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192104,"byte_end":192107,"line_start":3028,"line_end":3028,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192112,"byte_end":192146,"line_start":3029,"line_end":3029,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192151,"byte_end":192154,"line_start":3030,"line_end":3030,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192159,"byte_end":192173,"line_start":3031,"line_end":3031,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192178,"byte_end":192181,"line_start":3032,"line_end":3032,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192186,"byte_end":192193,"line_start":3033,"line_end":3033,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192198,"byte_end":192225,"line_start":3034,"line_end":3034,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192230,"byte_end":192265,"line_start":3035,"line_end":3035,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192270,"byte_end":192273,"line_start":3036,"line_end":3036,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192278,"byte_end":192331,"line_start":3037,"line_end":3037,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192336,"byte_end":192377,"line_start":3038,"line_end":3038,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192382,"byte_end":192385,"line_start":3039,"line_end":3039,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192390,"byte_end":192427,"line_start":3040,"line_end":3040,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192432,"byte_end":192492,"line_start":3041,"line_end":3041,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192497,"byte_end":192524,"line_start":3042,"line_end":3042,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192529,"byte_end":192562,"line_start":3043,"line_end":3043,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192567,"byte_end":192570,"line_start":3044,"line_end":3044,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192575,"byte_end":192627,"line_start":3045,"line_end":3045,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192632,"byte_end":192658,"line_start":3046,"line_end":3046,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192663,"byte_end":192668,"line_start":3047,"line_end":3047,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192673,"byte_end":192676,"line_start":3048,"line_end":3048,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192681,"byte_end":192718,"line_start":3049,"line_end":3049,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192723,"byte_end":192730,"line_start":3050,"line_end":3050,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193650,"byte_end":193658,"line_start":3080,"line_end":3080,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192878,"byte_end":192959,"line_start":3056,"line_end":3056,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":192964,"byte_end":193008,"line_start":3057,"line_end":3057,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193013,"byte_end":193016,"line_start":3058,"line_end":3058,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193021,"byte_end":193097,"line_start":3059,"line_end":3059,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193102,"byte_end":193105,"line_start":3060,"line_end":3060,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193110,"byte_end":193142,"line_start":3061,"line_end":3061,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193147,"byte_end":193150,"line_start":3062,"line_end":3062,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193155,"byte_end":193169,"line_start":3063,"line_end":3063,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193174,"byte_end":193177,"line_start":3064,"line_end":3064,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193182,"byte_end":193189,"line_start":3065,"line_end":3065,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193194,"byte_end":193221,"line_start":3066,"line_end":3066,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193226,"byte_end":193261,"line_start":3067,"line_end":3067,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193266,"byte_end":193269,"line_start":3068,"line_end":3068,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193274,"byte_end":193327,"line_start":3069,"line_end":3069,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193332,"byte_end":193373,"line_start":3070,"line_end":3070,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193378,"byte_end":193381,"line_start":3071,"line_end":3071,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193386,"byte_end":193423,"line_start":3072,"line_end":3072,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193428,"byte_end":193484,"line_start":3073,"line_end":3073,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193489,"byte_end":193517,"line_start":3074,"line_end":3074,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193522,"byte_end":193527,"line_start":3075,"line_end":3075,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193532,"byte_end":193535,"line_start":3076,"line_end":3076,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193540,"byte_end":193577,"line_start":3077,"line_end":3077,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193582,"byte_end":193589,"line_start":3078,"line_end":3078,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194282,"byte_end":194288,"line_start":3102,"line_end":3102,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193736,"byte_end":193803,"line_start":3084,"line_end":3084,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193808,"byte_end":193811,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193816,"byte_end":193830,"line_start":3086,"line_end":3086,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193835,"byte_end":193838,"line_start":3087,"line_end":3087,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193843,"byte_end":193850,"line_start":3088,"line_end":3088,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193855,"byte_end":193882,"line_start":3089,"line_end":3089,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193887,"byte_end":193922,"line_start":3090,"line_end":3090,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193927,"byte_end":193930,"line_start":3091,"line_end":3091,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193935,"byte_end":193988,"line_start":3092,"line_end":3092,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":193993,"byte_end":194034,"line_start":3093,"line_end":3093,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194039,"byte_end":194042,"line_start":3094,"line_end":3094,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194047,"byte_end":194107,"line_start":3095,"line_end":3095,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194112,"byte_end":194149,"line_start":3096,"line_end":3096,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194154,"byte_end":194159,"line_start":3097,"line_end":3097,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194164,"byte_end":194167,"line_start":3098,"line_end":3098,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194172,"byte_end":194209,"line_start":3099,"line_end":3099,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194214,"byte_end":194221,"line_start":3100,"line_end":3100,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194970,"byte_end":194976,"line_start":3126,"line_end":3126,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194428,"byte_end":194481,"line_start":3108,"line_end":3108,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194486,"byte_end":194489,"line_start":3109,"line_end":3109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194494,"byte_end":194508,"line_start":3110,"line_end":3110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194513,"byte_end":194516,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194521,"byte_end":194528,"line_start":3112,"line_end":3112,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194533,"byte_end":194560,"line_start":3113,"line_end":3113,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194565,"byte_end":194600,"line_start":3114,"line_end":3114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194605,"byte_end":194608,"line_start":3115,"line_end":3115,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194613,"byte_end":194666,"line_start":3116,"line_end":3116,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194671,"byte_end":194712,"line_start":3117,"line_end":3117,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194717,"byte_end":194720,"line_start":3118,"line_end":3118,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194725,"byte_end":194781,"line_start":3119,"line_end":3119,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194786,"byte_end":194821,"line_start":3120,"line_end":3120,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194826,"byte_end":194831,"line_start":3121,"line_end":3121,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194836,"byte_end":194839,"line_start":3122,"line_end":3122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194844,"byte_end":194897,"line_start":3123,"line_end":3123,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":194902,"byte_end":194909,"line_start":3124,"line_end":3124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195909,"byte_end":195922,"line_start":3155,"line_end":3155,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195031,"byte_end":195123,"line_start":3130,"line_end":3130,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195128,"byte_end":195166,"line_start":3131,"line_end":3131,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195171,"byte_end":195174,"line_start":3132,"line_end":3132,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195179,"byte_end":195191,"line_start":3133,"line_end":3133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195196,"byte_end":195199,"line_start":3134,"line_end":3134,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195204,"byte_end":195279,"line_start":3135,"line_end":3135,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195284,"byte_end":195287,"line_start":3136,"line_end":3136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195292,"byte_end":195306,"line_start":3137,"line_end":3137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195311,"byte_end":195314,"line_start":3138,"line_end":3138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195319,"byte_end":195326,"line_start":3139,"line_end":3139,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195331,"byte_end":195377,"line_start":3140,"line_end":3140,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195382,"byte_end":195402,"line_start":3141,"line_end":3141,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195407,"byte_end":195410,"line_start":3142,"line_end":3142,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195415,"byte_end":195474,"line_start":3143,"line_end":3143,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195479,"byte_end":195534,"line_start":3144,"line_end":3144,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195539,"byte_end":195542,"line_start":3145,"line_end":3145,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195547,"byte_end":195599,"line_start":3146,"line_end":3146,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195604,"byte_end":195607,"line_start":3147,"line_end":3147,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195612,"byte_end":195667,"line_start":3148,"line_end":3148,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195672,"byte_end":195735,"line_start":3149,"line_end":3149,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195740,"byte_end":195818,"line_start":3150,"line_end":3150,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195823,"byte_end":195828,"line_start":3151,"line_end":3151,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195833,"byte_end":195836,"line_start":3152,"line_end":3152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":195841,"byte_end":195848,"line_start":3153,"line_end":3153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197196,"byte_end":197207,"line_start":3193,"line_end":3193,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196172,"byte_end":196248,"line_start":3164,"line_end":3164,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196253,"byte_end":196256,"line_start":3165,"line_end":3165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196261,"byte_end":196273,"line_start":3166,"line_end":3166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196278,"byte_end":196281,"line_start":3167,"line_end":3167,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196286,"byte_end":196361,"line_start":3168,"line_end":3168,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196366,"byte_end":196369,"line_start":3169,"line_end":3169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196374,"byte_end":196388,"line_start":3170,"line_end":3170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196393,"byte_end":196396,"line_start":3171,"line_end":3171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196401,"byte_end":196408,"line_start":3172,"line_end":3172,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196413,"byte_end":196459,"line_start":3173,"line_end":3173,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196464,"byte_end":196484,"line_start":3174,"line_end":3174,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196489,"byte_end":196492,"line_start":3175,"line_end":3175,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196497,"byte_end":196556,"line_start":3176,"line_end":3176,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196561,"byte_end":196617,"line_start":3177,"line_end":3177,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196622,"byte_end":196625,"line_start":3178,"line_end":3178,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196630,"byte_end":196680,"line_start":3179,"line_end":3179,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196685,"byte_end":196688,"line_start":3180,"line_end":3180,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196693,"byte_end":196738,"line_start":3181,"line_end":3181,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196743,"byte_end":196746,"line_start":3182,"line_end":3182,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196751,"byte_end":196841,"line_start":3183,"line_end":3183,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196846,"byte_end":196878,"line_start":3184,"line_end":3184,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196883,"byte_end":196949,"line_start":3185,"line_end":3185,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":196954,"byte_end":197040,"line_start":3186,"line_end":3186,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197045,"byte_end":197081,"line_start":3187,"line_end":3187,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197086,"byte_end":197099,"line_start":3188,"line_end":3188,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197104,"byte_end":197113,"line_start":3189,"line_end":3189,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197118,"byte_end":197123,"line_start":3190,"line_end":3190,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197128,"byte_end":197135,"line_start":3191,"line_end":3191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198851,"byte_end":198869,"line_start":3247,"line_end":3247,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<OccupiedEntry>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> Entry where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197337,"byte_end":197407,"line_start":3198,"line_end":3198,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197412,"byte_end":197473,"line_start":3199,"line_end":3199,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197478,"byte_end":197511,"line_start":3200,"line_end":3200,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197516,"byte_end":197519,"line_start":3201,"line_end":3201,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197524,"byte_end":197538,"line_start":3202,"line_end":3202,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197543,"byte_end":197546,"line_start":3203,"line_end":3203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197551,"byte_end":197558,"line_start":3204,"line_end":3204,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197563,"byte_end":197590,"line_start":3205,"line_end":3205,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197595,"byte_end":197630,"line_start":3206,"line_end":3206,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197635,"byte_end":197638,"line_start":3207,"line_end":3207,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197643,"byte_end":197696,"line_start":3208,"line_end":3208,"column_start":5,"column_end":58}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197701,"byte_end":197733,"line_start":3209,"line_end":3209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197738,"byte_end":197741,"line_start":3210,"line_end":3210,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197746,"byte_end":197792,"line_start":3211,"line_end":3211,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197797,"byte_end":197828,"line_start":3212,"line_end":3212,"column_start":5,"column_end":36}},{"value":"/         e.replace_entry_with(|k, v| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197833,"byte_end":197874,"line_start":3213,"line_end":3213,"column_start":5,"column_end":46}},{"value":"/             assert_eq!(k, &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197879,"byte_end":197923,"line_start":3214,"line_end":3214,"column_start":5,"column_end":49}},{"value":"/             assert_eq!(v, 42);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197928,"byte_end":197962,"line_start":3215,"line_end":3215,"column_start":5,"column_end":39}},{"value":"/             Some(v + 1)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197967,"byte_end":197994,"line_start":3216,"line_end":3216,"column_start":5,"column_end":32}},{"value":"/         })","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":197999,"byte_end":198013,"line_start":3217,"line_end":3217,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198018,"byte_end":198027,"line_start":3218,"line_end":3218,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198032,"byte_end":198069,"line_start":3219,"line_end":3219,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198074,"byte_end":198080,"line_start":3220,"line_end":3220,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198085,"byte_end":198088,"line_start":3221,"line_end":3221,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198093,"byte_end":198110,"line_start":3222,"line_end":3222,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198115,"byte_end":198146,"line_start":3223,"line_end":3223,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198151,"byte_end":198197,"line_start":3224,"line_end":3224,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198202,"byte_end":198239,"line_start":3225,"line_end":3225,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198244,"byte_end":198253,"line_start":3226,"line_end":3226,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198258,"byte_end":198295,"line_start":3227,"line_end":3227,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198300,"byte_end":198305,"line_start":3228,"line_end":3228,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198310,"byte_end":198313,"line_start":3229,"line_end":3229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198318,"byte_end":198355,"line_start":3230,"line_end":3230,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198360,"byte_end":198363,"line_start":3231,"line_end":3231,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198368,"byte_end":198414,"line_start":3232,"line_end":3232,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198419,"byte_end":198485,"line_start":3233,"line_end":3233,"column_start":5,"column_end":71}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198490,"byte_end":198527,"line_start":3234,"line_end":3234,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198532,"byte_end":198538,"line_start":3235,"line_end":3235,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198543,"byte_end":198546,"line_start":3236,"line_end":3236,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198551,"byte_end":198568,"line_start":3237,"line_end":3237,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198573,"byte_end":198602,"line_start":3238,"line_end":3238,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198607,"byte_end":198653,"line_start":3239,"line_end":3239,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198658,"byte_end":198667,"line_start":3240,"line_end":3240,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198672,"byte_end":198711,"line_start":3241,"line_end":3241,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198716,"byte_end":198721,"line_start":3242,"line_end":3242,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198726,"byte_end":198729,"line_start":3243,"line_end":3243,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198734,"byte_end":198778,"line_start":3244,"line_end":3244,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":198783,"byte_end":198790,"line_start":3245,"line_end":3245,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200160,"byte_end":200163,"line_start":3291,"line_end":3291,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199770,"byte_end":199843,"line_start":3279,"line_end":3279,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199848,"byte_end":199878,"line_start":3280,"line_end":3280,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199883,"byte_end":199886,"line_start":3281,"line_end":3281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199891,"byte_end":199905,"line_start":3282,"line_end":3282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199910,"byte_end":199913,"line_start":3283,"line_end":3283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199918,"byte_end":199925,"line_start":3284,"line_end":3284,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199930,"byte_end":199957,"line_start":3285,"line_end":3285,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199962,"byte_end":199965,"line_start":3286,"line_end":3286,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199970,"byte_end":200023,"line_start":3287,"line_end":3287,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200028,"byte_end":200087,"line_start":3288,"line_end":3288,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200092,"byte_end":200099,"line_start":3289,"line_end":3289,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200599,"byte_end":200607,"line_start":3310,"line_end":3310,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200208,"byte_end":200238,"line_start":3295,"line_end":3295,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200243,"byte_end":200246,"line_start":3296,"line_end":3296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200251,"byte_end":200265,"line_start":3297,"line_end":3297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200270,"byte_end":200273,"line_start":3298,"line_end":3298,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200278,"byte_end":200285,"line_start":3299,"line_end":3299,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200290,"byte_end":200317,"line_start":3300,"line_end":3300,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200322,"byte_end":200357,"line_start":3301,"line_end":3301,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200362,"byte_end":200365,"line_start":3302,"line_end":3302,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200370,"byte_end":200423,"line_start":3303,"line_end":3303,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200428,"byte_end":200431,"line_start":3304,"line_end":3304,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200436,"byte_end":200490,"line_start":3305,"line_end":3305,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200495,"byte_end":200516,"line_start":3306,"line_end":3306,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200521,"byte_end":200526,"line_start":3307,"line_end":3307,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200531,"byte_end":200538,"line_start":3308,"line_end":3308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":201158,"byte_end":201164,"line_start":3331,"line_end":3331,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200649,"byte_end":200708,"line_start":3314,"line_end":3314,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200713,"byte_end":200755,"line_start":3315,"line_end":3315,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200760,"byte_end":200763,"line_start":3316,"line_end":3316,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200768,"byte_end":200782,"line_start":3317,"line_end":3317,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200787,"byte_end":200790,"line_start":3318,"line_end":3318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200795,"byte_end":200802,"line_start":3319,"line_end":3319,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200807,"byte_end":200834,"line_start":3320,"line_end":3320,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200839,"byte_end":200874,"line_start":3321,"line_end":3321,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200879,"byte_end":200882,"line_start":3322,"line_end":3322,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200887,"byte_end":200940,"line_start":3323,"line_end":3323,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200945,"byte_end":200948,"line_start":3324,"line_end":3324,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":200953,"byte_end":201007,"line_start":3325,"line_end":3325,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":201012,"byte_end":201033,"line_start":3326,"line_end":3326,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":201038,"byte_end":201043,"line_start":3327,"line_end":3327,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":201048,"byte_end":201085,"line_start":3328,"line_end":3328,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":201090,"byte_end":201097,"line_start":3329,"line_end":3329,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250761,"byte_end":250768,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1415}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247389,"byte_end":247455,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247456,"byte_end":247459,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247460,"byte_end":247532,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247533,"byte_end":247613,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247614,"byte_end":247690,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247691,"byte_end":247745,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247746,"byte_end":247749,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247750,"byte_end":247761,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247762,"byte_end":247798,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247799,"byte_end":247806,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247807,"byte_end":247810,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247811,"byte_end":247881,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247882,"byte_end":247885,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247886,"byte_end":247889,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247890,"byte_end":247963,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":247964,"byte_end":248037,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248038,"byte_end":248113,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248114,"byte_end":248193,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248194,"byte_end":248210,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248211,"byte_end":248214,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248215,"byte_end":248294,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248295,"byte_end":248373,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248374,"byte_end":248454,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248455,"byte_end":248500,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248501,"byte_end":248504,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248505,"byte_end":248519,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248520,"byte_end":248523,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248524,"byte_end":248531,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248532,"byte_end":248559,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248560,"byte_end":248628,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248629,"byte_end":248680,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248681,"byte_end":248716,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248717,"byte_end":248720,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248721,"byte_end":248743,"line_start":53,"line_end":53,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248744,"byte_end":248797,"line_start":54,"line_end":54,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248798,"byte_end":248852,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248853,"byte_end":248897,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248898,"byte_end":248947,"line_start":57,"line_end":57,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248948,"byte_end":248951,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248952,"byte_end":248984,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":248985,"byte_end":249032,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249033,"byte_end":249105,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249106,"byte_end":249136,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249137,"byte_end":249142,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249143,"byte_end":249146,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249147,"byte_end":249168,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249169,"byte_end":249201,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249202,"byte_end":249205,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249206,"byte_end":249237,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249238,"byte_end":249262,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249263,"byte_end":249292,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249293,"byte_end":249298,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249299,"byte_end":249306,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249307,"byte_end":249310,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249311,"byte_end":249379,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249380,"byte_end":249456,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249457,"byte_end":249489,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249490,"byte_end":249493,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249494,"byte_end":249501,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249502,"byte_end":249529,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249530,"byte_end":249571,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249572,"byte_end":249591,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249592,"byte_end":249613,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249614,"byte_end":249635,"line_start":83,"line_end":83,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249636,"byte_end":249641,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249642,"byte_end":249645,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249646,"byte_end":249683,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249684,"byte_end":249687,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249688,"byte_end":249755,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249756,"byte_end":249823,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249824,"byte_end":249890,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249891,"byte_end":249959,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249960,"byte_end":249963,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":249964,"byte_end":250019,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250020,"byte_end":250043,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250044,"byte_end":250072,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250073,"byte_end":250078,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250079,"byte_end":250086,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250087,"byte_end":250090,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250091,"byte_end":250168,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250169,"byte_end":250172,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250173,"byte_end":250180,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250181,"byte_end":250208,"line_start":102,"line_end":102,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250209,"byte_end":250212,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250213,"byte_end":250258,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250259,"byte_end":250323,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250324,"byte_end":250363,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250364,"byte_end":250371,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250372,"byte_end":250375,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250376,"byte_end":250441,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250442,"byte_end":250501,"line_start":110,"line_end":110,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250502,"byte_end":250566,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250567,"byte_end":250603,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250604,"byte_end":250677,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250678,"byte_end":250749,"line_start":114,"line_end":114,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253849,"byte_end":253857,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253523,"byte_end":253596,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253601,"byte_end":253604,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253609,"byte_end":253623,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253628,"byte_end":253631,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253636,"byte_end":253643,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253648,"byte_end":253675,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253680,"byte_end":253736,"line_start":218,"line_end":218,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253741,"byte_end":253776,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253781,"byte_end":253788,"line_start":220,"line_end":220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254382,"byte_end":254386,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253915,"byte_end":253972,"line_start":226,"line_end":226,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253977,"byte_end":254018,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254023,"byte_end":254026,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254031,"byte_end":254045,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254050,"byte_end":254053,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254058,"byte_end":254065,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254070,"byte_end":254097,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254102,"byte_end":254135,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254140,"byte_end":254160,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254165,"byte_end":254185,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254190,"byte_end":254193,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254198,"byte_end":254238,"line_start":237,"line_end":237,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254243,"byte_end":254268,"line_start":238,"line_end":238,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254273,"byte_end":254299,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254304,"byte_end":254309,"line_start":240,"line_end":240,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254314,"byte_end":254321,"line_start":241,"line_end":241,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254809,"byte_end":254812,"line_start":262,"line_end":262,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254482,"byte_end":254528,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254533,"byte_end":254536,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254541,"byte_end":254555,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254560,"byte_end":254563,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254568,"byte_end":254575,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254580,"byte_end":254607,"line_start":254,"line_end":254,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254612,"byte_end":254615,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254620,"byte_end":254651,"line_start":256,"line_end":256,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254656,"byte_end":254683,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254688,"byte_end":254704,"line_start":258,"line_end":258,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254709,"byte_end":254736,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254741,"byte_end":254748,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255196,"byte_end":255204,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254865,"byte_end":254916,"line_start":266,"line_end":266,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254921,"byte_end":254924,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254929,"byte_end":254943,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254948,"byte_end":254951,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254956,"byte_end":254963,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":254968,"byte_end":254995,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255000,"byte_end":255003,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255008,"byte_end":255039,"line_start":273,"line_end":273,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255044,"byte_end":255070,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255075,"byte_end":255091,"line_start":275,"line_end":275,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255096,"byte_end":255123,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255128,"byte_end":255135,"line_start":277,"line_end":277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255752,"byte_end":255757,"line_start":301,"line_end":301,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255261,"byte_end":255319,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255324,"byte_end":255327,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255332,"byte_end":255346,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255351,"byte_end":255354,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255359,"byte_end":255366,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255371,"byte_end":255398,"line_start":288,"line_end":288,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255403,"byte_end":255406,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255411,"byte_end":255477,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255482,"byte_end":255511,"line_start":291,"line_end":291,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255516,"byte_end":255519,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255524,"byte_end":255566,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255571,"byte_end":255597,"line_start":294,"line_end":294,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255602,"byte_end":255628,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255633,"byte_end":255638,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255643,"byte_end":255646,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255651,"byte_end":255679,"line_start":298,"line_end":298,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255684,"byte_end":255691,"line_start":299,"line_end":299,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256291,"byte_end":256297,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255863,"byte_end":255920,"line_start":307,"line_end":307,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255925,"byte_end":255928,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":255933,"byte_end":256011,"line_start":309,"line_end":309,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256016,"byte_end":256019,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256024,"byte_end":256038,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256043,"byte_end":256046,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256051,"byte_end":256058,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256063,"byte_end":256090,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256095,"byte_end":256098,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256103,"byte_end":256130,"line_start":316,"line_end":316,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256135,"byte_end":256196,"line_start":317,"line_end":317,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256201,"byte_end":256233,"line_start":318,"line_end":318,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256238,"byte_end":256267,"line_start":319,"line_end":319,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256272,"byte_end":256279,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257367,"byte_end":257379,"line_start":354,"line_end":354,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashSet<T, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, T, F, A> where\nF: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256417,"byte_end":256478,"line_start":328,"line_end":328,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256483,"byte_end":256534,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256539,"byte_end":256542,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ In other words, move all elements `e` such that `f(&e)` returns `true` out","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256547,"byte_end":256625,"line_start":331,"line_end":331,"column_start":5,"column_end":83}},{"value":"/ into another iterator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256630,"byte_end":256656,"line_start":332,"line_end":332,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256661,"byte_end":256664,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256669,"byte_end":256752,"line_start":334,"line_end":334,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256757,"byte_end":256800,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256805,"byte_end":256808,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256813,"byte_end":256827,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256832,"byte_end":256835,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256840,"byte_end":256847,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256852,"byte_end":256879,"line_start":340,"line_end":340,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256884,"byte_end":256887,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<i32> = (0..8).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256892,"byte_end":256941,"line_start":342,"line_end":342,"column_start":5,"column_end":54}},{"value":"/ let drained: HashSet<i32> = set.drain_filter(|v| v % 2 == 0).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":256946,"byte_end":257021,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257026,"byte_end":257029,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.into_iter().collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257034,"byte_end":257094,"line_start":345,"line_end":345,"column_start":5,"column_end":65}},{"value":"/ let mut odds = set.into_iter().collect::<Vec<_>>();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257099,"byte_end":257154,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/ evens.sort();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257159,"byte_end":257176,"line_start":347,"line_end":347,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257181,"byte_end":257197,"line_start":348,"line_end":348,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257202,"byte_end":257205,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257210,"byte_end":257250,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257255,"byte_end":257294,"line_start":351,"line_end":351,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257299,"byte_end":257306,"line_start":352,"line_end":352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257992,"byte_end":257997,"line_start":380,"line_end":380,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257685,"byte_end":257725,"line_start":367,"line_end":367,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257730,"byte_end":257733,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257738,"byte_end":257752,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257757,"byte_end":257760,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257765,"byte_end":257772,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257777,"byte_end":257804,"line_start":372,"line_end":372,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257809,"byte_end":257812,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257817,"byte_end":257848,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257853,"byte_end":257869,"line_start":375,"line_end":375,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257874,"byte_end":257888,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257893,"byte_end":257919,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":257924,"byte_end":257931,"line_start":378,"line_end":378,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259102,"byte_end":259113,"line_start":413,"line_end":413,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashSet<T, S, Global>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258084,"byte_end":258156,"line_start":386,"line_end":386,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258161,"byte_end":258170,"line_start":387,"line_end":387,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258175,"byte_end":258178,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258183,"byte_end":258250,"line_start":389,"line_end":389,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258255,"byte_end":258258,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258263,"byte_end":258320,"line_start":391,"line_end":391,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258325,"byte_end":258392,"line_start":392,"line_end":392,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258397,"byte_end":258460,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258465,"byte_end":258529,"line_start":394,"line_end":394,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258534,"byte_end":258537,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258542,"byte_end":258618,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258623,"byte_end":258687,"line_start":397,"line_end":397,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258692,"byte_end":258695,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258700,"byte_end":258703,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258708,"byte_end":258722,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258727,"byte_end":258730,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258735,"byte_end":258742,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258747,"byte_end":258774,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258779,"byte_end":258827,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258832,"byte_end":258835,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258840,"byte_end":258882,"line_start":406,"line_end":406,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258887,"byte_end":258929,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258934,"byte_end":258952,"line_start":408,"line_end":408,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258957,"byte_end":258964,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258969,"byte_end":258972,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258977,"byte_end":259035,"line_start":411,"line_end":411,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260334,"byte_end":260358,"line_start":446,"line_end":446,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S, Global>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259218,"byte_end":259283,"line_start":419,"line_end":419,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259288,"byte_end":259318,"line_start":420,"line_end":420,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259323,"byte_end":259326,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259331,"byte_end":259405,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259410,"byte_end":259479,"line_start":423,"line_end":423,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259484,"byte_end":259487,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259492,"byte_end":259549,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259554,"byte_end":259621,"line_start":426,"line_end":426,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259626,"byte_end":259689,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259694,"byte_end":259758,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259763,"byte_end":259766,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259771,"byte_end":259847,"line_start":430,"line_end":430,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259852,"byte_end":259916,"line_start":431,"line_end":431,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259921,"byte_end":259924,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259929,"byte_end":259943,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259948,"byte_end":259951,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259956,"byte_end":259963,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":259968,"byte_end":259995,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260000,"byte_end":260048,"line_start":437,"line_end":437,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260053,"byte_end":260056,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260061,"byte_end":260103,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260108,"byte_end":260167,"line_start":440,"line_end":440,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260172,"byte_end":260190,"line_start":441,"line_end":441,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260195,"byte_end":260202,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260207,"byte_end":260210,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260215,"byte_end":260273,"line_start":444,"line_end":444,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261345,"byte_end":261359,"line_start":478,"line_end":478,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashSet<T, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260570,"byte_end":260642,"line_start":457,"line_end":457,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260647,"byte_end":260656,"line_start":458,"line_end":458,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260661,"byte_end":260664,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260669,"byte_end":260736,"line_start":460,"line_end":460,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260741,"byte_end":260744,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260749,"byte_end":260806,"line_start":462,"line_end":462,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260811,"byte_end":260878,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260883,"byte_end":260946,"line_start":464,"line_end":464,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260951,"byte_end":261015,"line_start":465,"line_end":465,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261020,"byte_end":261023,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261028,"byte_end":261042,"line_start":467,"line_end":467,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261047,"byte_end":261050,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261055,"byte_end":261062,"line_start":469,"line_end":469,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261067,"byte_end":261094,"line_start":470,"line_end":470,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261099,"byte_end":261147,"line_start":471,"line_end":471,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261152,"byte_end":261155,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261160,"byte_end":261202,"line_start":473,"line_end":473,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261207,"byte_end":261249,"line_start":474,"line_end":474,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261254,"byte_end":261272,"line_start":475,"line_end":475,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261277,"byte_end":261284,"line_start":476,"line_end":476,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262371,"byte_end":262398,"line_start":506,"line_end":506,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashSet<T, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261484,"byte_end":261549,"line_start":484,"line_end":484,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261554,"byte_end":261584,"line_start":485,"line_end":485,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261589,"byte_end":261592,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261597,"byte_end":261671,"line_start":487,"line_end":487,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261676,"byte_end":261745,"line_start":488,"line_end":488,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261750,"byte_end":261753,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261758,"byte_end":261815,"line_start":490,"line_end":490,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261820,"byte_end":261887,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261892,"byte_end":261955,"line_start":492,"line_end":492,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":261960,"byte_end":262024,"line_start":493,"line_end":493,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262029,"byte_end":262032,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262037,"byte_end":262051,"line_start":495,"line_end":495,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262056,"byte_end":262059,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262064,"byte_end":262071,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262076,"byte_end":262103,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262108,"byte_end":262156,"line_start":499,"line_end":499,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262161,"byte_end":262164,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262169,"byte_end":262211,"line_start":501,"line_end":501,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262216,"byte_end":262275,"line_start":502,"line_end":502,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262280,"byte_end":262298,"line_start":503,"line_end":503,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262303,"byte_end":262310,"line_start":504,"line_end":504,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263090,"byte_end":263096,"line_start":527,"line_end":527,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262563,"byte_end":262616,"line_start":512,"line_end":512,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262621,"byte_end":262624,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262629,"byte_end":262707,"line_start":514,"line_end":514,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262712,"byte_end":262715,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262720,"byte_end":262734,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262739,"byte_end":262742,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262747,"byte_end":262754,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262759,"byte_end":262786,"line_start":519,"line_end":519,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262791,"byte_end":262839,"line_start":520,"line_end":520,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262844,"byte_end":262847,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262852,"byte_end":262899,"line_start":522,"line_end":522,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262904,"byte_end":262961,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":262966,"byte_end":263017,"line_start":524,"line_end":524,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263022,"byte_end":263029,"line_start":525,"line_end":525,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263797,"byte_end":263804,"line_start":555,"line_end":555,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263254,"byte_end":263330,"line_start":538,"line_end":538,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263335,"byte_end":263403,"line_start":539,"line_end":539,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263408,"byte_end":263435,"line_start":540,"line_end":540,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263440,"byte_end":263443,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263448,"byte_end":263460,"line_start":542,"line_end":542,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263465,"byte_end":263468,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263473,"byte_end":263529,"line_start":544,"line_end":544,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263534,"byte_end":263537,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263542,"byte_end":263556,"line_start":546,"line_end":546,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263561,"byte_end":263564,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263569,"byte_end":263576,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263581,"byte_end":263608,"line_start":549,"line_end":549,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263613,"byte_end":263660,"line_start":550,"line_end":550,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263665,"byte_end":263685,"line_start":551,"line_end":551,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263690,"byte_end":263724,"line_start":552,"line_end":552,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263729,"byte_end":263736,"line_start":553,"line_end":553,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264511,"byte_end":264522,"line_start":576,"line_end":576,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263885,"byte_end":263969,"line_start":559,"line_end":559,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263974,"byte_end":264053,"line_start":560,"line_end":560,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264058,"byte_end":264085,"line_start":561,"line_end":561,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264090,"byte_end":264093,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264098,"byte_end":264110,"line_start":563,"line_end":563,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264115,"byte_end":264118,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264123,"byte_end":264203,"line_start":565,"line_end":565,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264208,"byte_end":264224,"line_start":566,"line_end":566,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264229,"byte_end":264232,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264237,"byte_end":264251,"line_start":568,"line_end":568,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264256,"byte_end":264259,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264264,"byte_end":264271,"line_start":570,"line_end":570,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264276,"byte_end":264303,"line_start":571,"line_end":571,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264308,"byte_end":264355,"line_start":572,"line_end":572,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264360,"byte_end":264438,"line_start":573,"line_end":573,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264443,"byte_end":264450,"line_start":574,"line_end":574,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265219,"byte_end":265232,"line_start":597,"line_end":597,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264638,"byte_end":264707,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264712,"byte_end":264777,"line_start":581,"line_end":581,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264782,"byte_end":264855,"line_start":582,"line_end":582,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264860,"byte_end":264863,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264868,"byte_end":264882,"line_start":584,"line_end":584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264887,"byte_end":264890,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264895,"byte_end":264902,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264907,"byte_end":264934,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264939,"byte_end":264942,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264947,"byte_end":264993,"line_start":589,"line_end":589,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":264998,"byte_end":265016,"line_start":590,"line_end":590,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265021,"byte_end":265039,"line_start":591,"line_end":591,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265044,"byte_end":265079,"line_start":592,"line_end":592,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265084,"byte_end":265108,"line_start":593,"line_end":593,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265113,"byte_end":265146,"line_start":594,"line_end":594,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265151,"byte_end":265158,"line_start":595,"line_end":595,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266048,"byte_end":266057,"line_start":623,"line_end":623,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265290,"byte_end":265358,"line_start":601,"line_end":601,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265363,"byte_end":265441,"line_start":602,"line_end":602,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265446,"byte_end":265519,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265524,"byte_end":265527,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265532,"byte_end":265595,"line_start":605,"line_end":605,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265600,"byte_end":265621,"line_start":606,"line_end":606,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265626,"byte_end":265629,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265634,"byte_end":265648,"line_start":608,"line_end":608,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265653,"byte_end":265656,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265661,"byte_end":265668,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265673,"byte_end":265700,"line_start":611,"line_end":611,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265705,"byte_end":265708,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265713,"byte_end":265759,"line_start":613,"line_end":613,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265764,"byte_end":265782,"line_start":614,"line_end":614,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265787,"byte_end":265805,"line_start":615,"line_end":615,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265810,"byte_end":265845,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265850,"byte_end":265872,"line_start":617,"line_end":617,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265877,"byte_end":265911,"line_start":618,"line_end":618,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265916,"byte_end":265937,"line_start":619,"line_end":619,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265942,"byte_end":265975,"line_start":620,"line_end":620,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":265980,"byte_end":265987,"line_start":621,"line_end":621,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266999,"byte_end":267009,"line_start":651,"line_end":651,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S, A>>::difference","value":"pub fn difference<'a>(&'a Self, &'a Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266144,"byte_end":266194,"line_start":627,"line_end":627,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266199,"byte_end":266258,"line_start":628,"line_end":628,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266263,"byte_end":266266,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266271,"byte_end":266285,"line_start":630,"line_end":630,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266290,"byte_end":266293,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266298,"byte_end":266305,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266310,"byte_end":266337,"line_start":633,"line_end":633,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266342,"byte_end":266402,"line_start":634,"line_end":634,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266407,"byte_end":266470,"line_start":635,"line_end":635,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266475,"byte_end":266478,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266483,"byte_end":266513,"line_start":637,"line_end":637,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266518,"byte_end":266549,"line_start":638,"line_end":638,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266554,"byte_end":266591,"line_start":639,"line_end":639,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266596,"byte_end":266601,"line_start":640,"line_end":640,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266606,"byte_end":266609,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266614,"byte_end":266668,"line_start":642,"line_end":642,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266673,"byte_end":266716,"line_start":643,"line_end":643,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266721,"byte_end":266724,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266729,"byte_end":266774,"line_start":645,"line_end":645,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266779,"byte_end":266819,"line_start":646,"line_end":646,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266824,"byte_end":266878,"line_start":647,"line_end":647,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266883,"byte_end":266926,"line_start":648,"line_end":648,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":266931,"byte_end":266938,"line_start":649,"line_end":649,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267961,"byte_end":267981,"line_start":680,"line_end":680,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S, A>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267162,"byte_end":267222,"line_start":658,"line_end":658,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267227,"byte_end":267297,"line_start":659,"line_end":659,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267302,"byte_end":267305,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267310,"byte_end":267324,"line_start":661,"line_end":661,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267329,"byte_end":267332,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267337,"byte_end":267344,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267349,"byte_end":267376,"line_start":664,"line_end":664,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267381,"byte_end":267441,"line_start":665,"line_end":665,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267446,"byte_end":267509,"line_start":666,"line_end":666,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267514,"byte_end":267517,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267522,"byte_end":267559,"line_start":668,"line_end":668,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267564,"byte_end":267605,"line_start":669,"line_end":669,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267610,"byte_end":267636,"line_start":670,"line_end":670,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267641,"byte_end":267646,"line_start":671,"line_end":671,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267651,"byte_end":267654,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267659,"byte_end":267724,"line_start":673,"line_end":673,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267729,"byte_end":267794,"line_start":674,"line_end":674,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267799,"byte_end":267802,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267807,"byte_end":267836,"line_start":676,"line_end":676,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267841,"byte_end":267888,"line_start":677,"line_end":677,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":267893,"byte_end":267900,"line_start":678,"line_end":678,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268838,"byte_end":268850,"line_start":705,"line_end":705,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S, A>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268174,"byte_end":268226,"line_start":686,"line_end":686,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268231,"byte_end":268288,"line_start":687,"line_end":687,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268293,"byte_end":268296,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268301,"byte_end":268315,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268320,"byte_end":268323,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268328,"byte_end":268335,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268340,"byte_end":268367,"line_start":692,"line_end":692,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268372,"byte_end":268432,"line_start":693,"line_end":693,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268437,"byte_end":268500,"line_start":694,"line_end":694,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268505,"byte_end":268508,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268513,"byte_end":268550,"line_start":696,"line_end":696,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268555,"byte_end":268588,"line_start":697,"line_end":697,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268593,"byte_end":268619,"line_start":698,"line_end":698,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268624,"byte_end":268629,"line_start":699,"line_end":699,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268634,"byte_end":268637,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268642,"byte_end":268706,"line_start":701,"line_end":701,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268711,"byte_end":268765,"line_start":702,"line_end":702,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":268770,"byte_end":268777,"line_start":703,"line_end":703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269811,"byte_end":269816,"line_start":736,"line_end":736,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S, A>>::union","value":"pub fn union<'a>(&'a Self, &'a Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269161,"byte_end":269206,"line_start":717,"line_end":717,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269211,"byte_end":269277,"line_start":718,"line_end":718,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269282,"byte_end":269285,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269290,"byte_end":269304,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269309,"byte_end":269312,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269317,"byte_end":269324,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269329,"byte_end":269356,"line_start":723,"line_end":723,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269361,"byte_end":269421,"line_start":724,"line_end":724,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269426,"byte_end":269489,"line_start":725,"line_end":725,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269494,"byte_end":269497,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269502,"byte_end":269545,"line_start":727,"line_end":727,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269550,"byte_end":269576,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269581,"byte_end":269607,"line_start":729,"line_end":729,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269612,"byte_end":269617,"line_start":730,"line_end":730,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269622,"byte_end":269625,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269630,"byte_end":269680,"line_start":732,"line_end":732,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269685,"byte_end":269738,"line_start":733,"line_end":733,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":269743,"byte_end":269750,"line_start":734,"line_end":734,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270974,"byte_end":270982,"line_start":768,"line_end":768,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S, A>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270294,"byte_end":270341,"line_start":749,"line_end":749,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270346,"byte_end":270349,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270354,"byte_end":270421,"line_start":751,"line_end":751,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270426,"byte_end":270493,"line_start":752,"line_end":752,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270498,"byte_end":270517,"line_start":753,"line_end":753,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270522,"byte_end":270525,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270530,"byte_end":270544,"line_start":755,"line_end":755,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270549,"byte_end":270552,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270557,"byte_end":270564,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270569,"byte_end":270596,"line_start":758,"line_end":758,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270601,"byte_end":270604,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270609,"byte_end":270671,"line_start":760,"line_end":760,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270676,"byte_end":270715,"line_start":761,"line_end":761,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270720,"byte_end":270760,"line_start":762,"line_end":762,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270765,"byte_end":270772,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270777,"byte_end":270780,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270785,"byte_end":270844,"line_start":765,"line_end":765,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":270849,"byte_end":270913,"line_start":766,"line_end":766,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271844,"byte_end":271847,"line_start":795,"line_end":795,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271128,"byte_end":271218,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271223,"byte_end":271226,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271231,"byte_end":271298,"line_start":778,"line_end":778,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271303,"byte_end":271370,"line_start":779,"line_end":779,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271375,"byte_end":271394,"line_start":780,"line_end":780,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271399,"byte_end":271402,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271407,"byte_end":271421,"line_start":782,"line_end":782,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271426,"byte_end":271429,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271434,"byte_end":271441,"line_start":784,"line_end":784,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271446,"byte_end":271473,"line_start":785,"line_end":785,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271478,"byte_end":271481,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271486,"byte_end":271548,"line_start":787,"line_end":787,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271553,"byte_end":271591,"line_start":788,"line_end":788,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271596,"byte_end":271630,"line_start":789,"line_end":789,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271635,"byte_end":271642,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271647,"byte_end":271650,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271655,"byte_end":271714,"line_start":792,"line_end":792,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":271719,"byte_end":271783,"line_start":793,"line_end":793,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1469},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272676,"byte_end":272689,"line_start":822,"line_end":822,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S, A>>::get_or_insert","value":"pub fn get_or_insert(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272139,"byte_end":272208,"line_start":807,"line_end":807,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272213,"byte_end":272261,"line_start":808,"line_end":808,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272266,"byte_end":272269,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272274,"byte_end":272288,"line_start":810,"line_end":810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272293,"byte_end":272296,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272301,"byte_end":272308,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272313,"byte_end":272340,"line_start":813,"line_end":813,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272345,"byte_end":272348,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272353,"byte_end":272419,"line_start":815,"line_end":815,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272424,"byte_end":272453,"line_start":816,"line_end":816,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272458,"byte_end":272499,"line_start":817,"line_end":817,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272504,"byte_end":272549,"line_start":818,"line_end":818,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272554,"byte_end":272603,"line_start":819,"line_end":819,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":272608,"byte_end":272615,"line_start":820,"line_end":820,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273680,"byte_end":273699,"line_start":851,"line_end":851,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S, A>>::get_or_insert_owned","value":"pub fn get_or_insert_owned<Q: ?Sized>(&mut Self, &Q) -> &T where T: Borrow<Q>,\nQ: Hash + Eq + ToOwned<Owned = T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273044,"byte_end":273116,"line_start":832,"line_end":832,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273121,"byte_end":273183,"line_start":833,"line_end":833,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273188,"byte_end":273191,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273196,"byte_end":273210,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273215,"byte_end":273218,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273223,"byte_end":273230,"line_start":837,"line_end":837,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273235,"byte_end":273262,"line_start":838,"line_end":838,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273267,"byte_end":273270,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273275,"byte_end":273333,"line_start":840,"line_end":840,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273338,"byte_end":273391,"line_start":841,"line_end":841,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273396,"byte_end":273399,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273404,"byte_end":273433,"line_start":843,"line_end":843,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273438,"byte_end":273479,"line_start":844,"line_end":844,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273484,"byte_end":273533,"line_start":845,"line_end":845,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273538,"byte_end":273569,"line_start":846,"line_end":846,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273574,"byte_end":273579,"line_start":847,"line_end":847,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273584,"byte_end":273642,"line_start":848,"line_end":848,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273647,"byte_end":273654,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":273659,"byte_end":273668,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274856,"byte_end":274874,"line_start":884,"line_end":884,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S, A>>::get_or_insert_with","value":"pub fn get_or_insert_with<Q: ?Sized, F>(&mut Self, &Q, F) -> &T where\nT: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274165,"byte_end":274239,"line_start":865,"line_end":865,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274244,"byte_end":274310,"line_start":866,"line_end":866,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274315,"byte_end":274318,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274323,"byte_end":274337,"line_start":868,"line_end":868,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274342,"byte_end":274345,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274350,"byte_end":274357,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274362,"byte_end":274389,"line_start":871,"line_end":871,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274394,"byte_end":274397,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274402,"byte_end":274460,"line_start":873,"line_end":873,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274465,"byte_end":274518,"line_start":874,"line_end":874,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274523,"byte_end":274526,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274531,"byte_end":274560,"line_start":876,"line_end":876,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274565,"byte_end":274606,"line_start":877,"line_end":877,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274611,"byte_end":274674,"line_start":878,"line_end":878,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274679,"byte_end":274710,"line_start":879,"line_end":879,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274715,"byte_end":274720,"line_start":880,"line_end":880,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274725,"byte_end":274783,"line_start":881,"line_end":881,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":274788,"byte_end":274795,"line_start":882,"line_end":882,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275880,"byte_end":275891,"line_start":916,"line_end":916,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S, A>>::is_disjoint","value":"pub fn is_disjoint(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275348,"byte_end":275416,"line_start":899,"line_end":899,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275421,"byte_end":275482,"line_start":900,"line_end":900,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275487,"byte_end":275490,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275495,"byte_end":275509,"line_start":902,"line_end":902,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275514,"byte_end":275517,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275522,"byte_end":275529,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275534,"byte_end":275561,"line_start":905,"line_end":905,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275566,"byte_end":275569,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275574,"byte_end":275634,"line_start":907,"line_end":907,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275639,"byte_end":275670,"line_start":908,"line_end":908,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275675,"byte_end":275678,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275683,"byte_end":275723,"line_start":910,"line_end":910,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275728,"byte_end":275744,"line_start":911,"line_end":911,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275749,"byte_end":275789,"line_start":912,"line_end":912,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275794,"byte_end":275810,"line_start":913,"line_end":913,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275815,"byte_end":275856,"line_start":914,"line_end":914,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275861,"byte_end":275868,"line_start":915,"line_end":915,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276513,"byte_end":276522,"line_start":937,"line_end":937,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S, A>>::is_subset","value":"pub fn is_subset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":275982,"byte_end":276035,"line_start":920,"line_end":920,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276040,"byte_end":276101,"line_start":921,"line_end":921,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276106,"byte_end":276109,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276114,"byte_end":276128,"line_start":923,"line_end":923,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276133,"byte_end":276136,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276141,"byte_end":276148,"line_start":925,"line_end":925,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276153,"byte_end":276180,"line_start":926,"line_end":926,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276185,"byte_end":276188,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276193,"byte_end":276255,"line_start":928,"line_end":928,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276260,"byte_end":276293,"line_start":929,"line_end":929,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276298,"byte_end":276301,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276306,"byte_end":276348,"line_start":931,"line_end":931,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276353,"byte_end":276371,"line_start":932,"line_end":932,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276376,"byte_end":276418,"line_start":933,"line_end":933,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276423,"byte_end":276441,"line_start":934,"line_end":934,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276446,"byte_end":276489,"line_start":935,"line_end":935,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276494,"byte_end":276501,"line_start":936,"line_end":936,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277266,"byte_end":277277,"line_start":962,"line_end":962,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S, A>>::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276641,"byte_end":276696,"line_start":941,"line_end":941,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276701,"byte_end":276762,"line_start":942,"line_end":942,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276767,"byte_end":276770,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276775,"byte_end":276789,"line_start":944,"line_end":944,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276794,"byte_end":276797,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276802,"byte_end":276809,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276814,"byte_end":276841,"line_start":947,"line_end":947,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276846,"byte_end":276849,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276854,"byte_end":276913,"line_start":949,"line_end":949,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276918,"byte_end":276951,"line_start":950,"line_end":950,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276956,"byte_end":276959,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":276964,"byte_end":277009,"line_start":952,"line_end":952,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277014,"byte_end":277017,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277022,"byte_end":277040,"line_start":954,"line_end":954,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277045,"byte_end":277063,"line_start":955,"line_end":955,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277068,"byte_end":277113,"line_start":956,"line_end":956,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277118,"byte_end":277121,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277126,"byte_end":277144,"line_start":958,"line_end":958,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277149,"byte_end":277193,"line_start":959,"line_end":959,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277198,"byte_end":277205,"line_start":960,"line_end":960,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277858,"byte_end":277864,"line_start":984,"line_end":984,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S, A>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277350,"byte_end":277378,"line_start":966,"line_end":966,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277383,"byte_end":277386,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277391,"byte_end":277458,"line_start":968,"line_end":968,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277463,"byte_end":277466,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277471,"byte_end":277535,"line_start":970,"line_end":970,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277540,"byte_end":277543,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277548,"byte_end":277562,"line_start":972,"line_end":972,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277567,"byte_end":277570,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277575,"byte_end":277582,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277587,"byte_end":277614,"line_start":975,"line_end":975,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277619,"byte_end":277622,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277627,"byte_end":277660,"line_start":977,"line_end":977,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277665,"byte_end":277668,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277673,"byte_end":277709,"line_start":979,"line_end":979,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277714,"byte_end":277751,"line_start":980,"line_end":980,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277756,"byte_end":277785,"line_start":981,"line_end":981,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277790,"byte_end":277797,"line_start":982,"line_end":982,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278499,"byte_end":278506,"line_start":1004,"line_end":1004,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S, A>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":277952,"byte_end":278045,"line_start":988,"line_end":988,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278050,"byte_end":278086,"line_start":989,"line_end":989,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278091,"byte_end":278094,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278099,"byte_end":278113,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278118,"byte_end":278121,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278126,"byte_end":278133,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278138,"byte_end":278165,"line_start":994,"line_end":994,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278170,"byte_end":278173,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278178,"byte_end":278211,"line_start":996,"line_end":996,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278216,"byte_end":278250,"line_start":997,"line_end":997,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278255,"byte_end":278258,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278263,"byte_end":278319,"line_start":999,"line_end":999,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278324,"byte_end":278364,"line_start":1000,"line_end":1000,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278369,"byte_end":278426,"line_start":1001,"line_end":1001,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278431,"byte_end":278438,"line_start":1002,"line_end":1002,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279514,"byte_end":279520,"line_start":1036,"line_end":1036,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278792,"byte_end":278855,"line_start":1014,"line_end":1014,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278860,"byte_end":278883,"line_start":1015,"line_end":1015,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278888,"byte_end":278891,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278896,"byte_end":278963,"line_start":1017,"line_end":1017,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":278968,"byte_end":279035,"line_start":1018,"line_end":1018,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279040,"byte_end":279059,"line_start":1019,"line_end":1019,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279064,"byte_end":279067,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279072,"byte_end":279086,"line_start":1021,"line_end":1021,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279091,"byte_end":279094,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279099,"byte_end":279106,"line_start":1023,"line_end":1023,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279111,"byte_end":279138,"line_start":1024,"line_end":1024,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279143,"byte_end":279146,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279151,"byte_end":279184,"line_start":1026,"line_end":1026,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279189,"byte_end":279192,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279197,"byte_end":279215,"line_start":1028,"line_end":1028,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279220,"byte_end":279257,"line_start":1029,"line_end":1029,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279262,"byte_end":279300,"line_start":1030,"line_end":1030,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279305,"byte_end":279312,"line_start":1031,"line_end":1031,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279317,"byte_end":279320,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279325,"byte_end":279384,"line_start":1033,"line_end":1033,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279389,"byte_end":279453,"line_start":1034,"line_end":1034,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280390,"byte_end":280394,"line_start":1063,"line_end":1063,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S, A>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279674,"byte_end":279759,"line_start":1044,"line_end":1044,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279764,"byte_end":279767,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279772,"byte_end":279839,"line_start":1046,"line_end":1046,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279844,"byte_end":279911,"line_start":1047,"line_end":1047,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279916,"byte_end":279935,"line_start":1048,"line_end":1048,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279940,"byte_end":279943,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279948,"byte_end":279962,"line_start":1050,"line_end":1050,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279967,"byte_end":279970,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279975,"byte_end":279982,"line_start":1052,"line_end":1052,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":279987,"byte_end":280014,"line_start":1053,"line_end":1053,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280019,"byte_end":280022,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280027,"byte_end":280093,"line_start":1055,"line_end":1055,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280098,"byte_end":280136,"line_start":1056,"line_end":1056,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280141,"byte_end":280176,"line_start":1057,"line_end":1057,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280181,"byte_end":280188,"line_start":1058,"line_end":1058,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280193,"byte_end":280196,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280201,"byte_end":280260,"line_start":1060,"line_end":1060,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280265,"byte_end":280329,"line_start":1061,"line_end":1061,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1555},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287030,"byte_end":287034,"line_start":1332,"line_end":1332,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1558}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286777,"byte_end":286823,"line_start":1325,"line_end":1325,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286824,"byte_end":286827,"line_start":1326,"line_end":1326,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286828,"byte_end":286895,"line_start":1327,"line_end":1327,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286896,"byte_end":286931,"line_start":1328,"line_end":1328,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286932,"byte_end":286935,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286936,"byte_end":286972,"line_start":1330,"line_end":1330,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":286973,"byte_end":287018,"line_start":1331,"line_end":1331,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1559},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287388,"byte_end":287396,"line_start":1343,"line_end":1343,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1562}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287074,"byte_end":287127,"line_start":1336,"line_end":1336,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287128,"byte_end":287131,"line_start":1337,"line_end":1337,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287132,"byte_end":287203,"line_start":1338,"line_end":1338,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287204,"byte_end":287279,"line_start":1339,"line_end":1339,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287280,"byte_end":287283,"line_start":1340,"line_end":1340,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287284,"byte_end":287320,"line_start":1341,"line_end":1341,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287321,"byte_end":287376,"line_start":1342,"line_end":1342,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287735,"byte_end":287740,"line_start":1354,"line_end":1354,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1567}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287471,"byte_end":287525,"line_start":1347,"line_end":1347,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287526,"byte_end":287529,"line_start":1348,"line_end":1348,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287530,"byte_end":287598,"line_start":1349,"line_end":1349,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287599,"byte_end":287634,"line_start":1350,"line_end":1350,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287635,"byte_end":287638,"line_start":1351,"line_end":1351,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287639,"byte_end":287675,"line_start":1352,"line_end":1352,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287676,"byte_end":287723,"line_start":1353,"line_end":1353,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288141,"byte_end":288152,"line_start":1365,"line_end":1365,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::set::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574}],"decl_id":null,"docs":" A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287820,"byte_end":287910,"line_start":1358,"line_end":1358,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287911,"byte_end":287914,"line_start":1359,"line_end":1359,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287915,"byte_end":287998,"line_start":1360,"line_end":1360,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":287999,"byte_end":288026,"line_start":1361,"line_end":1361,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288027,"byte_end":288030,"line_start":1362,"line_end":1362,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashSet.html#method.drain_filter","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288031,"byte_end":288092,"line_start":1363,"line_end":1363,"column_start":1,"column_end":62}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288093,"byte_end":288129,"line_start":1364,"line_end":1364,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1575},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288588,"byte_end":288600,"line_start":1380,"line_end":1380,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288284,"byte_end":288357,"line_start":1373,"line_end":1373,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288358,"byte_end":288361,"line_start":1374,"line_end":1374,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288362,"byte_end":288437,"line_start":1375,"line_end":1375,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288438,"byte_end":288473,"line_start":1376,"line_end":1376,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288474,"byte_end":288477,"line_start":1377,"line_end":1377,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288478,"byte_end":288514,"line_start":1378,"line_end":1378,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288515,"byte_end":288576,"line_start":1379,"line_end":1379,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289054,"byte_end":289064,"line_start":1394,"line_end":1394,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288758,"byte_end":288829,"line_start":1387,"line_end":1387,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288830,"byte_end":288833,"line_start":1388,"line_end":1388,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288834,"byte_end":288907,"line_start":1389,"line_end":1389,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288908,"byte_end":288943,"line_start":1390,"line_end":1390,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288944,"byte_end":288947,"line_start":1391,"line_end":1391,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288948,"byte_end":288984,"line_start":1392,"line_end":1392,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":288985,"byte_end":289042,"line_start":1393,"line_end":1393,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1589},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289558,"byte_end":289577,"line_start":1408,"line_end":1408,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1594}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289222,"byte_end":289303,"line_start":1401,"line_end":1401,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289304,"byte_end":289307,"line_start":1402,"line_end":1402,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289308,"byte_end":289378,"line_start":1403,"line_end":1403,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289379,"byte_end":289427,"line_start":1404,"line_end":1404,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289428,"byte_end":289431,"line_start":1405,"line_end":1405,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289432,"byte_end":289468,"line_start":1406,"line_end":1406,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289469,"byte_end":289546,"line_start":1407,"line_end":1407,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1595},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289967,"byte_end":289972,"line_start":1419,"line_end":1419,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1600}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289691,"byte_end":289757,"line_start":1412,"line_end":1412,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289758,"byte_end":289761,"line_start":1413,"line_end":1413,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289762,"byte_end":289830,"line_start":1414,"line_end":1414,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289831,"byte_end":289866,"line_start":1415,"line_end":1415,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289867,"byte_end":289870,"line_start":1416,"line_end":1416,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289871,"byte_end":289907,"line_start":1417,"line_end":1417,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":289908,"byte_end":289955,"line_start":1418,"line_end":1418,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":2149,"byte_end":2157,"line_start":82,"line_end":82,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1805}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":2164,"byte_end":2230,"line_start":83,"line_end":83,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":2704,"byte_end":2712,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1807}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":2719,"byte_end":2785,"line_start":100,"line_end":100,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1886},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3464,"byte_end":3480,"line_start":122,"line_end":122,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":1885},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3348,"byte_end":3421,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3426,"byte_end":3459,"line_start":121,"line_end":121,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1888},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3534,"byte_end":3544,"line_start":125,"line_end":125,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":1885},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3487,"byte_end":3529,"line_start":124,"line_end":124,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":1885},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3326,"byte_end":3341,"line_start":119,"line_end":119,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"pub enum TryReserveError {\n    CapacityOverflow,\n    AllocError {\n            layout: alloc::alloc::Layout,\n        },\n}","parent":null,"children":[{"krate":0,"index":1886},{"krate":0,"index":1888}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\lib.rs","byte_start":3232,"byte_end":3277,"line_start":117,"line_end":117,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\sse2.rs","byte_start":11092695,"byte_end":11092700,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":91879,"byte_end":91885,"line_start":43,"line_end":43,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":92218,"byte_end":92224,"line_start":53,"line_end":53,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\bitmask.rs","byte_start":93600,"byte_end":93607,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\bitmask.rs","byte_start":96221,"byte_end":96228,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\bitmask.rs","byte_start":96516,"byte_end":96527,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":9460,"byte_end":9471,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":12165,"byte_end":12173,"line_start":172,"line_end":172,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":14665,"byte_end":14676,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16581,"byte_end":16587,"line_start":292,"line_end":292,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16613,"byte_end":16619,"line_start":294,"line_end":294,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16752,"byte_end":16758,"line_start":301,"line_end":301,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":19837,"byte_end":19845,"line_start":395,"line_end":395,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20966,"byte_end":20974,"line_start":423,"line_end":423,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":48824,"byte_end":48832,"line_start":1124,"line_end":1124,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":48902,"byte_end":48910,"line_start":1125,"line_end":1125,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":48943,"byte_end":48956,"line_start":1127,"line_end":1127,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":49377,"byte_end":49390,"line_start":1141,"line_end":1141,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":61603,"byte_end":61611,"line_start":1469,"line_end":1469,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":64248,"byte_end":64256,"line_start":1538,"line_end":1538,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":65150,"byte_end":65158,"line_start":1563,"line_end":1563,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":68705,"byte_end":68713,"line_start":1652,"line_end":1652,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":69273,"byte_end":69281,"line_start":1672,"line_end":1672,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":69586,"byte_end":69594,"line_start":1684,"line_end":1684,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":70445,"byte_end":70457,"line_start":1715,"line_end":1715,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73280,"byte_end":73292,"line_start":1784,"line_end":1784,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73323,"byte_end":73335,"line_start":1785,"line_end":1785,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73361,"byte_end":73373,"line_start":1787,"line_end":1787,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73663,"byte_end":73675,"line_start":1799,"line_end":1799,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75142,"byte_end":75154,"line_start":1837,"line_end":1837,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76049,"byte_end":76056,"line_start":1856,"line_end":1856,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":82182,"byte_end":82189,"line_start":1982,"line_end":1982,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":82397,"byte_end":82404,"line_start":1992,"line_end":1992,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83089,"byte_end":83096,"line_start":2015,"line_end":2015,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83129,"byte_end":83136,"line_start":2016,"line_end":2016,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83405,"byte_end":83416,"line_start":2026,"line_end":2026,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83594,"byte_end":83605,"line_start":2033,"line_end":2033,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83675,"byte_end":83686,"line_start":2034,"line_end":2034,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":84238,"byte_end":84249,"line_start":2052,"line_end":2052,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":84649,"byte_end":84660,"line_start":2067,"line_end":2067,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85025,"byte_end":85036,"line_start":2081,"line_end":2081,"column_start":53,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85094,"byte_end":85105,"line_start":2082,"line_end":2082,"column_start":49,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85710,"byte_end":85718,"line_start":2099,"line_end":2099,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85899,"byte_end":85907,"line_start":2106,"line_end":2106,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85980,"byte_end":85988,"line_start":2107,"line_end":2107,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":86056,"byte_end":86064,"line_start":2109,"line_end":2109,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":86669,"byte_end":86677,"line_start":2128,"line_end":2128,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87095,"byte_end":87103,"line_start":2145,"line_end":2145,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87165,"byte_end":87173,"line_start":2146,"line_end":2146,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87827,"byte_end":87838,"line_start":2171,"line_end":2171,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":88126,"byte_end":88142,"line_start":2180,"line_end":2180,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":88730,"byte_end":88741,"line_start":2200,"line_end":2200,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":89059,"byte_end":89075,"line_start":2213,"line_end":2213,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103948,"byte_end":103955,"line_start":197,"line_end":197,"column_start":68,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108092,"byte_end":108099,"line_start":328,"line_end":328,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110607,"byte_end":110614,"line_start":397,"line_end":397,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121561,"byte_end":121568,"line_start":778,"line_end":778,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141249,"byte_end":141256,"line_start":1371,"line_end":1371,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144201,"byte_end":144208,"line_start":1429,"line_end":1429,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144561,"byte_end":144568,"line_start":1446,"line_end":1446,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144694,"byte_end":144701,"line_start":1455,"line_end":1455,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144929,"byte_end":144936,"line_start":1466,"line_end":1466,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145308,"byte_end":145315,"line_start":1478,"line_end":1478,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146190,"byte_end":146194,"line_start":1511,"line_end":1511,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146432,"byte_end":146436,"line_start":1521,"line_end":1521,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147214,"byte_end":147221,"line_start":1543,"line_end":1543,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147247,"byte_end":147254,"line_start":1545,"line_end":1545,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147974,"byte_end":147982,"line_start":1567,"line_end":1567,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148640,"byte_end":148644,"line_start":1590,"line_end":1590,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148842,"byte_end":148846,"line_start":1599,"line_end":1599,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149370,"byte_end":149376,"line_start":1617,"line_end":1617,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149576,"byte_end":149582,"line_start":1626,"line_end":1626,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150108,"byte_end":150113,"line_start":1643,"line_end":1643,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150904,"byte_end":150915,"line_start":1669,"line_end":1669,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":151338,"byte_end":151354,"line_start":1686,"line_end":1686,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":151507,"byte_end":151518,"line_start":1693,"line_end":1693,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":151918,"byte_end":151929,"line_start":1711,"line_end":1711,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152223,"byte_end":152239,"line_start":1719,"line_end":1719,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154448,"byte_end":154467,"line_start":1785,"line_end":1785,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154586,"byte_end":154605,"line_start":1792,"line_end":1792,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155341,"byte_end":155359,"line_start":1818,"line_end":1818,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":156173,"byte_end":156191,"line_start":1844,"line_end":1844,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157232,"byte_end":157247,"line_start":1874,"line_end":1874,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158684,"byte_end":158695,"line_start":1921,"line_end":1921,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164568,"byte_end":164587,"line_start":2115,"line_end":2115,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":168637,"byte_end":168654,"line_start":2233,"line_end":2233,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":170700,"byte_end":170718,"line_start":2301,"line_end":2301,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":170920,"byte_end":170931,"line_start":2307,"line_end":2307,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171290,"byte_end":171309,"line_start":2316,"line_end":2316,"column_start":61,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171592,"byte_end":171609,"line_start":2325,"line_end":2325,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171799,"byte_end":171814,"line_start":2331,"line_end":2331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172478,"byte_end":172483,"line_start":2354,"line_end":2354,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173095,"byte_end":173108,"line_start":2374,"line_end":2374,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173240,"byte_end":173253,"line_start":2382,"line_end":2382,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173413,"byte_end":173426,"line_start":2391,"line_end":2391,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173969,"byte_end":173980,"line_start":2410,"line_end":2410,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174636,"byte_end":174649,"line_start":2426,"line_end":2426,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":175016,"byte_end":175029,"line_start":2437,"line_end":2437,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":175940,"byte_end":175947,"line_start":2470,"line_end":2470,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":176735,"byte_end":176739,"line_start":2499,"line_end":2499,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":177310,"byte_end":177314,"line_start":2518,"line_end":2518,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":177468,"byte_end":177472,"line_start":2525,"line_end":2525,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":177515,"byte_end":177522,"line_start":2527,"line_end":2527,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178105,"byte_end":178112,"line_start":2546,"line_end":2546,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178265,"byte_end":178272,"line_start":2552,"line_end":2552,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178313,"byte_end":178320,"line_start":2554,"line_end":2554,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178548,"byte_end":178556,"line_start":2564,"line_end":2564,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178912,"byte_end":178920,"line_start":2576,"line_end":2576,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179094,"byte_end":179102,"line_start":2582,"line_end":2582,"column_start":52,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179178,"byte_end":179186,"line_start":2584,"line_end":2584,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179351,"byte_end":179355,"line_start":2590,"line_end":2590,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179827,"byte_end":179831,"line_start":2606,"line_end":2606,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179984,"byte_end":179988,"line_start":2612,"line_end":2612,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180031,"byte_end":180037,"line_start":2614,"line_end":2614,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180509,"byte_end":180515,"line_start":2630,"line_end":2630,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180668,"byte_end":180674,"line_start":2636,"line_end":2636,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180717,"byte_end":180726,"line_start":2638,"line_end":2638,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181206,"byte_end":181215,"line_start":2654,"line_end":2654,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181368,"byte_end":181377,"line_start":2660,"line_end":2660,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181418,"byte_end":181427,"line_start":2662,"line_end":2662,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181665,"byte_end":181670,"line_start":2672,"line_end":2672,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182030,"byte_end":182035,"line_start":2684,"line_end":2684,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182213,"byte_end":182218,"line_start":2690,"line_end":2690,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182265,"byte_end":182270,"line_start":2692,"line_end":2692,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182521,"byte_end":182526,"line_start":2703,"line_end":2703,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189412,"byte_end":189417,"line_start":2937,"line_end":2937,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190199,"byte_end":190212,"line_start":2964,"line_end":2964,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199736,"byte_end":199747,"line_start":3278,"line_end":3278,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":202027,"byte_end":202034,"line_start":3365,"line_end":3365,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":202678,"byte_end":202685,"line_start":3385,"line_end":3385,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":204164,"byte_end":204171,"line_start":3431,"line_end":3431,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\scopeguard.rs","byte_start":246321,"byte_end":246331,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\scopeguard.rs","byte_start":246484,"byte_end":246494,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\scopeguard.rs","byte_start":246638,"byte_end":246648,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250931,"byte_end":250938,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253500,"byte_end":253507,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258056,"byte_end":258063,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260515,"byte_end":260522,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263161,"byte_end":263168,"line_start":532,"line_end":532,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1473},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280714,"byte_end":280721,"line_start":1076,"line_end":1076,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281001,"byte_end":281008,"line_start":1091,"line_end":1091,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281122,"byte_end":281129,"line_start":1099,"line_end":1099,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281393,"byte_end":281400,"line_start":1110,"line_end":1110,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281557,"byte_end":281564,"line_start":1119,"line_end":1119,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281937,"byte_end":281944,"line_start":1133,"line_end":1133,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":282542,"byte_end":282549,"line_start":1157,"line_end":1157,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":283146,"byte_end":283153,"line_start":1181,"line_end":1181,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":290376,"byte_end":290383,"line_start":1433,"line_end":1433,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291267,"byte_end":291271,"line_start":1465,"line_end":1465,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291455,"byte_end":291459,"line_start":1473,"line_end":1473,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291788,"byte_end":291792,"line_start":1485,"line_end":1485,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291938,"byte_end":291942,"line_start":1491,"line_end":1491,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291989,"byte_end":291993,"line_start":1493,"line_end":1493,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292172,"byte_end":292180,"line_start":1499,"line_end":1499,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292657,"byte_end":292665,"line_start":1515,"line_end":1515,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292832,"byte_end":292840,"line_start":1521,"line_end":1521,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292908,"byte_end":292916,"line_start":1523,"line_end":1523,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293155,"byte_end":293160,"line_start":1530,"line_end":1530,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293641,"byte_end":293646,"line_start":1546,"line_end":1546,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293817,"byte_end":293822,"line_start":1552,"line_end":1552,"column_start":49,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293894,"byte_end":293899,"line_start":1554,"line_end":1554,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":294145,"byte_end":294156,"line_start":1561,"line_end":1561,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":294492,"byte_end":294503,"line_start":1575,"line_end":1575,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":294945,"byte_end":294956,"line_start":1594,"line_end":1594,"column_start":52,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":295049,"byte_end":295061,"line_start":1599,"line_end":1599,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":295286,"byte_end":295298,"line_start":1609,"line_end":1609,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":295868,"byte_end":295880,"line_start":1634,"line_end":1634,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":296137,"byte_end":296149,"line_start":1645,"line_end":1645,"column_start":33,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":296281,"byte_end":296291,"line_start":1653,"line_end":1653,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":296514,"byte_end":296524,"line_start":1663,"line_end":1663,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297098,"byte_end":297108,"line_start":1688,"line_end":1688,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297226,"byte_end":297236,"line_start":1696,"line_end":1696,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297504,"byte_end":297523,"line_start":1707,"line_end":1707,"column_start":44,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297735,"byte_end":297754,"line_start":1716,"line_end":1716,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298158,"byte_end":298177,"line_start":1734,"line_end":1734,"column_start":33,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298295,"byte_end":298314,"line_start":1742,"line_end":1742,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1753}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298582,"byte_end":298587,"line_start":1753,"line_end":1753,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298786,"byte_end":298791,"line_start":1762,"line_end":1762,"column_start":33,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298909,"byte_end":298914,"line_start":1770,"line_end":1770,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":299170,"byte_end":299175,"line_start":1781,"line_end":1781,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\sse2.rs","byte_start":11092695,"byte_end":11092700,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":91879,"byte_end":91885,"line_start":43,"line_end":43,"column_start":31,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1858},"to":{"krate":0,"index":66}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\alloc.rs","byte_start":92218,"byte_end":92224,"line_start":53,"line_end":53,"column_start":22,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1858},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\bitmask.rs","byte_start":93600,"byte_end":93607,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1863},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\bitmask.rs","byte_start":96221,"byte_end":96228,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1863},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\bitmask.rs","byte_start":96516,"byte_end":96527,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":110},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":9460,"byte_end":9471,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":12165,"byte_end":12173,"line_start":172,"line_end":172,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":14665,"byte_end":14676,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16581,"byte_end":16587,"line_start":292,"line_end":292,"column_start":25,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16613,"byte_end":16619,"line_start":294,"line_end":294,"column_start":19,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":16752,"byte_end":16758,"line_start":301,"line_end":301,"column_start":9,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":19837,"byte_end":19845,"line_start":395,"line_end":395,"column_start":9,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":20966,"byte_end":20974,"line_start":423,"line_end":423,"column_start":31,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":48824,"byte_end":48832,"line_start":1124,"line_end":1124,"column_start":47,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":48902,"byte_end":48910,"line_start":1125,"line_end":1125,"column_start":47,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":48943,"byte_end":48956,"line_start":1127,"line_end":1127,"column_start":9,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":49377,"byte_end":49390,"line_start":1141,"line_end":1141,"column_start":28,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":61603,"byte_end":61611,"line_start":1469,"line_end":1469,"column_start":48,"column_end":56},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":64248,"byte_end":64256,"line_start":1538,"line_end":1538,"column_start":56,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":176},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":65150,"byte_end":65158,"line_start":1563,"line_end":1563,"column_start":38,"column_end":46},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":68705,"byte_end":68713,"line_start":1652,"line_end":1652,"column_start":53,"column_end":61},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":69273,"byte_end":69281,"line_start":1672,"line_end":1672,"column_start":40,"column_end":48},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":69586,"byte_end":69594,"line_start":1684,"line_end":1684,"column_start":48,"column_end":56},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":70445,"byte_end":70457,"line_start":1715,"line_end":1715,"column_start":9,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73280,"byte_end":73292,"line_start":1784,"line_end":1784,"column_start":25,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73323,"byte_end":73335,"line_start":1785,"line_end":1785,"column_start":25,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73361,"byte_end":73373,"line_start":1787,"line_end":1787,"column_start":19,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":73663,"byte_end":73675,"line_start":1799,"line_end":1799,"column_start":22,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":75142,"byte_end":75154,"line_start":1837,"line_end":1837,"column_start":27,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":76049,"byte_end":76056,"line_start":1856,"line_end":1856,"column_start":9,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":82182,"byte_end":82189,"line_start":1982,"line_end":1982,"column_start":19,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":82397,"byte_end":82404,"line_start":1992,"line_end":1992,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83089,"byte_end":83096,"line_start":2015,"line_end":2015,"column_start":31,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83129,"byte_end":83136,"line_start":2016,"line_end":2016,"column_start":27,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83405,"byte_end":83416,"line_start":2026,"line_end":2026,"column_start":31,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83594,"byte_end":83605,"line_start":2033,"line_end":2033,"column_start":47,"column_end":58},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":83675,"byte_end":83686,"line_start":2034,"line_end":2034,"column_start":47,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":84238,"byte_end":84249,"line_start":2052,"line_end":2052,"column_start":40,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":84649,"byte_end":84660,"line_start":2067,"line_end":2067,"column_start":44,"column_end":55},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85025,"byte_end":85036,"line_start":2081,"line_end":2081,"column_start":53,"column_end":64},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85094,"byte_end":85105,"line_start":2082,"line_end":2082,"column_start":49,"column_end":60},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85710,"byte_end":85718,"line_start":2099,"line_end":2099,"column_start":31,"column_end":39},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85899,"byte_end":85907,"line_start":2106,"line_end":2106,"column_start":46,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":85980,"byte_end":85988,"line_start":2107,"line_end":2107,"column_start":46,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":86056,"byte_end":86064,"line_start":2109,"line_end":2109,"column_start":40,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":86669,"byte_end":86677,"line_start":2128,"line_end":2128,"column_start":44,"column_end":52},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87095,"byte_end":87103,"line_start":2145,"line_end":2145,"column_start":53,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87165,"byte_end":87173,"line_start":2146,"line_end":2146,"column_start":49,"column_end":57},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":87827,"byte_end":87838,"line_start":2171,"line_end":2171,"column_start":35,"column_end":46},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":88126,"byte_end":88142,"line_start":2180,"line_end":2180,"column_start":32,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":88730,"byte_end":88741,"line_start":2200,"line_end":2200,"column_start":48,"column_end":59},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":439},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\raw\\mod.rs","byte_start":89059,"byte_end":89075,"line_start":2213,"line_end":2213,"column_start":45,"column_end":61},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":445},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":103948,"byte_end":103955,"line_start":197,"line_end":197,"column_start":68,"column_end":75},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":108092,"byte_end":108099,"line_start":328,"line_end":328,"column_start":15,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":110607,"byte_end":110614,"line_start":397,"line_end":397,"column_start":37,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":121561,"byte_end":121568,"line_start":778,"line_end":778,"column_start":18,"column_end":25},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":141249,"byte_end":141256,"line_start":1371,"line_end":1371,"column_start":37,"column_end":44},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144201,"byte_end":144208,"line_start":1429,"line_end":1429,"column_start":32,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144561,"byte_end":144568,"line_start":1446,"line_end":1446,"column_start":25,"column_end":32},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144694,"byte_end":144701,"line_start":1455,"line_end":1455,"column_start":28,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":144929,"byte_end":144936,"line_start":1466,"line_end":1466,"column_start":30,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":145308,"byte_end":145315,"line_start":1478,"line_end":1478,"column_start":43,"column_end":50},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146190,"byte_end":146194,"line_start":1511,"line_end":1511,"column_start":22,"column_end":26},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":146432,"byte_end":146436,"line_start":1521,"line_end":1521,"column_start":41,"column_end":45},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147214,"byte_end":147221,"line_start":1543,"line_end":1543,"column_start":40,"column_end":47},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147247,"byte_end":147254,"line_start":1545,"line_end":1545,"column_start":12,"column_end":19},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":147974,"byte_end":147982,"line_start":1567,"line_end":1567,"column_start":34,"column_end":42},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148640,"byte_end":148644,"line_start":1590,"line_end":1590,"column_start":22,"column_end":26},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":715},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":148842,"byte_end":148846,"line_start":1599,"line_end":1599,"column_start":34,"column_end":38},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":715},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149370,"byte_end":149376,"line_start":1617,"line_end":1617,"column_start":22,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":149576,"byte_end":149582,"line_start":1626,"line_end":1626,"column_start":34,"column_end":40},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150108,"byte_end":150113,"line_start":1643,"line_end":1643,"column_start":34,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":150904,"byte_end":150915,"line_start":1669,"line_end":1669,"column_start":31,"column_end":42},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":752},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":151338,"byte_end":151354,"line_start":1686,"line_end":1686,"column_start":28,"column_end":44},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":151507,"byte_end":151518,"line_start":1693,"line_end":1693,"column_start":31,"column_end":42},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":752},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":151918,"byte_end":151929,"line_start":1711,"line_end":1711,"column_start":33,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":752},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":152223,"byte_end":152239,"line_start":1719,"line_end":1719,"column_start":34,"column_end":50},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154448,"byte_end":154467,"line_start":1785,"line_end":1785,"column_start":34,"column_end":53},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":154586,"byte_end":154605,"line_start":1792,"line_end":1792,"column_start":34,"column_end":53},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":155341,"byte_end":155359,"line_start":1818,"line_end":1818,"column_start":41,"column_end":59},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":156173,"byte_end":156191,"line_start":1844,"line_end":1844,"column_start":41,"column_end":59},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":157232,"byte_end":157247,"line_start":1874,"line_end":1874,"column_start":41,"column_end":56},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":851},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":158684,"byte_end":158695,"line_start":1921,"line_end":1921,"column_start":41,"column_end":52},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":164568,"byte_end":164587,"line_start":2115,"line_end":2115,"column_start":41,"column_end":60},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":168637,"byte_end":168654,"line_start":2233,"line_end":2233,"column_start":41,"column_end":58},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":170700,"byte_end":170718,"line_start":2301,"line_end":2301,"column_start":47,"column_end":65},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":805},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":170920,"byte_end":170931,"line_start":2307,"line_end":2307,"column_start":61,"column_end":72},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":812},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171290,"byte_end":171309,"line_start":2316,"line_end":2316,"column_start":61,"column_end":80},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171592,"byte_end":171609,"line_start":2325,"line_end":2325,"column_start":47,"column_end":64},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":843},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":171799,"byte_end":171814,"line_start":2331,"line_end":2331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":851},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":172478,"byte_end":172483,"line_start":2354,"line_end":2354,"column_start":61,"column_end":66},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":975},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173095,"byte_end":173108,"line_start":2374,"line_end":2374,"column_start":34,"column_end":47},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":993},"to":{"krate":1,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173240,"byte_end":173253,"line_start":2382,"line_end":2382,"column_start":34,"column_end":47},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":993},"to":{"krate":1,"index":3069}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173413,"byte_end":173426,"line_start":2391,"line_end":2391,"column_start":61,"column_end":74},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":993},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":173969,"byte_end":173980,"line_start":2410,"line_end":2410,"column_start":54,"column_end":65},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":174636,"byte_end":174649,"line_start":2426,"line_end":2426,"column_start":61,"column_end":74},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1034},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":175016,"byte_end":175029,"line_start":2437,"line_end":2437,"column_start":9,"column_end":22},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1034},"to":{"krate":1,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":175940,"byte_end":175947,"line_start":2470,"line_end":2470,"column_start":54,"column_end":61},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":176735,"byte_end":176739,"line_start":2499,"line_end":2499,"column_start":29,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":177310,"byte_end":177314,"line_start":2518,"line_end":2518,"column_start":34,"column_end":38},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":177468,"byte_end":177472,"line_start":2525,"line_end":2525,"column_start":30,"column_end":34},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":177515,"byte_end":177522,"line_start":2527,"line_end":2527,"column_start":29,"column_end":36},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178105,"byte_end":178112,"line_start":2546,"line_end":2546,"column_start":34,"column_end":41},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178265,"byte_end":178272,"line_start":2552,"line_end":2552,"column_start":30,"column_end":37},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178313,"byte_end":178320,"line_start":2554,"line_end":2554,"column_start":27,"column_end":34},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178548,"byte_end":178556,"line_start":2564,"line_end":2564,"column_start":47,"column_end":55},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":178912,"byte_end":178920,"line_start":2576,"line_end":2576,"column_start":56,"column_end":64},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179094,"byte_end":179102,"line_start":2582,"line_end":2582,"column_start":52,"column_end":60},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179178,"byte_end":179186,"line_start":2584,"line_end":2584,"column_start":63,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179351,"byte_end":179355,"line_start":2590,"line_end":2590,"column_start":29,"column_end":33},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":715},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179827,"byte_end":179831,"line_start":2606,"line_end":2606,"column_start":34,"column_end":38},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":715},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":179984,"byte_end":179988,"line_start":2612,"line_end":2612,"column_start":30,"column_end":34},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":715},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180031,"byte_end":180037,"line_start":2614,"line_end":2614,"column_start":29,"column_end":35},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180509,"byte_end":180515,"line_start":2630,"line_end":2630,"column_start":34,"column_end":40},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180668,"byte_end":180674,"line_start":2636,"line_end":2636,"column_start":30,"column_end":36},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":180717,"byte_end":180726,"line_start":2638,"line_end":2638,"column_start":29,"column_end":38},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":800},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181206,"byte_end":181215,"line_start":2654,"line_end":2654,"column_start":34,"column_end":43},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":800},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181368,"byte_end":181377,"line_start":2660,"line_end":2660,"column_start":30,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":800},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181418,"byte_end":181427,"line_start":2662,"line_end":2662,"column_start":27,"column_end":36},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":800},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":181665,"byte_end":181670,"line_start":2672,"line_end":2672,"column_start":51,"column_end":56},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182030,"byte_end":182035,"line_start":2684,"line_end":2684,"column_start":56,"column_end":61},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182213,"byte_end":182218,"line_start":2690,"line_end":2690,"column_start":52,"column_end":57},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182265,"byte_end":182270,"line_start":2692,"line_end":2692,"column_start":30,"column_end":35},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":741},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":182521,"byte_end":182526,"line_start":2703,"line_end":2703,"column_start":41,"column_end":46},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":189412,"byte_end":189417,"line_start":2937,"line_end":2937,"column_start":50,"column_end":55},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":190199,"byte_end":190212,"line_start":2964,"line_end":2964,"column_start":41,"column_end":54},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":993},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":199736,"byte_end":199747,"line_start":3278,"line_end":3278,"column_start":41,"column_end":52},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":202027,"byte_end":202034,"line_start":3365,"line_end":3365,"column_start":43,"column_end":50},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":202678,"byte_end":202685,"line_start":3385,"line_end":3385,"column_start":37,"column_end":44},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\map.rs","byte_start":204164,"byte_end":204171,"line_start":3431,"line_end":3431,"column_start":49,"column_end":56},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":535},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\scopeguard.rs","byte_start":246321,"byte_end":246331,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":3276}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\scopeguard.rs","byte_start":246484,"byte_end":246494,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":3289}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\scopeguard.rs","byte_start":246638,"byte_end":246648,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":250931,"byte_end":250938,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":253500,"byte_end":253507,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":258056,"byte_end":258063,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":260515,"byte_end":260522,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":263161,"byte_end":263168,"line_start":532,"line_end":532,"column_start":15,"column_end":22},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":280714,"byte_end":280721,"line_start":1076,"line_end":1076,"column_start":29,"column_end":36},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281001,"byte_end":281008,"line_start":1091,"line_end":1091,"column_start":22,"column_end":29},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281122,"byte_end":281129,"line_start":1099,"line_end":1099,"column_start":30,"column_end":37},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281393,"byte_end":281400,"line_start":1110,"line_end":1110,"column_start":46,"column_end":53},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281557,"byte_end":281564,"line_start":1119,"line_end":1119,"column_start":35,"column_end":42},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":281937,"byte_end":281944,"line_start":1133,"line_end":1133,"column_start":29,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":282542,"byte_end":282549,"line_start":1157,"line_end":1157,"column_start":37,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":7799}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":283146,"byte_end":283153,"line_start":1181,"line_end":1181,"column_start":27,"column_end":34},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":290376,"byte_end":290383,"line_start":1433,"line_end":1433,"column_start":51,"column_end":58},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1411},"to":{"krate":1,"index":7790}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291267,"byte_end":291271,"line_start":1465,"line_end":1465,"column_start":19,"column_end":23},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1555},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291455,"byte_end":291459,"line_start":1473,"line_end":1473,"column_start":26,"column_end":30},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1555},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291788,"byte_end":291792,"line_start":1485,"line_end":1485,"column_start":35,"column_end":39},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1555},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291938,"byte_end":291942,"line_start":1491,"line_end":1491,"column_start":27,"column_end":31},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1555},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":291989,"byte_end":291993,"line_start":1493,"line_end":1493,"column_start":36,"column_end":40},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1555},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292172,"byte_end":292180,"line_start":1499,"line_end":1499,"column_start":44,"column_end":52},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1559},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292657,"byte_end":292665,"line_start":1515,"line_end":1515,"column_start":53,"column_end":61},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1559},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292832,"byte_end":292840,"line_start":1521,"line_end":1521,"column_start":49,"column_end":57},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1559},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":292908,"byte_end":292916,"line_start":1523,"line_end":1523,"column_start":58,"column_end":66},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1559},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293155,"byte_end":293160,"line_start":1530,"line_end":1530,"column_start":44,"column_end":49},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1563},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293641,"byte_end":293646,"line_start":1546,"line_end":1546,"column_start":53,"column_end":58},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1563},"to":{"krate":1,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293817,"byte_end":293822,"line_start":1552,"line_end":1552,"column_start":49,"column_end":54},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1563},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":293894,"byte_end":293899,"line_start":1554,"line_end":1554,"column_start":58,"column_end":63},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1563},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":294145,"byte_end":294156,"line_start":1561,"line_end":1561,"column_start":47,"column_end":58},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":3300}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":294492,"byte_end":294503,"line_start":1575,"line_end":1575,"column_start":47,"column_end":58},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":294945,"byte_end":294956,"line_start":1594,"line_end":1594,"column_start":52,"column_end":63},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1568},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":295049,"byte_end":295061,"line_start":1599,"line_end":1599,"column_start":44,"column_end":56},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":295286,"byte_end":295298,"line_start":1609,"line_end":1609,"column_start":32,"column_end":44},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":295868,"byte_end":295880,"line_start":1634,"line_end":1634,"column_start":30,"column_end":42},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":296137,"byte_end":296149,"line_start":1645,"line_end":1645,"column_start":33,"column_end":45},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":296281,"byte_end":296291,"line_start":1653,"line_end":1653,"column_start":44,"column_end":54},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1582},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":296514,"byte_end":296524,"line_start":1663,"line_end":1663,"column_start":32,"column_end":42},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1582},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297098,"byte_end":297108,"line_start":1688,"line_end":1688,"column_start":33,"column_end":43},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1582},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297226,"byte_end":297236,"line_start":1696,"line_end":1696,"column_start":30,"column_end":40},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1582},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297504,"byte_end":297523,"line_start":1707,"line_end":1707,"column_start":44,"column_end":63},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1589},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":297735,"byte_end":297754,"line_start":1716,"line_end":1716,"column_start":32,"column_end":51},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1589},"to":{"krate":1,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298158,"byte_end":298177,"line_start":1734,"line_end":1734,"column_start":33,"column_end":52},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1589},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298295,"byte_end":298314,"line_start":1742,"line_end":1742,"column_start":30,"column_end":49},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1589},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298582,"byte_end":298587,"line_start":1753,"line_end":1753,"column_start":44,"column_end":49},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1595},"to":{"krate":1,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298786,"byte_end":298791,"line_start":1762,"line_end":1762,"column_start":33,"column_end":38},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1595},"to":{"krate":1,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":298909,"byte_end":298914,"line_start":1770,"line_end":1770,"column_start":30,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1595},"to":{"krate":1,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.11.2\\src\\set.rs","byte_start":299170,"byte_end":299175,"line_start":1781,"line_end":1781,"column_start":32,"column_end":37},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1595},"to":{"krate":1,"index":7985}}]}
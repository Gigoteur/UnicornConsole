{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","weezl","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=a4dbc5e144a047b7","-C","extra-filename=-a4dbc5e144a047b7","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libweezl-a4dbc5e144a047b7.rmeta"},"prelude":{"crate_id":{"name":"weezl","disambiguator":[5914766172575385405,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":0,"byte_end":4831,"line_start":1,"line_end":146,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":4023,"byte_end":4035,"line_start":119,"line_end":119,"column_start":22,"column_end":34},"alias_span":null,"name":"StreamResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":4059,"byte_end":4071,"line_start":120,"line_end":120,"column_start":23,"column_end":35},"alias_span":null,"name":"BufferResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":4073,"byte_end":4081,"line_start":120,"line_end":120,"column_start":37,"column_end":45},"alias_span":null,"name":"LzwError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":4083,"byte_end":4092,"line_start":120,"line_end":120,"column_start":47,"column_end":56},"alias_span":null,"name":"LzwStatus","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":0,"byte_end":4831,"line_start":1,"line_end":146,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":459},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":10},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":227},{"krate":0,"index":430},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456}],"decl_id":null,"docs":" # LZW decoder and encoder","sig":null,"attributes":[{"value":"/ # LZW decoder and encoder","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":0,"byte_end":29,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":30,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crates provides an `Encoder` and a `Decoder` in their respective modules. The code words","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":34,"byte_end":131,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ are written from and to bit byte slices (or streams) where it is possible to write either the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":132,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ most or least significant bits first. The maximum possible code size is 12 bits, the smallest","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":230,"byte_end":327,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ available code size is 2 bits.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":328,"byte_end":362,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":363,"byte_end":366,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":367,"byte_end":381,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":382,"byte_end":385,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ These two code blocks show the compression and corresponding decompression. Note that you must","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":386,"byte_end":484,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ use the same arguments to `Encoder` and `Decoder`, otherwise the decoding might fail or produce","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":485,"byte_end":584,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"/ bad results.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":585,"byte_end":601,"line_start":12,"line_end":12,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":602,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ use weezl::{BitOrder, encode::Encoder};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":703,"byte_end":746,"line_start":16,"line_end":16,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":747,"byte_end":750,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let data = b\"Hello, world\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":751,"byte_end":782,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/ let compressed = Encoder::new(BitOrder::Msb, 9)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":783,"byte_end":834,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/     .encode(data)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":835,"byte_end":856,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/     .unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":857,"byte_end":875,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":876,"byte_end":883,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":884,"byte_end":887,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ use weezl::{BitOrder, decode::Decoder};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":985,"byte_end":1028,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/ # let compressed = b\"\\x80\\x04\\x81\\x94l\\x1b\\x06\\xf0\\xb0 \\x1d\\xc6\\xf1\\xc8l\\x19 \\x10\".to_vec();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1029,"byte_end":1125,"line_start":27,"line_end":27,"column_start":1,"column_end":97}},{"value":"/ # let data = b\"Hello, world\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1126,"byte_end":1159,"line_start":28,"line_end":28,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1160,"byte_end":1163,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let decompressed = Decoder::new(BitOrder::Msb, 9)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1164,"byte_end":1217,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/     .decode(&compressed)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1218,"byte_end":1246,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"/     .unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1247,"byte_end":1265,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(decompressed, data);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1266,"byte_end":1301,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1302,"byte_end":1309,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1310,"byte_end":1313,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## LZW Details","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1314,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1333,"byte_end":1336,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The de- and encoder expect the LZW stream to start with a clear code and end with an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1337,"byte_end":1425,"line_start":38,"line_end":38,"column_start":1,"column_end":89}},{"value":"/ end code which are defined as follows:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1426,"byte_end":1468,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1469,"byte_end":1472,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/  * `CLEAR_CODE == 1 << min_code_size`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1473,"byte_end":1514,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/  * `END_CODE   == CLEAR_CODE + 1`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1515,"byte_end":1552,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1553,"byte_end":1556,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ For optimal performance, all buffers and input and output slices should be as large as possible","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1557,"byte_end":1656,"line_start":44,"line_end":44,"column_start":1,"column_end":100}},{"value":"/ and at least 2048 bytes long. This extends to input streams which should have similarly sized","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1657,"byte_end":1754,"line_start":45,"line_end":45,"column_start":1,"column_end":98}},{"value":"/ buffers. This library uses Rust's standard allocation interfaces (`Box` and `Vec` to be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1755,"byte_end":1846,"line_start":46,"line_end":46,"column_start":1,"column_end":92}},{"value":"/ precise). Since there are no ways to handle allocation errors it is not recommended to operate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1847,"byte_end":1945,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ it on 16-bit targets.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1946,"byte_end":1971,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1972,"byte_end":1975,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Allocations and standard library","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":1976,"byte_end":2015,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":2016,"byte_end":2019,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The main algorithm can be used in `no_std` as well, although it requires an allocator. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":2020,"byte_end":2115,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ restriction might be lifted at a later stage. For this you should deactivate the `std` feature.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":2116,"byte_end":2215,"line_start":53,"line_end":53,"column_start":1,"column_end":100}},{"value":"/ The main interfaces stay intact but the `into_stream` combinator is no available.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":2216,"byte_end":2301,"line_start":54,"line_end":54,"column_start":1,"column_end":86}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":2345,"byte_end":2368,"line_start":56,"line_end":56,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":2369,"byte_end":2393,"line_start":57,"line_end":57,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3244,"byte_end":3247,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"Msb","qualname":"::BitOrder::Msb","value":"BitOrder::Msb","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The most significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The most significant bit is processed first.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3191,"byte_end":3239,"line_start":80,"line_end":80,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3307,"byte_end":3310,"line_start":83,"line_end":83,"column_start":5,"column_end":8},"name":"Lsb","qualname":"::BitOrder::Lsb","value":"BitOrder::Lsb","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The least significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The least significant bit is processed first.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3253,"byte_end":3302,"line_start":82,"line_end":82,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3176,"byte_end":3184,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"pub enum BitOrder { Msb, Lsb, }","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462}],"decl_id":null,"docs":" The order of bits in bytes.\n","sig":null,"attributes":[{"value":"/ The order of bits in bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3105,"byte_end":3136,"line_start":77,"line_end":77,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":486},{"krate":0,"index":94},{"krate":0,"index":103},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":136},{"krate":0,"index":156},{"krate":0,"index":169},{"krate":0,"index":174},{"krate":0,"index":183},{"krate":0,"index":189},{"krate":0,"index":199},{"krate":0,"index":209},{"krate":0,"index":215},{"krate":0,"index":224}],"decl_id":null,"docs":" A module for all decoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3882,"byte_end":3907,"line_start":112,"line_end":112,"column_start":1,"column_end":26}},{"value":"/ A module for all decoding needs.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":4833,"byte_end":4869,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6280,"byte_end":6287,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decode::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":77}],"decl_id":null,"docs":" The state for decoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for decoding data with an LZW algorithm.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5189,"byte_end":5243,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5244,"byte_end":5247,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5248,"byte_end":5345,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose or skip any","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5346,"byte_end":5441,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ already decode data in the process.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5442,"byte_end":5481,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5482,"byte_end":5485,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is a sans-IO implementation, meaning that it only contains the state of the decoder and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5486,"byte_end":5582,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ the caller will provide buffers for input and output data when calling the basic","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5583,"byte_end":5667,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ [`decode_bytes`] method. Nevertheless, a number of _adapters_ are provided in the `into_*`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5668,"byte_end":5762,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ methods for decoding with a particular style of common IO.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5763,"byte_end":5825,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5826,"byte_end":5829,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ * [`decode`] for decoding once without any IO-loop.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5830,"byte_end":5885,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ * [`into_async`] for decoding with the `futures` traits for asynchronous IO.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5886,"byte_end":5966,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ * [`into_stream`] for decoding with the standard `io` traits.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":5967,"byte_end":6032,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/ * [`into_vec`] for in-memory decoding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6033,"byte_end":6075,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6076,"byte_end":6079,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`decode_bytes`]: #method.decode_bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6080,"byte_end":6122,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ [`decode`]: #method.decode","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6123,"byte_end":6153,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ [`into_async`]: #method.into_async","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6154,"byte_end":6192,"line_start":29,"line_end":29,"column_start":1,"column_end":39}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6193,"byte_end":6233,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ [`into_vec`]: #method.into_vec","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6234,"byte_end":6268,"line_start":31,"line_end":31,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6678,"byte_end":6688,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::decode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" A decoding stream sink.","sig":null,"attributes":[{"value":"/ A decoding stream sink.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6340,"byte_end":6367,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6368,"byte_end":6371,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ See [`Decoder::into_stream`] on how to create this type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6372,"byte_end":6432,"line_start":38,"line_end":38,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6433,"byte_end":6436,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Decoder::into_stream`]: struct.Decoder.html#method.into_stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":6437,"byte_end":6505,"line_start":40,"line_end":40,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":7308,"byte_end":7315,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"IntoVec","qualname":"::decode::IntoVec","value":"IntoVec {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" A decoding sink into a vector.","sig":null,"attributes":[{"value":"/ A decoding sink into a vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":7133,"byte_end":7167,"line_start":66,"line_end":66,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":7168,"byte_end":7171,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ See [`Decoder::into_vec`] on how to create this type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":7172,"byte_end":7229,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":7230,"byte_end":7233,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ [`Decoder::into_vec`]: struct.Decoder.html#method.into_vec","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":7234,"byte_end":7296,"line_start":70,"line_end":70,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10170,"byte_end":10173,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new decoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":9739,"byte_end":9809,"line_start":164,"line_end":164,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":9814,"byte_end":9817,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":9822,"byte_end":9915,"line_start":166,"line_end":166,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to decode","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":9920,"byte_end":10014,"line_start":167,"line_end":167,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10019,"byte_end":10068,"line_start":168,"line_end":168,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10073,"byte_end":10076,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10081,"byte_end":10093,"line_start":170,"line_end":170,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10098,"byte_end":10101,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `0..=12`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10106,"byte_end":10158,"line_start":172,"line_end":172,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11004,"byte_end":11025,"line_start":193,"line_end":193,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Decoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible decoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10562,"byte_end":10644,"line_start":184,"line_end":184,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10649,"byte_end":10652,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10657,"byte_end":10750,"line_start":186,"line_end":186,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10755,"byte_end":10848,"line_start":187,"line_end":187,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10853,"byte_end":10902,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10907,"byte_end":10910,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10915,"byte_end":10927,"line_start":190,"line_end":190,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10932,"byte_end":10935,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `0..=12`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":10940,"byte_end":10992,"line_start":192,"line_end":192,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12405,"byte_end":12417,"line_start":226,"line_end":226,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<Decoder>::decode_bytes","value":"pub fn decode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Decode some bytes from `inp` and write result to `out`.","sig":null,"attributes":[{"value":"/ Decode some bytes from `inp` and write result to `out`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11630,"byte_end":11689,"line_start":212,"line_end":212,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11694,"byte_end":11697,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ This will consume a prefix of the input buffer and write decoded output into a prefix of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11702,"byte_end":11794,"line_start":214,"line_end":214,"column_start":5,"column_end":97}},{"value":"/ the output buffer. See the respective fields of the return value for the count of consumed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11799,"byte_end":11893,"line_start":215,"line_end":215,"column_start":5,"column_end":99}},{"value":"/ and written bytes. For the next call You should have adjusted the inputs accordingly.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11898,"byte_end":11987,"line_start":216,"line_end":216,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":11992,"byte_end":11995,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The call will try to decode and write as many bytes of output as available. It will be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12000,"byte_end":12090,"line_start":218,"line_end":218,"column_start":5,"column_end":95}},{"value":"/ much more optimized (and avoid intermediate buffering) if it is allowed to write a large","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12095,"byte_end":12187,"line_start":219,"line_end":219,"column_start":5,"column_end":97}},{"value":"/ contiguous chunk at once.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12192,"byte_end":12221,"line_start":220,"line_end":220,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12226,"byte_end":12229,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (that are only available with the `std`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12234,"byte_end":12322,"line_start":222,"line_end":222,"column_start":5,"column_end":93}},{"value":"/ feature).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12327,"byte_end":12340,"line_start":223,"line_end":223,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12345,"byte_end":12348,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12353,"byte_end":12393,"line_start":225,"line_end":225,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13397,"byte_end":13403,"line_start":252,"line_end":252,"column_start":12,"column_end":18},"name":"decode","qualname":"<Decoder>::decode","value":"pub fn decode(&mut Self, &[u8]) -> Result<Vec<u8>, LzwError>","parent":null,"children":[],"decl_id":null,"docs":" Decode a single chunk of lzw encoded data.","sig":null,"attributes":[{"value":"/ Decode a single chunk of lzw encoded data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12523,"byte_end":12569,"line_start":230,"line_end":230,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12574,"byte_end":12577,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ This method requires the data to contain an end marker, and returns an error otherwise.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12582,"byte_end":12673,"line_start":232,"line_end":232,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12678,"byte_end":12681,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ This is a convenience wrapper around [`into_vec`]. Use the `into_vec` adapter to customize","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12686,"byte_end":12780,"line_start":234,"line_end":234,"column_start":5,"column_end":99}},{"value":"/ buffer size, to supply an existing vector, to control whether an end marker is required, or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12785,"byte_end":12880,"line_start":235,"line_end":235,"column_start":5,"column_end":100}},{"value":"/ to preserve partial data in the case of a decoding error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12885,"byte_end":12946,"line_start":236,"line_end":236,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12951,"byte_end":12954,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ [`into_vec`]: #into_vec","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12959,"byte_end":12986,"line_start":238,"line_end":238,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12991,"byte_end":12994,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":12999,"byte_end":13012,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13017,"byte_end":13020,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13025,"byte_end":13032,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use weezl::{BitOrder, decode::Decoder};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13037,"byte_end":13080,"line_start":243,"line_end":243,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13085,"byte_end":13088,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ // Encoded that was created with an encoder.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13093,"byte_end":13141,"line_start":245,"line_end":245,"column_start":5,"column_end":53}},{"value":"/ let data = b\"\\x80\\x04\\x81\\x94l\\x1b\\x06\\xf0\\xb0 \\x1d\\xc6\\xf1\\xc8l\\x19 \\x10\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13146,"byte_end":13225,"line_start":246,"line_end":246,"column_start":5,"column_end":84}},{"value":"/ let decoded = Decoder::new(BitOrder::Msb, 9)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13230,"byte_end":13278,"line_start":247,"line_end":247,"column_start":5,"column_end":53}},{"value":"/     .decode(data)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13283,"byte_end":13304,"line_start":248,"line_end":248,"column_start":5,"column_end":26}},{"value":"/     .unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13309,"byte_end":13327,"line_start":249,"line_end":249,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(decoded, b\"Hello, world\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13332,"byte_end":13373,"line_start":250,"line_end":250,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13378,"byte_end":13385,"line_start":251,"line_end":251,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13661,"byte_end":13672,"line_start":260,"line_end":260,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Decoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a decoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a decoder into a writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13583,"byte_end":13621,"line_start":258,"line_end":258,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":13626,"byte_end":13649,"line_start":259,"line_end":259,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14579,"byte_end":14587,"line_start":287,"line_end":287,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<Decoder>::into_vec","value":"pub fn into_vec<'lt>(&'lt mut Self, &'lt mut Vec<u8>) -> IntoVec","parent":null,"children":[],"decl_id":null,"docs":" Construct a decoder into a vector.","sig":null,"attributes":[{"value":"/ Construct a decoder into a vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14213,"byte_end":14251,"line_start":280,"line_end":280,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14256,"byte_end":14259,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ All decoded data is appended and the vector is __not__ cleared.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14264,"byte_end":14331,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14336,"byte_end":14339,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Compared to `into_stream` this interface allows a high-level access to decoding without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14344,"byte_end":14435,"line_start":284,"line_end":284,"column_start":5,"column_end":96}},{"value":"/ requires the `std`-feature. Also, it can make full use of the extra buffer control that the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14440,"byte_end":14535,"line_start":285,"line_end":285,"column_start":5,"column_end":100}},{"value":"/ special target exposes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14540,"byte_end":14567,"line_start":286,"line_end":286,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15033,"byte_end":15042,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"name":"has_ended","qualname":"<Decoder>::has_ended","value":"pub fn has_ended(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the decoding has finished.","sig":null,"attributes":[{"value":"/ Check if the decoding has finished.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14740,"byte_end":14779,"line_start":294,"line_end":294,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14784,"byte_end":14787,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ No more output is produced beyond the end code that marked the finish of the stream. The","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14792,"byte_end":14884,"line_start":296,"line_end":296,"column_start":5,"column_end":97}},{"value":"/ decoder may have read additional bytes, including padding bits beyond the last code word","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14889,"byte_end":14981,"line_start":297,"line_end":297,"column_start":5,"column_end":97}},{"value":"/ but also excess bytes provided.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":14986,"byte_end":15021,"line_start":298,"line_end":298,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15931,"byte_end":15936,"line_start":321,"line_end":321,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15661,"byte_end":15690,"line_start":316,"line_end":316,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15695,"byte_end":15698,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ This produce a decoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15703,"byte_end":15797,"line_start":318,"line_end":318,"column_start":5,"column_end":99}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15802,"byte_end":15889,"line_start":319,"line_end":319,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":15894,"byte_end":15919,"line_start":320,"line_end":320,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16187,"byte_end":16193,"line_start":331,"line_end":331,"column_start":12,"column_end":18},"name":"decode","qualname":"<IntoStream>::decode","value":"pub fn decode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader.","sig":null,"attributes":[{"value":"/ Decode data from a reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16054,"byte_end":16084,"line_start":328,"line_end":328,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16089,"byte_end":16092,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ This will read data until the stream is empty or an end marker is reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16097,"byte_end":16175,"line_start":330,"line_end":330,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16359,"byte_end":16369,"line_start":336,"line_end":336,"column_start":12,"column_end":22},"name":"decode_all","qualname":"<IntoStream>::decode_all","value":"pub fn decode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader, requiring an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a reader, requiring an end marker.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16292,"byte_end":16347,"line_start":335,"line_end":335,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16846,"byte_end":16861,"line_start":348,"line_end":348,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate decode buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16466,"byte_end":16517,"line_start":340,"line_end":340,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16522,"byte_end":16525,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the decoded stream when no buffer is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16530,"byte_end":16625,"line_start":342,"line_end":342,"column_start":5,"column_end":100}},{"value":"/ available and any decoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16630,"byte_end":16721,"line_start":343,"line_end":343,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16726,"byte_end":16764,"line_start":344,"line_end":344,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16769,"byte_end":16772,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16777,"byte_end":16789,"line_start":346,"line_end":346,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16794,"byte_end":16834,"line_start":347,"line_end":347,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17575,"byte_end":17585,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate decode buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16995,"byte_end":17056,"line_start":353,"line_end":353,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17061,"byte_end":17064,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17069,"byte_end":17157,"line_start":355,"line_end":355,"column_start":5,"column_end":93}},{"value":"/ instead of dynamically allocating a buffer. Note that the size of the buffer is critical","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17162,"byte_end":17254,"line_start":356,"line_end":356,"column_start":5,"column_end":97}},{"value":"/ for efficient decoding. Some optimization techniques require the buffer to hold one or more","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17259,"byte_end":17354,"line_start":357,"line_end":357,"column_start":5,"column_end":100}},{"value":"/ previous decoded words. There is also additional overhead from `write` calls each time the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17359,"byte_end":17453,"line_start":358,"line_end":358,"column_start":5,"column_end":99}},{"value":"/ buffer has been filled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17458,"byte_end":17485,"line_start":359,"line_end":359,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17490,"byte_end":17493,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17498,"byte_end":17510,"line_start":361,"line_end":361,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":17515,"byte_end":17563,"line_start":362,"line_end":362,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":21086,"byte_end":21092,"line_start":464,"line_end":464,"column_start":12,"column_end":18},"name":"decode","qualname":"<IntoVec>::decode","value":"pub fn decode(&mut Self, &[u8]) -> VectorResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a slice.","sig":null,"attributes":[{"value":"/ Decode data from a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":20955,"byte_end":20984,"line_start":461,"line_end":461,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":20989,"byte_end":20992,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This will read data until the slice is empty or an end marker is reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":20997,"byte_end":21074,"line_start":463,"line_end":463,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":21250,"byte_end":21260,"line_start":469,"line_end":469,"column_start":12,"column_end":22},"name":"decode_all","qualname":"<IntoVec>::decode_all","value":"pub fn decode_all(Self, &[u8]) -> VectorResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a slice, requiring an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a slice, requiring an end marker.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":21184,"byte_end":21238,"line_start":468,"line_end":468,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":289},{"krate":0,"index":293},{"krate":0,"index":298},{"krate":0,"index":307},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":326},{"krate":0,"index":512},{"krate":0,"index":518},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":327},{"krate":0,"index":341},{"krate":0,"index":361},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":383},{"krate":0,"index":390},{"krate":0,"index":401},{"krate":0,"index":412},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":426},{"krate":0,"index":428}],"decl_id":null,"docs":" A module for all encoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3924,"byte_end":3949,"line_start":114,"line_end":114,"column_start":1,"column_end":26}},{"value":"/ A module for all encoding needs.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":52604,"byte_end":52640,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54030,"byte_end":54037,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encode::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":281}],"decl_id":null,"docs":" The state for encoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for encoding data with an LZW algorithm.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":52955,"byte_end":53009,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53010,"byte_end":53013,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53014,"byte_end":53111,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose any written","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53112,"byte_end":53207,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ data in the process.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53208,"byte_end":53232,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53233,"byte_end":53236,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is a sans-IO implementation, meaning that it only contains the state of the encoder and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53237,"byte_end":53333,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ the caller will provide buffers for input and output data when calling the basic","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53334,"byte_end":53418,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ [`encode_bytes`] method. Nevertheless, a number of _adapters_ are provided in the `into_*`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53419,"byte_end":53513,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ methods for enoding with a particular style of common IO.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53514,"byte_end":53575,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53576,"byte_end":53579,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ * [`encode`] for encoding once without any IO-loop.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53580,"byte_end":53635,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ * [`into_async`] for encoding with the `futures` traits for asynchronous IO.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53636,"byte_end":53716,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ * [`into_stream`] for encoding with the standard `io` traits.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53717,"byte_end":53782,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/ * [`into_vec`] for in-memory encoding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53783,"byte_end":53825,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53826,"byte_end":53829,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`encode_bytes`]: #method.encode_bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53830,"byte_end":53872,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/ [`encode`]: #method.encode","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53873,"byte_end":53903,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ [`into_async`]: #method.into_async","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53904,"byte_end":53942,"line_start":29,"line_end":29,"column_start":1,"column_end":39}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53943,"byte_end":53983,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/ [`into_vec`]: #method.into_vec","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":53984,"byte_end":54018,"line_start":31,"line_end":31,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54630,"byte_end":54640,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::encode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"decl_id":null,"docs":" A encoding stream sink.","sig":null,"attributes":[{"value":"/ A encoding stream sink.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54292,"byte_end":54319,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54320,"byte_end":54323,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ See [`Encoder::into_stream`] on how to create this type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54324,"byte_end":54384,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54385,"byte_end":54388,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::into_stream`]: struct.Encoder.html#method.into_stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":54389,"byte_end":54457,"line_start":43,"line_end":43,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":55260,"byte_end":55267,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"IntoVec","qualname":"::encode::IntoVec","value":"IntoVec {  }","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"decl_id":null,"docs":" A encoding sink into a vector.","sig":null,"attributes":[{"value":"/ A encoding sink into a vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":55085,"byte_end":55119,"line_start":69,"line_end":69,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":55120,"byte_end":55123,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ See [`Encoder::into_vec`] on how to create this type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":55124,"byte_end":55181,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":55182,"byte_end":55185,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::into_vec`]: struct.Encoder.html#method.into_vec","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":55186,"byte_end":55248,"line_start":73,"line_end":73,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58489,"byte_end":58492,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new encoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58058,"byte_end":58128,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58133,"byte_end":58136,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58141,"byte_end":58234,"line_start":182,"line_end":182,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to encode","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58239,"byte_end":58333,"line_start":183,"line_end":183,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58338,"byte_end":58387,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58392,"byte_end":58395,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58400,"byte_end":58412,"line_start":186,"line_end":186,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58417,"byte_end":58420,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58425,"byte_end":58477,"line_start":188,"line_end":188,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59323,"byte_end":59344,"line_start":209,"line_end":209,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Encoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible encoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58881,"byte_end":58963,"line_start":200,"line_end":200,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58968,"byte_end":58971,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58976,"byte_end":59069,"line_start":202,"line_end":202,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59074,"byte_end":59167,"line_start":203,"line_end":203,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59172,"byte_end":59221,"line_start":204,"line_end":204,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59226,"byte_end":59229,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59234,"byte_end":59246,"line_start":206,"line_end":206,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59251,"byte_end":59254,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59259,"byte_end":59311,"line_start":208,"line_end":208,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60645,"byte_end":60657,"line_start":240,"line_end":240,"column_start":12,"column_end":24},"name":"encode_bytes","qualname":"<Encoder>::encode_bytes","value":"pub fn encode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Encode some bytes from `inp` into `out`.","sig":null,"attributes":[{"value":"/ Encode some bytes from `inp` into `out`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59949,"byte_end":59993,"line_start":228,"line_end":228,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":59998,"byte_end":60001,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (this interface is only available with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60006,"byte_end":60097,"line_start":230,"line_end":230,"column_start":5,"column_end":96}},{"value":"/ `std` feature) and [`finish`] for marking the input data as complete.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60102,"byte_end":60175,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60180,"byte_end":60183,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ When some input byte is invalid, i.e. is not smaller than `1 << size`, then that byte and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60188,"byte_end":60281,"line_start":233,"line_end":233,"column_start":5,"column_end":98}},{"value":"/ all following ones will _not_ be consumed and the `status` of the result will signal an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60286,"byte_end":60377,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/ error. The result will also indicate that all bytes up to but not including the offending","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60382,"byte_end":60475,"line_start":235,"line_end":235,"column_start":5,"column_end":98}},{"value":"/ byte have been consumed. You may try again with a fixed byte.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60480,"byte_end":60545,"line_start":236,"line_end":236,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60550,"byte_end":60553,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60558,"byte_end":60598,"line_start":238,"line_end":238,"column_start":5,"column_end":45}},{"value":"/ [`finish`]: #method.finish","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60603,"byte_end":60633,"line_start":239,"line_end":239,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61478,"byte_end":61484,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder>::encode","value":"pub fn encode(&mut Self, &[u8]) -> Result<Vec<u8>, LzwError>","parent":null,"children":[],"decl_id":null,"docs":" Encode a single chunk of data.","sig":null,"attributes":[{"value":"/ Encode a single chunk of data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60763,"byte_end":60797,"line_start":244,"line_end":244,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60802,"byte_end":60805,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ This method will add an end marker to the encoded chunk.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60810,"byte_end":60870,"line_start":246,"line_end":246,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60875,"byte_end":60878,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This is a convenience wrapper around [`into_vec`]. Use the `into_vec` adapter to customize","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60883,"byte_end":60977,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ buffer size, to supply an existing vector, to control whether an end marker is required, or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":60982,"byte_end":61077,"line_start":249,"line_end":249,"column_start":5,"column_end":100}},{"value":"/ to preserve partial data in the case of a decoding error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61082,"byte_end":61143,"line_start":250,"line_end":250,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61148,"byte_end":61151,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ [`into_vec`]: #into_vec","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61156,"byte_end":61183,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61188,"byte_end":61191,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61196,"byte_end":61209,"line_start":254,"line_end":254,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61214,"byte_end":61217,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61222,"byte_end":61229,"line_start":256,"line_end":256,"column_start":5,"column_end":12}},{"value":"/ use weezl::{BitOrder, encode::Encoder};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61234,"byte_end":61277,"line_start":257,"line_end":257,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61282,"byte_end":61285,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ let data = b\"Hello, world\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61290,"byte_end":61321,"line_start":259,"line_end":259,"column_start":5,"column_end":36}},{"value":"/ let encoded = Encoder::new(BitOrder::Msb, 9)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61326,"byte_end":61374,"line_start":260,"line_end":260,"column_start":5,"column_end":53}},{"value":"/     .encode(data)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61379,"byte_end":61400,"line_start":261,"line_end":261,"column_start":5,"column_end":26}},{"value":"/     .expect(\"All bytes valid for code size\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61405,"byte_end":61454,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61459,"byte_end":61466,"line_start":263,"line_end":263,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61746,"byte_end":61757,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Encoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a encoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a encoder into a writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61668,"byte_end":61706,"line_start":270,"line_end":270,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":61711,"byte_end":61734,"line_start":271,"line_end":271,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62665,"byte_end":62673,"line_start":299,"line_end":299,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<Encoder>::into_vec","value":"pub fn into_vec<'lt>(&'lt mut Self, &'lt mut Vec<u8>) -> IntoVec","parent":null,"children":[],"decl_id":null,"docs":" Construct an encoder into a vector.","sig":null,"attributes":[{"value":"/ Construct an encoder into a vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62298,"byte_end":62337,"line_start":292,"line_end":292,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62342,"byte_end":62345,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ All encoded data is appended and the vector is __not__ cleared.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62350,"byte_end":62417,"line_start":294,"line_end":294,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62422,"byte_end":62425,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Compared to `into_stream` this interface allows a high-level access to encoding without","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62430,"byte_end":62521,"line_start":296,"line_end":296,"column_start":5,"column_end":96}},{"value":"/ requires the `std`-feature. Also, it can make full use of the extra buffer control that the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62526,"byte_end":62621,"line_start":297,"line_end":297,"column_start":5,"column_end":100}},{"value":"/ special target exposes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62626,"byte_end":62653,"line_start":298,"line_end":298,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63309,"byte_end":63315,"line_start":313,"line_end":313,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Mark the encoding as in the process of finishing.","sig":null,"attributes":[{"value":"/ Mark the encoding as in the process of finishing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62826,"byte_end":62879,"line_start":306,"line_end":306,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62884,"byte_end":62887,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The next following call to `encode_bytes` which is able to consume the complete input will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62892,"byte_end":62986,"line_start":308,"line_end":308,"column_start":5,"column_end":99}},{"value":"/ also try to emit an end code. It's not recommended, but also not unsound, to use different","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":62991,"byte_end":63085,"line_start":309,"line_end":309,"column_start":5,"column_end":99}},{"value":"/ byte slices in different calls from this point forward and thus to 'delay' the actual end","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63090,"byte_end":63183,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/ of the data stream. The behaviour after the end marker has been written is unspecified but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63188,"byte_end":63282,"line_start":311,"line_end":311,"column_start":5,"column_end":99}},{"value":"/ sound.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63287,"byte_end":63297,"line_start":312,"line_end":312,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63874,"byte_end":63879,"line_start":329,"line_end":329,"column_start":12,"column_end":17},"name":"reset","qualname":"<Encoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63603,"byte_end":63632,"line_start":324,"line_end":324,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63637,"byte_end":63640,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ This produce an encoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63645,"byte_end":63740,"line_start":326,"line_end":326,"column_start":5,"column_end":100}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63745,"byte_end":63832,"line_start":327,"line_end":327,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63837,"byte_end":63862,"line_start":328,"line_end":328,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64167,"byte_end":64173,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"encode","qualname":"<IntoStream>::encode","value":"pub fn encode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader.","sig":null,"attributes":[{"value":"/ Encode data from a reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63996,"byte_end":64026,"line_start":336,"line_end":336,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64031,"byte_end":64034,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This will drain the supplied reader. It will not encode an end marker after all data has","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64039,"byte_end":64131,"line_start":338,"line_end":338,"column_start":5,"column_end":97}},{"value":"/ been processed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64136,"byte_end":64155,"line_start":339,"line_end":339,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64332,"byte_end":64342,"line_start":345,"line_end":345,"column_start":12,"column_end":22},"name":"encode_all","qualname":"<IntoStream>::encode_all","value":"pub fn encode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader and an end marker.\n","sig":null,"attributes":[{"value":"/ Encode data from a reader and an end marker.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64272,"byte_end":64320,"line_start":344,"line_end":344,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64819,"byte_end":64834,"line_start":357,"line_end":357,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate encode buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64439,"byte_end":64490,"line_start":349,"line_end":349,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64495,"byte_end":64498,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the encoded stream when no buffer is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64503,"byte_end":64598,"line_start":351,"line_end":351,"column_start":5,"column_end":100}},{"value":"/ available and any encoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64603,"byte_end":64694,"line_start":352,"line_end":352,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64699,"byte_end":64737,"line_start":353,"line_end":353,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64742,"byte_end":64745,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64750,"byte_end":64762,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64767,"byte_end":64807,"line_start":356,"line_end":356,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65447,"byte_end":65457,"line_start":371,"line_end":371,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate encode buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":64968,"byte_end":65029,"line_start":362,"line_end":362,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65034,"byte_end":65037,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65042,"byte_end":65130,"line_start":364,"line_end":364,"column_start":5,"column_end":93}},{"value":"/ instead of a dynamically allocating a buffer. Note that the size of the buffer is relevant","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65135,"byte_end":65229,"line_start":365,"line_end":365,"column_start":5,"column_end":99}},{"value":"/ for efficient encoding as there is additional overhead from `write` calls each time the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65234,"byte_end":65325,"line_start":366,"line_end":366,"column_start":5,"column_end":96}},{"value":"/ buffer has been filled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65330,"byte_end":65357,"line_start":367,"line_end":367,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65362,"byte_end":65365,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65370,"byte_end":65382,"line_start":369,"line_end":369,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":65387,"byte_end":65435,"line_start":370,"line_end":370,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":68050,"byte_end":68056,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"encode","qualname":"<IntoVec>::encode","value":"pub fn encode(&mut Self, &[u8]) -> VectorResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a slice.\n","sig":null,"attributes":[{"value":"/ Encode data from a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":68009,"byte_end":68038,"line_start":456,"line_end":456,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":68212,"byte_end":68222,"line_start":462,"line_end":462,"column_start":12,"column_end":22},"name":"encode_all","qualname":"<IntoVec>::encode_all","value":"pub fn encode_all(Self, &[u8]) -> VectorResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader, adding an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a reader, adding an end marker.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":68148,"byte_end":68200,"line_start":461,"line_end":461,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":88962,"byte_end":88974,"line_start":3,"line_end":3,"column_start":12,"column_end":24},"name":"BufferResult","qualname":"::error::BufferResult","value":"BufferResult { consumed_in, consumed_out, status }","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"decl_id":null,"docs":" The result of a coding operation on a pair of buffer.\n","sig":null,"attributes":[{"value":"/ The result of a coding operation on a pair of buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":88826,"byte_end":88883,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":88884,"byte_end":88950,"line_start":2,"line_end":2,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89045,"byte_end":89056,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"name":"consumed_in","qualname":"::error::BufferResult::consumed_in","value":"usize","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":88981,"byte_end":89036,"line_start":4,"line_end":4,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89133,"byte_end":89145,"line_start":7,"line_end":7,"column_start":9,"column_end":21},"name":"consumed_out","qualname":"::error::BufferResult::consumed_out","value":"usize","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The number of bytes written into the output buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes written into the output buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89069,"byte_end":89124,"line_start":6,"line_end":6,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89218,"byte_end":89224,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"status","qualname":"::error::BufferResult::status","value":"std::result::Result<error::LzwStatus, error::LzwError>","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" The status after returning from the write call.\n","sig":null,"attributes":[{"value":"/ The status after returning from the write call.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89158,"byte_end":89209,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89388,"byte_end":89400,"line_start":14,"line_end":14,"column_start":12,"column_end":24},"name":"VectorResult","qualname":"::error::VectorResult","value":"VectorResult { consumed_in, consumed_out, status }","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"decl_id":null,"docs":" The result of a coding operation into a vector.\n","sig":null,"attributes":[{"value":"/ The result of a coding operation into a vector.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89258,"byte_end":89309,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89310,"byte_end":89376,"line_start":13,"line_end":13,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89471,"byte_end":89482,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"name":"consumed_in","qualname":"::error::VectorResult::consumed_in","value":"usize","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89407,"byte_end":89462,"line_start":15,"line_end":15,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89559,"byte_end":89571,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"consumed_out","qualname":"::error::VectorResult::consumed_out","value":"usize","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" The number of bytes written into the output buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes written into the output buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89495,"byte_end":89550,"line_start":17,"line_end":17,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89644,"byte_end":89650,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"name":"status","qualname":"::error::VectorResult::status","value":"std::result::Result<error::LzwStatus, error::LzwError>","parent":{"krate":0,"index":435},"children":[],"decl_id":null,"docs":" The status after returning from the write call.\n","sig":null,"attributes":[{"value":"/ The status after returning from the write call.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89584,"byte_end":89635,"line_start":19,"line_end":19,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89834,"byte_end":89846,"line_start":26,"line_end":26,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::error::StreamResult","value":"StreamResult { bytes_read, bytes_written, status }","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"decl_id":null,"docs":" The result of coding into an output stream.\n","sig":null,"attributes":[{"value":"/ The result of coding into an output stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89684,"byte_end":89731,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89732,"byte_end":89755,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89756,"byte_end":89822,"line_start":25,"line_end":25,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89917,"byte_end":89927,"line_start":28,"line_end":28,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::error::StreamResult::bytes_read","value":"usize","parent":{"krate":0,"index":439},"children":[],"decl_id":null,"docs":" The total number of bytes consumed from the reader.\n","sig":null,"attributes":[{"value":"/ The total number of bytes consumed from the reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89853,"byte_end":89908,"line_start":27,"line_end":27,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90003,"byte_end":90016,"line_start":30,"line_end":30,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::error::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":439},"children":[],"decl_id":null,"docs":" The total number of bytes written into the writer.\n","sig":null,"attributes":[{"value":"/ The total number of bytes written into the writer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":89940,"byte_end":89994,"line_start":29,"line_end":29,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90183,"byte_end":90189,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"name":"status","qualname":"::error::StreamResult::status","value":"std::result::Result<(), std::io::Error>","parent":{"krate":0,"index":439},"children":[],"decl_id":null,"docs":" The possible error that occurred.","sig":null,"attributes":[{"value":"/ The possible error that occurred.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90029,"byte_end":90066,"line_start":31,"line_end":31,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90071,"byte_end":90074,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Note that when writing into streams it is not in general possible to recover from an error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90079,"byte_end":90174,"line_start":33,"line_end":33,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90357,"byte_end":90359,"line_start":41,"line_end":41,"column_start":5,"column_end":7},"name":"Ok","qualname":"::error::LzwStatus::Ok","value":"LzwStatus::Ok","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Everything went well.\n","sig":null,"attributes":[{"value":"/ Everything went well.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90327,"byte_end":90352,"line_start":40,"line_end":40,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90722,"byte_end":90732,"line_start":47,"line_end":47,"column_start":5,"column_end":15},"name":"NoProgress","qualname":"::error::LzwStatus::NoProgress","value":"LzwStatus::NoProgress","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" No bytes were read or written and no internal state advanced.","sig":null,"attributes":[{"value":"/ No bytes were read or written and no internal state advanced.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90365,"byte_end":90430,"line_start":42,"line_end":42,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90435,"byte_end":90438,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ If this is returned but your application can not provide more input data then decoding is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90443,"byte_end":90536,"line_start":44,"line_end":44,"column_start":5,"column_end":98}},{"value":"/ definitely stuck for good and it should stop trying and report some error of its own. In","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90541,"byte_end":90633,"line_start":45,"line_end":45,"column_start":5,"column_end":97}},{"value":"/ other situations this may be used as a signal to refill an internal buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90638,"byte_end":90717,"line_start":46,"line_end":46,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90811,"byte_end":90815,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Done","qualname":"::error::LzwStatus::Done","value":"LzwStatus::Done","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" No more data will be produced because an end marker was reached.\n","sig":null,"attributes":[{"value":"/ No more data will be produced because an end marker was reached.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90738,"byte_end":90806,"line_start":48,"line_end":48,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90311,"byte_end":90320,"line_start":39,"line_end":39,"column_start":10,"column_end":19},"name":"LzwStatus","qualname":"::error::LzwStatus","value":"pub enum LzwStatus { Ok, NoProgress, Done, }","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":535}],"decl_id":null,"docs":" The status after successful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The status after successful coding of an LZW stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90215,"byte_end":90271,"line_start":37,"line_end":37,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91274,"byte_end":91285,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"InvalidCode","qualname":"::error::LzwError::InvalidCode","value":"LzwError::InvalidCode","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" The input contained an invalid code.","sig":null,"attributes":[{"value":"/ The input contained an invalid code.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90937,"byte_end":90977,"line_start":55,"line_end":55,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90982,"byte_end":90985,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ For decompression this refers to a code larger than those currently known through the prior","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90990,"byte_end":91085,"line_start":57,"line_end":57,"column_start":5,"column_end":100}},{"value":"/ decoding stages. For compression this refers to a byte that has no code representation due","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91090,"byte_end":91184,"line_start":58,"line_end":58,"column_start":5,"column_end":99}},{"value":"/ to being larger than permitted by the `size` parameter given to the Encoder.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91189,"byte_end":91269,"line_start":59,"line_end":59,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90922,"byte_end":90930,"line_start":54,"line_end":54,"column_start":10,"column_end":18},"name":"LzwError","qualname":"::error::LzwError","value":"pub enum LzwError { InvalidCode, }","parent":null,"children":[{"krate":0,"index":543}],"decl_id":null,"docs":" The error kind after unsuccessful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The error kind after unsuccessful coding of an LZW stream.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":90820,"byte_end":90882,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":9725,"byte_end":9732,"line_start":163,"line_end":163,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16030,"byte_end":16040,"line_start":327,"line_end":327,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":20937,"byte_end":20944,"line_start":460,"line_end":460,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":24282,"byte_end":24293,"line_start":555,"line_end":555,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":25124,"byte_end":25135,"line_start":584,"line_end":584,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":41730,"byte_end":41741,"line_start":946,"line_end":946,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":42153,"byte_end":42162,"line_start":964,"line_end":964,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":44045,"byte_end":44054,"line_start":1033,"line_end":1033,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":45896,"byte_end":45902,"line_start":1102,"line_end":1102,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":47249,"byte_end":47254,"line_start":1146,"line_end":1146,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":49223,"byte_end":49227,"line_start":1212,"line_end":1212,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58044,"byte_end":58051,"line_start":179,"line_end":179,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63972,"byte_end":63982,"line_start":335,"line_end":335,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":67991,"byte_end":67998,"line_start":455,"line_end":455,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":71178,"byte_end":71189,"line_start":552,"line_end":552,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":71677,"byte_end":71688,"line_start":571,"line_end":571,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":75278,"byte_end":75289,"line_start":678,"line_end":678,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":75743,"byte_end":75752,"line_start":700,"line_end":700,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":77381,"byte_end":77390,"line_start":766,"line_end":766,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":78951,"byte_end":78955,"line_start":831,"line_end":831,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83316,"byte_end":83323,"line_start":943,"line_end":943,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83408,"byte_end":83414,"line_start":949,"line_end":949,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83593,"byte_end":83600,"line_start":959,"line_end":959,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83877,"byte_end":83890,"line_start":969,"line_end":969,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91318,"byte_end":91326,"line_start":63,"line_end":63,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91571,"byte_end":91579,"line_start":72,"line_end":72,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3916,"byte_end":3922,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":20}},{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\lib.rs","byte_start":3958,"byte_end":3964,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":227}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":9725,"byte_end":9732,"line_start":163,"line_end":163,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":76},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":16030,"byte_end":16040,"line_start":327,"line_end":327,"column_start":20,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":20937,"byte_end":20944,"line_start":460,"line_end":460,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":24282,"byte_end":24293,"line_start":555,"line_end":555,"column_start":21,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":25124,"byte_end":25135,"line_start":584,"line_end":584,"column_start":34,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":103},"to":{"krate":0,"index":89}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":41730,"byte_end":41741,"line_start":946,"line_end":946,"column_start":21,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":42153,"byte_end":42162,"line_start":964,"line_end":964,"column_start":21,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":474},"to":{"krate":0,"index":94}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":44045,"byte_end":44054,"line_start":1033,"line_end":1033,"column_start":21,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":481},"to":{"krate":0,"index":94}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":45896,"byte_end":45902,"line_start":1102,"line_end":1102,"column_start":6,"column_end":12},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":47249,"byte_end":47254,"line_start":1146,"line_end":1146,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\decode.rs","byte_start":49223,"byte_end":49227,"line_start":1212,"line_end":1212,"column_start":6,"column_end":10},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":58044,"byte_end":58051,"line_start":179,"line_end":179,"column_start":6,"column_end":13},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":63972,"byte_end":63982,"line_start":335,"line_end":335,"column_start":20,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":67991,"byte_end":67998,"line_start":455,"line_end":455,"column_start":6,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":71178,"byte_end":71189,"line_start":552,"line_end":552,"column_start":17,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":71677,"byte_end":71688,"line_start":571,"line_end":571,"column_start":30,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":298},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":75278,"byte_end":75289,"line_start":678,"line_end":678,"column_start":17,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":75743,"byte_end":75752,"line_start":700,"line_end":700,"column_start":17,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":307},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":77381,"byte_end":77390,"line_start":766,"line_end":766,"column_start":17,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":311},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":78951,"byte_end":78955,"line_start":831,"line_end":831,"column_start":6,"column_end":10},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83316,"byte_end":83323,"line_start":943,"line_end":943,"column_start":18,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":494},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83408,"byte_end":83414,"line_start":949,"line_end":949,"column_start":18,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":512},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83593,"byte_end":83600,"line_start":959,"line_end":959,"column_start":30,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":494},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\encode.rs","byte_start":83877,"byte_end":83890,"line_start":969,"line_end":969,"column_start":24,"column_end":37},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91318,"byte_end":91326,"line_start":63,"line_end":63,"column_start":29,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.6\\src\\error.rs","byte_start":91571,"byte_end":91579,"line_start":72,"line_end":72,"column_start":28,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":542},"to":{"krate":1,"index":2546}}]}
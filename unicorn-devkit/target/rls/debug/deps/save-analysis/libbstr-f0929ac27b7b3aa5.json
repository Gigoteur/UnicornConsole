{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bstr","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"std\"","-C","metadata=f0929ac27b7b3aa5","-C","extra-filename=-f0929ac27b7b3aa5","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","--extern","memchr=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libmemchr-a0d5567519f3e3e0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libbstr-f0929ac27b7b3aa5.rmeta"},"prelude":{"crate_id":{"name":"bstr","disambiguator":[10048635190364895086,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ascii.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\byteset\\mod.rs","num":16,"id":{"name":"memchr","disambiguator":[1389655081229493267,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":0,"byte_end":19971,"line_start":1,"line_end":437,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18196,"byte_end":18200,"line_start":372,"line_end":372,"column_start":22,"column_end":26},"alias_span":null,"name":"BStr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18250,"byte_end":18257,"line_start":374,"line_end":374,"column_start":25,"column_end":32},"alias_span":null,"name":"BString","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18291,"byte_end":18300,"line_start":376,"line_end":376,"column_start":5,"column_end":14},"alias_span":null,"name":"ByteSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18302,"byte_end":18307,"line_start":376,"line_end":376,"column_start":16,"column_end":21},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18309,"byte_end":18315,"line_start":376,"line_end":376,"column_start":23,"column_end":29},"alias_span":null,"name":"Fields","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18317,"byte_end":18327,"line_start":376,"line_end":376,"column_start":31,"column_end":41},"alias_span":null,"name":"FieldsWith","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18329,"byte_end":18333,"line_start":376,"line_end":376,"column_start":43,"column_end":47},"alias_span":null,"name":"Find","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":985},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18335,"byte_end":18346,"line_start":376,"line_end":376,"column_start":49,"column_end":60},"alias_span":null,"name":"FindReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18348,"byte_end":18354,"line_start":376,"line_end":376,"column_start":62,"column_end":68},"alias_span":null,"name":"Finder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18360,"byte_end":18373,"line_start":377,"line_end":377,"column_start":5,"column_end":18},"alias_span":null,"name":"FinderReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18375,"byte_end":18380,"line_start":377,"line_end":377,"column_start":20,"column_end":25},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18382,"byte_end":18401,"line_start":377,"line_end":377,"column_start":27,"column_end":46},"alias_span":null,"name":"LinesWithTerminator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18403,"byte_end":18408,"line_start":377,"line_end":377,"column_start":48,"column_end":53},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18410,"byte_end":18416,"line_start":377,"line_end":377,"column_start":55,"column_end":61},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18418,"byte_end":18431,"line_start":377,"line_end":377,"column_start":63,"column_end":76},"alias_span":null,"name":"SplitNReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18437,"byte_end":18449,"line_start":378,"line_end":378,"column_start":5,"column_end":17},"alias_span":null,"name":"SplitReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18451,"byte_end":18452,"line_start":378,"line_end":378,"column_start":19,"column_end":20},"alias_span":null,"name":"B","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18506,"byte_end":18512,"line_start":381,"line_end":381,"column_start":26,"column_end":32},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18514,"byte_end":18518,"line_start":381,"line_end":381,"column_start":34,"column_end":38},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18520,"byte_end":18527,"line_start":381,"line_end":381,"column_start":40,"column_end":47},"alias_span":null,"name":"ByteVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18529,"byte_end":18539,"line_start":381,"line_end":381,"column_start":49,"column_end":59},"alias_span":null,"name":"DrainBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18541,"byte_end":18554,"line_start":381,"line_end":381,"column_start":61,"column_end":74},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18765,"byte_end":18771,"line_start":388,"line_end":388,"column_start":5,"column_end":11},"alias_span":null,"name":"decode_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18788,"byte_end":18799,"line_start":388,"line_end":388,"column_start":28,"column_end":39},"alias_span":null,"name":"decode_last_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18821,"byte_end":18832,"line_start":388,"line_end":388,"column_start":61,"column_end":72},"alias_span":null,"name":"CharIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18838,"byte_end":18843,"line_start":389,"line_end":389,"column_start":5,"column_end":10},"alias_span":null,"name":"Chars","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18845,"byte_end":18854,"line_start":389,"line_end":389,"column_start":12,"column_end":21},"alias_span":null,"name":"Utf8Chunk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18856,"byte_end":18866,"line_start":389,"line_end":389,"column_start":23,"column_end":33},"alias_span":null,"name":"Utf8Chunks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":18868,"byte_end":18877,"line_start":389,"line_end":389,"column_start":35,"column_end":44},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":0,"byte_end":19971,"line_start":1,"line_end":437,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":107},{"krate":0,"index":121},{"krate":0,"index":129},{"krate":0,"index":188},{"krate":0,"index":484},{"krate":0,"index":607},{"krate":0,"index":814},{"krate":0,"index":851}],"decl_id":null,"docs":"A byte string library.","sig":null,"attributes":[{"value":"*\nA byte string library.\n\nByte strings are just like standard Unicode strings with one very important\ndifference: byte strings are only *conventionally* UTF-8 while Rust's standard\nUnicode strings are *guaranteed* to be valid UTF-8. The primary motivation for\nbyte strings is for handling arbitrary bytes that are mostly UTF-8.\n\n# Overview\n\nThis crate provides two important traits that provide string oriented methods\non `&[u8]` and `Vec<u8>` types:\n\n* [`ByteSlice`](trait.ByteSlice.html) extends the `[u8]` type with additional\n  string oriented methods.\n* [`ByteVec`](trait.ByteVec.html) extends the `Vec<u8>` type with additional\n  string oriented methods.\n\nAdditionally, this crate provides two concrete byte string types that deref to\n`[u8]` and `Vec<u8>`. These are useful for storing byte string types, and come\nwith convenient `std::fmt::Debug` implementations:\n\n* [`BStr`](struct.BStr.html) is a byte string slice, analogous to `str`.\n* [`BString`](struct.BString.html) is an owned growable byte string buffer,\n  analogous to `String`.\n\nAdditionally, the free function [`B`](fn.B.html) serves as a convenient short\nhand for writing byte string literals.\n\n# Quick examples\n\nByte strings build on the existing APIs for `Vec<u8>` and `&[u8]`, with\nadditional string oriented methods. Operations such as iterating over\ngraphemes, searching for substrings, replacing substrings, trimming and case\nconversion are examples of things not provided on the standard library `&[u8]`\nAPIs but are provided by this crate. For example, this code iterates over all\nof occurrences of a subtring:\n\n```\nuse bstr::ByteSlice;\n\nlet s = b\"foo bar foo foo quux foo\";\n\nlet mut matches = vec![];\nfor start in s.find_iter(\"foo\") {\n    matches.push(start);\n}\nassert_eq!(matches, [0, 8, 12, 21]);\n```\n\nHere's another example showing how to do a search and replace (and also showing\nuse of the `B` function):\n\n```\nuse bstr::{B, ByteSlice};\n\nlet old = B(\"foo ☃☃☃ foo foo quux foo\");\nlet new = old.replace(\"foo\", \"hello\");\nassert_eq!(new, B(\"hello ☃☃☃ hello hello quux hello\"));\n```\n\nAnd here's an example that shows case conversion, even in the presence of\ninvalid UTF-8:\n\n```\nuse bstr::{ByteSlice, ByteVec};\n\nlet mut lower = Vec::from(\"hello β\");\nlower[0] = b'\\xFF';\n// lowercase β is uppercased to Β\nassert_eq!(lower.to_uppercase(), b\"\\xFFELLO \\xCE\\x92\");\n```\n\n# Convenient debug representation\n\nWhen working with byte strings, it is often useful to be able to print them\nas if they were byte strings and not sequences of integers. While this crate\ncannot affect the `std::fmt::Debug` implementations for `[u8]` and `Vec<u8>`,\nthis crate does provide the `BStr` and `BString` types which have convenient\n`std::fmt::Debug` implementations.\n\nFor example, this\n\n```\nuse bstr::ByteSlice;\n\nlet mut bytes = Vec::from(\"hello β\");\nbytes[0] = b'\\xFF';\n\nprintln!(\"{:?}\", bytes.as_bstr());\n```\n\nwill output `\"\\xFFello β\"`.\n\nThis example works because the\n[`ByteSlice::as_bstr`](trait.ByteSlice.html#method.as_bstr)\nmethod converts any `&[u8]` to a `&BStr`.\n\n# When should I use byte strings?\n\nThis library reflects my hypothesis that UTF-8 by convention is a better trade\noff in some circumstances than guaranteed UTF-8. It's possible, perhaps even\nlikely, that this is a niche concern for folks working closely with core text\nprimitives.\n\nThe first time this idea hit me was in the implementation of Rust's regex\nengine. In particular, very little of the internal implementation cares at all\nabout searching valid UTF-8 encoded strings. Indeed, internally, the\nimplementation converts `&str` from the API to `&[u8]` fairly quickly and\njust deals with raw bytes. UTF-8 match boundaries are then guaranteed by the\nfinite state machine itself rather than any specific string type. This makes it\npossible to not only run regexes on `&str` values, but also on `&[u8]` values.\n\nWhy would you ever want to run a regex on a `&[u8]` though? Well, `&[u8]` is\nthe fundamental way at which one reads data from all sorts of streams, via the\nstandard library's [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html)\ntrait. In particular, there is no platform independent way to determine whether\nwhat you're reading from is some binary file or a human readable text file.\nTherefore, if you're writing a program to search files, you probably need to\ndeal with `&[u8]` directly unless you're okay with first converting it to a\n`&str` and dropping any bytes that aren't valid UTF-8. (Or otherwise determine\nthe encoding---which is often impractical---and perform a transcoding step.)\nOften, the simplest and most robust way to approach this is to simply treat the\ncontents of a file as if it were mostly valid UTF-8 and pass through invalid\nUTF-8 untouched. This may not be the most correct approach though!\n\nOne case in particular exacerbates these issues, and that's memory mapping\na file. When you memory map a file, that file may be gigabytes big, but all\nyou get is a `&[u8]`. Converting that to a `&str` all in one go is generally\nnot a good idea because of the costs associated with doing so, and also\nbecause it generally causes one to do two passes over the data instead of\none, which is quite undesirable. It is of course usually possible to do it an\nincremental way by only parsing chunks at a time, but this is often complex to\ndo or impractical. For example, many regex engines only accept one contiguous\nsequence of bytes at a time with no way to perform incremental matching.\n\nIn summary, conventional UTF-8 byte strings provided by this library are\ndefinitely useful in some limited circumstances, but how useful they are more\nbroadly isn't clear yet.\n\n# `bstr` in public APIs\n\nSince this library is not yet `1.0`, you should not use it in the public API of\nyour crates until it hits `1.0` (unless you're OK with with tracking breaking\nreleases of `bstr`). It is expected that `bstr 1.0` will be released before\n2022.\n\nIn general, it should be possible to avoid putting anything in this crate into\nyour public APIs. Namely, you should never need to use the `ByteSlice` or\n`ByteVec` traits as bounds on public APIs, since their only purpose is to\nextend the methods on the concrete types `[u8]` and `Vec<u8>`, respectively.\nSimilarly, it should not be necessary to put either the `BStr` or `BString`\ntypes into public APIs. If you want to use them internally, then they can\nbe converted to/from `[u8]`/`Vec<u8>` as needed.\n\n# Differences with standard strings\n\nThe primary difference between `[u8]` and `str` is that the former is\nconventionally UTF-8 while the latter is guaranteed to be UTF-8. The phrase\n\"conventionally UTF-8\" means that a `[u8]` may contain bytes that do not form\na valid UTF-8 sequence, but operations defined on the type in this crate are\ngenerally most useful on valid UTF-8 sequences. For example, iterating over\nUnicode codepoints or grapheme clusters is an operation that is only defined\non valid UTF-8. Therefore, when invalid UTF-8 is encountered, the Unicode\nreplacement codepoint is substituted. Thus, a byte string that is not UTF-8 at\nall is of limited utility when using these crate.\n\nHowever, not all operations on byte strings are specifically Unicode aware. For\nexample, substring search has no specific Unicode semantics ascribed to it. It\nworks just as well for byte strings that are completely valid UTF-8 as for byte\nstrings that contain no valid UTF-8 at all. Similarly for replacements and\nvarious other operations that do not need any Unicode specific tailoring.\n\nAside from the difference in how UTF-8 is handled, the APIs between `[u8]` and\n`str` (and `Vec<u8>` and `String`) are intentionally very similar, including\nmaintaining the same behavior for corner cases in things like substring\nsplitting. There are, however, some differences:\n\n* Substring search is not done with `matches`, but instead, `find_iter`.\n  In general, this crate does not define any generic\n  [`Pattern`](https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html)\n  infrastructure, and instead prefers adding new methods for different\n  argument types. For example, `matches` can search by a `char` or a `&str`,\n  where as `find_iter` can only search by a byte string. `find_char` can be\n  used for searching by a `char`.\n* Since `SliceConcatExt` in the standard library is unstable, it is not\n  possible to reuse that to implement `join` and `concat` methods. Instead,\n  [`join`](fn.join.html) and [`concat`](fn.concat.html) are provided as free\n  functions that perform a similar task.\n* This library bundles in a few more Unicode operations, such as grapheme,\n  word and sentence iterators. More operations, such as normalization and\n  case folding, may be provided in the future.\n* Some `String`/`str` APIs will panic if a particular index was not on a valid\n  UTF-8 code unit sequence boundary. Conversely, no such checking is performed\n  in this crate, as is consistent with treating byte strings as a sequence of\n  bytes. This means callers are responsible for maintaining a UTF-8 invariant\n  if that's important.\n* Some routines provided by this crate, such as `starts_with_str`, have a\n  `_str` suffix to differentiate them from similar routines already defined\n  on the `[u8]` type. The difference is that `starts_with` requires its\n  parameter to be a `&[u8]`, where as `starts_with_str` permits its parameter\n  to by anything that implements `AsRef<[u8]>`, which is more flexible. This\n  means you can write `bytes.starts_with_str(\"☃\")` instead of\n  `bytes.starts_with(\"☃\".as_bytes())`.\n\nOtherwise, you should find most of the APIs between this crate and the standard\nlibrary string APIs to be very similar, if not identical.\n\n# Handling of invalid UTF-8\n\nSince byte strings are only *conventionally* UTF-8, there is no guarantee\nthat byte strings contain valid UTF-8. Indeed, it is perfectly legal for a\nbyte string to contain arbitrary bytes. However, since this library defines\na *string* type, it provides many operations specified by Unicode. These\noperations are typically only defined over codepoints, and thus have no real\nmeaning on bytes that are invalid UTF-8 because they do not map to a particular\ncodepoint.\n\nFor this reason, whenever operations defined only on codepoints are used, this\nlibrary will automatically convert invalid UTF-8 to the Unicode replacement\ncodepoint, `U+FFFD`, which looks like this: `�`. For example, an\n[iterator over codepoints](struct.Chars.html) will yield a Unicode\nreplacement codepoint whenever it comes across bytes that are not valid UTF-8:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xFF\\xFFz\";\nlet chars: Vec<char> = bs.chars().collect();\nassert_eq!(vec!['a', '\\u{FFFD}', '\\u{FFFD}', 'z'], chars);\n```\n\nThere are a few ways in which invalid bytes can be substituted with a Unicode\nreplacement codepoint. One way, not used by this crate, is to replace every\nindividual invalid byte with a single replacement codepoint. In contrast, the\napproach this crate uses is called the \"substitution of maximal subparts,\" as\nspecified by the Unicode Standard (Chapter 3, Section 9). (This approach is\nalso used by [W3C's Encoding Standard](https://www.w3.org/TR/encoding/).) In\nthis strategy, a replacement codepoint is inserted whenever a byte is found\nthat cannot possibly lead to a valid UTF-8 code unit sequence. If there were\nprevious bytes that represented a *prefix* of a well-formed UTF-8 code unit\nsequence, then all of those bytes (up to 3) are substituted with a single\nreplacement codepoint. For example:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xF0\\x9F\\x87z\";\nlet chars: Vec<char> = bs.chars().collect();\n// The bytes \\xF0\\x9F\\x87 could lead to a valid UTF-8 sequence, but 3 of them\n// on their own are invalid. Only one replacement codepoint is substituted,\n// which demonstrates the \"substitution of maximal subparts\" strategy.\nassert_eq!(vec!['a', '\\u{FFFD}', 'z'], chars);\n```\n\nIf you do need to access the raw bytes for some reason in an iterator like\n`Chars`, then you should use the iterator's \"indices\" variant, which gives\nthe byte offsets containing the invalid UTF-8 bytes that were substituted with\nthe replacement codepoint. For example:\n\n```\nuse bstr::{B, ByteSlice};\n\nlet bs = b\"a\\xE2\\x98z\";\nlet chars: Vec<(usize, usize, char)> = bs.char_indices().collect();\n// Even though the replacement codepoint is encoded as 3 bytes itself, the\n// byte range given here is only two bytes, corresponding to the original\n// raw bytes.\nassert_eq!(vec![(0, 1, 'a'), (1, 3, '\\u{FFFD}'), (3, 4, 'z')], chars);\n\n// Thus, getting the original raw bytes is as simple as slicing the original\n// byte string:\nlet chars: Vec<&[u8]> = bs.char_indices().map(|(s, e, _)| &bs[s..e]).collect();\nassert_eq!(vec![B(\"a\"), B(b\"\\xE2\\x98\"), B(\"z\")], chars);\n```\n\n# File paths and OS strings\n\nOne of the premiere features of Rust's standard library is how it handles file\npaths. In particular, it makes it very hard to write incorrect code while\nsimultaneously providing a correct cross platform abstraction for manipulating\nfile paths. The key challenge that one faces with file paths across platforms\nis derived from the following observations:\n\n* On most Unix-like systems, file paths are an arbitrary sequence of bytes.\n* On Windows, file paths are an arbitrary sequence of 16-bit integers.\n\n(In both cases, certain sequences aren't allowed. For example a `NUL` byte is\nnot allowed in either case. But we can ignore this for the purposes of this\nsection.)\n\nByte strings, like the ones provided in this crate, line up really well with\nfile paths on Unix like systems, which are themselves just arbitrary sequences\nof bytes. It turns out that if you treat them as \"mostly UTF-8,\" then things\nwork out pretty well. On the contrary, byte strings _don't_ really work\nthat well on Windows because it's not possible to correctly roundtrip file\npaths between 16-bit integers and something that looks like UTF-8 _without_\nexplicitly defining an encoding to do this for you, which is anathema to byte\nstrings, which are just bytes.\n\nRust's standard library elegantly solves this problem by specifying an\ninternal encoding for file paths that's only used on Windows called\n[WTF-8](https://simonsapin.github.io/wtf-8/). Its key properties are that they\npermit losslessly roundtripping file paths on Windows by extending UTF-8 to\nsupport an encoding of surrogate codepoints, while simultaneously supporting\nzero-cost conversion from Rust's Unicode strings to file paths. (Since UTF-8 is\na proper subset of WTF-8.)\n\nThe fundamental point at which the above strategy fails is when you want to\ntreat file paths as things that look like strings in a zero cost way. In most\ncases, this is actually the wrong thing to do, but some cases call for it,\nfor example, glob or regex matching on file paths. This is because WTF-8 is\ntreated as an internal implementation detail, and there is no way to access\nthose bytes via a public API. Therefore, such consumers are limited in what\nthey can do:\n\n1. One could re-implement WTF-8 and re-encode file paths on Windows to WTF-8\n   by accessing their underlying 16-bit integer representation. Unfortunately,\n   this isn't zero cost (it introduces a second WTF-8 decoding step) and it's\n   not clear this is a good thing to do, since WTF-8 should ideally remain an\n   internal implementation detail.\n2. One could instead declare that they will not handle paths on Windows that\n   are not valid UTF-16, and return an error when one is encountered.\n3. Like (2), but instead of returning an error, lossily decode the file path\n   on Windows that isn't valid UTF-16 into UTF-16 by replacing invalid bytes\n   with the Unicode replacement codepoint.\n\nWhile this library may provide facilities for (1) in the future, currently,\nthis library only provides facilities for (2) and (3). In particular, a suite\nof conversion functions are provided that permit converting between byte\nstrings, OS strings and file paths. For owned byte strings, they are:\n\n* [`ByteVec::from_os_string`](trait.ByteVec.html#method.from_os_string)\n* [`ByteVec::from_os_str_lossy`](trait.ByteVec.html#method.from_os_str_lossy)\n* [`ByteVec::from_path_buf`](trait.ByteVec.html#method.from_path_buf)\n* [`ByteVec::from_path_lossy`](trait.ByteVec.html#method.from_path_lossy)\n* [`ByteVec::into_os_string`](trait.ByteVec.html#method.into_os_string)\n* [`ByteVec::into_os_string_lossy`](trait.ByteVec.html#method.into_os_string_lossy)\n* [`ByteVec::into_path_buf`](trait.ByteVec.html#method.into_path_buf)\n* [`ByteVec::into_path_buf_lossy`](trait.ByteVec.html#method.into_path_buf_lossy)\n\nFor byte string slices, they are:\n\n* [`ByteSlice::from_os_str`](trait.ByteSlice.html#method.from_os_str)\n* [`ByteSlice::from_path`](trait.ByteSlice.html#method.from_path)\n* [`ByteSlice::to_os_str`](trait.ByteSlice.html#method.to_os_str)\n* [`ByteSlice::to_os_str_lossy`](trait.ByteSlice.html#method.to_os_str_lossy)\n* [`ByteSlice::to_path`](trait.ByteSlice.html#method.to_path)\n* [`ByteSlice::to_path_lossy`](trait.ByteSlice.html#method.to_path_lossy)\n\nOn Unix, all of these conversions are rigorously zero cost, which gives one\na way to ergonomically deal with raw file paths exactly as they are using\nnormal string-related functions. On Windows, these conversion routines perform\na UTF-8 check and either return an error or lossily decode the file path\ninto valid UTF-8, depending on which function you use. This means that you\ncannot roundtrip all file paths on Windows correctly using these conversion\nroutines. However, this may be an acceptable downside since such file paths\nare exceptionally rare. Moreover, roundtripping isn't always necessary, for\nexample, if all you're doing is filtering based on file paths.\n\nThe reason why using byte strings for this is potentially superior than the\nstandard library's approach is that a lot of Rust code is already lossily\nconverting file paths to Rust's Unicode strings, which are required to be valid\nUTF-8, and thus contain latent bugs on Unix where paths with invalid UTF-8 are\nnot terribly uncommon. If you instead use byte strings, then you're guaranteed\nto write correct code for Unix, at the cost of getting a corner case wrong on\nWindows.\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":0,"byte_end":18129,"line_start":1,"line_end":368,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":945},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":33208,"byte_end":33212,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"BStr","qualname":"::bstr::BStr","value":"BStr {  }","parent":null,"children":[{"krate":0,"index":946}],"decl_id":null,"docs":" A wrapper for `&[u8]` that provides convenient string oriented trait impls.","sig":null,"attributes":[{"value":"/ A wrapper for `&[u8]` that provides convenient string oriented trait impls.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32056,"byte_end":32135,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32136,"byte_end":32139,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ If you need ownership or a growable byte string buffer, then use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32140,"byte_end":32208,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ [`BString`](struct.BString.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32209,"byte_end":32246,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32247,"byte_end":32250,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Using a `&BStr` is just like using a `&[u8]`, since `BStr`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32251,"byte_end":32313,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ implements `Deref` to `[u8]`. So all methods available on `[u8]`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32314,"byte_end":32382,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ are also available on `BStr`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32383,"byte_end":32416,"line_start":10,"line_end":10,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32417,"byte_end":32420,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32421,"byte_end":32441,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32442,"byte_end":32445,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A `&BStr` has the same representation as a `&str`. That is, a `&BStr` is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32446,"byte_end":32522,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ a fat pointer which consists of a pointer to some bytes and a length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32523,"byte_end":32596,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32597,"byte_end":32600,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Trait implementations","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32601,"byte_end":32628,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32629,"byte_end":32632,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `BStr` type has a number of trait implementations, and in particular,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32633,"byte_end":32710,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ defines equality and ordinal comparisons between `&BStr`, `&str` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32711,"byte_end":32783,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ `&[u8]` for convenience.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32784,"byte_end":32812,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32813,"byte_end":32816,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `Debug` implementation for `BStr` shows its bytes as a normal string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32817,"byte_end":32894,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ For invalid UTF-8, hex escape sequences are used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32895,"byte_end":32948,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32949,"byte_end":32952,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `Display` implementation behaves as if `BStr` were first lossily","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":32953,"byte_end":33025,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ converted to a `str`. Invalid UTF-8 bytes are substituted with the Unicode","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":33026,"byte_end":33104,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ replacement codepoint, which looks like this: �.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":33105,"byte_end":33159,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":33176,"byte_end":33196,"line_start":30,"line_end":30,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35623,"byte_end":35630,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"BString","qualname":"::bstring::BString","value":"BString {  }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":" A wrapper for `Vec<u8>` that provides convenient string oriented trait\n impls.","sig":null,"attributes":[{"value":"/ A wrapper for `Vec<u8>` that provides convenient string oriented trait","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34261,"byte_end":34335,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ impls.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34336,"byte_end":34346,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34347,"byte_end":34350,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A `BString` has ownership over its contents and corresponds to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34351,"byte_end":34417,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ a growable or shrinkable buffer. Its borrowed counterpart is a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34418,"byte_end":34484,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ [`BStr`](struct.BStr.html), called a byte string slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34485,"byte_end":34544,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34545,"byte_end":34548,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Using a `BString` is just like using a `Vec<u8>`, since `BString`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34549,"byte_end":34618,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ implements `Deref` to `Vec<u8>`. So all methods available on `Vec<u8>`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34619,"byte_end":34693,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ are also available on `BString`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34694,"byte_end":34730,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34731,"byte_end":34734,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34735,"byte_end":34749,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34750,"byte_end":34753,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ You can create a new `BString` from a `Vec<u8>` via a `From` impl:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34754,"byte_end":34824,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34825,"byte_end":34828,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34829,"byte_end":34836,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bstr::BString;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34837,"byte_end":34859,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34860,"byte_end":34863,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let s = BString::from(\"Hello, world!\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34864,"byte_end":34907,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34908,"byte_end":34915,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34916,"byte_end":34919,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Deref","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34920,"byte_end":34931,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34932,"byte_end":34935,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `BString` type implements `Deref` and `DerefMut`, where the target","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":34936,"byte_end":35010,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ types are `&Vec<u8>` and `&mut Vec<u8>`, respectively. `Deref` permits all of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35011,"byte_end":35096,"line_start":27,"line_end":27,"column_start":1,"column_end":86}},{"value":"/ methods defined on `Vec<u8>` to be implicitly callable on any `BString`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35097,"byte_end":35173,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35174,"byte_end":35177,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For more information about how deref works, see the documentation for the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35178,"byte_end":35255,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ [`std::ops::Deref`](https://doc.rust-lang.org/std/ops/trait.Deref.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35256,"byte_end":35331,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35332,"byte_end":35342,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35343,"byte_end":35346,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35347,"byte_end":35367,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35368,"byte_end":35371,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ A `BString` has the same representation as a `Vec<u8>` and a `String`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35372,"byte_end":35446,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ That is, it is made up of three word sized components: a pointer to a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35447,"byte_end":35520,"line_start":37,"line_end":37,"column_start":1,"column_end":74}},{"value":"/ region of memory containing the bytes, a length and a capacity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35521,"byte_end":35588,"line_start":38,"line_end":38,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51301,"byte_end":51302,"line_start":70,"line_end":70,"column_start":8,"column_end":9},"name":"B","qualname":"::ext_slice::B","value":"pub fn B<'a, B: ?Sized + AsRef<[u8]>>(&'a B) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" A short-hand constructor for building a `&[u8]`.","sig":null,"attributes":[{"value":"/ A short-hand constructor for building a `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49673,"byte_end":49725,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49726,"byte_end":49729,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This idiosyncratic constructor is useful for concisely building byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49730,"byte_end":49809,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ slices. Its primary utility is in conveniently writing byte string literals","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49810,"byte_end":49889,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ in a uniform way. For example, consider this code that does not compile:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49890,"byte_end":49966,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49967,"byte_end":49970,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49971,"byte_end":49984,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![b\"a\", b\"xy\"];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":49985,"byte_end":50018,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50019,"byte_end":50026,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50027,"byte_end":50030,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The above code doesn't compile because the type of the byte string literal","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50031,"byte_end":50109,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ `b\"a\"` is `&'static [u8; 1]`, and the type of `b\"xy\"` is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50110,"byte_end":50170,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"/ `&'static [u8; 2]`. Since their types aren't the same, they can't be stored","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50171,"byte_end":50250,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ in the same `Vec`. (This is dissimilar from normal Unicode string slices,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50251,"byte_end":50328,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ where both `\"a\"` and `\"xy\"` have the same type of `&'static str`.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50329,"byte_end":50399,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50400,"byte_end":50403,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ One way of getting the above code to compile is to convert byte strings to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50404,"byte_end":50482,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ slices. You might try this:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50483,"byte_end":50514,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50515,"byte_end":50518,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50519,"byte_end":50532,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![&b\"a\", &b\"xy\"];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50533,"byte_end":50568,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50569,"byte_end":50576,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50577,"byte_end":50580,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ But this just creates values with type `& &'static [u8; 1]` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50581,"byte_end":50648,"line_start":47,"line_end":47,"column_start":1,"column_end":68}},{"value":"/ `& &'static [u8; 2]`. Instead, you need to force the issue like so:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50649,"byte_end":50720,"line_start":48,"line_end":48,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50721,"byte_end":50724,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50725,"byte_end":50732,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ let strs = vec![&b\"a\"[..], &b\"xy\"[..]];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50733,"byte_end":50776,"line_start":51,"line_end":51,"column_start":1,"column_end":44}},{"value":"/ // or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50777,"byte_end":50786,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"/ let strs = vec![b\"a\".as_ref(), b\"xy\".as_ref()];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50787,"byte_end":50838,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50839,"byte_end":50846,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50847,"byte_end":50850,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ But neither of these are particularly convenient to type, especially when","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50851,"byte_end":50928,"line_start":56,"line_end":56,"column_start":1,"column_end":78}},{"value":"/ it's something as common as a string literal. Thus, this constructor","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":50929,"byte_end":51001,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/ permits writing the following instead:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51002,"byte_end":51044,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51045,"byte_end":51048,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51049,"byte_end":51056,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51057,"byte_end":51073,"line_start":61,"line_end":61,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51074,"byte_end":51077,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let strs = vec![B(\"a\"), B(b\"xy\")];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51078,"byte_end":51116,"line_start":63,"line_end":63,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51117,"byte_end":51124,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51125,"byte_end":51128,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Notice that this also lets you mix and match both string literals and byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51129,"byte_end":51207,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ string literals. This can be quite convenient!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51208,"byte_end":51258,"line_start":67,"line_end":67,"column_start":1,"column_end":51}},{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51259,"byte_end":51283,"line_start":68,"line_end":68,"column_start":1,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51284,"byte_end":51293,"line_start":69,"line_end":69,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51675,"byte_end":51681,"line_start":88,"line_end":88,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_slice::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51558,"byte_end":51623,"line_start":86,"line_end":86,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51624,"byte_end":51664,"line_start":87,"line_end":87,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51783,"byte_end":51792,"line_start":92,"line_end":92,"column_start":11,"column_end":20},"name":"ByteSlice","qualname":"::ext_slice::ByteSlice","value":"ByteSlice: Sealed","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":367}],"decl_id":null,"docs":" A trait that extends `&[u8]` with string oriented methods.\n","sig":null,"attributes":[{"value":"/ A trait that extends `&[u8]` with string oriented methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51710,"byte_end":51772,"line_start":91,"line_end":91,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52018,"byte_end":52026,"line_start":97,"line_end":97,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::ext_slice::ByteSlice::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type. This is always a\n no-op and callers shouldn't care about it. This only exists for making\n the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type. This is always a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51807,"byte_end":51878,"line_start":93,"line_end":93,"column_start":5,"column_end":76}},{"value":"/ no-op and callers shouldn't care about it. This only exists for making","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51883,"byte_end":51957,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ the extension trait work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51962,"byte_end":51991,"line_start":95,"line_end":95,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52269,"byte_end":52281,"line_start":103,"line_end":103,"column_start":8,"column_end":20},"name":"as_bytes_mut","qualname":"::ext_slice::ByteSlice::as_bytes_mut","value":"pub fn as_bytes_mut(&mut Self) -> &mut [u8]","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type, mutably. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type, mutably. This is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52049,"byte_end":52120,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52125,"byte_end":52197,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52202,"byte_end":52242,"line_start":101,"line_end":101,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52882,"byte_end":52889,"line_start":123,"line_end":123,"column_start":8,"column_end":15},"name":"as_bstr","qualname":"::ext_slice::ByteSlice::as_bstr","value":"pub fn as_bstr(&Self) -> &BStr","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&BStr`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52312,"byte_end":52352,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52357,"byte_end":52360,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Use `&BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52365,"byte_end":52433,"line_start":107,"line_end":107,"column_start":5,"column_end":73}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52438,"byte_end":52506,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52511,"byte_end":52582,"line_start":109,"line_end":109,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52587,"byte_end":52656,"line_start":110,"line_end":110,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52661,"byte_end":52684,"line_start":111,"line_end":111,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52689,"byte_end":52692,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52697,"byte_end":52711,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52716,"byte_end":52719,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52724,"byte_end":52740,"line_start":115,"line_end":115,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52745,"byte_end":52748,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52753,"byte_end":52760,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52765,"byte_end":52789,"line_start":118,"line_end":118,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52794,"byte_end":52797,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", b\"foo\\xFFbar\".as_bstr());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52802,"byte_end":52848,"line_start":120,"line_end":120,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52853,"byte_end":52860,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52865,"byte_end":52874,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53573,"byte_end":53584,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"as_bstr_mut","qualname":"::ext_slice::ByteSlice::as_bstr_mut","value":"pub fn as_bstr_mut(&mut Self) -> &mut BStr","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&mut BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&mut BStr`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":52954,"byte_end":52998,"line_start":127,"line_end":127,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53003,"byte_end":53006,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Use `&mut BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53011,"byte_end":53083,"line_start":129,"line_end":129,"column_start":5,"column_end":77}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53088,"byte_end":53156,"line_start":130,"line_end":130,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53161,"byte_end":53232,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53237,"byte_end":53306,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53311,"byte_end":53334,"line_start":133,"line_end":133,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53339,"byte_end":53342,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53347,"byte_end":53361,"line_start":135,"line_end":135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53366,"byte_end":53369,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53374,"byte_end":53390,"line_start":137,"line_end":137,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53395,"byte_end":53398,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53403,"byte_end":53410,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53415,"byte_end":53439,"line_start":140,"line_end":140,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53444,"byte_end":53447,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = *b\"foo\\xFFbar\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53452,"byte_end":53487,"line_start":142,"line_end":142,"column_start":5,"column_end":40}},{"value":"/ println!(\"{:?}\", &mut bytes.as_bstr_mut());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53492,"byte_end":53539,"line_start":143,"line_end":143,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53544,"byte_end":53551,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53556,"byte_end":53565,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54428,"byte_end":54439,"line_start":173,"line_end":173,"column_start":8,"column_end":19},"name":"from_os_str","qualname":"::ext_slice::ByteSlice::from_os_str","value":"pub fn from_os_str(&OsStr) -> Option<&[u8]>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Create an immutable byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from an OS string slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53665,"byte_end":53725,"line_start":150,"line_end":150,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53730,"byte_end":53733,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53738,"byte_end":53810,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given OS string is not valid UTF-8. (For","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53815,"byte_end":53886,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ example, on Windows, file paths are allowed to be a sequence of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53891,"byte_end":53958,"line_start":154,"line_end":154,"column_start":5,"column_end":72}},{"value":"/ arbitrary 16-bit integers. Not all such sequences can be transcoded to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":53963,"byte_end":54037,"line_start":155,"line_end":155,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54042,"byte_end":54059,"line_start":156,"line_end":156,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54064,"byte_end":54067,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54072,"byte_end":54086,"line_start":158,"line_end":158,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54091,"byte_end":54094,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54099,"byte_end":54115,"line_start":160,"line_end":160,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54120,"byte_end":54123,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54128,"byte_end":54135,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54140,"byte_end":54164,"line_start":163,"line_end":163,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54169,"byte_end":54172,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54177,"byte_end":54206,"line_start":165,"line_end":165,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54211,"byte_end":54214,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54219,"byte_end":54254,"line_start":167,"line_end":167,"column_start":5,"column_end":40}},{"value":"/ let bs = <[u8]>::from_os_str(os_str).expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54259,"byte_end":54332,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54337,"byte_end":54366,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54371,"byte_end":54378,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54383,"byte_end":54406,"line_start":171,"line_end":171,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54411,"byte_end":54420,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55580,"byte_end":55589,"line_start":213,"line_end":213,"column_start":8,"column_end":17},"name":"from_path","qualname":"::ext_slice::ByteSlice::from_path","value":"pub fn from_path(&Path) -> Option<&[u8]>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Create an immutable byte string from a file path.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from a file path.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54844,"byte_end":54897,"line_start":191,"line_end":191,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54902,"byte_end":54905,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54910,"byte_end":54982,"line_start":193,"line_end":193,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given path is not valid UTF-8. (For example,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":54987,"byte_end":55062,"line_start":194,"line_end":194,"column_start":5,"column_end":80}},{"value":"/ on Windows, file paths are allowed to be a sequence of arbitrary 16-bit","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55067,"byte_end":55142,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/ integers. Not all such sequences can be transcoded to valid UTF-8.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55147,"byte_end":55218,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55223,"byte_end":55226,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55231,"byte_end":55245,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55250,"byte_end":55253,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55258,"byte_end":55274,"line_start":200,"line_end":200,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55279,"byte_end":55282,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55287,"byte_end":55294,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55299,"byte_end":55323,"line_start":203,"line_end":203,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55328,"byte_end":55331,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55336,"byte_end":55365,"line_start":205,"line_end":205,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55370,"byte_end":55373,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55378,"byte_end":55410,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/ let bs = <[u8]>::from_path(path).expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55415,"byte_end":55484,"line_start":208,"line_end":208,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55489,"byte_end":55518,"line_start":209,"line_end":209,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55523,"byte_end":55530,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55535,"byte_end":55558,"line_start":211,"line_end":211,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55563,"byte_end":55572,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56709,"byte_end":56715,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"to_str","qualname":"::ext_slice::ByteSlice::to_str","value":"pub fn to_str(&Self) -> Result<&str, Utf8Error>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Safely convert this byte string into a `&str` if it's valid UTF-8.","sig":null,"attributes":[{"value":"/ Safely convert this byte string into a `&str` if it's valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55677,"byte_end":55747,"line_start":217,"line_end":217,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55752,"byte_end":55755,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error is returned. The","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55760,"byte_end":55834,"line_start":219,"line_end":219,"column_start":5,"column_end":79}},{"value":"/ error returned indicates the first invalid byte found and the length","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55839,"byte_end":55911,"line_start":220,"line_end":220,"column_start":5,"column_end":77}},{"value":"/ of the error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55916,"byte_end":55933,"line_start":221,"line_end":221,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55938,"byte_end":55941,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ In cases where a lossy conversion to `&str` is acceptable, then use one","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":55946,"byte_end":56021,"line_start":223,"line_end":223,"column_start":5,"column_end":80}},{"value":"/ of the [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56026,"byte_end":56098,"line_start":224,"line_end":224,"column_start":5,"column_end":77}},{"value":"/ [`to_str_lossy_into`](trait.ByteSlice.html#method.to_str_lossy_into)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56103,"byte_end":56175,"line_start":225,"line_end":225,"column_start":5,"column_end":77}},{"value":"/ methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56180,"byte_end":56192,"line_start":226,"line_end":226,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56197,"byte_end":56200,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56205,"byte_end":56219,"line_start":228,"line_end":228,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56224,"byte_end":56227,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56232,"byte_end":56248,"line_start":230,"line_end":230,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56253,"byte_end":56256,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56261,"byte_end":56268,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56273,"byte_end":56311,"line_start":233,"line_end":233,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56316,"byte_end":56319,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), bstr::Utf8Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56324,"byte_end":56375,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"/ let s = B(\"☃βツ\").to_str()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56380,"byte_end":56416,"line_start":236,"line_end":236,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56421,"byte_end":56451,"line_start":237,"line_end":237,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56456,"byte_end":56459,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56464,"byte_end":56514,"line_start":239,"line_end":239,"column_start":5,"column_end":50}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56519,"byte_end":56545,"line_start":240,"line_end":240,"column_start":5,"column_end":31}},{"value":"/ let err = bstring.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56550,"byte_end":56594,"line_start":241,"line_end":241,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(8, err.valid_up_to());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56599,"byte_end":56636,"line_start":242,"line_end":242,"column_start":5,"column_end":42}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56641,"byte_end":56675,"line_start":243,"line_end":243,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56680,"byte_end":56687,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56692,"byte_end":56701,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58004,"byte_end":58020,"line_start":281,"line_end":281,"column_start":15,"column_end":31},"name":"to_str_unchecked","qualname":"::ext_slice::ByteSlice::to_str_unchecked","value":"pub unsafe fn to_str_unchecked(&Self) -> &str","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `&str`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `&str`, without checking for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":56994,"byte_end":57067,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57072,"byte_end":57088,"line_start":255,"line_end":255,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57093,"byte_end":57096,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57101,"byte_end":57113,"line_start":257,"line_end":257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57118,"byte_end":57121,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57126,"byte_end":57195,"line_start":259,"line_end":259,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `&str` that is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57200,"byte_end":57271,"line_start":260,"line_end":260,"column_start":5,"column_end":76}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57276,"byte_end":57329,"line_start":261,"line_end":261,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57334,"byte_end":57337,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57342,"byte_end":57412,"line_start":263,"line_end":263,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57417,"byte_end":57481,"line_start":264,"line_end":264,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57486,"byte_end":57557,"line_start":265,"line_end":265,"column_start":5,"column_end":76}},{"value":"/ that [`to_str`](trait.ByteSlice.html#method.to_str) performs.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57562,"byte_end":57627,"line_start":266,"line_end":266,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57632,"byte_end":57635,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57640,"byte_end":57654,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57659,"byte_end":57662,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57667,"byte_end":57683,"line_start":270,"line_end":270,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57688,"byte_end":57691,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57696,"byte_end":57703,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57708,"byte_end":57737,"line_start":273,"line_end":273,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57742,"byte_end":57745,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57750,"byte_end":57822,"line_start":275,"line_end":275,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57827,"byte_end":57867,"line_start":276,"line_end":276,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { B(\"☃βツ\").to_str_unchecked() };","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57872,"byte_end":57928,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57933,"byte_end":57963,"line_start":278,"line_end":278,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57968,"byte_end":57975,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":57980,"byte_end":57989,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60906,"byte_end":60918,"line_start":346,"line_end":346,"column_start":8,"column_end":20},"name":"to_str_lossy","qualname":"::ext_slice::ByteSlice::to_str_lossy","value":"pub fn to_str_lossy(&Self) -> Cow<, str>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Convert this byte string to a valid UTF-8 string by replacing invalid\n UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Convert this byte string to a valid UTF-8 string by replacing invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58099,"byte_end":58172,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/ UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58177,"byte_end":58243,"line_start":286,"line_end":286,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58248,"byte_end":58251,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ If the byte string is already valid UTF-8, then no copying or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58256,"byte_end":58321,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/ allocation is performed and a borrrowed string slice is returned. If","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58326,"byte_end":58398,"line_start":289,"line_end":289,"column_start":5,"column_end":77}},{"value":"/ the byte string is not valid UTF-8, then an owned string buffer is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58403,"byte_end":58473,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ returned with invalid bytes replaced by the replacement codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58478,"byte_end":58548,"line_start":291,"line_end":291,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58553,"byte_end":58556,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This method uses the \"substitution of maximal subparts\" (Unicode","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58561,"byte_end":58629,"line_start":293,"line_end":293,"column_start":5,"column_end":73}},{"value":"/ Standard, Chapter 3, Section 9) strategy for inserting the replacement","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58634,"byte_end":58708,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ codepoint. Specifically, a replacement codepoint is inserted whenever a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58713,"byte_end":58788,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ byte is found that cannot possibly lead to a valid code unit sequence.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58793,"byte_end":58867,"line_start":296,"line_end":296,"column_start":5,"column_end":79}},{"value":"/ If there were previous bytes that represented a prefix of a well-formed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58872,"byte_end":58947,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ code unit sequence, then all of those bytes are substituted with a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":58952,"byte_end":59022,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/ single replacement codepoint. The \"substitution of maximal subparts\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59027,"byte_end":59099,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ strategy is the same strategy used by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59104,"byte_end":59145,"line_start":300,"line_end":300,"column_start":5,"column_end":46}},{"value":"/ [W3C's Encoding standard](https://www.w3.org/TR/encoding/).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59150,"byte_end":59213,"line_start":301,"line_end":301,"column_start":5,"column_end":68}},{"value":"/ For a more precise description of the maximal subpart strategy, see","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59218,"byte_end":59289,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/ the Unicode Standard, Chapter 3, Section 9. See also","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59294,"byte_end":59350,"line_start":303,"line_end":303,"column_start":5,"column_end":61}},{"value":"/ [Public Review Issue #121](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59355,"byte_end":59429,"line_start":304,"line_end":304,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59434,"byte_end":59437,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ N.B. Rust's standard library also appears to use the same strategy,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59442,"byte_end":59513,"line_start":306,"line_end":306,"column_start":5,"column_end":76}},{"value":"/ but it does not appear to be an API guarantee.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59518,"byte_end":59568,"line_start":307,"line_end":307,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59573,"byte_end":59576,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59581,"byte_end":59595,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59600,"byte_end":59603,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59608,"byte_end":59624,"line_start":311,"line_end":311,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59629,"byte_end":59632,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59637,"byte_end":59644,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59649,"byte_end":59674,"line_start":314,"line_end":314,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59679,"byte_end":59682,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59687,"byte_end":59711,"line_start":316,"line_end":316,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59716,"byte_end":59719,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59724,"byte_end":59774,"line_start":318,"line_end":318,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\"), bstring.to_str_lossy());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59779,"byte_end":59845,"line_start":319,"line_end":319,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59850,"byte_end":59853,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59858,"byte_end":59908,"line_start":321,"line_end":321,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59913,"byte_end":59939,"line_start":322,"line_end":322,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\\u{FFFD}\"), bstring.to_str_lossy());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":59944,"byte_end":60018,"line_start":323,"line_end":323,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60023,"byte_end":60030,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60035,"byte_end":60038,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ This demonstrates the \"maximal subpart\" substitution logic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60043,"byte_end":60106,"line_start":326,"line_end":326,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60111,"byte_end":60114,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60119,"byte_end":60126,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60131,"byte_end":60160,"line_start":329,"line_end":329,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60165,"byte_end":60168,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ // \\x61 is the ASCII codepoint for 'a'.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60173,"byte_end":60216,"line_start":331,"line_end":331,"column_start":5,"column_end":48}},{"value":"/ // \\xF1\\x80\\x80 is a valid 3-byte code unit prefix.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60221,"byte_end":60276,"line_start":332,"line_end":332,"column_start":5,"column_end":60}},{"value":"/ // \\xE1\\x80 is a valid 2-byte code unit prefix.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60281,"byte_end":60332,"line_start":333,"line_end":333,"column_start":5,"column_end":56}},{"value":"/ // \\xC2 is a valid 1-byte code unit prefix.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60337,"byte_end":60384,"line_start":334,"line_end":334,"column_start":5,"column_end":52}},{"value":"/ // \\x62 is the ASCII codepoint for 'b'.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60389,"byte_end":60432,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/ //","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60437,"byte_end":60443,"line_start":336,"line_end":336,"column_start":5,"column_end":11}},{"value":"/ // In sum, each of the prefixes is replaced by a single replacement","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60448,"byte_end":60519,"line_start":337,"line_end":337,"column_start":5,"column_end":76}},{"value":"/ // codepoint since none of the prefixes are properly completed. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60524,"byte_end":60596,"line_start":338,"line_end":338,"column_start":5,"column_end":77}},{"value":"/ // is in contrast to other strategies that might insert a replacement","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60601,"byte_end":60674,"line_start":339,"line_end":339,"column_start":5,"column_end":78}},{"value":"/ // codepoint for every single byte.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60679,"byte_end":60718,"line_start":340,"line_end":340,"column_start":5,"column_end":44}},{"value":"/ let bs = B(b\"\\x61\\xF1\\x80\\x80\\xE1\\x80\\xC2\\x62\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60723,"byte_end":60775,"line_start":341,"line_end":341,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(\"a\\u{FFFD}\\u{FFFD}\\u{FFFD}b\", bs.to_str_lossy());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60780,"byte_end":60844,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60849,"byte_end":60856,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60861,"byte_end":60884,"line_start":344,"line_end":344,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":60889,"byte_end":60898,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":63081,"byte_end":63098,"line_start":403,"line_end":403,"column_start":8,"column_end":25},"name":"to_str_lossy_into","qualname":"::ext_slice::ByteSlice::to_str_lossy_into","value":"pub fn to_str_lossy_into(&Self, &mut String)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Copy the contents of this byte string into the given owned string\n buffer, while replacing invalid UTF-8 code unit sequences with the\n Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Copy the contents of this byte string into the given owned string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":61922,"byte_end":61991,"line_start":371,"line_end":371,"column_start":5,"column_end":74}},{"value":"/ buffer, while replacing invalid UTF-8 code unit sequences with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":61996,"byte_end":62066,"line_start":372,"line_end":372,"column_start":5,"column_end":75}},{"value":"/ Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62071,"byte_end":62116,"line_start":373,"line_end":373,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62121,"byte_end":62124,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ This method uses the same \"substitution of maximal subparts\" strategy","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62129,"byte_end":62202,"line_start":375,"line_end":375,"column_start":5,"column_end":78}},{"value":"/ for inserting the replacement codepoint as the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62207,"byte_end":62257,"line_start":376,"line_end":376,"column_start":5,"column_end":55}},{"value":"/ [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62262,"byte_end":62332,"line_start":377,"line_end":377,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62337,"byte_end":62340,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for amortizing allocation. However, unlike","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62345,"byte_end":62414,"line_start":379,"line_end":379,"column_start":5,"column_end":74}},{"value":"/ `to_str_lossy`, this routine will _always_ copy the contents of this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62419,"byte_end":62491,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ byte string into the destination buffer, even if this byte string is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62496,"byte_end":62568,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62573,"byte_end":62589,"line_start":382,"line_end":382,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62594,"byte_end":62597,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62602,"byte_end":62616,"line_start":384,"line_end":384,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62621,"byte_end":62624,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62629,"byte_end":62645,"line_start":386,"line_end":386,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62650,"byte_end":62653,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62658,"byte_end":62665,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62670,"byte_end":62695,"line_start":389,"line_end":389,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62700,"byte_end":62703,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62708,"byte_end":62732,"line_start":391,"line_end":391,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62737,"byte_end":62740,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62745,"byte_end":62795,"line_start":393,"line_end":393,"column_start":5,"column_end":50}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62800,"byte_end":62850,"line_start":394,"line_end":394,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62855,"byte_end":62881,"line_start":395,"line_end":395,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62886,"byte_end":62889,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ let mut dest = String::new();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62894,"byte_end":62927,"line_start":397,"line_end":397,"column_start":5,"column_end":38}},{"value":"/ bstring.to_str_lossy_into(&mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62932,"byte_end":62973,"line_start":398,"line_end":398,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(\"☃βツ\\u{FFFD}\", dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":62978,"byte_end":63019,"line_start":399,"line_end":399,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":63024,"byte_end":63031,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":63036,"byte_end":63059,"line_start":401,"line_end":401,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":63064,"byte_end":63073,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64892,"byte_end":64901,"line_start":450,"line_end":450,"column_start":8,"column_end":17},"name":"to_os_str","qualname":"::ext_slice::ByteSlice::to_os_str","value":"pub fn to_os_str(&Self) -> Result<&OsStr, Utf8Error>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Create an OS string slice from this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64136,"byte_end":64188,"line_start":429,"line_end":429,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64193,"byte_end":64196,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64201,"byte_end":64273,"line_start":431,"line_end":431,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64278,"byte_end":64350,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64355,"byte_end":64422,"line_start":433,"line_end":433,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64427,"byte_end":64502,"line_start":434,"line_end":434,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64507,"byte_end":64578,"line_start":435,"line_end":435,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64583,"byte_end":64604,"line_start":436,"line_end":436,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64609,"byte_end":64612,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64617,"byte_end":64631,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64636,"byte_end":64639,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64644,"byte_end":64660,"line_start":440,"line_end":440,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64665,"byte_end":64668,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64673,"byte_end":64680,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64685,"byte_end":64714,"line_start":443,"line_end":443,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64719,"byte_end":64722,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\".to_os_str().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64727,"byte_end":64795,"line_start":445,"line_end":445,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(os_str, \"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64800,"byte_end":64830,"line_start":446,"line_end":446,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64835,"byte_end":64842,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64847,"byte_end":64870,"line_start":448,"line_end":448,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":64875,"byte_end":64884,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66116,"byte_end":66131,"line_start":490,"line_end":490,"column_start":8,"column_end":23},"name":"to_os_str_lossy","qualname":"::ext_slice::ByteSlice::to_os_str_lossy","value":"pub fn to_os_str_lossy(&Self) -> Cow<, OsStr>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Lossily create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create an OS string slice from this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65336,"byte_end":65396,"line_start":468,"line_end":468,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65401,"byte_end":65404,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65409,"byte_end":65481,"line_start":470,"line_end":470,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65486,"byte_end":65558,"line_start":471,"line_end":471,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65563,"byte_end":65624,"line_start":472,"line_end":472,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65629,"byte_end":65632,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65637,"byte_end":65710,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65715,"byte_end":65786,"line_start":475,"line_end":475,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65791,"byte_end":65823,"line_start":476,"line_end":476,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65828,"byte_end":65831,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65836,"byte_end":65850,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65855,"byte_end":65858,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65863,"byte_end":65879,"line_start":480,"line_end":480,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65884,"byte_end":65887,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65892,"byte_end":65899,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65904,"byte_end":65928,"line_start":483,"line_end":483,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65933,"byte_end":65936,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\\xFFbar\".to_os_str_lossy();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65941,"byte_end":65990,"line_start":485,"line_end":485,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":65995,"byte_end":66054,"line_start":486,"line_end":486,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66059,"byte_end":66066,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66071,"byte_end":66094,"line_start":488,"line_end":488,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66099,"byte_end":66108,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67470,"byte_end":67477,"line_start":534,"line_end":534,"column_start":8,"column_end":15},"name":"to_path","qualname":"::ext_slice::ByteSlice::to_path","value":"pub fn to_path(&Self) -> Result<&Path, Utf8Error>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Create a path slice from this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66719,"byte_end":66765,"line_start":513,"line_end":513,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66770,"byte_end":66773,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66778,"byte_end":66850,"line_start":515,"line_end":515,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66855,"byte_end":66927,"line_start":516,"line_end":516,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":66932,"byte_end":66999,"line_start":517,"line_end":517,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67004,"byte_end":67079,"line_start":518,"line_end":518,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67084,"byte_end":67155,"line_start":519,"line_end":519,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67160,"byte_end":67181,"line_start":520,"line_end":520,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67186,"byte_end":67189,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67194,"byte_end":67208,"line_start":522,"line_end":522,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67213,"byte_end":67216,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67221,"byte_end":67237,"line_start":524,"line_end":524,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67242,"byte_end":67245,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67250,"byte_end":67257,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67262,"byte_end":67286,"line_start":527,"line_end":527,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67291,"byte_end":67294,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ let path = b\"foo\".to_path().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67299,"byte_end":67363,"line_start":529,"line_end":529,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67368,"byte_end":67408,"line_start":530,"line_end":530,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67413,"byte_end":67420,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67425,"byte_end":67448,"line_start":532,"line_end":532,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67453,"byte_end":67462,"line_start":533,"line_end":533,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68355,"byte_end":68368,"line_start":561,"line_end":561,"column_start":8,"column_end":21},"name":"to_path_lossy","qualname":"::ext_slice::ByteSlice::to_path_lossy","value":"pub fn to_path_lossy(&Self) -> Cow<, Path>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Lossily create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create a path slice from this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67566,"byte_end":67620,"line_start":538,"line_end":538,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67625,"byte_end":67628,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67633,"byte_end":67705,"line_start":540,"line_end":540,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67710,"byte_end":67782,"line_start":541,"line_end":541,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67787,"byte_end":67848,"line_start":542,"line_end":542,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67853,"byte_end":67856,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67861,"byte_end":67934,"line_start":544,"line_end":544,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":67939,"byte_end":68010,"line_start":545,"line_end":545,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68015,"byte_end":68047,"line_start":546,"line_end":546,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68052,"byte_end":68055,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68060,"byte_end":68074,"line_start":548,"line_end":548,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68079,"byte_end":68082,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68087,"byte_end":68103,"line_start":550,"line_end":550,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68108,"byte_end":68111,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68116,"byte_end":68123,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68128,"byte_end":68152,"line_start":553,"line_end":553,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68157,"byte_end":68160,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foo\\xFFbar\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68165,"byte_end":68192,"line_start":555,"line_end":555,"column_start":5,"column_end":32}},{"value":"/ let path = bs.to_path_lossy();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68197,"byte_end":68231,"line_start":556,"line_end":556,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68236,"byte_end":68293,"line_start":557,"line_end":557,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68298,"byte_end":68305,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68310,"byte_end":68333,"line_start":559,"line_end":559,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68338,"byte_end":68347,"line_start":560,"line_end":560,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69086,"byte_end":69093,"line_start":589,"line_end":589,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::ext_slice::ByteSlice::repeatn","value":"pub fn repeatn(&Self, usize) -> Vec<u8>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Create a new byte string by repeating this byte string `n` times.","sig":null,"attributes":[{"value":"/ Create a new byte string by repeating this byte string `n` times.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68608,"byte_end":68677,"line_start":570,"line_end":570,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68682,"byte_end":68685,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68690,"byte_end":68702,"line_start":572,"line_end":572,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68707,"byte_end":68710,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ This function panics if the capacity of the new byte string would","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68715,"byte_end":68784,"line_start":574,"line_end":574,"column_start":5,"column_end":74}},{"value":"/ overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68789,"byte_end":68802,"line_start":575,"line_end":575,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68807,"byte_end":68810,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68815,"byte_end":68829,"line_start":577,"line_end":577,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68834,"byte_end":68837,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68842,"byte_end":68858,"line_start":579,"line_end":579,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68863,"byte_end":68866,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68871,"byte_end":68878,"line_start":581,"line_end":581,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68883,"byte_end":68912,"line_start":582,"line_end":582,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68917,"byte_end":68920,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo\".repeatn(4), B(\"foofoofoofoo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68925,"byte_end":68978,"line_start":584,"line_end":584,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(b\"foo\".repeatn(0), B(\"\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":68983,"byte_end":69024,"line_start":585,"line_end":585,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69029,"byte_end":69036,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69041,"byte_end":69064,"line_start":587,"line_end":587,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69069,"byte_end":69078,"line_start":588,"line_end":588,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69700,"byte_end":69712,"line_start":612,"line_end":612,"column_start":8,"column_end":20},"name":"contains_str","qualname":"::ext_slice::ByteSlice::contains_str","value":"pub fn contains_str<B: AsRef<[u8]>>(&Self, B) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string contains the given needle.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string contains the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69331,"byte_end":69406,"line_start":598,"line_end":598,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69411,"byte_end":69414,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69419,"byte_end":69433,"line_start":600,"line_end":600,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69438,"byte_end":69441,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69446,"byte_end":69462,"line_start":602,"line_end":602,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69467,"byte_end":69470,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69475,"byte_end":69482,"line_start":604,"line_end":604,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69487,"byte_end":69511,"line_start":605,"line_end":605,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69516,"byte_end":69519,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".contains_str(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69524,"byte_end":69568,"line_start":607,"line_end":607,"column_start":5,"column_end":49}},{"value":"/ assert!(b\"foo bar\".contains_str(\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69573,"byte_end":69617,"line_start":608,"line_end":608,"column_start":5,"column_end":49}},{"value":"/ assert!(!b\"foo\".contains_str(\"foobar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69622,"byte_end":69666,"line_start":609,"line_end":609,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69671,"byte_end":69678,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69683,"byte_end":69692,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70178,"byte_end":70193,"line_start":630,"line_end":630,"column_start":8,"column_end":23},"name":"starts_with_str","qualname":"::ext_slice::ByteSlice::starts_with_str","value":"pub fn starts_with_str<B: AsRef<[u8]>>(&Self, B) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given prefix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given prefix.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69804,"byte_end":69874,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69879,"byte_end":69882,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69887,"byte_end":69901,"line_start":618,"line_end":618,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69906,"byte_end":69909,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69914,"byte_end":69930,"line_start":620,"line_end":620,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69935,"byte_end":69938,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69943,"byte_end":69950,"line_start":622,"line_end":622,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69955,"byte_end":69979,"line_start":623,"line_end":623,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69984,"byte_end":69987,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".starts_with_str(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":69992,"byte_end":70039,"line_start":625,"line_end":625,"column_start":5,"column_end":52}},{"value":"/ assert!(!b\"foo bar\".starts_with_str(\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70044,"byte_end":70092,"line_start":626,"line_end":626,"column_start":5,"column_end":53}},{"value":"/ assert!(!b\"foo\".starts_with_str(\"foobar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70097,"byte_end":70144,"line_start":627,"line_end":627,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70149,"byte_end":70156,"line_start":628,"line_end":628,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70161,"byte_end":70170,"line_start":629,"line_end":629,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70670,"byte_end":70683,"line_start":648,"line_end":648,"column_start":8,"column_end":21},"name":"ends_with_str","qualname":"::ext_slice::ByteSlice::ends_with_str","value":"pub fn ends_with_str<B: AsRef<[u8]>>(&Self, B) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given suffix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given suffix.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70302,"byte_end":70372,"line_start":634,"line_end":634,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70377,"byte_end":70380,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70385,"byte_end":70399,"line_start":636,"line_end":636,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70404,"byte_end":70407,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70412,"byte_end":70428,"line_start":638,"line_end":638,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70433,"byte_end":70436,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70441,"byte_end":70448,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70453,"byte_end":70477,"line_start":641,"line_end":641,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70482,"byte_end":70485,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".ends_with_str(\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70490,"byte_end":70535,"line_start":643,"line_end":643,"column_start":5,"column_end":50}},{"value":"/ assert!(!b\"foo bar\".ends_with_str(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70540,"byte_end":70586,"line_start":644,"line_end":644,"column_start":5,"column_end":51}},{"value":"/ assert!(!b\"bar\".ends_with_str(\"foobar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70591,"byte_end":70636,"line_start":645,"line_end":645,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70641,"byte_end":70648,"line_start":646,"line_end":646,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70653,"byte_end":70662,"line_start":647,"line_end":647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71886,"byte_end":71890,"line_start":683,"line_end":683,"column_start":8,"column_end":12},"name":"find","qualname":"::ext_slice::ByteSlice::find","value":"pub fn find<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70790,"byte_end":70856,"line_start":652,"line_end":652,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70861,"byte_end":70864,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70869,"byte_end":70936,"line_start":654,"line_end":654,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":70941,"byte_end":71011,"line_start":655,"line_end":655,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71016,"byte_end":71019,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71024,"byte_end":71089,"line_start":657,"line_end":657,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71094,"byte_end":71157,"line_start":658,"line_end":658,"column_start":5,"column_end":68}},{"value":"/ [`Finder`](struct.Finder.html) once, and reuse it for each search.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71162,"byte_end":71232,"line_start":659,"line_end":659,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71237,"byte_end":71240,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71245,"byte_end":71261,"line_start":661,"line_end":661,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71266,"byte_end":71269,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71274,"byte_end":71346,"line_start":663,"line_end":663,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71351,"byte_end":71423,"line_start":664,"line_end":664,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71428,"byte_end":71475,"line_start":665,"line_end":665,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71480,"byte_end":71483,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71488,"byte_end":71557,"line_start":667,"line_end":667,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71562,"byte_end":71577,"line_start":668,"line_end":668,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71582,"byte_end":71585,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71590,"byte_end":71604,"line_start":670,"line_end":670,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71609,"byte_end":71612,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71617,"byte_end":71633,"line_start":672,"line_end":672,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71638,"byte_end":71641,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71646,"byte_end":71653,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71658,"byte_end":71682,"line_start":675,"line_end":675,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71687,"byte_end":71690,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71695,"byte_end":71722,"line_start":677,"line_end":677,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.find(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71727,"byte_end":71766,"line_start":678,"line_end":678,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(4), s.find(\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71771,"byte_end":71810,"line_start":679,"line_end":679,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.find(\"quux\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71815,"byte_end":71852,"line_start":680,"line_end":680,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71857,"byte_end":71864,"line_start":681,"line_end":681,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":71869,"byte_end":71878,"line_start":682,"line_end":682,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73178,"byte_end":73183,"line_start":720,"line_end":720,"column_start":8,"column_end":13},"name":"rfind","qualname":"::ext_slice::ByteSlice::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72014,"byte_end":72079,"line_start":687,"line_end":687,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72084,"byte_end":72087,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72092,"byte_end":72159,"line_start":689,"line_end":689,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72164,"byte_end":72234,"line_start":690,"line_end":690,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72239,"byte_end":72242,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72247,"byte_end":72312,"line_start":692,"line_end":692,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72317,"byte_end":72380,"line_start":693,"line_end":693,"column_start":5,"column_end":68}},{"value":"/ [`FinderReverse`](struct.FinderReverse.html) once, and reuse it for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72385,"byte_end":72456,"line_start":694,"line_end":694,"column_start":5,"column_end":76}},{"value":"/ each search.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72461,"byte_end":72477,"line_start":695,"line_end":695,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72482,"byte_end":72485,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72490,"byte_end":72506,"line_start":697,"line_end":697,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72511,"byte_end":72514,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72519,"byte_end":72591,"line_start":699,"line_end":699,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72596,"byte_end":72668,"line_start":700,"line_end":700,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72673,"byte_end":72720,"line_start":701,"line_end":701,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72725,"byte_end":72728,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72733,"byte_end":72802,"line_start":703,"line_end":703,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72807,"byte_end":72822,"line_start":704,"line_end":704,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72827,"byte_end":72830,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72835,"byte_end":72849,"line_start":706,"line_end":706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72854,"byte_end":72857,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72862,"byte_end":72878,"line_start":708,"line_end":708,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72883,"byte_end":72886,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72891,"byte_end":72898,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72903,"byte_end":72927,"line_start":711,"line_end":711,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72932,"byte_end":72935,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72940,"byte_end":72967,"line_start":713,"line_end":713,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.rfind(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":72972,"byte_end":73012,"line_start":714,"line_end":714,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(4), s.rfind(\"bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73017,"byte_end":73057,"line_start":715,"line_end":715,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(8), s.rfind(\"ba\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73062,"byte_end":73101,"line_start":716,"line_end":716,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.rfind(\"quux\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73106,"byte_end":73144,"line_start":717,"line_end":717,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73149,"byte_end":73156,"line_start":718,"line_end":718,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73161,"byte_end":73170,"line_start":719,"line_end":719,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74556,"byte_end":74565,"line_start":762,"line_end":762,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::ext_slice::ByteSlice::find_iter","value":"pub fn find_iter<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B) -> Find","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle. The iterator yields byte offset positions indicating the start\n of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73315,"byte_end":73386,"line_start":724,"line_end":724,"column_start":5,"column_end":76}},{"value":"/ needle. The iterator yields byte offset positions indicating the start","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73391,"byte_end":73465,"line_start":725,"line_end":725,"column_start":5,"column_end":79}},{"value":"/ of each match.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73470,"byte_end":73488,"line_start":726,"line_end":726,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73493,"byte_end":73496,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73501,"byte_end":73517,"line_start":728,"line_end":728,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73522,"byte_end":73525,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73530,"byte_end":73602,"line_start":730,"line_end":730,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73607,"byte_end":73679,"line_start":731,"line_end":731,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73684,"byte_end":73731,"line_start":732,"line_end":732,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73736,"byte_end":73739,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73744,"byte_end":73813,"line_start":734,"line_end":734,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73818,"byte_end":73833,"line_start":735,"line_end":735,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73838,"byte_end":73841,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73846,"byte_end":73860,"line_start":737,"line_end":737,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73865,"byte_end":73868,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73873,"byte_end":73889,"line_start":739,"line_end":739,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73894,"byte_end":73897,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73902,"byte_end":73909,"line_start":741,"line_end":741,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73914,"byte_end":73938,"line_start":742,"line_end":742,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73943,"byte_end":73946,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73951,"byte_end":73991,"line_start":744,"line_end":744,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.find_iter(\"foo\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":73996,"byte_end":74055,"line_start":745,"line_end":745,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0, 8, 12, 21]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74060,"byte_end":74104,"line_start":746,"line_end":746,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74109,"byte_end":74116,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74121,"byte_end":74124,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74129,"byte_end":74198,"line_start":749,"line_end":749,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74203,"byte_end":74243,"line_start":750,"line_end":750,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74248,"byte_end":74251,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74256,"byte_end":74263,"line_start":752,"line_end":752,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74268,"byte_end":74292,"line_start":753,"line_end":753,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74297,"byte_end":74300,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".find_iter(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74305,"byte_end":74366,"line_start":755,"line_end":755,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(matches, vec![0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74371,"byte_end":74413,"line_start":756,"line_end":756,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74418,"byte_end":74421,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".find_iter(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74426,"byte_end":74484,"line_start":758,"line_end":758,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74489,"byte_end":74522,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74527,"byte_end":74534,"line_start":760,"line_end":760,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74539,"byte_end":74548,"line_start":761,"line_end":761,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75975,"byte_end":75985,"line_start":807,"line_end":807,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::ext_slice::ByteSlice::rfind_iter","value":"pub fn rfind_iter<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B) -> FindReverse","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle in reverse. The iterator yields byte offset positions indicating\n the start of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74720,"byte_end":74791,"line_start":769,"line_end":769,"column_start":5,"column_end":76}},{"value":"/ needle in reverse. The iterator yields byte offset positions indicating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74796,"byte_end":74871,"line_start":770,"line_end":770,"column_start":5,"column_end":80}},{"value":"/ the start of each match.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74876,"byte_end":74904,"line_start":771,"line_end":771,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74909,"byte_end":74912,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74917,"byte_end":74933,"line_start":773,"line_end":773,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74938,"byte_end":74941,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":74946,"byte_end":75018,"line_start":775,"line_end":775,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75023,"byte_end":75095,"line_start":776,"line_end":776,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75100,"byte_end":75147,"line_start":777,"line_end":777,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75152,"byte_end":75155,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75160,"byte_end":75229,"line_start":779,"line_end":779,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75234,"byte_end":75249,"line_start":780,"line_end":780,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75254,"byte_end":75257,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75262,"byte_end":75276,"line_start":782,"line_end":782,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75281,"byte_end":75284,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75289,"byte_end":75305,"line_start":784,"line_end":784,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75310,"byte_end":75313,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75318,"byte_end":75325,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75330,"byte_end":75354,"line_start":787,"line_end":787,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75359,"byte_end":75362,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75367,"byte_end":75407,"line_start":789,"line_end":789,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.rfind_iter(\"foo\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75412,"byte_end":75472,"line_start":790,"line_end":790,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(matches, vec![21, 12, 8, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75477,"byte_end":75521,"line_start":791,"line_end":791,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75526,"byte_end":75533,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75538,"byte_end":75541,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75546,"byte_end":75615,"line_start":794,"line_end":794,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75620,"byte_end":75660,"line_start":795,"line_end":795,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75665,"byte_end":75668,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75673,"byte_end":75680,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75685,"byte_end":75709,"line_start":798,"line_end":798,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75714,"byte_end":75717,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".rfind_iter(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75722,"byte_end":75784,"line_start":800,"line_end":800,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(matches, vec![3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75789,"byte_end":75831,"line_start":801,"line_end":801,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75836,"byte_end":75839,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".rfind_iter(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75844,"byte_end":75903,"line_start":803,"line_end":803,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75908,"byte_end":75941,"line_start":804,"line_end":804,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75946,"byte_end":75953,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":75958,"byte_end":75967,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76566,"byte_end":76575,"line_start":828,"line_end":828,"column_start":8,"column_end":17},"name":"find_byte","qualname":"::ext_slice::ByteSlice::find_byte","value":"pub fn find_byte(&Self, u8) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given byte. If the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76154,"byte_end":76225,"line_start":814,"line_end":814,"column_start":5,"column_end":76}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76230,"byte_end":76299,"line_start":815,"line_end":815,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76304,"byte_end":76307,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76312,"byte_end":76326,"line_start":817,"line_end":817,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76331,"byte_end":76334,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76339,"byte_end":76355,"line_start":819,"line_end":819,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76360,"byte_end":76363,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76368,"byte_end":76375,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76380,"byte_end":76404,"line_start":822,"line_end":822,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76409,"byte_end":76412,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_byte(b'z'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76417,"byte_end":76474,"line_start":824,"line_end":824,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_byte(b'y'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76479,"byte_end":76532,"line_start":825,"line_end":825,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76537,"byte_end":76544,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76549,"byte_end":76558,"line_start":827,"line_end":827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77074,"byte_end":77084,"line_start":846,"line_end":846,"column_start":8,"column_end":18},"name":"rfind_byte","qualname":"::ext_slice::ByteSlice::rfind_byte","value":"pub fn rfind_byte(&Self, u8) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given byte. If the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76661,"byte_end":76731,"line_start":832,"line_end":832,"column_start":5,"column_end":75}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76736,"byte_end":76805,"line_start":833,"line_end":833,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76810,"byte_end":76813,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76818,"byte_end":76832,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76837,"byte_end":76840,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76845,"byte_end":76861,"line_start":837,"line_end":837,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76866,"byte_end":76869,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76874,"byte_end":76881,"line_start":839,"line_end":839,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76886,"byte_end":76910,"line_start":840,"line_end":840,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76915,"byte_end":76918,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_byte(b'z'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76923,"byte_end":76981,"line_start":842,"line_end":842,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_byte(b'y'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":76986,"byte_end":77040,"line_start":843,"line_end":843,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77045,"byte_end":77052,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77057,"byte_end":77066,"line_start":845,"line_end":845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77875,"byte_end":77884,"line_start":870,"line_end":870,"column_start":8,"column_end":17},"name":"find_char","qualname":"::ext_slice::ByteSlice::find_char","value":"pub fn find_char(&Self, char) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77171,"byte_end":77240,"line_start":850,"line_end":850,"column_start":5,"column_end":74}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77245,"byte_end":77316,"line_start":851,"line_end":851,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77321,"byte_end":77334,"line_start":852,"line_end":852,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77339,"byte_end":77342,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77347,"byte_end":77419,"line_start":854,"line_end":854,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77424,"byte_end":77498,"line_start":855,"line_end":855,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77503,"byte_end":77543,"line_start":856,"line_end":856,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77548,"byte_end":77551,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77556,"byte_end":77570,"line_start":858,"line_end":858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77575,"byte_end":77578,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77583,"byte_end":77599,"line_start":860,"line_end":860,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77604,"byte_end":77607,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77612,"byte_end":77619,"line_start":862,"line_end":862,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77624,"byte_end":77653,"line_start":863,"line_end":863,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77658,"byte_end":77661,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_char('z'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77666,"byte_end":77722,"line_start":865,"line_end":865,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Some(4), B(\"αβγγδ\").find_char('γ'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77727,"byte_end":77784,"line_start":866,"line_end":866,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_char('y'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77789,"byte_end":77841,"line_start":867,"line_end":867,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77846,"byte_end":77853,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77858,"byte_end":77867,"line_start":869,"line_end":869,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78685,"byte_end":78695,"line_start":894,"line_end":894,"column_start":8,"column_end":18},"name":"rfind_char","qualname":"::ext_slice::ByteSlice::rfind_char","value":"pub fn rfind_char(&Self, char) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":77979,"byte_end":78047,"line_start":874,"line_end":874,"column_start":5,"column_end":73}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78052,"byte_end":78123,"line_start":875,"line_end":875,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78128,"byte_end":78141,"line_start":876,"line_end":876,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78146,"byte_end":78149,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78154,"byte_end":78226,"line_start":878,"line_end":878,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78231,"byte_end":78305,"line_start":879,"line_end":879,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78310,"byte_end":78350,"line_start":880,"line_end":880,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78355,"byte_end":78358,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78363,"byte_end":78377,"line_start":882,"line_end":882,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78382,"byte_end":78385,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78390,"byte_end":78406,"line_start":884,"line_end":884,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78411,"byte_end":78414,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78419,"byte_end":78426,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78431,"byte_end":78460,"line_start":887,"line_end":887,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78465,"byte_end":78468,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_char('z'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78473,"byte_end":78530,"line_start":889,"line_end":889,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Some(6), B(\"αβγγδ\").rfind_char('γ'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78535,"byte_end":78593,"line_start":890,"line_end":890,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_char('y'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78598,"byte_end":78651,"line_start":891,"line_end":891,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78656,"byte_end":78663,"line_start":892,"line_end":892,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78668,"byte_end":78677,"line_start":893,"line_end":893,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80070,"byte_end":80082,"line_start":931,"line_end":931,"column_start":8,"column_end":20},"name":"find_byteset","qualname":"::ext_slice::ByteSlice::find_byteset","value":"pub fn find_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of any of the bytes in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78791,"byte_end":78863,"line_start":898,"line_end":898,"column_start":5,"column_end":77}},{"value":"/ provided set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78868,"byte_end":78885,"line_start":899,"line_end":899,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78890,"byte_end":78893,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78898,"byte_end":78968,"line_start":901,"line_end":901,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":78973,"byte_end":79047,"line_start":902,"line_end":902,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79052,"byte_end":79126,"line_start":903,"line_end":903,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79131,"byte_end":79197,"line_start":904,"line_end":904,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79202,"byte_end":79240,"line_start":905,"line_end":905,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79245,"byte_end":79248,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79253,"byte_end":79319,"line_start":907,"line_end":907,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79324,"byte_end":79376,"line_start":908,"line_end":908,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79381,"byte_end":79384,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79389,"byte_end":79405,"line_start":910,"line_end":910,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79410,"byte_end":79413,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79418,"byte_end":79490,"line_start":912,"line_end":912,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79495,"byte_end":79568,"line_start":913,"line_end":913,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79573,"byte_end":79626,"line_start":914,"line_end":914,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79631,"byte_end":79634,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79639,"byte_end":79708,"line_start":916,"line_end":916,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79713,"byte_end":79728,"line_start":917,"line_end":917,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79733,"byte_end":79736,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79741,"byte_end":79755,"line_start":919,"line_end":919,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79760,"byte_end":79763,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79768,"byte_end":79784,"line_start":921,"line_end":921,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79789,"byte_end":79792,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79797,"byte_end":79804,"line_start":923,"line_end":923,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79809,"byte_end":79833,"line_start":924,"line_end":924,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79838,"byte_end":79841,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_byteset(b\"zr\"), Some(6));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79846,"byte_end":79906,"line_start":926,"line_end":926,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(b\"foo baz bar\".find_byteset(b\"bzr\"), Some(4));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79911,"byte_end":79972,"line_start":927,"line_end":927,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(None, b\"foo baz bar\".find_byteset(b\"\\t\\n\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":79977,"byte_end":80036,"line_start":928,"line_end":928,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80041,"byte_end":80048,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80053,"byte_end":80062,"line_start":930,"line_end":930,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81517,"byte_end":81533,"line_start":968,"line_end":968,"column_start":8,"column_end":24},"name":"find_not_byteset","qualname":"::ext_slice::ByteSlice::find_not_byteset","value":"pub fn find_not_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of a byte that is not a member","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80205,"byte_end":80281,"line_start":935,"line_end":935,"column_start":5,"column_end":81}},{"value":"/ of the provided set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80286,"byte_end":80310,"line_start":936,"line_end":936,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80315,"byte_end":80318,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80323,"byte_end":80393,"line_start":938,"line_end":938,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80398,"byte_end":80472,"line_start":939,"line_end":939,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80477,"byte_end":80551,"line_start":940,"line_end":940,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80556,"byte_end":80622,"line_start":941,"line_end":941,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80627,"byte_end":80665,"line_start":942,"line_end":942,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80670,"byte_end":80673,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80678,"byte_end":80744,"line_start":944,"line_end":944,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80749,"byte_end":80801,"line_start":945,"line_end":945,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80806,"byte_end":80809,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80814,"byte_end":80830,"line_start":947,"line_end":947,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80835,"byte_end":80838,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80843,"byte_end":80915,"line_start":949,"line_end":949,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80920,"byte_end":80993,"line_start":950,"line_end":950,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":80998,"byte_end":81051,"line_start":951,"line_end":951,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81056,"byte_end":81059,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81064,"byte_end":81133,"line_start":953,"line_end":953,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81138,"byte_end":81153,"line_start":954,"line_end":954,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81158,"byte_end":81161,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81166,"byte_end":81180,"line_start":956,"line_end":956,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81185,"byte_end":81188,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81193,"byte_end":81209,"line_start":958,"line_end":958,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81214,"byte_end":81217,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81222,"byte_end":81229,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81234,"byte_end":81258,"line_start":961,"line_end":961,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81263,"byte_end":81266,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_not_byteset(b\"fo \"), Some(4));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81271,"byte_end":81336,"line_start":963,"line_end":963,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"\\t\\tbaz bar\".find_not_byteset(b\" \\t\\r\\n\"), Some(2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81341,"byte_end":81410,"line_start":964,"line_end":964,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(b\"foo\\nbaz\\tbar\".find_not_byteset(b\"\\t\\n\"), Some(0));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81415,"byte_end":81483,"line_start":965,"line_end":965,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81488,"byte_end":81495,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81500,"byte_end":81509,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82946,"byte_end":82959,"line_start":1005,"line_end":1005,"column_start":8,"column_end":21},"name":"rfind_byteset","qualname":"::ext_slice::ByteSlice::rfind_byteset","value":"pub fn rfind_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of any of the bytes in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81660,"byte_end":81731,"line_start":972,"line_end":972,"column_start":5,"column_end":76}},{"value":"/ provided set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81736,"byte_end":81753,"line_start":973,"line_end":973,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81758,"byte_end":81761,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81766,"byte_end":81836,"line_start":975,"line_end":975,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81841,"byte_end":81915,"line_start":976,"line_end":976,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81920,"byte_end":81994,"line_start":977,"line_end":977,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":81999,"byte_end":82065,"line_start":978,"line_end":978,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82070,"byte_end":82108,"line_start":979,"line_end":979,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82113,"byte_end":82116,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and duplicate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82121,"byte_end":82197,"line_start":981,"line_end":981,"column_start":5,"column_end":81}},{"value":"/ bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82202,"byte_end":82244,"line_start":982,"line_end":982,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82249,"byte_end":82252,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82257,"byte_end":82273,"line_start":984,"line_end":984,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82278,"byte_end":82281,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82286,"byte_end":82358,"line_start":986,"line_end":986,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82363,"byte_end":82436,"line_start":987,"line_end":987,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82441,"byte_end":82494,"line_start":988,"line_end":988,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82499,"byte_end":82502,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82507,"byte_end":82576,"line_start":990,"line_end":990,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82581,"byte_end":82596,"line_start":991,"line_end":991,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82601,"byte_end":82604,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82609,"byte_end":82623,"line_start":993,"line_end":993,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82628,"byte_end":82631,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82636,"byte_end":82652,"line_start":995,"line_end":995,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82657,"byte_end":82660,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82665,"byte_end":82672,"line_start":997,"line_end":997,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82677,"byte_end":82701,"line_start":998,"line_end":998,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82706,"byte_end":82709,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".rfind_byteset(b\"agb\"), Some(9));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82714,"byte_end":82776,"line_start":1000,"line_end":1000,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"rabz \"), Some(10));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82781,"byte_end":82846,"line_start":1001,"line_end":1001,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"\\n123\"), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82851,"byte_end":82912,"line_start":1002,"line_end":1002,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82917,"byte_end":82924,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":82929,"byte_end":82938,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84397,"byte_end":84414,"line_start":1042,"line_end":1042,"column_start":8,"column_end":25},"name":"rfind_not_byteset","qualname":"::ext_slice::ByteSlice::rfind_not_byteset","value":"pub fn rfind_not_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of a byte that is not a member","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83083,"byte_end":83158,"line_start":1009,"line_end":1009,"column_start":5,"column_end":80}},{"value":"/ of the provided set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83163,"byte_end":83187,"line_start":1010,"line_end":1010,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83192,"byte_end":83195,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83200,"byte_end":83270,"line_start":1012,"line_end":1012,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83275,"byte_end":83349,"line_start":1013,"line_end":1013,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83354,"byte_end":83428,"line_start":1014,"line_end":1014,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83433,"byte_end":83499,"line_start":1015,"line_end":1015,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83504,"byte_end":83542,"line_start":1016,"line_end":1016,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83547,"byte_end":83550,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83555,"byte_end":83621,"line_start":1018,"line_end":1018,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83626,"byte_end":83678,"line_start":1019,"line_end":1019,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83683,"byte_end":83686,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83691,"byte_end":83707,"line_start":1021,"line_end":1021,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83712,"byte_end":83715,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83720,"byte_end":83792,"line_start":1023,"line_end":1023,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83797,"byte_end":83870,"line_start":1024,"line_end":1024,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83875,"byte_end":83928,"line_start":1025,"line_end":1025,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83933,"byte_end":83936,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":83941,"byte_end":84010,"line_start":1027,"line_end":1027,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84015,"byte_end":84030,"line_start":1028,"line_end":1028,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84035,"byte_end":84038,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84043,"byte_end":84057,"line_start":1030,"line_end":1030,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84062,"byte_end":84065,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84070,"byte_end":84086,"line_start":1032,"line_end":1032,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84091,"byte_end":84094,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84099,"byte_end":84106,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84111,"byte_end":84135,"line_start":1035,"line_end":1035,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84140,"byte_end":84143,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz,\\t\".rfind_not_byteset(b\",\\t\"), Some(10));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84148,"byte_end":84218,"line_start":1037,"line_end":1037,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_not_byteset(b\"rabz \"), Some(2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84223,"byte_end":84291,"line_start":1038,"line_end":1038,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(None, b\"foo baz bar\".rfind_not_byteset(b\"barfoz \"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84296,"byte_end":84363,"line_start":1039,"line_end":1039,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84368,"byte_end":84375,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84380,"byte_end":84389,"line_start":1041,"line_end":1041,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85189,"byte_end":85195,"line_start":1069,"line_end":1069,"column_start":8,"column_end":14},"name":"fields","qualname":"::ext_slice::ByteSlice::fields","value":"pub fn fields(&Self) -> Fields","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous whitespace.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84542,"byte_end":84612,"line_start":1046,"line_end":1046,"column_start":5,"column_end":75}},{"value":"/ contiguous whitespace.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84617,"byte_end":84643,"line_start":1047,"line_end":1047,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84648,"byte_end":84651,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84656,"byte_end":84669,"line_start":1049,"line_end":1049,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84674,"byte_end":84677,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84682,"byte_end":84698,"line_start":1051,"line_end":1051,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84703,"byte_end":84706,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84711,"byte_end":84718,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84723,"byte_end":84752,"line_start":1054,"line_end":1054,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84757,"byte_end":84760,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"  foo\\tbar\\t\\u{2003}\\nquux   \\n\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84765,"byte_end":84814,"line_start":1056,"line_end":1056,"column_start":5,"column_end":54}},{"value":"/ let fields: Vec<&[u8]> = s.fields().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84819,"byte_end":84869,"line_start":1057,"line_end":1057,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84874,"byte_end":84934,"line_start":1058,"line_end":1058,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84939,"byte_end":84946,"line_start":1059,"line_end":1059,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84951,"byte_end":84954,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of just whitespace yields no elements:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":84959,"byte_end":85026,"line_start":1061,"line_end":1061,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85031,"byte_end":85034,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85039,"byte_end":85046,"line_start":1063,"line_end":1063,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85051,"byte_end":85080,"line_start":1064,"line_end":1064,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85085,"byte_end":85088,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, B(\"  \\n\\t\\u{2003}\\n  \\t\").fields().count());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85093,"byte_end":85155,"line_start":1066,"line_end":1066,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85160,"byte_end":85167,"line_start":1067,"line_end":1067,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85172,"byte_end":85181,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86181,"byte_end":86192,"line_start":1101,"line_end":1101,"column_start":8,"column_end":19},"name":"fields_with","qualname":"::ext_slice::ByteSlice::fields_with","value":"pub fn fields_with<F: FnMut(char) -> bool>(&Self, F) -> FieldsWith<, F>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous codepoints satisfying the given predicate.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85267,"byte_end":85337,"line_start":1073,"line_end":1073,"column_start":5,"column_end":75}},{"value":"/ contiguous codepoints satisfying the given predicate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85342,"byte_end":85399,"line_start":1074,"line_end":1074,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85404,"byte_end":85407,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then the given closure will","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85412,"byte_end":85483,"line_start":1076,"line_end":1076,"column_start":5,"column_end":76}},{"value":"/ be called with a Unicode replacement codepoint when invalid UTF-8","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85488,"byte_end":85557,"line_start":1077,"line_end":1077,"column_start":5,"column_end":74}},{"value":"/ bytes are seen.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85562,"byte_end":85581,"line_start":1078,"line_end":1078,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85586,"byte_end":85589,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85594,"byte_end":85607,"line_start":1080,"line_end":1080,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85612,"byte_end":85615,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85620,"byte_end":85636,"line_start":1082,"line_end":1082,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85641,"byte_end":85644,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85649,"byte_end":85656,"line_start":1084,"line_end":1084,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85661,"byte_end":85690,"line_start":1085,"line_end":1085,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85695,"byte_end":85698,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo999999bar1quux123456\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85703,"byte_end":85745,"line_start":1087,"line_end":1087,"column_start":5,"column_end":47}},{"value":"/ let fields: Vec<&[u8]> = s.fields_with(|c| c.is_numeric()).collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85750,"byte_end":85823,"line_start":1088,"line_end":1088,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85828,"byte_end":85888,"line_start":1089,"line_end":1089,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85893,"byte_end":85900,"line_start":1090,"line_end":1090,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85905,"byte_end":85908,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of all codepoints satisfying the predicate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85913,"byte_end":85984,"line_start":1092,"line_end":1092,"column_start":5,"column_end":76}},{"value":"/ yields no elements:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":85989,"byte_end":86012,"line_start":1093,"line_end":1093,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86017,"byte_end":86020,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86025,"byte_end":86032,"line_start":1095,"line_end":1095,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86037,"byte_end":86061,"line_start":1096,"line_end":1096,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86066,"byte_end":86069,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, b\"1911354563\".fields_with(|c| c.is_numeric()).count());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86074,"byte_end":86147,"line_start":1098,"line_end":1098,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86152,"byte_end":86159,"line_start":1099,"line_end":1099,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86164,"byte_end":86173,"line_start":1100,"line_end":1100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89423,"byte_end":89432,"line_start":1194,"line_end":1194,"column_start":8,"column_end":17},"name":"split_str","qualname":"::ext_slice::ByteSlice::split_str","value":"pub fn split_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B) -> Split","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated\n by the given byte string. Each element yielded is guaranteed not to\n include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86308,"byte_end":86378,"line_start":1105,"line_end":1105,"column_start":5,"column_end":75}},{"value":"/ by the given byte string. Each element yielded is guaranteed not to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86383,"byte_end":86454,"line_start":1106,"line_end":1106,"column_start":5,"column_end":76}},{"value":"/ include the splitter substring.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86459,"byte_end":86494,"line_start":1107,"line_end":1107,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86499,"byte_end":86502,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86507,"byte_end":86576,"line_start":1109,"line_end":1109,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86581,"byte_end":86651,"line_start":1110,"line_end":1110,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86656,"byte_end":86659,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86664,"byte_end":86678,"line_start":1112,"line_end":1112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86683,"byte_end":86686,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86691,"byte_end":86707,"line_start":1114,"line_end":1114,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86712,"byte_end":86715,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86720,"byte_end":86727,"line_start":1116,"line_end":1116,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86732,"byte_end":86761,"line_start":1117,"line_end":1117,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86766,"byte_end":86769,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"Mary had a little lamb\".split_str(\" \").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86774,"byte_end":86849,"line_start":1119,"line_end":1119,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86854,"byte_end":86877,"line_start":1120,"line_end":1120,"column_start":5,"column_end":28}},{"value":"/     B(\"Mary\"), B(\"had\"), B(\"a\"), B(\"little\"), B(\"lamb\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86882,"byte_end":86942,"line_start":1121,"line_end":1121,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86947,"byte_end":86954,"line_start":1122,"line_end":1122,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86959,"byte_end":86962,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".split_str(\"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":86967,"byte_end":87020,"line_start":1124,"line_end":1124,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87025,"byte_end":87054,"line_start":1125,"line_end":1125,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87059,"byte_end":87062,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".split_str(\"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87067,"byte_end":87139,"line_start":1127,"line_end":1127,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87144,"byte_end":87212,"line_start":1128,"line_end":1128,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87217,"byte_end":87220,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".split_str(\"::\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87225,"byte_end":87299,"line_start":1130,"line_end":1130,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87304,"byte_end":87365,"line_start":1131,"line_end":1131,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87370,"byte_end":87377,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87382,"byte_end":87385,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87390,"byte_end":87462,"line_start":1134,"line_end":1134,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87467,"byte_end":87514,"line_start":1135,"line_end":1135,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87519,"byte_end":87522,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87527,"byte_end":87534,"line_start":1137,"line_end":1137,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87539,"byte_end":87568,"line_start":1138,"line_end":1138,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87573,"byte_end":87576,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".split_str(\"|\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87581,"byte_end":87644,"line_start":1140,"line_end":1140,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87649,"byte_end":87672,"line_start":1141,"line_end":1141,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87677,"byte_end":87743,"line_start":1142,"line_end":1142,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87748,"byte_end":87755,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87760,"byte_end":87763,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".split_str(\"/\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87768,"byte_end":87826,"line_start":1145,"line_end":1145,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(x, vec![B(\"(\"), B(\"\"), B(\"\"), B(\")\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87831,"byte_end":87885,"line_start":1146,"line_end":1146,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87890,"byte_end":87897,"line_start":1147,"line_end":1147,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87902,"byte_end":87905,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87910,"byte_end":87980,"line_start":1149,"line_end":1149,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":87985,"byte_end":87997,"line_start":1150,"line_end":1150,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88002,"byte_end":88005,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88010,"byte_end":88017,"line_start":1152,"line_end":1152,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88022,"byte_end":88051,"line_start":1153,"line_end":1153,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88056,"byte_end":88059,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".split_str(\"0\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88064,"byte_end":88120,"line_start":1155,"line_end":1155,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88125,"byte_end":88171,"line_start":1156,"line_end":1156,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88176,"byte_end":88183,"line_start":1157,"line_end":1157,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88188,"byte_end":88191,"line_start":1158,"line_end":1158,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88196,"byte_end":88270,"line_start":1159,"line_end":1159,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88275,"byte_end":88343,"line_start":1160,"line_end":1160,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88348,"byte_end":88359,"line_start":1161,"line_end":1161,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88364,"byte_end":88367,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88372,"byte_end":88379,"line_start":1163,"line_end":1163,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88384,"byte_end":88413,"line_start":1164,"line_end":1164,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88418,"byte_end":88421,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".split_str(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88426,"byte_end":88482,"line_start":1166,"line_end":1166,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88487,"byte_end":88510,"line_start":1167,"line_end":1167,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"r\"), B(\"u\"), B(\"s\"), B(\"t\"), B(\"\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88515,"byte_end":88568,"line_start":1168,"line_end":1168,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88573,"byte_end":88580,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88585,"byte_end":88588,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88593,"byte_end":88665,"line_start":1171,"line_end":1171,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88670,"byte_end":88700,"line_start":1172,"line_end":1172,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").split_str(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88705,"byte_end":88762,"line_start":1173,"line_end":1173,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88767,"byte_end":88790,"line_start":1174,"line_end":1174,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(b\"\\xE2\"), B(b\"\\x98\"), B(b\"\\x83\"), B(\"\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88795,"byte_end":88852,"line_start":1175,"line_end":1175,"column_start":5,"column_end":62}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88857,"byte_end":88864,"line_start":1176,"line_end":1176,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88869,"byte_end":88876,"line_start":1177,"line_end":1177,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88881,"byte_end":88884,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88889,"byte_end":88959,"line_start":1179,"line_end":1179,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":88964,"byte_end":89023,"line_start":1180,"line_end":1180,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89028,"byte_end":89031,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89036,"byte_end":89043,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89048,"byte_end":89077,"line_start":1183,"line_end":1183,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89082,"byte_end":89085,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".split_str(\" \").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89090,"byte_end":89153,"line_start":1185,"line_end":1185,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89158,"byte_end":89181,"line_start":1186,"line_end":1186,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89186,"byte_end":89252,"line_start":1187,"line_end":1187,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89257,"byte_end":89264,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89269,"byte_end":89276,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89281,"byte_end":89284,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89289,"byte_end":89357,"line_start":1191,"line_end":1191,"column_start":5,"column_end":73}},{"value":"/ [`fields`](#method.fields) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89362,"byte_end":89401,"line_start":1192,"line_end":1192,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89406,"byte_end":89415,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92652,"byte_end":92662,"line_start":1288,"line_end":1288,"column_start":8,"column_end":18},"name":"rsplit_str","qualname":"::ext_slice::ByteSlice::rsplit_str","value":"pub fn rsplit_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B)\n-> SplitReverse","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated by\n the given byte string, in reverse. Each element yielded is guaranteed\n not to include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89593,"byte_end":89666,"line_start":1201,"line_end":1201,"column_start":5,"column_end":78}},{"value":"/ the given byte string, in reverse. Each element yielded is guaranteed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89671,"byte_end":89744,"line_start":1202,"line_end":1202,"column_start":5,"column_end":78}},{"value":"/ not to include the splitter substring.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89749,"byte_end":89791,"line_start":1203,"line_end":1203,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89796,"byte_end":89799,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89804,"byte_end":89873,"line_start":1205,"line_end":1205,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89878,"byte_end":89948,"line_start":1206,"line_end":1206,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89953,"byte_end":89956,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89961,"byte_end":89975,"line_start":1208,"line_end":1208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89980,"byte_end":89983,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":89988,"byte_end":90004,"line_start":1210,"line_end":1210,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90009,"byte_end":90012,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90017,"byte_end":90024,"line_start":1212,"line_end":1212,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90029,"byte_end":90058,"line_start":1213,"line_end":1213,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90063,"byte_end":90066,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> =","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90071,"byte_end":90094,"line_start":1215,"line_end":1215,"column_start":5,"column_end":28}},{"value":"/     b\"Mary had a little lamb\".rsplit_str(\" \").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90099,"byte_end":90159,"line_start":1216,"line_end":1216,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90164,"byte_end":90187,"line_start":1217,"line_end":1217,"column_start":5,"column_end":28}},{"value":"/     B(\"lamb\"), B(\"little\"), B(\"a\"), B(\"had\"), B(\"Mary\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90192,"byte_end":90252,"line_start":1218,"line_end":1218,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90257,"byte_end":90264,"line_start":1219,"line_end":1219,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90269,"byte_end":90272,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".rsplit_str(\"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90277,"byte_end":90331,"line_start":1221,"line_end":1221,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90336,"byte_end":90365,"line_start":1222,"line_end":1222,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90370,"byte_end":90373,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".rsplit_str(\"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90378,"byte_end":90451,"line_start":1224,"line_end":1224,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"\"), B(\"lion\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90456,"byte_end":90524,"line_start":1225,"line_end":1225,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90529,"byte_end":90532,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".rsplit_str(\"::\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90537,"byte_end":90612,"line_start":1227,"line_end":1227,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lion\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90617,"byte_end":90678,"line_start":1228,"line_end":1228,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90683,"byte_end":90690,"line_start":1229,"line_end":1229,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90695,"byte_end":90698,"line_start":1230,"line_end":1230,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90703,"byte_end":90775,"line_start":1231,"line_end":1231,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90780,"byte_end":90827,"line_start":1232,"line_end":1232,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90832,"byte_end":90835,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90840,"byte_end":90847,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90852,"byte_end":90881,"line_start":1235,"line_end":1235,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90886,"byte_end":90889,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".rsplit_str(\"|\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90894,"byte_end":90958,"line_start":1237,"line_end":1237,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90963,"byte_end":90986,"line_start":1238,"line_end":1238,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":90991,"byte_end":91057,"line_start":1239,"line_end":1239,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91062,"byte_end":91069,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91074,"byte_end":91077,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".rsplit_str(\"/\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91082,"byte_end":91141,"line_start":1242,"line_end":1242,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\")\"), B(\"\"), B(\"\"), B(\"(\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91146,"byte_end":91200,"line_start":1243,"line_end":1243,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91205,"byte_end":91212,"line_start":1244,"line_end":1244,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91217,"byte_end":91220,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91225,"byte_end":91295,"line_start":1246,"line_end":1246,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91300,"byte_end":91312,"line_start":1247,"line_end":1247,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91317,"byte_end":91320,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91325,"byte_end":91332,"line_start":1249,"line_end":1249,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91337,"byte_end":91366,"line_start":1250,"line_end":1250,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91371,"byte_end":91374,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".rsplit_str(\"0\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91379,"byte_end":91436,"line_start":1252,"line_end":1252,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91441,"byte_end":91487,"line_start":1253,"line_end":1253,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91492,"byte_end":91499,"line_start":1254,"line_end":1254,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91504,"byte_end":91507,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91512,"byte_end":91586,"line_start":1256,"line_end":1256,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91591,"byte_end":91659,"line_start":1257,"line_end":1257,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91664,"byte_end":91675,"line_start":1258,"line_end":1258,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91680,"byte_end":91683,"line_start":1259,"line_end":1259,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91688,"byte_end":91695,"line_start":1260,"line_end":1260,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91700,"byte_end":91729,"line_start":1261,"line_end":1261,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91734,"byte_end":91737,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".rsplit_str(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91742,"byte_end":91799,"line_start":1263,"line_end":1263,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91804,"byte_end":91827,"line_start":1264,"line_end":1264,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"t\"), B(\"s\"), B(\"u\"), B(\"r\"), B(\"\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91832,"byte_end":91885,"line_start":1265,"line_end":1265,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91890,"byte_end":91897,"line_start":1266,"line_end":1266,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91902,"byte_end":91905,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91910,"byte_end":91982,"line_start":1268,"line_end":1268,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":91987,"byte_end":92017,"line_start":1269,"line_end":1269,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").rsplit_str(\"\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92022,"byte_end":92080,"line_start":1270,"line_end":1270,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(b\"\\x83\"), B(b\"\\x98\"), B(b\"\\xE2\"), B(\"\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92085,"byte_end":92159,"line_start":1271,"line_end":1271,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92164,"byte_end":92171,"line_start":1272,"line_end":1272,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92176,"byte_end":92179,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92184,"byte_end":92254,"line_start":1274,"line_end":1274,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92259,"byte_end":92318,"line_start":1275,"line_end":1275,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92323,"byte_end":92326,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92331,"byte_end":92338,"line_start":1277,"line_end":1277,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92343,"byte_end":92372,"line_start":1278,"line_end":1278,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92377,"byte_end":92380,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".rsplit_str(\" \").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92385,"byte_end":92449,"line_start":1280,"line_end":1280,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92454,"byte_end":92477,"line_start":1281,"line_end":1281,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92482,"byte_end":92548,"line_start":1282,"line_end":1282,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92553,"byte_end":92560,"line_start":1283,"line_end":1283,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92565,"byte_end":92572,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92577,"byte_end":92580,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92585,"byte_end":92630,"line_start":1286,"line_end":1286,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92635,"byte_end":92644,"line_start":1287,"line_end":1287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94261,"byte_end":94271,"line_start":1331,"line_end":1331,"column_start":8,"column_end":18},"name":"splitn_str","qualname":"::ext_slice::ByteSlice::splitn_str","value":"pub fn splitn_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, usize, &'a B)\n-> SplitN","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string. If `limit` substrings are yielded,\n then the last substring will contain the remainder of this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92837,"byte_end":92911,"line_start":1295,"line_end":1295,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string. If `limit` substrings are yielded,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92916,"byte_end":92990,"line_start":1296,"line_end":1296,"column_start":5,"column_end":79}},{"value":"/ then the last substring will contain the remainder of this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":92995,"byte_end":93070,"line_start":1297,"line_end":1297,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93075,"byte_end":93078,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93083,"byte_end":93150,"line_start":1299,"line_end":1299,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93155,"byte_end":93225,"line_start":1300,"line_end":1300,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93230,"byte_end":93233,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93238,"byte_end":93252,"line_start":1302,"line_end":1302,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93257,"byte_end":93260,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93265,"byte_end":93281,"line_start":1304,"line_end":1304,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93286,"byte_end":93289,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93294,"byte_end":93301,"line_start":1306,"line_end":1306,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93306,"byte_end":93335,"line_start":1307,"line_end":1307,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93340,"byte_end":93343,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"Mary had a little lamb\".splitn_str(3, \" \").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93348,"byte_end":93423,"line_start":1309,"line_end":1309,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"Mary\"), B(\"had\"), B(\"a little lamb\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93428,"byte_end":93493,"line_start":1310,"line_end":1310,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93498,"byte_end":93501,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".splitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93506,"byte_end":93559,"line_start":1312,"line_end":1312,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93564,"byte_end":93593,"line_start":1313,"line_end":1313,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93598,"byte_end":93601,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".splitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93606,"byte_end":93678,"line_start":1315,"line_end":1315,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tigerXleopard\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93683,"byte_end":93745,"line_start":1316,"line_end":1316,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93750,"byte_end":93753,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".splitn_str(2, \"::\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93758,"byte_end":93832,"line_start":1318,"line_end":1318,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger::leopard\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93837,"byte_end":93893,"line_start":1319,"line_end":1319,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93898,"byte_end":93901,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(1, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93906,"byte_end":93966,"line_start":1321,"line_end":1321,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":93971,"byte_end":94009,"line_start":1322,"line_end":1322,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94014,"byte_end":94017,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".splitn_str(2, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94022,"byte_end":94081,"line_start":1324,"line_end":1324,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94086,"byte_end":94123,"line_start":1325,"line_end":1325,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94128,"byte_end":94131,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(0, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94136,"byte_end":94196,"line_start":1327,"line_end":1327,"column_start":5,"column_end":65}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94201,"byte_end":94227,"line_start":1328,"line_end":1328,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94232,"byte_end":94239,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94244,"byte_end":94253,"line_start":1330,"line_end":1330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95926,"byte_end":95937,"line_start":1377,"line_end":1377,"column_start":8,"column_end":19},"name":"rsplitn_str","qualname":"::ext_slice::ByteSlice::rsplitn_str","value":"pub fn rsplitn_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, usize, &'a B)\n-> SplitNReverse","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string, in reverse. If `limit` substrings\n are yielded, then the last substring will contain the remainder of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94463,"byte_end":94537,"line_start":1339,"line_end":1339,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string, in reverse. If `limit` substrings","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94542,"byte_end":94615,"line_start":1340,"line_end":1340,"column_start":5,"column_end":78}},{"value":"/ are yielded, then the last substring will contain the remainder of this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94620,"byte_end":94695,"line_start":1341,"line_end":1341,"column_start":5,"column_end":80}},{"value":"/ byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94700,"byte_end":94716,"line_start":1342,"line_end":1342,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94721,"byte_end":94724,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94729,"byte_end":94796,"line_start":1344,"line_end":1344,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94801,"byte_end":94871,"line_start":1345,"line_end":1345,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94876,"byte_end":94879,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94884,"byte_end":94898,"line_start":1347,"line_end":1347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94903,"byte_end":94906,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94911,"byte_end":94927,"line_start":1349,"line_end":1349,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94932,"byte_end":94935,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94940,"byte_end":94947,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94952,"byte_end":94981,"line_start":1352,"line_end":1352,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94986,"byte_end":94989,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> =","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":94994,"byte_end":95013,"line_start":1354,"line_end":1354,"column_start":5,"column_end":24}},{"value":"/     b\"Mary had a little lamb\".rsplitn_str(3, \" \").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95018,"byte_end":95082,"line_start":1355,"line_end":1355,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![B(\"lamb\"), B(\"little\"), B(\"Mary had a\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95087,"byte_end":95152,"line_start":1356,"line_end":1356,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95157,"byte_end":95160,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95165,"byte_end":95219,"line_start":1358,"line_end":1358,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95224,"byte_end":95253,"line_start":1359,"line_end":1359,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95258,"byte_end":95261,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95266,"byte_end":95339,"line_start":1361,"line_end":1361,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lionX\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95344,"byte_end":95406,"line_start":1362,"line_end":1362,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95411,"byte_end":95414,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".rsplitn_str(2, \"::\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95419,"byte_end":95494,"line_start":1364,"line_end":1364,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"lion::tiger\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95499,"byte_end":95555,"line_start":1365,"line_end":1365,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95560,"byte_end":95563,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(1, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95568,"byte_end":95629,"line_start":1367,"line_end":1367,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95634,"byte_end":95672,"line_start":1368,"line_end":1368,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95677,"byte_end":95680,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".rsplitn_str(2, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95685,"byte_end":95745,"line_start":1370,"line_end":1370,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95750,"byte_end":95787,"line_start":1371,"line_end":1371,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95792,"byte_end":95795,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(0, \"X\").collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95800,"byte_end":95861,"line_start":1373,"line_end":1373,"column_start":5,"column_end":66}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95866,"byte_end":95892,"line_start":1374,"line_end":1374,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95897,"byte_end":95904,"line_start":1375,"line_end":1375,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":95909,"byte_end":95918,"line_start":1376,"line_end":1376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97126,"byte_end":97133,"line_start":1421,"line_end":1421,"column_start":8,"column_end":15},"name":"replace","qualname":"::ext_slice::ByteSlice::replace","value":"pub fn replace<N: AsRef<[u8]>, R: AsRef<[u8]>>(&Self, N, R) -> Vec<u8>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement, and\n the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement, and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96143,"byte_end":96218,"line_start":1385,"line_end":1385,"column_start":5,"column_end":80}},{"value":"/ the result as a new `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96223,"byte_end":96257,"line_start":1386,"line_end":1386,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96262,"byte_end":96265,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96270,"byte_end":96338,"line_start":1388,"line_end":1388,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replace_into`](#method.replace_into) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96343,"byte_end":96410,"line_start":1389,"line_end":1389,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96415,"byte_end":96418,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96423,"byte_end":96437,"line_start":1391,"line_end":1391,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96442,"byte_end":96445,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96450,"byte_end":96466,"line_start":1393,"line_end":1393,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96471,"byte_end":96474,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96479,"byte_end":96486,"line_start":1395,"line_end":1395,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96491,"byte_end":96515,"line_start":1396,"line_end":1396,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96520,"byte_end":96523,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"old\", \"new\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96528,"byte_end":96577,"line_start":1398,"line_end":1398,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(s, \"this is new\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96582,"byte_end":96626,"line_start":1399,"line_end":1399,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96631,"byte_end":96638,"line_start":1400,"line_end":1400,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96643,"byte_end":96646,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96651,"byte_end":96686,"line_start":1402,"line_end":1402,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96691,"byte_end":96694,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96699,"byte_end":96706,"line_start":1404,"line_end":1404,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96711,"byte_end":96735,"line_start":1405,"line_end":1405,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96740,"byte_end":96743,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"nada nada\", \"limonada\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96748,"byte_end":96808,"line_start":1407,"line_end":1407,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s, \"this is old\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96813,"byte_end":96857,"line_start":1408,"line_end":1408,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96862,"byte_end":96869,"line_start":1409,"line_end":1409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96874,"byte_end":96877,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96882,"byte_end":96921,"line_start":1411,"line_end":1411,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96926,"byte_end":96929,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96934,"byte_end":96941,"line_start":1413,"line_end":1413,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96946,"byte_end":96970,"line_start":1414,"line_end":1414,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96975,"byte_end":96978,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replace(\"\", \"Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":96983,"byte_end":97019,"line_start":1416,"line_end":1416,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97024,"byte_end":97064,"line_start":1417,"line_end":1417,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97069,"byte_end":97076,"line_start":1418,"line_end":1418,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97081,"byte_end":97104,"line_start":1419,"line_end":1419,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97109,"byte_end":97118,"line_start":1420,"line_end":1420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98359,"byte_end":98367,"line_start":1467,"line_end":1467,"column_start":8,"column_end":16},"name":"replacen","qualname":"::ext_slice::ByteSlice::replacen","value":"pub fn replacen<N: AsRef<[u8]>, R: AsRef<[u8]>>(&Self, N, R, usize) -> Vec<u8>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97393,"byte_end":97461,"line_start":1431,"line_end":1431,"column_start":5,"column_end":73}},{"value":"/ replacement, and the result as a new `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97466,"byte_end":97517,"line_start":1432,"line_end":1432,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97522,"byte_end":97525,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97530,"byte_end":97598,"line_start":1434,"line_end":1434,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replacen_into`](#method.replacen_into) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97603,"byte_end":97672,"line_start":1435,"line_end":1435,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97677,"byte_end":97680,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97685,"byte_end":97699,"line_start":1437,"line_end":1437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97704,"byte_end":97707,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97712,"byte_end":97728,"line_start":1439,"line_end":1439,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97733,"byte_end":97736,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97741,"byte_end":97748,"line_start":1441,"line_end":1441,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97753,"byte_end":97777,"line_start":1442,"line_end":1442,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97782,"byte_end":97785,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"o\", \"z\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97790,"byte_end":97834,"line_start":1444,"line_end":1444,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"fzzfoo\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97839,"byte_end":97878,"line_start":1445,"line_end":1445,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97883,"byte_end":97890,"line_start":1446,"line_end":1446,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97895,"byte_end":97898,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97903,"byte_end":97938,"line_start":1448,"line_end":1448,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97943,"byte_end":97946,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97951,"byte_end":97958,"line_start":1450,"line_end":1450,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97963,"byte_end":97987,"line_start":1451,"line_end":1451,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":97992,"byte_end":97995,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"a\", \"z\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98000,"byte_end":98044,"line_start":1453,"line_end":1453,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"foofoo\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98049,"byte_end":98088,"line_start":1454,"line_end":1454,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98093,"byte_end":98100,"line_start":1455,"line_end":1455,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98105,"byte_end":98108,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98113,"byte_end":98152,"line_start":1457,"line_end":1457,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98157,"byte_end":98160,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98165,"byte_end":98172,"line_start":1459,"line_end":1459,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98177,"byte_end":98201,"line_start":1460,"line_end":1460,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98206,"byte_end":98209,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replacen(\"\", \"Z\", 2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98214,"byte_end":98254,"line_start":1462,"line_end":1462,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s, \"ZfZoo\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98259,"byte_end":98297,"line_start":1463,"line_end":1463,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98302,"byte_end":98309,"line_start":1464,"line_end":1464,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98314,"byte_end":98337,"line_start":1465,"line_end":1465,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98342,"byte_end":98351,"line_start":1466,"line_end":1466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99918,"byte_end":99930,"line_start":1525,"line_end":1525,"column_start":8,"column_end":20},"name":"replace_into","qualname":"::ext_slice::ByteSlice::replace_into","value":"pub fn replace_into<N: AsRef<[u8]>, R: AsRef<[u8]>>(&Self, N, R, &mut Vec<u8>)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement,\n and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98657,"byte_end":98728,"line_start":1478,"line_end":1478,"column_start":5,"column_end":76}},{"value":"/ and write the result into the provided `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98733,"byte_end":98786,"line_start":1479,"line_end":1479,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98791,"byte_end":98794,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98799,"byte_end":98855,"line_start":1481,"line_end":1481,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98860,"byte_end":98863,"line_start":1482,"line_end":1482,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98868,"byte_end":98940,"line_start":1483,"line_end":1483,"column_start":5,"column_end":77}},{"value":"/ API, use [`replace`](#method.replace) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":98945,"byte_end":98995,"line_start":1484,"line_end":1484,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99000,"byte_end":99003,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99008,"byte_end":99022,"line_start":1486,"line_end":1486,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99027,"byte_end":99030,"line_start":1487,"line_end":1487,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99035,"byte_end":99051,"line_start":1488,"line_end":1488,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99056,"byte_end":99059,"line_start":1489,"line_end":1489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99064,"byte_end":99071,"line_start":1490,"line_end":1490,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99076,"byte_end":99100,"line_start":1491,"line_end":1491,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99105,"byte_end":99108,"line_start":1492,"line_end":1492,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99113,"byte_end":99140,"line_start":1493,"line_end":1493,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99145,"byte_end":99148,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99153,"byte_end":99179,"line_start":1495,"line_end":1495,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"old\", \"new\", &mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99184,"byte_end":99228,"line_start":1496,"line_end":1496,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"this is new\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99233,"byte_end":99280,"line_start":1497,"line_end":1497,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99285,"byte_end":99292,"line_start":1498,"line_end":1498,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99297,"byte_end":99300,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99305,"byte_end":99340,"line_start":1500,"line_end":1500,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99345,"byte_end":99348,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99353,"byte_end":99360,"line_start":1502,"line_end":1502,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99365,"byte_end":99389,"line_start":1503,"line_end":1503,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99394,"byte_end":99397,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99402,"byte_end":99429,"line_start":1505,"line_end":1505,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99434,"byte_end":99437,"line_start":1506,"line_end":1506,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99442,"byte_end":99468,"line_start":1507,"line_end":1507,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"nada nada\", \"limonada\", &mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99473,"byte_end":99528,"line_start":1508,"line_end":1508,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(dest, \"this is old\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99533,"byte_end":99580,"line_start":1509,"line_end":1509,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99585,"byte_end":99592,"line_start":1510,"line_end":1510,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99597,"byte_end":99600,"line_start":1511,"line_end":1511,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99605,"byte_end":99644,"line_start":1512,"line_end":1512,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99649,"byte_end":99652,"line_start":1513,"line_end":1513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99657,"byte_end":99664,"line_start":1514,"line_end":1514,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99669,"byte_end":99693,"line_start":1515,"line_end":1515,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99698,"byte_end":99701,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99706,"byte_end":99725,"line_start":1517,"line_end":1517,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99730,"byte_end":99733,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99738,"byte_end":99764,"line_start":1519,"line_end":1519,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"\", \"Z\", &mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99769,"byte_end":99808,"line_start":1520,"line_end":1520,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(dest, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99813,"byte_end":99856,"line_start":1521,"line_end":1521,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99861,"byte_end":99868,"line_start":1522,"line_end":1522,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99873,"byte_end":99896,"line_start":1523,"line_end":1523,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":99901,"byte_end":99910,"line_start":1524,"line_end":1524,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101661,"byte_end":101674,"line_start":1589,"line_end":1589,"column_start":8,"column_end":21},"name":"replacen_into","qualname":"::ext_slice::ByteSlice::replacen_into","value":"pub fn replacen_into<N: AsRef<[u8]>,\nR: AsRef<[u8]>>(&Self, N, R, usize, &mut Vec<u8>)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100417,"byte_end":100485,"line_start":1542,"line_end":1542,"column_start":5,"column_end":73}},{"value":"/ replacement, and write the result into the provided `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100490,"byte_end":100556,"line_start":1543,"line_end":1543,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100561,"byte_end":100564,"line_start":1544,"line_end":1544,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100569,"byte_end":100625,"line_start":1545,"line_end":1545,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100630,"byte_end":100633,"line_start":1546,"line_end":1546,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100638,"byte_end":100710,"line_start":1547,"line_end":1547,"column_start":5,"column_end":77}},{"value":"/ API, use [`replacen`](#method.replacen) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100715,"byte_end":100767,"line_start":1548,"line_end":1548,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100772,"byte_end":100775,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100780,"byte_end":100794,"line_start":1550,"line_end":1550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100799,"byte_end":100802,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100807,"byte_end":100823,"line_start":1552,"line_end":1552,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100828,"byte_end":100831,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100836,"byte_end":100843,"line_start":1554,"line_end":1554,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100848,"byte_end":100872,"line_start":1555,"line_end":1555,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100877,"byte_end":100880,"line_start":1556,"line_end":1556,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100885,"byte_end":100907,"line_start":1557,"line_end":1557,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100912,"byte_end":100915,"line_start":1558,"line_end":1558,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100920,"byte_end":100946,"line_start":1559,"line_end":1559,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"o\", \"z\", 2, &mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":100951,"byte_end":100995,"line_start":1560,"line_end":1560,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"fzzfoo\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101000,"byte_end":101042,"line_start":1561,"line_end":1561,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101047,"byte_end":101054,"line_start":1562,"line_end":1562,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101059,"byte_end":101062,"line_start":1563,"line_end":1563,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101067,"byte_end":101102,"line_start":1564,"line_end":1564,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101107,"byte_end":101110,"line_start":1565,"line_end":1565,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101115,"byte_end":101122,"line_start":1566,"line_end":1566,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101127,"byte_end":101151,"line_start":1567,"line_end":1567,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101156,"byte_end":101159,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101164,"byte_end":101186,"line_start":1569,"line_end":1569,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101191,"byte_end":101194,"line_start":1570,"line_end":1570,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101199,"byte_end":101225,"line_start":1571,"line_end":1571,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"a\", \"z\", 2, &mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101230,"byte_end":101274,"line_start":1572,"line_end":1572,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"foofoo\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101279,"byte_end":101321,"line_start":1573,"line_end":1573,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101326,"byte_end":101333,"line_start":1574,"line_end":1574,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101338,"byte_end":101341,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101346,"byte_end":101385,"line_start":1576,"line_end":1576,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101390,"byte_end":101393,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101398,"byte_end":101405,"line_start":1578,"line_end":1578,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101410,"byte_end":101434,"line_start":1579,"line_end":1579,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101439,"byte_end":101442,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101447,"byte_end":101466,"line_start":1581,"line_end":1581,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101471,"byte_end":101474,"line_start":1582,"line_end":1582,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101479,"byte_end":101505,"line_start":1583,"line_end":1583,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"\", \"Z\", 2, &mut dest);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101510,"byte_end":101553,"line_start":1584,"line_end":1584,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dest, \"ZfZoo\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101558,"byte_end":101599,"line_start":1585,"line_end":1585,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101604,"byte_end":101611,"line_start":1586,"line_end":1586,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101616,"byte_end":101639,"line_start":1587,"line_end":1587,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":101644,"byte_end":101653,"line_start":1588,"line_end":1588,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102511,"byte_end":102516,"line_start":1621,"line_end":1621,"column_start":8,"column_end":13},"name":"bytes","qualname":"::ext_slice::ByteSlice::bytes","value":"pub fn bytes(&Self) -> Bytes","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over the bytes in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the bytes in this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102195,"byte_end":102254,"line_start":1607,"line_end":1607,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102259,"byte_end":102262,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102267,"byte_end":102281,"line_start":1609,"line_end":1609,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102286,"byte_end":102289,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102294,"byte_end":102310,"line_start":1611,"line_end":1611,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102315,"byte_end":102318,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102323,"byte_end":102330,"line_start":1613,"line_end":1613,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102335,"byte_end":102359,"line_start":1614,"line_end":1614,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102364,"byte_end":102367,"line_start":1615,"line_end":1615,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foobar\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102372,"byte_end":102395,"line_start":1616,"line_end":1616,"column_start":5,"column_end":28}},{"value":"/ let bytes: Vec<u8> = bs.bytes().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102400,"byte_end":102446,"line_start":1617,"line_end":1617,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(bytes, bs);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102451,"byte_end":102477,"line_start":1618,"line_end":1618,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102482,"byte_end":102489,"line_start":1619,"line_end":1619,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102494,"byte_end":102503,"line_start":1620,"line_end":1620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103457,"byte_end":103462,"line_start":1651,"line_end":1651,"column_start":8,"column_end":13},"name":"chars","qualname":"::ext_slice::ByteSlice::chars","value":"pub fn chars(&Self) -> Chars","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102595,"byte_end":102670,"line_start":1625,"line_end":1625,"column_start":5,"column_end":80}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102675,"byte_end":102750,"line_start":1626,"line_end":1626,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102755,"byte_end":102778,"line_start":1627,"line_end":1627,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102783,"byte_end":102786,"line_start":1628,"line_end":1628,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102791,"byte_end":102805,"line_start":1629,"line_end":1629,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102810,"byte_end":102813,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102818,"byte_end":102834,"line_start":1631,"line_end":1631,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102839,"byte_end":102842,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102847,"byte_end":102854,"line_start":1633,"line_end":1633,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102859,"byte_end":102883,"line_start":1634,"line_end":1634,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102888,"byte_end":102891,"line_start":1635,"line_end":1635,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102896,"byte_end":102957,"line_start":1636,"line_end":1636,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":102962,"byte_end":103010,"line_start":1637,"line_end":1637,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103015,"byte_end":103087,"line_start":1638,"line_end":1638,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103092,"byte_end":103099,"line_start":1639,"line_end":1639,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103104,"byte_end":103107,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103112,"byte_end":103164,"line_start":1641,"line_end":1641,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103169,"byte_end":103172,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103177,"byte_end":103184,"line_start":1643,"line_end":1643,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103189,"byte_end":103213,"line_start":1644,"line_end":1644,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103218,"byte_end":103221,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103226,"byte_end":103287,"line_start":1646,"line_end":1646,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().rev().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103292,"byte_end":103346,"line_start":1647,"line_end":1647,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103351,"byte_end":103423,"line_start":1648,"line_end":1648,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103428,"byte_end":103435,"line_start":1649,"line_end":1649,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103440,"byte_end":103449,"line_start":1650,"line_end":1650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105344,"byte_end":105356,"line_start":1706,"line_end":1706,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::ext_slice::ByteSlice::char_indices","value":"pub fn char_indices(&Self) -> CharIndices","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103532,"byte_end":103606,"line_start":1655,"line_end":1655,"column_start":5,"column_end":79}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103611,"byte_end":103684,"line_start":1656,"line_end":1656,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103689,"byte_end":103764,"line_start":1657,"line_end":1657,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103769,"byte_end":103781,"line_start":1658,"line_end":1658,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103786,"byte_end":103789,"line_start":1659,"line_end":1659,"column_start":5,"column_end":8}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103794,"byte_end":103866,"line_start":1660,"line_end":1660,"column_start":5,"column_end":77}},{"value":"/ provided by the standard library. Aside from working on possibly","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103871,"byte_end":103939,"line_start":1661,"line_end":1661,"column_start":5,"column_end":73}},{"value":"/ invalid UTF-8, this iterator provides both the corresponding starting","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":103944,"byte_end":104017,"line_start":1662,"line_end":1662,"column_start":5,"column_end":78}},{"value":"/ and ending byte indices of each codepoint yielded. The ending position","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104022,"byte_end":104096,"line_start":1663,"line_end":1663,"column_start":5,"column_end":79}},{"value":"/ is necessary to slice the original byte string when invalid UTF-8 bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104101,"byte_end":104176,"line_start":1664,"line_end":1664,"column_start":5,"column_end":80}},{"value":"/ are converted into a Unicode replacement codepoint, since a single","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104181,"byte_end":104251,"line_start":1665,"line_end":1665,"column_start":5,"column_end":75}},{"value":"/ replacement codepoint can substitute anywhere from 1 to 3 invalid bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104256,"byte_end":104331,"line_start":1666,"line_end":1666,"column_start":5,"column_end":80}},{"value":"/ (inclusive).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104336,"byte_end":104352,"line_start":1667,"line_end":1667,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104357,"byte_end":104360,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104365,"byte_end":104379,"line_start":1669,"line_end":1669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104384,"byte_end":104387,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104392,"byte_end":104408,"line_start":1671,"line_end":1671,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104413,"byte_end":104416,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104421,"byte_end":104428,"line_start":1673,"line_end":1673,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104433,"byte_end":104457,"line_start":1674,"line_end":1674,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104462,"byte_end":104465,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104470,"byte_end":104531,"line_start":1676,"line_end":1676,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs.char_indices().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104536,"byte_end":104607,"line_start":1677,"line_end":1677,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104612,"byte_end":104639,"line_start":1678,"line_end":1678,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104644,"byte_end":104666,"line_start":1679,"line_end":1679,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104671,"byte_end":104698,"line_start":1680,"line_end":1680,"column_start":5,"column_end":32}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104703,"byte_end":104726,"line_start":1681,"line_end":1681,"column_start":5,"column_end":25}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104731,"byte_end":104759,"line_start":1682,"line_end":1682,"column_start":5,"column_end":33}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104764,"byte_end":104786,"line_start":1683,"line_end":1683,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104791,"byte_end":104798,"line_start":1684,"line_end":1684,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104803,"byte_end":104810,"line_start":1685,"line_end":1685,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104815,"byte_end":104818,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104823,"byte_end":104875,"line_start":1687,"line_end":1687,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104880,"byte_end":104883,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104888,"byte_end":104895,"line_start":1689,"line_end":1689,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104900,"byte_end":104924,"line_start":1690,"line_end":1690,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104929,"byte_end":104932,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":104937,"byte_end":104998,"line_start":1692,"line_end":1692,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105003,"byte_end":105048,"line_start":1693,"line_end":1693,"column_start":5,"column_end":50}},{"value":"/     .char_indices()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105053,"byte_end":105076,"line_start":1694,"line_end":1694,"column_start":5,"column_end":28}},{"value":"/     .rev()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105081,"byte_end":105095,"line_start":1695,"line_end":1695,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105100,"byte_end":105119,"line_start":1696,"line_end":1696,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105124,"byte_end":105151,"line_start":1697,"line_end":1697,"column_start":5,"column_end":32}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105156,"byte_end":105178,"line_start":1698,"line_end":1698,"column_start":5,"column_end":27}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105183,"byte_end":105211,"line_start":1699,"line_end":1699,"column_start":5,"column_end":33}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105216,"byte_end":105239,"line_start":1700,"line_end":1700,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105244,"byte_end":105271,"line_start":1701,"line_end":1701,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105276,"byte_end":105298,"line_start":1702,"line_end":1702,"column_start":5,"column_end":25}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105303,"byte_end":105310,"line_start":1703,"line_end":1703,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105315,"byte_end":105322,"line_start":1704,"line_end":1704,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105327,"byte_end":105336,"line_start":1705,"line_end":1705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106618,"byte_end":106629,"line_start":1743,"line_end":1743,"column_start":8,"column_end":19},"name":"utf8_chunks","qualname":"::ext_slice::ByteSlice::utf8_chunks","value":"pub fn utf8_chunks(&Self) -> Utf8Chunks","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Iterate over chunks of valid UTF-8.","sig":null,"attributes":[{"value":"/ Iterate over chunks of valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105438,"byte_end":105477,"line_start":1710,"line_end":1710,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105482,"byte_end":105485,"line_start":1711,"line_end":1711,"column_start":5,"column_end":8}},{"value":"/ The iterator returned yields chunks of valid UTF-8 separated by invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105490,"byte_end":105565,"line_start":1712,"line_end":1712,"column_start":5,"column_end":80}},{"value":"/ UTF-8 bytes, if they exist. Invalid UTF-8 bytes are always 1-3 bytes,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105570,"byte_end":105643,"line_start":1713,"line_end":1713,"column_start":5,"column_end":78}},{"value":"/ which are determined via the \"substitution of maximal subparts\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105648,"byte_end":105715,"line_start":1714,"line_end":1714,"column_start":5,"column_end":72}},{"value":"/ strategy described in the docs for the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105720,"byte_end":105762,"line_start":1715,"line_end":1715,"column_start":5,"column_end":47}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105767,"byte_end":105840,"line_start":1716,"line_end":1716,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105845,"byte_end":105856,"line_start":1717,"line_end":1717,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105861,"byte_end":105864,"line_start":1718,"line_end":1718,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105869,"byte_end":105883,"line_start":1719,"line_end":1719,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105888,"byte_end":105891,"line_start":1720,"line_end":1720,"column_start":5,"column_end":8}},{"value":"/ This example shows how to gather all valid and invalid chunks from a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105896,"byte_end":105968,"line_start":1721,"line_end":1721,"column_start":5,"column_end":77}},{"value":"/ byte slice:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105973,"byte_end":105988,"line_start":1722,"line_end":1722,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":105993,"byte_end":105996,"line_start":1723,"line_end":1723,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106001,"byte_end":106008,"line_start":1724,"line_end":1724,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, Utf8Chunk};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106013,"byte_end":106050,"line_start":1725,"line_end":1725,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106055,"byte_end":106058,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"foo\\xFD\\xFEbar\\xFF\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106063,"byte_end":106101,"line_start":1727,"line_end":1727,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106106,"byte_end":106109,"line_start":1728,"line_end":1728,"column_start":5,"column_end":8}},{"value":"/ let (mut valid_chunks, mut invalid_chunks) = (vec![], vec![]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106114,"byte_end":106180,"line_start":1729,"line_end":1729,"column_start":5,"column_end":71}},{"value":"/ for chunk in bytes.utf8_chunks() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106185,"byte_end":106223,"line_start":1730,"line_end":1730,"column_start":5,"column_end":43}},{"value":"/     if !chunk.valid().is_empty() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106228,"byte_end":106266,"line_start":1731,"line_end":1731,"column_start":5,"column_end":43}},{"value":"/         valid_chunks.push(chunk.valid());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106271,"byte_end":106316,"line_start":1732,"line_end":1732,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106321,"byte_end":106330,"line_start":1733,"line_end":1733,"column_start":5,"column_end":14}},{"value":"/     if !chunk.invalid().is_empty() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106335,"byte_end":106375,"line_start":1734,"line_end":1734,"column_start":5,"column_end":45}},{"value":"/         invalid_chunks.push(chunk.invalid());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106380,"byte_end":106429,"line_start":1735,"line_end":1735,"column_start":5,"column_end":54}},{"value":"/     }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106434,"byte_end":106443,"line_start":1736,"line_end":1736,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106448,"byte_end":106453,"line_start":1737,"line_end":1737,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106458,"byte_end":106461,"line_start":1738,"line_end":1738,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(valid_chunks, vec![\"foo\", \"bar\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106466,"byte_end":106515,"line_start":1739,"line_end":1739,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(invalid_chunks, vec![b\"\\xFD\", b\"\\xFE\", b\"\\xFF\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106520,"byte_end":106584,"line_start":1740,"line_end":1740,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106589,"byte_end":106596,"line_start":1741,"line_end":1741,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":106601,"byte_end":106610,"line_start":1742,"line_end":1742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117542,"byte_end":117547,"line_start":2057,"line_end":2057,"column_start":8,"column_end":13},"name":"lines","qualname":"::ext_slice::ByteSlice::lines","value":"pub fn lines(&Self) -> Lines","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":116938,"byte_end":117000,"line_start":2030,"line_end":2030,"column_start":5,"column_end":67}},{"value":"/ terminators.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117005,"byte_end":117021,"line_start":2031,"line_end":2031,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117026,"byte_end":117029,"line_start":2032,"line_end":2032,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117034,"byte_end":117108,"line_start":2033,"line_end":2033,"column_start":5,"column_end":79}},{"value":"/ `\\n`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117113,"byte_end":117122,"line_start":2034,"line_end":2034,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117127,"byte_end":117130,"line_start":2035,"line_end":2035,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117135,"byte_end":117149,"line_start":2036,"line_end":2036,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117154,"byte_end":117157,"line_start":2037,"line_end":2037,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117162,"byte_end":117178,"line_start":2038,"line_end":2038,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117183,"byte_end":117186,"line_start":2039,"line_end":2039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117191,"byte_end":117198,"line_start":2040,"line_end":2040,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117203,"byte_end":117232,"line_start":2041,"line_end":2041,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117237,"byte_end":117240,"line_start":2042,"line_end":2042,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117245,"byte_end":117260,"line_start":2043,"line_end":2043,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117265,"byte_end":117272,"line_start":2044,"line_end":2044,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117277,"byte_end":117280,"line_start":2045,"line_end":2045,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117285,"byte_end":117294,"line_start":2046,"line_end":2046,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117299,"byte_end":117306,"line_start":2047,"line_end":2047,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117311,"byte_end":117314,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117319,"byte_end":117322,"line_start":2049,"line_end":2049,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117327,"byte_end":117337,"line_start":2050,"line_end":2050,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117342,"byte_end":117390,"line_start":2051,"line_end":2051,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117395,"byte_end":117422,"line_start":2052,"line_end":2052,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\"), B(\"\"), B(\"bar\"), B(\"baz\"), B(\"\"), B(\"\"), B(\"quux\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117427,"byte_end":117496,"line_start":2053,"line_end":2053,"column_start":5,"column_end":74}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117501,"byte_end":117508,"line_start":2054,"line_end":2054,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117513,"byte_end":117520,"line_start":2055,"line_end":2055,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117525,"byte_end":117534,"line_start":2056,"line_end":2056,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118711,"byte_end":118732,"line_start":2101,"line_end":2101,"column_start":8,"column_end":29},"name":"lines_with_terminator","qualname":"::ext_slice::ByteSlice::lines_with_terminator","value":"pub fn lines_with_terminator(&Self) -> LinesWithTerminator","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117617,"byte_end":117681,"line_start":2061,"line_end":2061,"column_start":5,"column_end":69}},{"value":"/ terminators.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117686,"byte_end":117702,"line_start":2062,"line_end":2062,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117707,"byte_end":117710,"line_start":2063,"line_end":2063,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117715,"byte_end":117789,"line_start":2064,"line_end":2064,"column_start":5,"column_end":79}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117794,"byte_end":117868,"line_start":2065,"line_end":2065,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117873,"byte_end":117876,"line_start":2066,"line_end":2066,"column_start":5,"column_end":8}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117881,"byte_end":117955,"line_start":2067,"line_end":2067,"column_start":5,"column_end":79}},{"value":"/ byte string. For example, the last line in a byte string may not end","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":117960,"byte_end":118032,"line_start":2068,"line_end":2068,"column_start":5,"column_end":77}},{"value":"/ with a line terminator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118037,"byte_end":118064,"line_start":2069,"line_end":2069,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118069,"byte_end":118072,"line_start":2070,"line_end":2070,"column_start":5,"column_end":8}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118077,"byte_end":118149,"line_start":2071,"line_end":2071,"column_start":5,"column_end":77}},{"value":"/ yield the original byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118154,"byte_end":118189,"line_start":2072,"line_end":2072,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118194,"byte_end":118197,"line_start":2073,"line_end":2073,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118202,"byte_end":118216,"line_start":2074,"line_end":2074,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118221,"byte_end":118224,"line_start":2075,"line_end":2075,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118229,"byte_end":118245,"line_start":2076,"line_end":2076,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118250,"byte_end":118253,"line_start":2077,"line_end":2077,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118258,"byte_end":118265,"line_start":2078,"line_end":2078,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118270,"byte_end":118299,"line_start":2079,"line_end":2079,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118304,"byte_end":118307,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118312,"byte_end":118327,"line_start":2081,"line_end":2081,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118332,"byte_end":118339,"line_start":2082,"line_end":2082,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118344,"byte_end":118347,"line_start":2083,"line_end":2083,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118352,"byte_end":118361,"line_start":2084,"line_end":2084,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118366,"byte_end":118373,"line_start":2085,"line_end":2085,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118378,"byte_end":118381,"line_start":2086,"line_end":2086,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118386,"byte_end":118389,"line_start":2087,"line_end":2087,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118394,"byte_end":118404,"line_start":2088,"line_end":2088,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines_with_terminator().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118409,"byte_end":118473,"line_start":2089,"line_end":2089,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118478,"byte_end":118505,"line_start":2090,"line_end":2090,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\\n\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118510,"byte_end":118529,"line_start":2091,"line_end":2091,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118534,"byte_end":118550,"line_start":2092,"line_end":2092,"column_start":5,"column_end":21}},{"value":"/     B(\"bar\\r\\n\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118555,"byte_end":118576,"line_start":2093,"line_end":2093,"column_start":5,"column_end":26}},{"value":"/     B(\"baz\\n\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118581,"byte_end":118600,"line_start":2094,"line_end":2094,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118605,"byte_end":118621,"line_start":2095,"line_end":2095,"column_start":5,"column_end":21}},{"value":"/     B(\"\\n\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118626,"byte_end":118642,"line_start":2096,"line_end":2096,"column_start":5,"column_end":21}},{"value":"/     B(\"quux\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118647,"byte_end":118665,"line_start":2097,"line_end":2097,"column_start":5,"column_end":23}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118670,"byte_end":118677,"line_start":2098,"line_end":2098,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118682,"byte_end":118689,"line_start":2099,"line_end":2099,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":118694,"byte_end":118703,"line_start":2100,"line_end":2100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120902,"byte_end":120911,"line_start":2185,"line_end":2185,"column_start":8,"column_end":17},"name":"trim_with","qualname":"::ext_slice::ByteSlice::trim_with","value":"pub fn trim_with<F: FnMut(char) -> bool>(&Self, F) -> &[u8]","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing characters\n satisfying the given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing characters","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120534,"byte_end":120601,"line_start":2171,"line_end":2171,"column_start":5,"column_end":72}},{"value":"/ satisfying the given predicate removed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120606,"byte_end":120649,"line_start":2172,"line_end":2172,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120654,"byte_end":120657,"line_start":2173,"line_end":2173,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120662,"byte_end":120676,"line_start":2174,"line_end":2174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120681,"byte_end":120684,"line_start":2175,"line_end":2175,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120689,"byte_end":120705,"line_start":2176,"line_end":2176,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120710,"byte_end":120713,"line_start":2177,"line_end":2177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120718,"byte_end":120725,"line_start":2178,"line_end":2178,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120730,"byte_end":120759,"line_start":2179,"line_end":2179,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120764,"byte_end":120767,"line_start":2180,"line_end":2180,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120772,"byte_end":120801,"line_start":2181,"line_end":2181,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_with(|c| c.is_numeric()), B(\"foo5bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120806,"byte_end":120868,"line_start":2182,"line_end":2182,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120873,"byte_end":120880,"line_start":2183,"line_end":2183,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":120885,"byte_end":120894,"line_start":2184,"line_end":2184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121407,"byte_end":121422,"line_start":2203,"line_end":2203,"column_start":8,"column_end":23},"name":"trim_start_with","qualname":"::ext_slice::ByteSlice::trim_start_with","value":"pub fn trim_start_with<F: FnMut(char) -> bool>(&Self, F) -> &[u8]","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading characters satisfying the given\n predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading characters satisfying the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121043,"byte_end":121118,"line_start":2189,"line_end":2189,"column_start":5,"column_end":80}},{"value":"/ predicate removed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121123,"byte_end":121145,"line_start":2190,"line_end":2190,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121150,"byte_end":121153,"line_start":2191,"line_end":2191,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121158,"byte_end":121172,"line_start":2192,"line_end":2192,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121177,"byte_end":121180,"line_start":2193,"line_end":2193,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121185,"byte_end":121201,"line_start":2194,"line_end":2194,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121206,"byte_end":121209,"line_start":2195,"line_end":2195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121214,"byte_end":121221,"line_start":2196,"line_end":2196,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121226,"byte_end":121255,"line_start":2197,"line_end":2197,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121260,"byte_end":121263,"line_start":2198,"line_end":2198,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121268,"byte_end":121297,"line_start":2199,"line_end":2199,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_start_with(|c| c.is_numeric()), B(\"foo5bar789\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121302,"byte_end":121373,"line_start":2200,"line_end":2200,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121378,"byte_end":121385,"line_start":2201,"line_end":2201,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121390,"byte_end":121399,"line_start":2202,"line_end":2202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":122009,"byte_end":122022,"line_start":2226,"line_end":2226,"column_start":8,"column_end":21},"name":"trim_end_with","qualname":"::ext_slice::ByteSlice::trim_end_with","value":"pub fn trim_end_with<F: FnMut(char) -> bool>(&Self, F) -> &[u8]","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing characters satisfying the\n given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing characters satisfying the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121646,"byte_end":121716,"line_start":2212,"line_end":2212,"column_start":5,"column_end":75}},{"value":"/ given predicate removed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121721,"byte_end":121749,"line_start":2213,"line_end":2213,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121754,"byte_end":121757,"line_start":2214,"line_end":2214,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121762,"byte_end":121776,"line_start":2215,"line_end":2215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121781,"byte_end":121784,"line_start":2216,"line_end":2216,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121789,"byte_end":121805,"line_start":2217,"line_end":2217,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121810,"byte_end":121813,"line_start":2218,"line_end":2218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121818,"byte_end":121825,"line_start":2219,"line_end":2219,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121830,"byte_end":121859,"line_start":2220,"line_end":2220,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121864,"byte_end":121867,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121872,"byte_end":121901,"line_start":2222,"line_end":2222,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_end_with(|c| c.is_numeric()), B(\"123foo5bar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121906,"byte_end":121975,"line_start":2223,"line_end":2223,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121980,"byte_end":121987,"line_start":2224,"line_end":2224,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":121992,"byte_end":122001,"line_start":2225,"line_end":2225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127683,"byte_end":127701,"line_start":2399,"line_end":2399,"column_start":8,"column_end":26},"name":"to_ascii_lowercase","qualname":"::ext_slice::ByteSlice::to_ascii_lowercase","value":"pub fn to_ascii_lowercase(&Self) -> Vec<u8>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126573,"byte_end":126645,"line_start":2366,"line_end":2366,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126650,"byte_end":126671,"line_start":2367,"line_end":2367,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126676,"byte_end":126679,"line_start":2368,"line_end":2368,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126684,"byte_end":126757,"line_start":2369,"line_end":2369,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126762,"byte_end":126837,"line_start":2370,"line_end":2370,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126842,"byte_end":126909,"line_start":2371,"line_end":2371,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126914,"byte_end":126963,"line_start":2372,"line_end":2372,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126968,"byte_end":126971,"line_start":2373,"line_end":2373,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":126976,"byte_end":127050,"line_start":2374,"line_end":2374,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_lowercase`](#method.make_ascii_lowercase) to perform","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127055,"byte_end":127124,"line_start":2375,"line_end":2375,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127129,"byte_end":127157,"line_start":2376,"line_end":2376,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127162,"byte_end":127165,"line_start":2377,"line_end":2377,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127170,"byte_end":127184,"line_start":2378,"line_end":2378,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127189,"byte_end":127192,"line_start":2379,"line_end":2379,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127197,"byte_end":127213,"line_start":2380,"line_end":2380,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127218,"byte_end":127221,"line_start":2381,"line_end":2381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127226,"byte_end":127233,"line_start":2382,"line_end":2382,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127238,"byte_end":127267,"line_start":2383,"line_end":2383,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127272,"byte_end":127275,"line_start":2384,"line_end":2384,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127280,"byte_end":127306,"line_start":2385,"line_end":2385,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello Β\".as_bytes(), s.to_ascii_lowercase().as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127311,"byte_end":127384,"line_start":2386,"line_end":2386,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127389,"byte_end":127396,"line_start":2387,"line_end":2387,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127401,"byte_end":127404,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127409,"byte_end":127441,"line_start":2389,"line_end":2389,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127446,"byte_end":127449,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127454,"byte_end":127461,"line_start":2391,"line_end":2391,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127466,"byte_end":127495,"line_start":2392,"line_end":2392,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127500,"byte_end":127503,"line_start":2393,"line_end":2393,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127508,"byte_end":127548,"line_start":2394,"line_end":2394,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_lowercase(), B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127553,"byte_end":127621,"line_start":2395,"line_end":2395,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127626,"byte_end":127633,"line_start":2396,"line_end":2396,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127638,"byte_end":127661,"line_start":2397,"line_end":2397,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127666,"byte_end":127675,"line_start":2398,"line_end":2398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128756,"byte_end":128776,"line_start":2434,"line_end":2434,"column_start":8,"column_end":28},"name":"make_ascii_lowercase","qualname":"::ext_slice::ByteSlice::make_ascii_lowercase","value":"pub fn make_ascii_lowercase(&mut Self)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Convert this byte string to its lowercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its lowercase ASCII equivalent in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127778,"byte_end":127850,"line_start":2403,"line_end":2403,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127855,"byte_end":127858,"line_start":2404,"line_end":2404,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127863,"byte_end":127936,"line_start":2405,"line_end":2405,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":127941,"byte_end":128016,"line_start":2406,"line_end":2406,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128021,"byte_end":128024,"line_start":2407,"line_end":2407,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128029,"byte_end":128074,"line_start":2408,"line_end":2408,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128079,"byte_end":128129,"line_start":2409,"line_end":2409,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_lowercase`](#method.to_ascii_lowercase) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128134,"byte_end":128197,"line_start":2410,"line_end":2410,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128202,"byte_end":128205,"line_start":2411,"line_end":2411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128210,"byte_end":128224,"line_start":2412,"line_end":2412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128229,"byte_end":128232,"line_start":2413,"line_end":2413,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128237,"byte_end":128253,"line_start":2414,"line_end":2414,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128258,"byte_end":128261,"line_start":2415,"line_end":2415,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128266,"byte_end":128273,"line_start":2416,"line_end":2416,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128278,"byte_end":128302,"line_start":2417,"line_end":2417,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128307,"byte_end":128310,"line_start":2418,"line_end":2418,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"HELLO Β\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128315,"byte_end":128359,"line_start":2419,"line_end":2419,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128364,"byte_end":128393,"line_start":2420,"line_end":2420,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, \"hello Β\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128398,"byte_end":128439,"line_start":2421,"line_end":2421,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128444,"byte_end":128451,"line_start":2422,"line_end":2422,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128456,"byte_end":128459,"line_start":2423,"line_end":2423,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128464,"byte_end":128496,"line_start":2424,"line_end":2424,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128501,"byte_end":128504,"line_start":2425,"line_end":2425,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128509,"byte_end":128516,"line_start":2426,"line_end":2426,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128521,"byte_end":128559,"line_start":2427,"line_end":2427,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128564,"byte_end":128567,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128572,"byte_end":128636,"line_start":2429,"line_end":2429,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128641,"byte_end":128670,"line_start":2430,"line_end":2430,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128675,"byte_end":128722,"line_start":2431,"line_end":2431,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128727,"byte_end":128734,"line_start":2432,"line_end":2432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":128739,"byte_end":128748,"line_start":2433,"line_end":2433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134097,"byte_end":134115,"line_start":2599,"line_end":2599,"column_start":8,"column_end":26},"name":"to_ascii_uppercase","qualname":"::ext_slice::ByteSlice::to_ascii_uppercase","value":"pub fn to_ascii_uppercase(&Self) -> Vec<u8>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133006,"byte_end":133078,"line_start":2566,"line_end":2566,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133083,"byte_end":133104,"line_start":2567,"line_end":2567,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133109,"byte_end":133112,"line_start":2568,"line_end":2568,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133117,"byte_end":133190,"line_start":2569,"line_end":2569,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133195,"byte_end":133270,"line_start":2570,"line_end":2570,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133275,"byte_end":133342,"line_start":2571,"line_end":2571,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133347,"byte_end":133396,"line_start":2572,"line_end":2572,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133401,"byte_end":133404,"line_start":2573,"line_end":2573,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133409,"byte_end":133483,"line_start":2574,"line_end":2574,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_uppercase`](#method.make_ascii_uppercase) to perform","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133488,"byte_end":133557,"line_start":2575,"line_end":2575,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133562,"byte_end":133590,"line_start":2576,"line_end":2576,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133595,"byte_end":133598,"line_start":2577,"line_end":2577,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133603,"byte_end":133617,"line_start":2578,"line_end":2578,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133622,"byte_end":133625,"line_start":2579,"line_end":2579,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133630,"byte_end":133646,"line_start":2580,"line_end":2580,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133651,"byte_end":133654,"line_start":2581,"line_end":2581,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133659,"byte_end":133666,"line_start":2582,"line_end":2582,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133671,"byte_end":133700,"line_start":2583,"line_end":2583,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133705,"byte_end":133708,"line_start":2584,"line_end":2584,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133713,"byte_end":133739,"line_start":2585,"line_end":2585,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(\"HELLO β\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133744,"byte_end":133798,"line_start":2586,"line_end":2586,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133803,"byte_end":133810,"line_start":2587,"line_end":2587,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133815,"byte_end":133818,"line_start":2588,"line_end":2588,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133823,"byte_end":133855,"line_start":2589,"line_end":2589,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133860,"byte_end":133863,"line_start":2590,"line_end":2590,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133868,"byte_end":133875,"line_start":2591,"line_end":2591,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133880,"byte_end":133909,"line_start":2592,"line_end":2592,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133914,"byte_end":133917,"line_start":2593,"line_end":2593,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133922,"byte_end":133962,"line_start":2594,"line_end":2594,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":133967,"byte_end":134035,"line_start":2595,"line_end":2595,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134040,"byte_end":134047,"line_start":2596,"line_end":2596,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134052,"byte_end":134075,"line_start":2597,"line_end":2597,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134080,"byte_end":134089,"line_start":2598,"line_end":2598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135167,"byte_end":135187,"line_start":2634,"line_end":2634,"column_start":8,"column_end":28},"name":"make_ascii_uppercase","qualname":"::ext_slice::ByteSlice::make_ascii_uppercase","value":"pub fn make_ascii_uppercase(&mut Self)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Convert this byte string to its uppercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its uppercase ASCII equivalent in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134192,"byte_end":134264,"line_start":2603,"line_end":2603,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134269,"byte_end":134272,"line_start":2604,"line_end":2604,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134277,"byte_end":134350,"line_start":2605,"line_end":2605,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134355,"byte_end":134430,"line_start":2606,"line_end":2606,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134435,"byte_end":134438,"line_start":2607,"line_end":2607,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134443,"byte_end":134488,"line_start":2608,"line_end":2608,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134493,"byte_end":134543,"line_start":2609,"line_end":2609,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_uppercase`](#method.to_ascii_uppercase) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134548,"byte_end":134611,"line_start":2610,"line_end":2610,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134616,"byte_end":134619,"line_start":2611,"line_end":2611,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134624,"byte_end":134638,"line_start":2612,"line_end":2612,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134643,"byte_end":134646,"line_start":2613,"line_end":2613,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134651,"byte_end":134667,"line_start":2614,"line_end":2614,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134672,"byte_end":134675,"line_start":2615,"line_end":2615,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134680,"byte_end":134687,"line_start":2616,"line_end":2616,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134692,"byte_end":134721,"line_start":2617,"line_end":2617,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134726,"byte_end":134729,"line_start":2618,"line_end":2618,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello β\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134734,"byte_end":134778,"line_start":2619,"line_end":2619,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134783,"byte_end":134812,"line_start":2620,"line_end":2620,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(\"HELLO β\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134817,"byte_end":134850,"line_start":2621,"line_end":2621,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134855,"byte_end":134862,"line_start":2622,"line_end":2622,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134867,"byte_end":134870,"line_start":2623,"line_end":2623,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134875,"byte_end":134907,"line_start":2624,"line_end":2624,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134912,"byte_end":134915,"line_start":2625,"line_end":2625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134920,"byte_end":134927,"line_start":2626,"line_end":2626,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134932,"byte_end":134970,"line_start":2627,"line_end":2627,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134975,"byte_end":134978,"line_start":2628,"line_end":2628,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":134983,"byte_end":135047,"line_start":2629,"line_end":2629,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135052,"byte_end":135081,"line_start":2630,"line_end":2630,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135086,"byte_end":135133,"line_start":2631,"line_end":2631,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135138,"byte_end":135145,"line_start":2632,"line_end":2632,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135150,"byte_end":135159,"line_start":2633,"line_end":2633,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136054,"byte_end":136067,"line_start":2661,"line_end":2661,"column_start":8,"column_end":21},"name":"reverse_bytes","qualname":"::ext_slice::ByteSlice::reverse_bytes","value":"pub fn reverse_bytes(&mut Self)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Reverse the bytes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the bytes in this string, in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135264,"byte_end":135311,"line_start":2638,"line_end":2638,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135316,"byte_end":135319,"line_start":2639,"line_end":2639,"column_start":5,"column_end":8}},{"value":"/ This is not necessarily a well formed operation! For example, if this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135324,"byte_end":135397,"line_start":2640,"line_end":2640,"column_start":5,"column_end":78}},{"value":"/ byte string contains valid UTF-8 that isn't ASCII, then reversing the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135402,"byte_end":135475,"line_start":2641,"line_end":2641,"column_start":5,"column_end":78}},{"value":"/ string will likely result in invalid UTF-8 and otherwise non-sensical","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135480,"byte_end":135553,"line_start":2642,"line_end":2642,"column_start":5,"column_end":78}},{"value":"/ content.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135558,"byte_end":135570,"line_start":2643,"line_end":2643,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135575,"byte_end":135578,"line_start":2644,"line_end":2644,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `[u8]::reverse` method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135583,"byte_end":135654,"line_start":2645,"line_end":2645,"column_start":5,"column_end":76}},{"value":"/ This method is provided to permit callers to explicitly differentiate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135659,"byte_end":135732,"line_start":2646,"line_end":2646,"column_start":5,"column_end":78}},{"value":"/ between reversing bytes, codepoints and graphemes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135737,"byte_end":135791,"line_start":2647,"line_end":2647,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135796,"byte_end":135799,"line_start":2648,"line_end":2648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135804,"byte_end":135818,"line_start":2649,"line_end":2649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135823,"byte_end":135826,"line_start":2650,"line_end":2650,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135831,"byte_end":135847,"line_start":2651,"line_end":2651,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135852,"byte_end":135855,"line_start":2652,"line_end":2652,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135860,"byte_end":135867,"line_start":2653,"line_end":2653,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135872,"byte_end":135896,"line_start":2654,"line_end":2654,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135901,"byte_end":135904,"line_start":2655,"line_end":2655,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135909,"byte_end":135950,"line_start":2656,"line_end":2656,"column_start":5,"column_end":46}},{"value":"/ s.reverse_bytes();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135955,"byte_end":135977,"line_start":2657,"line_end":2657,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"olleh\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":135982,"byte_end":136020,"line_start":2658,"line_end":2658,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136025,"byte_end":136032,"line_start":2659,"line_end":2659,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136037,"byte_end":136046,"line_start":2660,"line_end":2660,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138472,"byte_end":138485,"line_start":2732,"line_end":2732,"column_start":8,"column_end":21},"name":"reverse_chars","qualname":"::ext_slice::ByteSlice::reverse_chars","value":"pub fn reverse_chars(&mut Self)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Reverse the codepoints in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the codepoints in this string, in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136131,"byte_end":136183,"line_start":2665,"line_end":2665,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136188,"byte_end":136191,"line_start":2666,"line_end":2666,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by codepoint","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136196,"byte_end":136266,"line_start":2667,"line_end":2667,"column_start":5,"column_end":75}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136271,"byte_end":136312,"line_start":2668,"line_end":2668,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136317,"byte_end":136320,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136325,"byte_end":136399,"line_start":2670,"line_end":2670,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136404,"byte_end":136407,"line_start":2671,"line_end":2671,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136412,"byte_end":136419,"line_start":2672,"line_end":2672,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136424,"byte_end":136448,"line_start":2673,"line_end":2673,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136453,"byte_end":136456,"line_start":2674,"line_end":2674,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136461,"byte_end":136506,"line_start":2675,"line_end":2675,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136511,"byte_end":136514,"line_start":2676,"line_end":2676,"column_start":5,"column_end":8}},{"value":"/ let mut chars: Vec<char> = s.chars().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136519,"byte_end":136570,"line_start":2677,"line_end":2677,"column_start":5,"column_end":56}},{"value":"/ chars.reverse();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136575,"byte_end":136595,"line_start":2678,"line_end":2678,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136600,"byte_end":136603,"line_start":2679,"line_end":2679,"column_start":5,"column_end":8}},{"value":"/ let reversed: String = chars.into_iter().collect();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136608,"byte_end":136663,"line_start":2680,"line_end":2680,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136668,"byte_end":136706,"line_start":2681,"line_end":2681,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136711,"byte_end":136718,"line_start":2682,"line_end":2682,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136723,"byte_end":136726,"line_start":2683,"line_end":2683,"column_start":5,"column_end":8}},{"value":"/ Note that this is not necessarily a well formed operation. For example,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136731,"byte_end":136806,"line_start":2684,"line_end":2684,"column_start":5,"column_end":80}},{"value":"/ if this byte string contains grapheme clusters with more than one","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136811,"byte_end":136880,"line_start":2685,"line_end":2685,"column_start":5,"column_end":74}},{"value":"/ codepoint, then those grapheme clusters will not necessarily be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136885,"byte_end":136952,"line_start":2686,"line_end":2686,"column_start":5,"column_end":72}},{"value":"/ preserved. If you'd like to preserve grapheme clusters, then use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":136957,"byte_end":137025,"line_start":2687,"line_end":2687,"column_start":5,"column_end":73}},{"value":"/ [`reverse_graphemes`](#method.reverse_graphemes) instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137030,"byte_end":137091,"line_start":2688,"line_end":2688,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137096,"byte_end":137099,"line_start":2689,"line_end":2689,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137104,"byte_end":137118,"line_start":2690,"line_end":2690,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137123,"byte_end":137126,"line_start":2691,"line_end":2691,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137131,"byte_end":137147,"line_start":2692,"line_end":2692,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137152,"byte_end":137155,"line_start":2693,"line_end":2693,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137160,"byte_end":137167,"line_start":2694,"line_end":2694,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137172,"byte_end":137196,"line_start":2695,"line_end":2695,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137201,"byte_end":137204,"line_start":2696,"line_end":2696,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137209,"byte_end":137254,"line_start":2697,"line_end":2697,"column_start":5,"column_end":48}},{"value":"/ s.reverse_chars();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137259,"byte_end":137281,"line_start":2698,"line_end":2698,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137286,"byte_end":137328,"line_start":2699,"line_end":2699,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137333,"byte_end":137340,"line_start":2700,"line_end":2700,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137345,"byte_end":137348,"line_start":2701,"line_end":2701,"column_start":5,"column_end":8}},{"value":"/ This example shows that not all reversals lead to a well formed string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137353,"byte_end":137428,"line_start":2702,"line_end":2702,"column_start":5,"column_end":80}},{"value":"/ For example, in this case, combining marks are used to put accents over","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137433,"byte_end":137508,"line_start":2703,"line_end":2703,"column_start":5,"column_end":80}},{"value":"/ some letters, and those accent marks must appear after the codepoints","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137513,"byte_end":137586,"line_start":2704,"line_end":2704,"column_start":5,"column_end":78}},{"value":"/ they modify.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137591,"byte_end":137607,"line_start":2705,"line_end":2705,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137612,"byte_end":137615,"line_start":2706,"line_end":2706,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137620,"byte_end":137627,"line_start":2707,"line_end":2707,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137632,"byte_end":137661,"line_start":2708,"line_end":2708,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137666,"byte_end":137669,"line_start":2709,"line_end":2709,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137674,"byte_end":137720,"line_start":2710,"line_end":2710,"column_start":5,"column_end":49}},{"value":"/ s.reverse_chars();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137725,"byte_end":137747,"line_start":2711,"line_end":2711,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(b\"\\xCC\\x81emus\\xCC\\x81er\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137752,"byte_end":137800,"line_start":2712,"line_end":2712,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137805,"byte_end":137812,"line_start":2713,"line_end":2713,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137817,"byte_end":137820,"line_start":2714,"line_end":2714,"column_start":5,"column_end":8}},{"value":"/ A word of warning: the above example relies on the fact that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137825,"byte_end":137889,"line_start":2715,"line_end":2715,"column_start":5,"column_end":69}},{"value":"/ `résumé` is in decomposed normal form, which means there are separate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137894,"byte_end":137971,"line_start":2716,"line_end":2716,"column_start":5,"column_end":80}},{"value":"/ codepoints for the accents above `e`. If it is instead in composed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":137976,"byte_end":138046,"line_start":2717,"line_end":2717,"column_start":5,"column_end":75}},{"value":"/ normal form, then the example works:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138051,"byte_end":138091,"line_start":2718,"line_end":2718,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138096,"byte_end":138099,"line_start":2719,"line_end":2719,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138104,"byte_end":138111,"line_start":2720,"line_end":2720,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138116,"byte_end":138145,"line_start":2721,"line_end":2721,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138150,"byte_end":138153,"line_start":2722,"line_end":2722,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138158,"byte_end":138202,"line_start":2723,"line_end":2723,"column_start":5,"column_end":47}},{"value":"/ s.reverse_chars();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138207,"byte_end":138229,"line_start":2724,"line_end":2724,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(\"émusér\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138234,"byte_end":138267,"line_start":2725,"line_end":2725,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138272,"byte_end":138279,"line_start":2726,"line_end":2726,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138284,"byte_end":138287,"line_start":2727,"line_end":2727,"column_start":5,"column_end":8}},{"value":"/ The point here is to be cautious and not assume that just because","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138292,"byte_end":138361,"line_start":2728,"line_end":2728,"column_start":5,"column_end":74}},{"value":"/ `reverse_chars` works in one case, that it therefore works in all","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138366,"byte_end":138435,"line_start":2729,"line_end":2729,"column_start":5,"column_end":74}},{"value":"/ cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138440,"byte_end":138450,"line_start":2730,"line_end":2730,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":138455,"byte_end":138464,"line_start":2731,"line_end":2731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140994,"byte_end":141002,"line_start":2825,"line_end":2825,"column_start":8,"column_end":16},"name":"is_ascii","qualname":"::ext_slice::ByteSlice::is_ascii","value":"pub fn is_ascii(&Self) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns true if and only if every byte in this byte string is ASCII.","sig":null,"attributes":[{"value":"/ Returns true if and only if every byte in this byte string is ASCII.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140468,"byte_end":140540,"line_start":2807,"line_end":2807,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140545,"byte_end":140548,"line_start":2808,"line_end":2808,"column_start":5,"column_end":8}},{"value":"/ ASCII is an encoding that defines 128 codepoints. A byte corresponds to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140553,"byte_end":140628,"line_start":2809,"line_end":2809,"column_start":5,"column_end":80}},{"value":"/ an ASCII codepoint if and only if it is in the inclusive range","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140633,"byte_end":140699,"line_start":2810,"line_end":2810,"column_start":5,"column_end":71}},{"value":"/ `[0, 127]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140704,"byte_end":140719,"line_start":2811,"line_end":2811,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140724,"byte_end":140727,"line_start":2812,"line_end":2812,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140732,"byte_end":140746,"line_start":2813,"line_end":2813,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140751,"byte_end":140754,"line_start":2814,"line_end":2814,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140759,"byte_end":140775,"line_start":2815,"line_end":2815,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140780,"byte_end":140783,"line_start":2816,"line_end":2816,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140788,"byte_end":140795,"line_start":2817,"line_end":2817,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140800,"byte_end":140829,"line_start":2818,"line_end":2818,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140834,"byte_end":140837,"line_start":2819,"line_end":2819,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_ascii());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140842,"byte_end":140875,"line_start":2820,"line_end":2820,"column_start":5,"column_end":38}},{"value":"/ assert!(!B(\"☃βツ\").is_ascii());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140880,"byte_end":140919,"line_start":2821,"line_end":2821,"column_start":5,"column_end":39}},{"value":"/ assert!(!B(b\"\\xFF\").is_ascii());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140924,"byte_end":140960,"line_start":2822,"line_end":2822,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140965,"byte_end":140972,"line_start":2823,"line_end":2823,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":140977,"byte_end":140986,"line_start":2824,"line_end":2824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141879,"byte_end":141886,"line_start":2853,"line_end":2853,"column_start":8,"column_end":15},"name":"is_utf8","qualname":"::ext_slice::ByteSlice::is_utf8","value":"pub fn is_utf8(&Self) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns true if and only if the entire byte string is valid UTF-8.","sig":null,"attributes":[{"value":"/ Returns true if and only if the entire byte string is valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141109,"byte_end":141179,"line_start":2829,"line_end":2829,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141184,"byte_end":141187,"line_start":2830,"line_end":2830,"column_start":5,"column_end":8}},{"value":"/ If you need location information about where a byte string's first","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141192,"byte_end":141262,"line_start":2831,"line_end":2831,"column_start":5,"column_end":75}},{"value":"/ invalid UTF-8 byte is, then use the [`to_str`](#method.to_str) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141267,"byte_end":141341,"line_start":2832,"line_end":2832,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141346,"byte_end":141349,"line_start":2833,"line_end":2833,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141354,"byte_end":141368,"line_start":2834,"line_end":2834,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141373,"byte_end":141376,"line_start":2835,"line_end":2835,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141381,"byte_end":141397,"line_start":2836,"line_end":2836,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141402,"byte_end":141405,"line_start":2837,"line_end":2837,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141410,"byte_end":141417,"line_start":2838,"line_end":2838,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141422,"byte_end":141451,"line_start":2839,"line_end":2839,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141456,"byte_end":141459,"line_start":2840,"line_end":2840,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_utf8());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141464,"byte_end":141496,"line_start":2841,"line_end":2841,"column_start":5,"column_end":37}},{"value":"/ assert!(B(\"☃βツ\").is_utf8());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141501,"byte_end":141538,"line_start":2842,"line_end":2842,"column_start":5,"column_end":37}},{"value":"/ // invalid bytes","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141543,"byte_end":141563,"line_start":2843,"line_end":2843,"column_start":5,"column_end":25}},{"value":"/ assert!(!B(b\"abc\\xFF\").is_utf8());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141568,"byte_end":141606,"line_start":2844,"line_end":2844,"column_start":5,"column_end":43}},{"value":"/ // surrogate encoding","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141611,"byte_end":141636,"line_start":2845,"line_end":2845,"column_start":5,"column_end":30}},{"value":"/ assert!(!B(b\"\\xED\\xA0\\x80\").is_utf8());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141641,"byte_end":141684,"line_start":2846,"line_end":2846,"column_start":5,"column_end":48}},{"value":"/ // incomplete sequence","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141689,"byte_end":141715,"line_start":2847,"line_end":2847,"column_start":5,"column_end":31}},{"value":"/ assert!(!B(b\"\\xF0\\x9D\\x9Ca\").is_utf8());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141720,"byte_end":141764,"line_start":2848,"line_end":2848,"column_start":5,"column_end":49}},{"value":"/ // overlong sequence","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141769,"byte_end":141793,"line_start":2849,"line_end":2849,"column_start":5,"column_end":29}},{"value":"/ assert!(!B(b\"\\xF0\\x82\\x82\\xAC\").is_utf8());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141798,"byte_end":141845,"line_start":2850,"line_end":2850,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141850,"byte_end":141857,"line_start":2851,"line_end":2851,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141862,"byte_end":141871,"line_start":2852,"line_end":2852,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142476,"byte_end":142485,"line_start":2874,"line_end":2874,"column_start":8,"column_end":17},"name":"last_byte","qualname":"::ext_slice::ByteSlice::last_byte","value":"pub fn last_byte(&Self) -> Option<u8>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the last byte in this byte string, if it's non-empty. If this\n byte string is empty, this returns `None`.","sig":null,"attributes":[{"value":"/ Returns the last byte in this byte string, if it's non-empty. If this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":141963,"byte_end":142036,"line_start":2857,"line_end":2857,"column_start":5,"column_end":78}},{"value":"/ byte string is empty, this returns `None`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142041,"byte_end":142087,"line_start":2858,"line_end":2858,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142092,"byte_end":142095,"line_start":2859,"line_end":2859,"column_start":5,"column_end":8}},{"value":"/ Note that this is like the generic `[u8]::last`, except this returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142100,"byte_end":142172,"line_start":2860,"line_end":2860,"column_start":5,"column_end":77}},{"value":"/ the byte by value instead of a reference to the byte.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142177,"byte_end":142234,"line_start":2861,"line_end":2861,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142239,"byte_end":142242,"line_start":2862,"line_end":2862,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142247,"byte_end":142261,"line_start":2863,"line_end":2863,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142266,"byte_end":142269,"line_start":2864,"line_end":2864,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142274,"byte_end":142290,"line_start":2865,"line_end":2865,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142295,"byte_end":142298,"line_start":2866,"line_end":2866,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142303,"byte_end":142310,"line_start":2867,"line_end":2867,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142315,"byte_end":142339,"line_start":2868,"line_end":2868,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142344,"byte_end":142347,"line_start":2869,"line_end":2869,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(b'z'), b\"baz\".last_byte());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142352,"byte_end":142399,"line_start":2870,"line_end":2870,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(None, b\"\".last_byte());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142404,"byte_end":142442,"line_start":2871,"line_end":2871,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142447,"byte_end":142454,"line_start":2872,"line_end":2872,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142459,"byte_end":142468,"line_start":2873,"line_end":2873,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143166,"byte_end":143185,"line_start":2895,"line_end":2895,"column_start":8,"column_end":27},"name":"find_non_ascii_byte","qualname":"::ext_slice::ByteSlice::find_non_ascii_byte","value":"pub fn find_non_ascii_byte(&Self) -> Option<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns the index of the first non-ASCII byte in this byte string (if\n any such indices exist). Specifically, it returns the index of the\n first byte with a value greater than or equal to `0x80`.","sig":null,"attributes":[{"value":"/ Returns the index of the first non-ASCII byte in this byte string (if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142618,"byte_end":142691,"line_start":2879,"line_end":2879,"column_start":5,"column_end":78}},{"value":"/ any such indices exist). Specifically, it returns the index of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142696,"byte_end":142766,"line_start":2880,"line_end":2880,"column_start":5,"column_end":75}},{"value":"/ first byte with a value greater than or equal to `0x80`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142771,"byte_end":142831,"line_start":2881,"line_end":2881,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142836,"byte_end":142839,"line_start":2882,"line_end":2882,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142844,"byte_end":142858,"line_start":2883,"line_end":2883,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142863,"byte_end":142866,"line_start":2884,"line_end":2884,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142871,"byte_end":142887,"line_start":2885,"line_end":2885,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142892,"byte_end":142895,"line_start":2886,"line_end":2886,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142900,"byte_end":142907,"line_start":2887,"line_end":2887,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, B};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142912,"byte_end":142941,"line_start":2888,"line_end":2888,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142946,"byte_end":142949,"line_start":2889,"line_end":2889,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(3), b\"abc\\xff\".find_non_ascii_byte());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":142954,"byte_end":143012,"line_start":2890,"line_end":2890,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"abcde\".find_non_ascii_byte());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143017,"byte_end":143070,"line_start":2891,"line_end":2891,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(Some(0), B(\"😀\").find_non_ascii_byte());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143075,"byte_end":143132,"line_start":2892,"line_end":2892,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143137,"byte_end":143144,"line_start":2893,"line_end":2893,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143149,"byte_end":143158,"line_start":2894,"line_end":2894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144325,"byte_end":144340,"line_start":2930,"line_end":2930,"column_start":8,"column_end":23},"name":"copy_within_str","qualname":"::ext_slice::ByteSlice::copy_within_str","value":"pub fn copy_within_str<R>(&mut Self, R, usize) where\nR: ops::RangeBounds<usize>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Copies elements from one part of the slice to another part of itself,\n where the parts may be overlapping.","sig":null,"attributes":[{"value":"/ Copies elements from one part of the slice to another part of itself,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143401,"byte_end":143474,"line_start":2904,"line_end":2904,"column_start":5,"column_end":78}},{"value":"/ where the parts may be overlapping.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143479,"byte_end":143518,"line_start":2905,"line_end":2905,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143523,"byte_end":143526,"line_start":2906,"line_end":2906,"column_start":5,"column_end":8}},{"value":"/ `src` is the range within this byte string to copy from, while `dest`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143531,"byte_end":143604,"line_start":2907,"line_end":2907,"column_start":5,"column_end":78}},{"value":"/ is the starting index of the range within this byte string to copy to.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143609,"byte_end":143683,"line_start":2908,"line_end":2908,"column_start":5,"column_end":79}},{"value":"/ The length indicated by `src` must be less than or equal to the number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143688,"byte_end":143762,"line_start":2909,"line_end":2909,"column_start":5,"column_end":79}},{"value":"/ of bytes from `dest` to the end of the byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143767,"byte_end":143822,"line_start":2910,"line_end":2910,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143827,"byte_end":143830,"line_start":2911,"line_end":2911,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143835,"byte_end":143847,"line_start":2912,"line_end":2912,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143852,"byte_end":143855,"line_start":2913,"line_end":2913,"column_start":5,"column_end":8}},{"value":"/ Panics if either range is out of bounds, or if `src` is too big to fit","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143860,"byte_end":143934,"line_start":2914,"line_end":2914,"column_start":5,"column_end":79}},{"value":"/ into `dest`, or if the end of `src` is before the start.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":143939,"byte_end":143999,"line_start":2915,"line_end":2915,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144004,"byte_end":144007,"line_start":2916,"line_end":2916,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144012,"byte_end":144026,"line_start":2917,"line_end":2917,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144031,"byte_end":144034,"line_start":2918,"line_end":2918,"column_start":5,"column_end":8}},{"value":"/ Copying four bytes within a byte string:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144039,"byte_end":144083,"line_start":2919,"line_end":2919,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144088,"byte_end":144091,"line_start":2920,"line_end":2920,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144096,"byte_end":144103,"line_start":2921,"line_end":2921,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144108,"byte_end":144137,"line_start":2922,"line_end":2922,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144142,"byte_end":144145,"line_start":2923,"line_end":2923,"column_start":5,"column_end":8}},{"value":"/ let mut buf = *b\"Hello, World!\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144150,"byte_end":144186,"line_start":2924,"line_end":2924,"column_start":5,"column_end":41}},{"value":"/ let s = &mut buf;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144191,"byte_end":144212,"line_start":2925,"line_end":2925,"column_start":5,"column_end":26}},{"value":"/ s.copy_within_str(1..5, 8);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144217,"byte_end":144248,"line_start":2926,"line_end":2926,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(s, B(\"Hello, Wello!\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144253,"byte_end":144291,"line_start":2927,"line_end":2927,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144296,"byte_end":144303,"line_start":2928,"line_end":2928,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":144308,"byte_end":144317,"line_start":2929,"line_end":2929,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146815,"byte_end":146821,"line_start":2988,"line_end":2988,"column_start":12,"column_end":18},"name":"Finder","qualname":"::ext_slice::Finder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":145898,"byte_end":145959,"line_start":2971,"line_end":2971,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":145960,"byte_end":145963,"line_start":2972,"line_end":2972,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":145964,"byte_end":146038,"line_start":2973,"line_end":2973,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146039,"byte_end":146112,"line_start":2974,"line_end":2974,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146113,"byte_end":146187,"line_start":2975,"line_end":2975,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146188,"byte_end":146264,"line_start":2976,"line_end":2976,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146265,"byte_end":146343,"line_start":2977,"line_end":2977,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::find`](trait.ByteSlice.html#method.find)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146344,"byte_end":146401,"line_start":2978,"line_end":2978,"column_start":1,"column_end":58}},{"value":"/ or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146402,"byte_end":146408,"line_start":2979,"line_end":2979,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::find_iter`](trait.ByteSlice.html#method.find_iter)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146409,"byte_end":146476,"line_start":2980,"line_end":2980,"column_start":1,"column_end":68}},{"value":"/ is good enough, but `Finder` is useful when you can meaningfully observe","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146477,"byte_end":146553,"line_start":2981,"line_end":2981,"column_start":1,"column_end":77}},{"value":"/ searcher construction time in a profile.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146554,"byte_end":146598,"line_start":2982,"line_end":2982,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146599,"byte_end":146602,"line_start":2983,"line_end":2983,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146603,"byte_end":146676,"line_start":2984,"line_end":2984,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146677,"byte_end":146751,"line_start":2985,"line_end":2985,"column_start":1,"column_end":75}},{"value":"/ lifetime of its needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146752,"byte_end":146779,"line_start":2986,"line_end":2986,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146945,"byte_end":146948,"line_start":2993,"line_end":2993,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'a B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146874,"byte_end":146919,"line_start":2991,"line_end":2991,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146924,"byte_end":146933,"line_start":2992,"line_end":2992,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147412,"byte_end":147422,"line_start":3006,"line_end":3006,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Finder>::into_owned","value":"pub fn into_owned(Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147069,"byte_end":147139,"line_start":2997,"line_end":2997,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147144,"byte_end":147167,"line_start":2998,"line_end":2998,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147172,"byte_end":147175,"line_start":2999,"line_end":2999,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147180,"byte_end":147252,"line_start":3000,"line_end":3000,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147257,"byte_end":147284,"line_start":3001,"line_end":3001,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147289,"byte_end":147292,"line_start":3002,"line_end":3002,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147297,"byte_end":147358,"line_start":3003,"line_end":3003,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147363,"byte_end":147386,"line_start":3004,"line_end":3004,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147391,"byte_end":147400,"line_start":3005,"line_end":3005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147886,"byte_end":147892,"line_start":3017,"line_end":3017,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147497,"byte_end":147550,"line_start":3010,"line_end":3010,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147555,"byte_end":147558,"line_start":3011,"line_end":3011,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147563,"byte_end":147636,"line_start":3012,"line_end":3012,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'a` lifetime. Namely, a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147641,"byte_end":147712,"line_start":3013,"line_end":3013,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147717,"byte_end":147792,"line_start":3014,"line_end":3014,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147797,"byte_end":147860,"line_start":3015,"line_end":3015,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147865,"byte_end":147874,"line_start":3016,"line_end":3016,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148915,"byte_end":148919,"line_start":3049,"line_end":3049,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"pub fn find<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":147946,"byte_end":148019,"line_start":3021,"line_end":3021,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148024,"byte_end":148037,"line_start":3022,"line_end":3022,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148042,"byte_end":148045,"line_start":3023,"line_end":3023,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148050,"byte_end":148119,"line_start":3024,"line_end":3024,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148124,"byte_end":148194,"line_start":3025,"line_end":3025,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148199,"byte_end":148202,"line_start":3026,"line_end":3026,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148207,"byte_end":148223,"line_start":3027,"line_end":3027,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148228,"byte_end":148231,"line_start":3028,"line_end":3028,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148236,"byte_end":148308,"line_start":3029,"line_end":3029,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148313,"byte_end":148385,"line_start":3030,"line_end":3030,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148390,"byte_end":148437,"line_start":3031,"line_end":3031,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148442,"byte_end":148445,"line_start":3032,"line_end":3032,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148450,"byte_end":148519,"line_start":3033,"line_end":3033,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148524,"byte_end":148539,"line_start":3034,"line_end":3034,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148544,"byte_end":148547,"line_start":3035,"line_end":3035,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148552,"byte_end":148566,"line_start":3036,"line_end":3036,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148571,"byte_end":148574,"line_start":3037,"line_end":3037,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148579,"byte_end":148595,"line_start":3038,"line_end":3038,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148600,"byte_end":148603,"line_start":3039,"line_end":3039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148608,"byte_end":148615,"line_start":3040,"line_end":3040,"column_start":5,"column_end":12}},{"value":"/ use bstr::Finder;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148620,"byte_end":148641,"line_start":3041,"line_end":3041,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148646,"byte_end":148649,"line_start":3042,"line_end":3042,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148654,"byte_end":148687,"line_start":3043,"line_end":3043,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148692,"byte_end":148751,"line_start":3044,"line_end":3044,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148756,"byte_end":148815,"line_start":3045,"line_end":3045,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148820,"byte_end":148877,"line_start":3046,"line_end":3046,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148882,"byte_end":148889,"line_start":3047,"line_end":3047,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":148894,"byte_end":148903,"line_start":3048,"line_end":3048,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149966,"byte_end":149979,"line_start":3071,"line_end":3071,"column_start":12,"column_end":25},"name":"FinderReverse","qualname":"::ext_slice::FinderReverse","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149023,"byte_end":149092,"line_start":3054,"line_end":3054,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149093,"byte_end":149096,"line_start":3055,"line_end":3055,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149097,"byte_end":149171,"line_start":3056,"line_end":3056,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149172,"byte_end":149245,"line_start":3057,"line_end":3057,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149246,"byte_end":149320,"line_start":3058,"line_end":3058,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149321,"byte_end":149397,"line_start":3059,"line_end":3059,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149398,"byte_end":149476,"line_start":3060,"line_end":3060,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::rfind`](trait.ByteSlice.html#method.rfind)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149477,"byte_end":149536,"line_start":3061,"line_end":3061,"column_start":1,"column_end":60}},{"value":"/ or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149537,"byte_end":149543,"line_start":3062,"line_end":3062,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::rfind_iter`](trait.ByteSlice.html#method.rfind_iter)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149544,"byte_end":149613,"line_start":3063,"line_end":3063,"column_start":1,"column_end":70}},{"value":"/ is good enough, but `FinderReverse` is useful when you can meaningfully","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149614,"byte_end":149689,"line_start":3064,"line_end":3064,"column_start":1,"column_end":76}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149690,"byte_end":149742,"line_start":3065,"line_end":3065,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149743,"byte_end":149746,"line_start":3066,"line_end":3066,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149747,"byte_end":149820,"line_start":3067,"line_end":3067,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderReverse` that is not connected to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149821,"byte_end":149898,"line_start":3068,"line_end":3068,"column_start":1,"column_end":78}},{"value":"/ the lifetime of its needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":149899,"byte_end":149930,"line_start":3069,"line_end":3069,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150121,"byte_end":150124,"line_start":3076,"line_end":3076,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderReverse>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'a B) -> FinderReverse","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150042,"byte_end":150095,"line_start":3074,"line_end":3074,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150100,"byte_end":150109,"line_start":3075,"line_end":3075,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150605,"byte_end":150615,"line_start":3089,"line_end":3089,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FinderReverse>::into_owned","value":"pub fn into_owned(Self) -> FinderReverse","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150262,"byte_end":150332,"line_start":3080,"line_end":3080,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150337,"byte_end":150360,"line_start":3081,"line_end":3081,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150365,"byte_end":150368,"line_start":3082,"line_end":3082,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150373,"byte_end":150445,"line_start":3083,"line_end":3083,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150450,"byte_end":150477,"line_start":3084,"line_end":3084,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150482,"byte_end":150485,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150490,"byte_end":150551,"line_start":3086,"line_end":3086,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150556,"byte_end":150579,"line_start":3087,"line_end":3087,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150584,"byte_end":150593,"line_start":3088,"line_end":3088,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151094,"byte_end":151100,"line_start":3100,"line_end":3100,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderReverse>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150704,"byte_end":150757,"line_start":3093,"line_end":3093,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150762,"byte_end":150765,"line_start":3094,"line_end":3094,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150770,"byte_end":150843,"line_start":3095,"line_end":3095,"column_start":5,"column_end":78}},{"value":"/ of this finder, and may be shorter than the `'a` lifetime. Namely,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150848,"byte_end":150918,"line_start":3096,"line_end":3096,"column_start":5,"column_end":75}},{"value":"/ a finder's needle can be either borrowed or owned, so the lifetime of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150923,"byte_end":150996,"line_start":3097,"line_end":3097,"column_start":5,"column_end":78}},{"value":"/ the needle returned must necessarily be the shorter of the two.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151001,"byte_end":151068,"line_start":3098,"line_end":3098,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151073,"byte_end":151082,"line_start":3099,"line_end":3099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152153,"byte_end":152158,"line_start":3132,"line_end":3132,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderReverse>::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151154,"byte_end":151226,"line_start":3104,"line_end":3104,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151231,"byte_end":151244,"line_start":3105,"line_end":3105,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151249,"byte_end":151252,"line_start":3106,"line_end":3106,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151257,"byte_end":151326,"line_start":3107,"line_end":3107,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151331,"byte_end":151401,"line_start":3108,"line_end":3108,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151406,"byte_end":151409,"line_start":3109,"line_end":3109,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151414,"byte_end":151430,"line_start":3110,"line_end":3110,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151435,"byte_end":151438,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151443,"byte_end":151515,"line_start":3112,"line_end":3112,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151520,"byte_end":151592,"line_start":3113,"line_end":3113,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151597,"byte_end":151644,"line_start":3114,"line_end":3114,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151649,"byte_end":151652,"line_start":3115,"line_end":3115,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151657,"byte_end":151726,"line_start":3116,"line_end":3116,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151731,"byte_end":151746,"line_start":3117,"line_end":3117,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151751,"byte_end":151754,"line_start":3118,"line_end":3118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151759,"byte_end":151773,"line_start":3119,"line_end":3119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151778,"byte_end":151781,"line_start":3120,"line_end":3120,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151786,"byte_end":151802,"line_start":3121,"line_end":3121,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151807,"byte_end":151810,"line_start":3122,"line_end":3122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151815,"byte_end":151822,"line_start":3123,"line_end":3123,"column_start":5,"column_end":12}},{"value":"/ use bstr::FinderReverse;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151827,"byte_end":151855,"line_start":3124,"line_end":3124,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151860,"byte_end":151863,"line_start":3125,"line_end":3125,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151868,"byte_end":151901,"line_start":3126,"line_end":3126,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), FinderReverse::new(\"foo\").rfind(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151906,"byte_end":151973,"line_start":3127,"line_end":3127,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Some(4), FinderReverse::new(\"bar\").rfind(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":151978,"byte_end":152045,"line_start":3128,"line_end":3128,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(None, FinderReverse::new(\"quux\").rfind(haystack));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152050,"byte_end":152115,"line_start":3129,"line_end":3129,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152120,"byte_end":152127,"line_start":3130,"line_end":3130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152132,"byte_end":152141,"line_start":3131,"line_end":3131,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152534,"byte_end":152538,"line_start":3144,"line_end":3144,"column_start":12,"column_end":16},"name":"Find","qualname":"::ext_slice::Find","value":"Find {  }","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152263,"byte_end":152318,"line_start":3137,"line_end":3137,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152319,"byte_end":152322,"line_start":3138,"line_end":3138,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152323,"byte_end":152387,"line_start":3139,"line_end":3139,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152388,"byte_end":152391,"line_start":3140,"line_end":3140,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152392,"byte_end":152471,"line_start":3141,"line_end":3141,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152472,"byte_end":152505,"line_start":3142,"line_end":3142,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":985},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153222,"byte_end":153233,"line_start":3172,"line_end":3172,"column_start":12,"column_end":23},"name":"FindReverse","qualname":"::ext_slice::FindReverse","value":"FindReverse {  }","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152940,"byte_end":153006,"line_start":3165,"line_end":3165,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153007,"byte_end":153010,"line_start":3166,"line_end":3166,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153011,"byte_end":153075,"line_start":3167,"line_end":3167,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153076,"byte_end":153079,"line_start":3168,"line_end":3168,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153080,"byte_end":153159,"line_start":3169,"line_end":3169,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153160,"byte_end":153193,"line_start":3170,"line_end":3170,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153986,"byte_end":153991,"line_start":3209,"line_end":3209,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::ext_slice::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":995}],"decl_id":null,"docs":" An iterator over the bytes in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over the bytes in a byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153837,"byte_end":153885,"line_start":3205,"line_end":3205,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153886,"byte_end":153889,"line_start":3206,"line_end":3206,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being traversed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153890,"byte_end":153950,"line_start":3207,"line_end":3207,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154285,"byte_end":154293,"line_start":3218,"line_end":3218,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Bytes>::as_slice","value":"pub fn as_slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Views the remaining underlying data as a subslice of the original data.\n This has the same lifetime as the original slice,\n and so the iterator can continue to be used while this exists.\n","sig":null,"attributes":[{"value":"/ Views the remaining underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154055,"byte_end":154130,"line_start":3214,"line_end":3214,"column_start":5,"column_end":80}},{"value":"/ This has the same lifetime as the original slice,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154135,"byte_end":154188,"line_start":3215,"line_end":3215,"column_start":5,"column_end":58}},{"value":"/ and so the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154193,"byte_end":154259,"line_start":3216,"line_end":3216,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154264,"byte_end":154273,"line_start":3217,"line_end":3217,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155215,"byte_end":155221,"line_start":3260,"line_end":3260,"column_start":12,"column_end":18},"name":"Fields","qualname":"::ext_slice::Fields","value":"Fields {  }","parent":null,"children":[{"krate":0,"index":1004}],"decl_id":null,"docs":" An iterator over the fields in a byte string, separated by whitespace.","sig":null,"attributes":[{"value":"/ An iterator over the fields in a byte string, separated by whitespace.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154920,"byte_end":154994,"line_start":3253,"line_end":3253,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154995,"byte_end":154998,"line_start":3254,"line_end":3254,"column_start":1,"column_end":4}},{"value":"/ This iterator splits on contiguous runs of whitespace, such that the fields","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154999,"byte_end":155078,"line_start":3255,"line_end":3255,"column_start":1,"column_end":80}},{"value":"/ in `foo\\t\\t\\n  \\nbar` are `foo` and `bar`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155079,"byte_end":155125,"line_start":3256,"line_end":3256,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155126,"byte_end":155129,"line_start":3257,"line_end":3257,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155130,"byte_end":155186,"line_start":3258,"line_end":3258,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":156023,"byte_end":156033,"line_start":3289,"line_end":3289,"column_start":12,"column_end":22},"name":"FieldsWith","qualname":"::ext_slice::FieldsWith","value":"FieldsWith {  }","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013}],"decl_id":null,"docs":" An iterator over fields in the byte string, separated by a predicate over\n codepoints.","sig":null,"attributes":[{"value":"/ An iterator over fields in the byte string, separated by a predicate over","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155567,"byte_end":155644,"line_start":3279,"line_end":3279,"column_start":1,"column_end":78}},{"value":"/ codepoints.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155645,"byte_end":155660,"line_start":3280,"line_end":3280,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155661,"byte_end":155664,"line_start":3281,"line_end":3281,"column_start":1,"column_end":4}},{"value":"/ This iterator splits a byte string based on its predicate function such","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155665,"byte_end":155740,"line_start":3282,"line_end":3282,"column_start":1,"column_end":76}},{"value":"/ that the elements returned are separated by contiguous runs of codepoints","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155741,"byte_end":155818,"line_start":3283,"line_end":3283,"column_start":1,"column_end":78}},{"value":"/ for which the predicate returns true.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155819,"byte_end":155860,"line_start":3284,"line_end":3284,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155861,"byte_end":155864,"line_start":3285,"line_end":3285,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155865,"byte_end":155943,"line_start":3286,"line_end":3286,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155944,"byte_end":155994,"line_start":3287,"line_end":3287,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157160,"byte_end":157165,"line_start":3333,"line_end":3333,"column_start":12,"column_end":17},"name":"Split","qualname":"::ext_slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":156999,"byte_end":157070,"line_start":3329,"line_end":3329,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157071,"byte_end":157074,"line_start":3330,"line_end":3330,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157075,"byte_end":157131,"line_start":3331,"line_end":3331,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":158977,"byte_end":158989,"line_start":3389,"line_end":3389,"column_start":12,"column_end":24},"name":"SplitReverse","qualname":"::ext_slice::SplitReverse","value":"SplitReverse {  }","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator, in\n reverse.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator, in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":158727,"byte_end":158801,"line_start":3383,"line_end":3383,"column_start":1,"column_end":75}},{"value":"/ reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":158802,"byte_end":158814,"line_start":3384,"line_end":3384,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":158815,"byte_end":158818,"line_start":3385,"line_end":3385,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":158819,"byte_end":158897,"line_start":3386,"line_end":3386,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":158898,"byte_end":158948,"line_start":3387,"line_end":3387,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160861,"byte_end":160867,"line_start":3446,"line_end":3446,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::ext_slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160611,"byte_end":160683,"line_start":3440,"line_end":3440,"column_start":1,"column_end":73}},{"value":"/ separator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160684,"byte_end":160698,"line_start":3441,"line_end":3441,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160699,"byte_end":160702,"line_start":3442,"line_end":3442,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160703,"byte_end":160781,"line_start":3443,"line_end":3443,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160782,"byte_end":160832,"line_start":3444,"line_end":3444,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161827,"byte_end":161840,"line_start":3485,"line_end":3485,"column_start":12,"column_end":25},"name":"SplitNReverse","qualname":"::ext_slice::SplitNReverse","value":"SplitNReverse {  }","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator, in reverse.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161565,"byte_end":161637,"line_start":3479,"line_end":3479,"column_start":1,"column_end":73}},{"value":"/ separator, in reverse.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161638,"byte_end":161664,"line_start":3480,"line_end":3480,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161665,"byte_end":161668,"line_start":3481,"line_end":3481,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161669,"byte_end":161747,"line_start":3482,"line_end":3482,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161748,"byte_end":161798,"line_start":3483,"line_end":3483,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162821,"byte_end":162826,"line_start":3524,"line_end":3524,"column_start":12,"column_end":17},"name":"Lines","qualname":"::ext_slice::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":466}],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their terminators.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162576,"byte_end":162651,"line_start":3518,"line_end":3518,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162652,"byte_end":162655,"line_start":3519,"line_end":3519,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162656,"byte_end":162730,"line_start":3520,"line_end":3520,"column_start":1,"column_end":75}},{"value":"/ `\\n`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162731,"byte_end":162740,"line_start":3521,"line_end":3521,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162741,"byte_end":162744,"line_start":3522,"line_end":3522,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162745,"byte_end":162809,"line_start":3523,"line_end":3523,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163999,"byte_end":164018,"line_start":3563,"line_end":3563,"column_start":12,"column_end":31},"name":"LinesWithTerminator","qualname":"::ext_slice::LinesWithTerminator","value":"LinesWithTerminator {  }","parent":null,"children":[{"krate":0,"index":476}],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their terminators.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163394,"byte_end":163471,"line_start":3550,"line_end":3550,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163472,"byte_end":163475,"line_start":3551,"line_end":3551,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163476,"byte_end":163550,"line_start":3552,"line_end":3552,"column_start":1,"column_end":75}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163551,"byte_end":163625,"line_start":3553,"line_end":3553,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163626,"byte_end":163629,"line_start":3554,"line_end":3554,"column_start":1,"column_end":4}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163630,"byte_end":163704,"line_start":3555,"line_end":3555,"column_start":1,"column_end":75}},{"value":"/ byte string. For example, the last line in a byte string may not end with","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163705,"byte_end":163782,"line_start":3556,"line_end":3556,"column_start":1,"column_end":78}},{"value":"/ a line terminator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163783,"byte_end":163805,"line_start":3557,"line_end":3557,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163806,"byte_end":163809,"line_start":3558,"line_end":3558,"column_start":1,"column_end":4}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to yield","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163810,"byte_end":163888,"line_start":3559,"line_end":3559,"column_start":1,"column_end":79}},{"value":"/ the original byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163889,"byte_end":163918,"line_start":3560,"line_end":3560,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163919,"byte_end":163922,"line_start":3561,"line_end":3561,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163923,"byte_end":163987,"line_start":3562,"line_end":3562,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166941,"byte_end":166947,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"concat","qualname":"::ext_vec::concat","value":"pub fn concat<T, I>(I) -> Vec<u8> where T: AsRef<[u8]>, I: IntoIterator<Item =\nT>","parent":null,"children":[],"decl_id":null,"docs":" Concatenate the elements given by the iterator together into a single\n `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Concatenate the elements given by the iterator together into a single","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166502,"byte_end":166575,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/ `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166576,"byte_end":166590,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166591,"byte_end":166594,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The elements may be any type that can be cheaply converted into an `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166595,"byte_end":166674,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ This includes, but is not limited to, `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166675,"byte_end":166752,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166753,"byte_end":166756,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166757,"byte_end":166771,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166772,"byte_end":166775,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166776,"byte_end":166792,"line_start":23,"line_end":23,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166793,"byte_end":166796,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166797,"byte_end":166804,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166805,"byte_end":166818,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166819,"byte_end":166822,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::concat(&[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166823,"byte_end":166872,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(s, \"foobarbaz\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166873,"byte_end":166915,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166916,"byte_end":166923,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":166924,"byte_end":166933,"line_start":31,"line_end":31,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167624,"byte_end":167628,"line_start":62,"line_end":62,"column_start":8,"column_end":12},"name":"join","qualname":"::ext_vec::join","value":"pub fn join<B, T, I>(B, I) -> Vec<u8> where B: AsRef<[u8]>, T: AsRef<[u8]>,\nI: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Join the elements given by the iterator with the given separator into a\n single `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Join the elements given by the iterator with the given separator into a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167144,"byte_end":167219,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ single `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167220,"byte_end":167241,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167242,"byte_end":167245,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Both the separator and the elements may be any type that can be cheaply","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167246,"byte_end":167321,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ converted into an `&[u8]`. This includes, but is not limited to,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167322,"byte_end":167390,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167391,"byte_end":167430,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167431,"byte_end":167434,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167435,"byte_end":167449,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167450,"byte_end":167453,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167454,"byte_end":167470,"line_start":53,"line_end":53,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167471,"byte_end":167474,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167475,"byte_end":167482,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167483,"byte_end":167496,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167497,"byte_end":167500,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::join(\",\", &[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167501,"byte_end":167553,"line_start":58,"line_end":58,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(s, \"foo,bar,baz\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167554,"byte_end":167598,"line_start":59,"line_end":59,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167599,"byte_end":167606,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":167607,"byte_end":167616,"line_start":61,"line_end":61,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168421,"byte_end":168427,"line_start":102,"line_end":102,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_vec::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168304,"byte_end":168369,"line_start":100,"line_end":100,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168370,"byte_end":168410,"line_start":101,"line_end":101,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168847,"byte_end":168854,"line_start":117,"line_end":117,"column_start":11,"column_end":18},"name":"ByteVec","qualname":"::ext_vec::ByteVec","value":"ByteVec: Sealed","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":585}],"decl_id":null,"docs":" A trait that extends `Vec<u8>` with string oriented methods.","sig":null,"attributes":[{"value":"/ A trait that extends `Vec<u8>` with string oriented methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168459,"byte_end":168523,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168524,"byte_end":168527,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ Note that when using the constructor methods, such as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168528,"byte_end":168585,"line_start":107,"line_end":107,"column_start":1,"column_end":58}},{"value":"/ `ByteVec::from_slice`, one should actually call them using the concrete","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168586,"byte_end":168661,"line_start":108,"line_end":108,"column_start":1,"column_end":76}},{"value":"/ type. For example:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168662,"byte_end":168684,"line_start":109,"line_end":109,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168685,"byte_end":168688,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168689,"byte_end":168696,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168697,"byte_end":168724,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168725,"byte_end":168728,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ let s = Vec::from_slice(b\"abc\"); // NOT ByteVec::from_slice(\"...\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168729,"byte_end":168799,"line_start":114,"line_end":114,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168800,"byte_end":168828,"line_start":115,"line_end":115,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168829,"byte_end":168836,"line_start":116,"line_end":116,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169087,"byte_end":169093,"line_start":122,"line_end":122,"column_start":8,"column_end":14},"name":"as_vec","qualname":"::ext_vec::ByteVec::as_vec","value":"pub fn as_vec(&Self) -> &Vec<u8>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type. This is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168869,"byte_end":168938,"line_start":118,"line_end":118,"column_start":5,"column_end":74}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168943,"byte_end":169015,"line_start":119,"line_end":119,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169020,"byte_end":169060,"line_start":120,"line_end":120,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169346,"byte_end":169356,"line_start":128,"line_end":128,"column_start":8,"column_end":18},"name":"as_vec_mut","qualname":"::ext_vec::ByteVec::as_vec_mut","value":"pub fn as_vec_mut(&mut Self) -> &mut Vec<u8>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type, mutably. This\n is always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type, mutably. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169119,"byte_end":169194,"line_start":124,"line_end":124,"column_start":5,"column_end":80}},{"value":"/ is always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169199,"byte_end":169274,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/ for making the extension trait work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169279,"byte_end":169319,"line_start":126,"line_end":126,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169599,"byte_end":169607,"line_start":134,"line_end":134,"column_start":8,"column_end":16},"name":"into_vec","qualname":"::ext_vec::ByteVec::into_vec","value":"pub fn into_vec(Self) -> Vec<u8> where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" A method for consuming ownership of this vector. This is always a no-op\n and callers shouldn't care about it. This only exists for making the\n extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for consuming ownership of this vector. This is always a no-op","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169390,"byte_end":169465,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ and callers shouldn't care about it. This only exists for making the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169470,"byte_end":169542,"line_start":131,"line_end":131,"column_start":5,"column_end":77}},{"value":"/ extension trait work.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169547,"byte_end":169572,"line_start":132,"line_end":132,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169946,"byte_end":169956,"line_start":151,"line_end":151,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::ext_vec::ByteVec::from_slice","value":"pub fn from_slice<B: AsRef<[u8]>>(B) -> Vec<u8>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Create a new owned byte string from the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new owned byte string from the given byte slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169661,"byte_end":169722,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169727,"byte_end":169730,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169735,"byte_end":169749,"line_start":140,"line_end":140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169754,"byte_end":169757,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169762,"byte_end":169778,"line_start":142,"line_end":142,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169783,"byte_end":169786,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169791,"byte_end":169798,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169803,"byte_end":169830,"line_start":145,"line_end":145,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169835,"byte_end":169838,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let s = Vec::from_slice(b\"abc\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169843,"byte_end":169879,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169884,"byte_end":169912,"line_start":148,"line_end":148,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169917,"byte_end":169924,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":169929,"byte_end":169938,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170583,"byte_end":170597,"line_start":174,"line_end":174,"column_start":8,"column_end":22},"name":"from_os_string","qualname":"::ext_vec::ByteVec::from_os_string","value":"pub fn from_os_string(OsString) -> Result<Vec<u8>, OsString>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned OS string.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned OS string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170039,"byte_end":170092,"line_start":155,"line_end":155,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170097,"byte_end":170100,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170105,"byte_end":170177,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/ this returns the original OS string if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170182,"byte_end":170247,"line_start":158,"line_end":158,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170252,"byte_end":170255,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170260,"byte_end":170274,"line_start":160,"line_end":160,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170279,"byte_end":170282,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170287,"byte_end":170303,"line_start":162,"line_end":162,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170308,"byte_end":170311,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170316,"byte_end":170323,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170328,"byte_end":170355,"line_start":165,"line_end":165,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170360,"byte_end":170363,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170368,"byte_end":170395,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170400,"byte_end":170403,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsString::from(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170408,"byte_end":170447,"line_start":169,"line_end":169,"column_start":5,"column_end":44}},{"value":"/ let bs = Vec::from_os_string(os_str).expect(\"valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170452,"byte_end":170515,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170520,"byte_end":170549,"line_start":171,"line_end":171,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170554,"byte_end":170561,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":170566,"byte_end":170575,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171744,"byte_end":171761,"line_start":213,"line_end":213,"column_start":8,"column_end":25},"name":"from_os_str_lossy","qualname":"::ext_vec::ByteVec::from_os_str_lossy","value":"pub fn from_os_str_lossy<'a>(&'a OsStr) -> Cow","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from an OS string slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171054,"byte_end":171115,"line_start":192,"line_end":192,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171120,"byte_end":171123,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171128,"byte_end":171203,"line_start":194,"line_end":194,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given OS string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171208,"byte_end":171280,"line_start":195,"line_end":195,"column_start":5,"column_end":77}},{"value":"/ slice is not valid UTF-8, then it is lossily decoded into valid UTF-8","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171285,"byte_end":171358,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ (with invalid bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171363,"byte_end":171434,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171439,"byte_end":171442,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171447,"byte_end":171461,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171466,"byte_end":171469,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171474,"byte_end":171490,"line_start":201,"line_end":201,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171495,"byte_end":171498,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171503,"byte_end":171510,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171515,"byte_end":171539,"line_start":204,"line_end":204,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171544,"byte_end":171547,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171552,"byte_end":171579,"line_start":206,"line_end":206,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171584,"byte_end":171587,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171592,"byte_end":171627,"line_start":208,"line_end":208,"column_start":5,"column_end":40}},{"value":"/ let bs = Vec::from_os_str_lossy(os_str);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171632,"byte_end":171676,"line_start":209,"line_end":209,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171681,"byte_end":171710,"line_start":210,"line_end":210,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171715,"byte_end":171722,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":171727,"byte_end":171736,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172870,"byte_end":172883,"line_start":253,"line_end":253,"column_start":8,"column_end":21},"name":"from_path_buf","qualname":"::ext_vec::ByteVec::from_path_buf","value":"pub fn from_path_buf(PathBuf) -> Result<Vec<u8>, PathBuf>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned file path.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned file path.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172329,"byte_end":172382,"line_start":234,"line_end":234,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172387,"byte_end":172390,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172395,"byte_end":172467,"line_start":236,"line_end":236,"column_start":5,"column_end":77}},{"value":"/ this returns the original path if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172472,"byte_end":172532,"line_start":237,"line_end":237,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172537,"byte_end":172540,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172545,"byte_end":172559,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172564,"byte_end":172567,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172572,"byte_end":172588,"line_start":241,"line_end":241,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172593,"byte_end":172596,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172601,"byte_end":172608,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ use std::path::PathBuf;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172613,"byte_end":172640,"line_start":244,"line_end":244,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172645,"byte_end":172648,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172653,"byte_end":172680,"line_start":246,"line_end":246,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172685,"byte_end":172688,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let path = PathBuf::from(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172693,"byte_end":172729,"line_start":248,"line_end":248,"column_start":5,"column_end":41}},{"value":"/ let bs = Vec::from_path_buf(path).expect(\"must be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172734,"byte_end":172802,"line_start":249,"line_end":249,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172807,"byte_end":172836,"line_start":250,"line_end":250,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172841,"byte_end":172848,"line_start":251,"line_end":251,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":172853,"byte_end":172862,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173679,"byte_end":173694,"line_start":278,"line_end":278,"column_start":8,"column_end":23},"name":"from_path_lossy","qualname":"::ext_vec::ByteVec::from_path_lossy","value":"pub fn from_path_lossy<'a>(&'a Path) -> Cow","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from a file path.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from a file path.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173014,"byte_end":173068,"line_start":257,"line_end":257,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173073,"byte_end":173076,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173081,"byte_end":173156,"line_start":259,"line_end":259,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given path is not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173161,"byte_end":173235,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8, then it is lossily decoded into valid UTF-8 (with invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173240,"byte_end":173314,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173319,"byte_end":173376,"line_start":262,"line_end":262,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173381,"byte_end":173384,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173389,"byte_end":173403,"line_start":264,"line_end":264,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173408,"byte_end":173411,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173416,"byte_end":173432,"line_start":266,"line_end":266,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173437,"byte_end":173440,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173445,"byte_end":173452,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173457,"byte_end":173481,"line_start":269,"line_end":269,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173486,"byte_end":173489,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173494,"byte_end":173521,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173526,"byte_end":173529,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173534,"byte_end":173566,"line_start":273,"line_end":273,"column_start":5,"column_end":37}},{"value":"/ let bs = Vec::from_path_lossy(path);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173571,"byte_end":173611,"line_start":274,"line_end":274,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173616,"byte_end":173645,"line_start":275,"line_end":275,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173650,"byte_end":173657,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173662,"byte_end":173671,"line_start":277,"line_end":277,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174388,"byte_end":174397,"line_start":302,"line_end":302,"column_start":8,"column_end":17},"name":"push_byte","qualname":"::ext_vec::ByteVec::push_byte","value":"pub fn push_byte(&mut Self, u8)","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Appends the given byte to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given byte to the end of this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173794,"byte_end":173852,"line_start":282,"line_end":282,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173857,"byte_end":173860,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::push` method. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173865,"byte_end":173937,"line_start":284,"line_end":284,"column_start":5,"column_end":77}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":173942,"byte_end":174010,"line_start":285,"line_end":285,"column_start":5,"column_end":73}},{"value":"/ between pushing bytes, codepoints and strings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174015,"byte_end":174065,"line_start":286,"line_end":286,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174070,"byte_end":174073,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174078,"byte_end":174092,"line_start":288,"line_end":288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174097,"byte_end":174100,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174105,"byte_end":174121,"line_start":290,"line_end":290,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174126,"byte_end":174129,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174134,"byte_end":174141,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174146,"byte_end":174168,"line_start":293,"line_end":293,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174173,"byte_end":174176,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174181,"byte_end":174220,"line_start":295,"line_end":295,"column_start":5,"column_end":44}},{"value":"/ s.push_byte(b'\\xE2');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174225,"byte_end":174250,"line_start":296,"line_end":296,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x98');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174255,"byte_end":174280,"line_start":297,"line_end":297,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x83');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174285,"byte_end":174310,"line_start":298,"line_end":298,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s, \"abc☃\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174315,"byte_end":174354,"line_start":299,"line_end":299,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174359,"byte_end":174366,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174371,"byte_end":174380,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174841,"byte_end":174850,"line_start":322,"line_end":322,"column_start":8,"column_end":17},"name":"push_char","qualname":"::ext_vec::ByteVec::push_char","value":"pub fn push_char(&mut Self, char)","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Appends the given `char` to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given `char` to the end of this byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174470,"byte_end":174530,"line_start":306,"line_end":306,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174535,"byte_end":174538,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174543,"byte_end":174557,"line_start":308,"line_end":308,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174562,"byte_end":174565,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174570,"byte_end":174586,"line_start":310,"line_end":310,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174591,"byte_end":174594,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174599,"byte_end":174606,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174611,"byte_end":174633,"line_start":313,"line_end":313,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174638,"byte_end":174641,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174646,"byte_end":174685,"line_start":315,"line_end":315,"column_start":5,"column_end":44}},{"value":"/ s.push_char('1');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174690,"byte_end":174711,"line_start":316,"line_end":316,"column_start":5,"column_end":26}},{"value":"/ s.push_char('2');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174716,"byte_end":174737,"line_start":317,"line_end":317,"column_start":5,"column_end":26}},{"value":"/ s.push_char('3');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174742,"byte_end":174763,"line_start":318,"line_end":318,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174768,"byte_end":174807,"line_start":319,"line_end":319,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174812,"byte_end":174819,"line_start":320,"line_end":320,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":174824,"byte_end":174833,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175559,"byte_end":175567,"line_start":347,"line_end":347,"column_start":8,"column_end":16},"name":"push_str","qualname":"::ext_vec::ByteVec::push_str","value":"pub fn push_str<B: AsRef<[u8]>>(&mut Self, B)","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Appends the given slice to the end of this byte string. This accepts\n any type that be converted to a `&[u8]`. This includes, but is not\n limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","sig":null,"attributes":[{"value":"/ Appends the given slice to the end of this byte string. This accepts","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175083,"byte_end":175155,"line_start":331,"line_end":331,"column_start":5,"column_end":77}},{"value":"/ any type that be converted to a `&[u8]`. This includes, but is not","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175160,"byte_end":175230,"line_start":332,"line_end":332,"column_start":5,"column_end":75}},{"value":"/ limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175235,"byte_end":175298,"line_start":333,"line_end":333,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175303,"byte_end":175306,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175311,"byte_end":175325,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175330,"byte_end":175333,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175338,"byte_end":175354,"line_start":337,"line_end":337,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175359,"byte_end":175362,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175367,"byte_end":175374,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175379,"byte_end":175401,"line_start":340,"line_end":340,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175406,"byte_end":175409,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175414,"byte_end":175453,"line_start":342,"line_end":342,"column_start":5,"column_end":44}},{"value":"/ s.push_str(b\"123\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175458,"byte_end":175481,"line_start":343,"line_end":343,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175486,"byte_end":175525,"line_start":344,"line_end":344,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175530,"byte_end":175537,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175542,"byte_end":175551,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177083,"byte_end":177094,"line_start":392,"line_end":392,"column_start":8,"column_end":19},"name":"into_string","qualname":"::ext_vec::ByteVec::into_string","value":"pub fn into_string(Self) -> Result<String, FromUtf8Error> where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Converts a `Vec<u8>` into a `String` if and only if this byte string is\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a `Vec<u8>` into a `String` if and only if this byte string is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175679,"byte_end":175754,"line_start":351,"line_end":351,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175759,"byte_end":175775,"line_start":352,"line_end":352,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175780,"byte_end":175783,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ If it is not valid UTF-8, then a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175788,"byte_end":175824,"line_start":354,"line_end":354,"column_start":5,"column_end":41}},{"value":"/ [`FromUtf8Error`](struct.FromUtf8Error.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175829,"byte_end":175877,"line_start":355,"line_end":355,"column_start":5,"column_end":53}},{"value":"/ is returned. (This error can be used to examine why UTF-8 validation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175882,"byte_end":175954,"line_start":356,"line_end":356,"column_start":5,"column_end":77}},{"value":"/ failed, or to regain the original byte string.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":175959,"byte_end":176010,"line_start":357,"line_end":357,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176015,"byte_end":176018,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176023,"byte_end":176037,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176042,"byte_end":176045,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176050,"byte_end":176066,"line_start":361,"line_end":361,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176071,"byte_end":176074,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176079,"byte_end":176086,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176091,"byte_end":176113,"line_start":364,"line_end":364,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176118,"byte_end":176121,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176126,"byte_end":176188,"line_start":366,"line_end":366,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(\"hello\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176193,"byte_end":176228,"line_start":367,"line_end":367,"column_start":5,"column_end":40}},{"value":"/ let string = bytes.into_string()?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176233,"byte_end":176271,"line_start":368,"line_end":368,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176276,"byte_end":176279,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", string);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176284,"byte_end":176316,"line_start":370,"line_end":370,"column_start":5,"column_end":37}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176321,"byte_end":176355,"line_start":371,"line_end":371,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176360,"byte_end":176367,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176372,"byte_end":176375,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error will be returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176380,"byte_end":176455,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ That error can then be used to inspect the location at which invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176460,"byte_end":176532,"line_start":375,"line_end":375,"column_start":5,"column_end":77}},{"value":"/ UTF-8 was found, or to regain the original byte string:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176537,"byte_end":176596,"line_start":376,"line_end":376,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176601,"byte_end":176604,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176609,"byte_end":176616,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176621,"byte_end":176648,"line_start":379,"line_end":379,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176653,"byte_end":176656,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176661,"byte_end":176708,"line_start":381,"line_end":381,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176713,"byte_end":176760,"line_start":382,"line_end":382,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176765,"byte_end":176768,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176773,"byte_end":176823,"line_start":384,"line_end":384,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176828,"byte_end":176882,"line_start":385,"line_end":385,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176887,"byte_end":176890,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176895,"byte_end":176957,"line_start":387,"line_end":387,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":176962,"byte_end":177004,"line_start":388,"line_end":388,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177009,"byte_end":177049,"line_start":389,"line_end":389,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177054,"byte_end":177061,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177066,"byte_end":177075,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178004,"byte_end":178021,"line_start":422,"line_end":422,"column_start":8,"column_end":25},"name":"into_string_lossy","qualname":"::ext_vec::ByteVec::into_string_lossy","value":"pub fn into_string_lossy(Self) -> String where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Lossily converts a `Vec<u8>` into a `String`. If this byte string\n contains invalid UTF-8, then the invalid bytes are replaced with the\n Unicode replacement codepoint.","sig":null,"attributes":[{"value":"/ Lossily converts a `Vec<u8>` into a `String`. If this byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177528,"byte_end":177597,"line_start":406,"line_end":406,"column_start":5,"column_end":74}},{"value":"/ contains invalid UTF-8, then the invalid bytes are replaced with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177602,"byte_end":177674,"line_start":407,"line_end":407,"column_start":5,"column_end":77}},{"value":"/ Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177679,"byte_end":177713,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177718,"byte_end":177721,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177726,"byte_end":177740,"line_start":410,"line_end":410,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177745,"byte_end":177748,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177753,"byte_end":177769,"line_start":412,"line_end":412,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177774,"byte_end":177777,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177782,"byte_end":177789,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177794,"byte_end":177816,"line_start":415,"line_end":415,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177821,"byte_end":177824,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177829,"byte_end":177876,"line_start":417,"line_end":417,"column_start":5,"column_end":52}},{"value":"/ let string = bytes.into_string_lossy();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177881,"byte_end":177924,"line_start":418,"line_end":418,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(string, \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177929,"byte_end":177970,"line_start":419,"line_end":419,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177975,"byte_end":177982,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":177987,"byte_end":177996,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179418,"byte_end":179439,"line_start":463,"line_end":463,"column_start":15,"column_end":36},"name":"into_string_unchecked","qualname":"::ext_vec::ByteVec::into_string_unchecked","value":"pub unsafe fn into_string_unchecked(Self) -> String where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `String`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `String`, without checking for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178408,"byte_end":178483,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178488,"byte_end":178504,"line_start":437,"line_end":437,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178509,"byte_end":178512,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178517,"byte_end":178529,"line_start":439,"line_end":439,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178534,"byte_end":178537,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178542,"byte_end":178611,"line_start":441,"line_end":441,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `String` that is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178616,"byte_end":178689,"line_start":442,"line_end":442,"column_start":5,"column_end":78}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178694,"byte_end":178747,"line_start":443,"line_end":443,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178752,"byte_end":178755,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178760,"byte_end":178830,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178835,"byte_end":178899,"line_start":446,"line_end":446,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178904,"byte_end":178975,"line_start":447,"line_end":447,"column_start":5,"column_end":76}},{"value":"/ that [`into_string`](#method.into_string) performs.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":178980,"byte_end":179035,"line_start":448,"line_end":448,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179040,"byte_end":179043,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179048,"byte_end":179062,"line_start":450,"line_end":450,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179067,"byte_end":179070,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179075,"byte_end":179091,"line_start":452,"line_end":452,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179096,"byte_end":179099,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179104,"byte_end":179111,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179116,"byte_end":179138,"line_start":455,"line_end":455,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179143,"byte_end":179146,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179151,"byte_end":179223,"line_start":457,"line_end":457,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179228,"byte_end":179268,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { Vec::from(\"☃βツ\").into_string_unchecked() };","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179273,"byte_end":179342,"line_start":459,"line_end":459,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179347,"byte_end":179377,"line_start":460,"line_end":460,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179382,"byte_end":179389,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179394,"byte_end":179403,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180110,"byte_end":180124,"line_start":489,"line_end":489,"column_start":8,"column_end":22},"name":"into_os_string","qualname":"::ext_vec::ByteVec::into_os_string","value":"pub fn into_os_string(Self) -> Result<OsString, Vec<u8>> where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an OS string, in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179557,"byte_end":179615,"line_start":470,"line_end":470,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179620,"byte_end":179623,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179628,"byte_end":179700,"line_start":472,"line_end":472,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179705,"byte_end":179772,"line_start":473,"line_end":473,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179777,"byte_end":179780,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179785,"byte_end":179799,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179804,"byte_end":179807,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179812,"byte_end":179828,"line_start":477,"line_end":477,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179833,"byte_end":179836,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179841,"byte_end":179848,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179853,"byte_end":179877,"line_start":480,"line_end":480,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179882,"byte_end":179885,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179890,"byte_end":179912,"line_start":482,"line_end":482,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179917,"byte_end":179920,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179925,"byte_end":179955,"line_start":484,"line_end":484,"column_start":5,"column_end":35}},{"value":"/ let os_str = bs.into_os_string().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":179960,"byte_end":180029,"line_start":485,"line_end":485,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(os_str, OsStr::new(\"foo\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180034,"byte_end":180076,"line_start":486,"line_end":486,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180081,"byte_end":180088,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180093,"byte_end":180102,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181492,"byte_end":181512,"line_start":535,"line_end":535,"column_start":8,"column_end":28},"name":"into_os_string_lossy","qualname":"::ext_vec::ByteVec::into_os_string_lossy","value":"pub fn into_os_string_lossy(Self) -> OsString where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an OS string, in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180693,"byte_end":180759,"line_start":513,"line_end":513,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180764,"byte_end":180767,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180772,"byte_end":180844,"line_start":515,"line_end":515,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180849,"byte_end":180921,"line_start":516,"line_end":516,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180926,"byte_end":180987,"line_start":517,"line_end":517,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":180992,"byte_end":180995,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181000,"byte_end":181073,"line_start":519,"line_end":519,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181078,"byte_end":181149,"line_start":520,"line_end":520,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181154,"byte_end":181186,"line_start":521,"line_end":521,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181191,"byte_end":181194,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181199,"byte_end":181213,"line_start":523,"line_end":523,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181218,"byte_end":181221,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181226,"byte_end":181242,"line_start":525,"line_end":525,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181247,"byte_end":181250,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181255,"byte_end":181262,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181267,"byte_end":181289,"line_start":528,"line_end":528,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181294,"byte_end":181297,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181302,"byte_end":181346,"line_start":530,"line_end":530,"column_start":5,"column_end":49}},{"value":"/ let os_str = bs.into_os_string_lossy();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181351,"byte_end":181394,"line_start":531,"line_end":531,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181399,"byte_end":181458,"line_start":532,"line_end":532,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181463,"byte_end":181470,"line_start":533,"line_end":533,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181475,"byte_end":181484,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182446,"byte_end":182459,"line_start":573,"line_end":573,"column_start":8,"column_end":21},"name":"into_path_buf","qualname":"::ext_vec::ByteVec::into_path_buf","value":"pub fn into_path_buf(Self) -> Result<PathBuf, Vec<u8>> where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an owned file path, in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181929,"byte_end":181993,"line_start":556,"line_end":556,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":181998,"byte_end":182001,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182006,"byte_end":182078,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182083,"byte_end":182150,"line_start":559,"line_end":559,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182155,"byte_end":182158,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182163,"byte_end":182177,"line_start":561,"line_end":561,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182182,"byte_end":182185,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182190,"byte_end":182206,"line_start":563,"line_end":563,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182211,"byte_end":182214,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182219,"byte_end":182226,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182231,"byte_end":182253,"line_start":566,"line_end":566,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182258,"byte_end":182261,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182266,"byte_end":182296,"line_start":568,"line_end":568,"column_start":5,"column_end":35}},{"value":"/ let path = bs.into_path_buf().expect(\"should be valid UTF-8\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182301,"byte_end":182367,"line_start":569,"line_end":569,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182372,"byte_end":182412,"line_start":570,"line_end":570,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182417,"byte_end":182424,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182429,"byte_end":182438,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183391,"byte_end":183410,"line_start":602,"line_end":602,"column_start":8,"column_end":27},"name":"into_path_buf_lossy","qualname":"::ext_vec::ByteVec::into_path_buf_lossy","value":"pub fn into_path_buf_lossy(Self) -> PathBuf where Self: Sized","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an owned file path, in place.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182591,"byte_end":182663,"line_start":580,"line_end":580,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182668,"byte_end":182671,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182676,"byte_end":182748,"line_start":582,"line_end":582,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182753,"byte_end":182825,"line_start":583,"line_end":583,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182830,"byte_end":182891,"line_start":584,"line_end":584,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182896,"byte_end":182899,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182904,"byte_end":182977,"line_start":586,"line_end":586,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":182982,"byte_end":183053,"line_start":587,"line_end":587,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183058,"byte_end":183090,"line_start":588,"line_end":588,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183095,"byte_end":183098,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183103,"byte_end":183117,"line_start":590,"line_end":590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183122,"byte_end":183125,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183130,"byte_end":183146,"line_start":592,"line_end":592,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183151,"byte_end":183154,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183159,"byte_end":183166,"line_start":594,"line_end":594,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183171,"byte_end":183193,"line_start":595,"line_end":595,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183198,"byte_end":183201,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183206,"byte_end":183250,"line_start":597,"line_end":597,"column_start":5,"column_end":49}},{"value":"/ let path = bs.into_path_buf_lossy();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183255,"byte_end":183295,"line_start":598,"line_end":598,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183300,"byte_end":183357,"line_start":599,"line_end":599,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183362,"byte_end":183369,"line_start":600,"line_end":600,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183374,"byte_end":183383,"line_start":601,"line_end":601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184382,"byte_end":184390,"line_start":634,"line_end":634,"column_start":8,"column_end":16},"name":"pop_byte","qualname":"::ext_vec::ByteVec::pop_byte","value":"pub fn pop_byte(&mut Self) -> Option<u8>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Removes the last byte from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last byte from this `Vec<u8>` and returns it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183527,"byte_end":183588,"line_start":609,"line_end":609,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183593,"byte_end":183596,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183601,"byte_end":183659,"line_start":611,"line_end":611,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183664,"byte_end":183667,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ If the last codepoint in this byte string is not ASCII, then removing","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183672,"byte_end":183745,"line_start":613,"line_end":613,"column_start":5,"column_end":78}},{"value":"/ the last byte could make this byte string contain invalid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183750,"byte_end":183818,"line_start":614,"line_end":614,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183823,"byte_end":183826,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::pop` method. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183831,"byte_end":183902,"line_start":616,"line_end":616,"column_start":5,"column_end":76}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183907,"byte_end":183975,"line_start":617,"line_end":617,"column_start":5,"column_end":73}},{"value":"/ between popping bytes and codepoints.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":183980,"byte_end":184021,"line_start":618,"line_end":618,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184026,"byte_end":184029,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184034,"byte_end":184048,"line_start":620,"line_end":620,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184053,"byte_end":184056,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184061,"byte_end":184077,"line_start":622,"line_end":622,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184082,"byte_end":184085,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184090,"byte_end":184097,"line_start":624,"line_end":624,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184102,"byte_end":184124,"line_start":625,"line_end":625,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184129,"byte_end":184132,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184137,"byte_end":184170,"line_start":627,"line_end":627,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184175,"byte_end":184216,"line_start":628,"line_end":628,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184221,"byte_end":184262,"line_start":629,"line_end":629,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'f'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184267,"byte_end":184308,"line_start":630,"line_end":630,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184313,"byte_end":184348,"line_start":631,"line_end":631,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184353,"byte_end":184360,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184365,"byte_end":184374,"line_start":633,"line_end":633,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186097,"byte_end":186105,"line_start":680,"line_end":680,"column_start":8,"column_end":16},"name":"pop_char","qualname":"::ext_vec::ByteVec::pop_char","value":"pub fn pop_char(&mut Self) -> Option<char>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Removes the last codepoint from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last codepoint from this `Vec<u8>` and returns it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184461,"byte_end":184527,"line_start":638,"line_end":638,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184532,"byte_end":184535,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned. If the last","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184540,"byte_end":184610,"line_start":640,"line_end":640,"column_start":5,"column_end":75}},{"value":"/ bytes of this byte string do not correspond to a valid UTF-8 code unit","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184615,"byte_end":184689,"line_start":641,"line_end":641,"column_start":5,"column_end":79}},{"value":"/ sequence, then the Unicode replacement codepoint is yielded instead in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184694,"byte_end":184768,"line_start":642,"line_end":642,"column_start":5,"column_end":79}},{"value":"/ accordance with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184773,"byte_end":184796,"line_start":643,"line_end":643,"column_start":5,"column_end":28}},{"value":"/ [replacement codepoint substitution policy](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184801,"byte_end":184888,"line_start":644,"line_end":644,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184893,"byte_end":184896,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184901,"byte_end":184915,"line_start":646,"line_end":646,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184920,"byte_end":184923,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184928,"byte_end":184944,"line_start":648,"line_end":648,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184949,"byte_end":184952,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184957,"byte_end":184964,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184969,"byte_end":184991,"line_start":651,"line_end":651,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":184996,"byte_end":184999,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185004,"byte_end":185037,"line_start":653,"line_end":653,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185042,"byte_end":185082,"line_start":654,"line_end":654,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185087,"byte_end":185127,"line_start":655,"line_end":655,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185132,"byte_end":185172,"line_start":656,"line_end":656,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185177,"byte_end":185212,"line_start":657,"line_end":657,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185217,"byte_end":185224,"line_start":658,"line_end":658,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185229,"byte_end":185232,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ This shows the replacement codepoint substitution policy. Note that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185237,"byte_end":185308,"line_start":660,"line_end":660,"column_start":5,"column_end":76}},{"value":"/ the first pop yields a replacement codepoint but actually removes two","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185313,"byte_end":185386,"line_start":661,"line_end":661,"column_start":5,"column_end":78}},{"value":"/ bytes. This is in contrast with subsequent pops when encountering","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185391,"byte_end":185460,"line_start":662,"line_end":662,"column_start":5,"column_end":74}},{"value":"/ `\\xFF` since `\\xFF` is never a valid prefix for any valid UTF-8","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185465,"byte_end":185532,"line_start":663,"line_end":663,"column_start":5,"column_end":72}},{"value":"/ code unit sequence.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185537,"byte_end":185560,"line_start":664,"line_end":664,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185565,"byte_end":185568,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185573,"byte_end":185580,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185585,"byte_end":185607,"line_start":667,"line_end":667,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185612,"byte_end":185615,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"f\\xFF\\xFF\\xFFoo\\xE2\\x98\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185620,"byte_end":185680,"line_start":669,"line_end":669,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185685,"byte_end":185732,"line_start":670,"line_end":670,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185737,"byte_end":185777,"line_start":671,"line_end":671,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185782,"byte_end":185822,"line_start":672,"line_end":672,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185827,"byte_end":185874,"line_start":673,"line_end":673,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185879,"byte_end":185926,"line_start":674,"line_end":674,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185931,"byte_end":185978,"line_start":675,"line_end":675,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":185983,"byte_end":186023,"line_start":676,"line_end":676,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186028,"byte_end":186063,"line_start":677,"line_end":677,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186068,"byte_end":186075,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186080,"byte_end":186089,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187357,"byte_end":187368,"line_start":724,"line_end":724,"column_start":8,"column_end":19},"name":"remove_char","qualname":"::ext_vec::ByteVec::remove_char","value":"pub fn remove_char(&mut Self, usize) -> char","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Removes a `char` from this `Vec<u8>` at the given byte position and\n returns it.","sig":null,"attributes":[{"value":"/ Removes a `char` from this `Vec<u8>` at the given byte position and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186381,"byte_end":186452,"line_start":690,"line_end":690,"column_start":5,"column_end":76}},{"value":"/ returns it.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186457,"byte_end":186472,"line_start":691,"line_end":691,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186477,"byte_end":186480,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ If the bytes at the given position do not lead to a valid UTF-8 code","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186485,"byte_end":186557,"line_start":693,"line_end":693,"column_start":5,"column_end":77}},{"value":"/ unit sequence, then a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186562,"byte_end":186587,"line_start":694,"line_end":694,"column_start":5,"column_end":30}},{"value":"/ [replacement codepoint is returned instead](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186592,"byte_end":186679,"line_start":695,"line_end":695,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186684,"byte_end":186687,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186692,"byte_end":186704,"line_start":697,"line_end":697,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186709,"byte_end":186712,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than or equal to this byte string's length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186717,"byte_end":186789,"line_start":699,"line_end":699,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186794,"byte_end":186797,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186802,"byte_end":186816,"line_start":701,"line_end":701,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186821,"byte_end":186824,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186829,"byte_end":186845,"line_start":703,"line_end":703,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186850,"byte_end":186853,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186858,"byte_end":186865,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186870,"byte_end":186892,"line_start":706,"line_end":706,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186897,"byte_end":186900,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo☃bar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186905,"byte_end":186944,"line_start":708,"line_end":708,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(s.remove_char(3), '☃');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186949,"byte_end":186989,"line_start":709,"line_end":709,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":186994,"byte_end":187023,"line_start":710,"line_end":710,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187028,"byte_end":187035,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187040,"byte_end":187043,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ This example shows how the Unicode replacement codepoint policy is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187048,"byte_end":187118,"line_start":713,"line_end":713,"column_start":5,"column_end":75}},{"value":"/ used:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187123,"byte_end":187132,"line_start":714,"line_end":714,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187137,"byte_end":187140,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187145,"byte_end":187152,"line_start":716,"line_end":716,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187157,"byte_end":187179,"line_start":717,"line_end":717,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187184,"byte_end":187187,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187192,"byte_end":187239,"line_start":719,"line_end":719,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.remove_char(3), '\\u{FFFD}');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187244,"byte_end":187289,"line_start":720,"line_end":720,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187294,"byte_end":187323,"line_start":721,"line_end":721,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187328,"byte_end":187335,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187340,"byte_end":187349,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188272,"byte_end":188283,"line_start":758,"line_end":758,"column_start":8,"column_end":19},"name":"insert_char","qualname":"::ext_vec::ByteVec::insert_char","value":"pub fn insert_char(&mut Self, usize, char)","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Inserts the given codepoint into this `Vec<u8>` at a particular byte\n position.","sig":null,"attributes":[{"value":"/ Inserts the given codepoint into this `Vec<u8>` at a particular byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187683,"byte_end":187755,"line_start":736,"line_end":736,"column_start":5,"column_end":77}},{"value":"/ position.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187760,"byte_end":187773,"line_start":737,"line_end":737,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187778,"byte_end":187781,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187786,"byte_end":187861,"line_start":739,"line_end":739,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187866,"byte_end":187909,"line_start":740,"line_end":740,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187914,"byte_end":187917,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187922,"byte_end":187934,"line_start":742,"line_end":742,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187939,"byte_end":187942,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":187947,"byte_end":188006,"line_start":744,"line_end":744,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188011,"byte_end":188014,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188019,"byte_end":188033,"line_start":746,"line_end":746,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188038,"byte_end":188041,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188046,"byte_end":188062,"line_start":748,"line_end":748,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188067,"byte_end":188070,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188075,"byte_end":188082,"line_start":750,"line_end":750,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188087,"byte_end":188109,"line_start":751,"line_end":751,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188114,"byte_end":188117,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188122,"byte_end":188158,"line_start":753,"line_end":753,"column_start":5,"column_end":41}},{"value":"/ s.insert_char(3, '☃');","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188163,"byte_end":188191,"line_start":754,"line_end":754,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"foo☃bar\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188196,"byte_end":188238,"line_start":755,"line_end":755,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188243,"byte_end":188250,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188255,"byte_end":188264,"line_start":757,"line_end":757,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189176,"byte_end":189186,"line_start":788,"line_end":788,"column_start":8,"column_end":18},"name":"insert_str","qualname":"::ext_vec::ByteVec::insert_str","value":"pub fn insert_str<B: AsRef<[u8]>>(&mut Self, usize, B)","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Inserts the given byte string into this byte string at a particular\n byte position.","sig":null,"attributes":[{"value":"/ Inserts the given byte string into this byte string at a particular","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188398,"byte_end":188469,"line_start":762,"line_end":762,"column_start":5,"column_end":76}},{"value":"/ byte position.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188474,"byte_end":188492,"line_start":763,"line_end":763,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188497,"byte_end":188500,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188505,"byte_end":188580,"line_start":765,"line_end":765,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188585,"byte_end":188628,"line_start":766,"line_end":766,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188633,"byte_end":188636,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ The given byte string may be any type that can be cheaply converted","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188641,"byte_end":188712,"line_start":768,"line_end":768,"column_start":5,"column_end":76}},{"value":"/ into a `&[u8]`. This includes, but is not limited to, `&str` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188717,"byte_end":188785,"line_start":769,"line_end":769,"column_start":5,"column_end":73}},{"value":"/ `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188790,"byte_end":188802,"line_start":770,"line_end":770,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188807,"byte_end":188810,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188815,"byte_end":188827,"line_start":772,"line_end":772,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188832,"byte_end":188835,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188840,"byte_end":188899,"line_start":774,"line_end":774,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188904,"byte_end":188907,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188912,"byte_end":188926,"line_start":776,"line_end":776,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188931,"byte_end":188934,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188939,"byte_end":188955,"line_start":778,"line_end":778,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188960,"byte_end":188963,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188968,"byte_end":188975,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":188980,"byte_end":189002,"line_start":781,"line_end":781,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189007,"byte_end":189010,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189015,"byte_end":189051,"line_start":783,"line_end":783,"column_start":5,"column_end":41}},{"value":"/ s.insert_str(3, \"☃☃☃\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189056,"byte_end":189089,"line_start":784,"line_end":784,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(s, \"foo☃☃☃bar\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189094,"byte_end":189142,"line_start":785,"line_end":785,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189147,"byte_end":189154,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":189159,"byte_end":189168,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191179,"byte_end":191192,"line_start":840,"line_end":840,"column_start":8,"column_end":21},"name":"replace_range","qualname":"::ext_vec::ByteVec::replace_range","value":"pub fn replace_range<R, B>(&mut Self, R, B) where R: ops::RangeBounds<usize>,\nB: AsRef<[u8]>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Removes the specified range in this byte string and replaces it with\n the given bytes. The given bytes do not need to have the same length\n as the range provided.","sig":null,"attributes":[{"value":"/ Removes the specified range in this byte string and replaces it with","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190647,"byte_end":190719,"line_start":820,"line_end":820,"column_start":5,"column_end":77}},{"value":"/ the given bytes. The given bytes do not need to have the same length","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190724,"byte_end":190796,"line_start":821,"line_end":821,"column_start":5,"column_end":77}},{"value":"/ as the range provided.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190801,"byte_end":190827,"line_start":822,"line_end":822,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190832,"byte_end":190835,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190840,"byte_end":190852,"line_start":824,"line_end":824,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190857,"byte_end":190860,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190865,"byte_end":190906,"line_start":826,"line_end":826,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190911,"byte_end":190914,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190919,"byte_end":190933,"line_start":828,"line_end":828,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190938,"byte_end":190941,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190946,"byte_end":190962,"line_start":830,"line_end":830,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190967,"byte_end":190970,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190975,"byte_end":190982,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":190987,"byte_end":191009,"line_start":833,"line_end":833,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191014,"byte_end":191017,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191022,"byte_end":191058,"line_start":835,"line_end":835,"column_start":5,"column_end":41}},{"value":"/ s.replace_range(2..4, \"xxxxx\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191063,"byte_end":191098,"line_start":836,"line_end":836,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s, \"foxxxxxar\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191103,"byte_end":191145,"line_start":837,"line_end":837,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191150,"byte_end":191157,"line_start":838,"line_end":838,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191162,"byte_end":191171,"line_start":839,"line_end":839,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192357,"byte_end":192368,"line_start":878,"line_end":878,"column_start":8,"column_end":19},"name":"drain_bytes","qualname":"::ext_vec::ByteVec::drain_bytes","value":"pub fn drain_bytes<R>(&mut Self, R) -> DrainBytes where\nR: ops::RangeBounds<usize>","parent":{"krate":0,"index":546},"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in this\n `Vec<u8>` and yields each of the removed bytes.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in this","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191404,"byte_end":191476,"line_start":848,"line_end":848,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` and yields each of the removed bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191481,"byte_end":191532,"line_start":849,"line_end":849,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191537,"byte_end":191540,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ Note that the elements specified by the given range are removed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191545,"byte_end":191612,"line_start":851,"line_end":851,"column_start":5,"column_end":72}},{"value":"/ regardless of whether the returned iterator is fully exhausted.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191617,"byte_end":191684,"line_start":852,"line_end":852,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191689,"byte_end":191692,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ Also note that is is unspecified how many bytes are removed from the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191697,"byte_end":191769,"line_start":854,"line_end":854,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` if the `DrainBytes` iterator is leaked.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191774,"byte_end":191827,"line_start":855,"line_end":855,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191832,"byte_end":191835,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191840,"byte_end":191852,"line_start":857,"line_end":857,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191857,"byte_end":191860,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is not valid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191865,"byte_end":191908,"line_start":859,"line_end":859,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191913,"byte_end":191916,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191921,"byte_end":191935,"line_start":861,"line_end":861,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191940,"byte_end":191943,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191948,"byte_end":191964,"line_start":863,"line_end":863,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191969,"byte_end":191972,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191977,"byte_end":191984,"line_start":865,"line_end":865,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":191989,"byte_end":192011,"line_start":866,"line_end":866,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192016,"byte_end":192019,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192024,"byte_end":192060,"line_start":868,"line_end":868,"column_start":5,"column_end":41}},{"value":"/ {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192065,"byte_end":192070,"line_start":869,"line_end":869,"column_start":5,"column_end":10}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192075,"byte_end":192121,"line_start":870,"line_end":870,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192126,"byte_end":192173,"line_start":871,"line_end":871,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192178,"byte_end":192225,"line_start":872,"line_end":872,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192230,"byte_end":192271,"line_start":873,"line_end":873,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192276,"byte_end":192281,"line_start":874,"line_end":874,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192286,"byte_end":192323,"line_start":875,"line_end":875,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192328,"byte_end":192335,"line_start":876,"line_end":876,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192340,"byte_end":192349,"line_start":877,"line_end":877,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193075,"byte_end":193085,"line_start":908,"line_end":908,"column_start":12,"column_end":22},"name":"DrainBytes","qualname":"::ext_vec::DrainBytes","value":"DrainBytes {  }","parent":null,"children":[{"krate":0,"index":1052}],"decl_id":null,"docs":" A draining byte oriented iterator for `Vec<u8>`.","sig":null,"attributes":[{"value":"/ A draining byte oriented iterator for `Vec<u8>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192530,"byte_end":192582,"line_start":886,"line_end":886,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192583,"byte_end":192586,"line_start":887,"line_end":887,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192587,"byte_end":192618,"line_start":888,"line_end":888,"column_start":1,"column_end":32}},{"value":"/ [`ByteVec::drain_bytes`](trait.ByteVec.html#method.drain_bytes).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192619,"byte_end":192687,"line_start":889,"line_end":889,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192688,"byte_end":192691,"line_start":890,"line_end":890,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192692,"byte_end":192706,"line_start":891,"line_end":891,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192707,"byte_end":192710,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192711,"byte_end":192727,"line_start":893,"line_end":893,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192728,"byte_end":192731,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192732,"byte_end":192739,"line_start":895,"line_end":895,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192740,"byte_end":192762,"line_start":896,"line_end":896,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192763,"byte_end":192766,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192767,"byte_end":192803,"line_start":898,"line_end":898,"column_start":1,"column_end":37}},{"value":"/ {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192804,"byte_end":192809,"line_start":899,"line_end":899,"column_start":1,"column_end":6}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192810,"byte_end":192856,"line_start":900,"line_end":900,"column_start":1,"column_end":47}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192857,"byte_end":192904,"line_start":901,"line_end":901,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192905,"byte_end":192952,"line_start":902,"line_end":902,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192953,"byte_end":192994,"line_start":903,"line_end":903,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":192995,"byte_end":193000,"line_start":904,"line_end":904,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193001,"byte_end":193038,"line_start":905,"line_end":905,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193039,"byte_end":193046,"line_start":906,"line_end":906,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194330,"byte_end":194343,"line_start":961,"line_end":961,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::ext_vec::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"decl_id":null,"docs":" An error that may occur when converting a `Vec<u8>` to a `String`.","sig":null,"attributes":[{"value":"/ An error that may occur when converting a `Vec<u8>` to a `String`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193587,"byte_end":193657,"line_start":937,"line_end":937,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193658,"byte_end":193661,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ This error includes the original `Vec<u8>` that failed to convert to a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193662,"byte_end":193736,"line_start":939,"line_end":939,"column_start":1,"column_end":75}},{"value":"/ `String`. This permits callers to recover the allocation used even if it","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193737,"byte_end":193813,"line_start":940,"line_end":940,"column_start":1,"column_end":77}},{"value":"/ it not valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193814,"byte_end":193837,"line_start":941,"line_end":941,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193838,"byte_end":193841,"line_start":942,"line_end":942,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193842,"byte_end":193856,"line_start":943,"line_end":943,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193857,"byte_end":193860,"line_start":944,"line_end":944,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193861,"byte_end":193877,"line_start":945,"line_end":945,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193878,"byte_end":193881,"line_start":946,"line_end":946,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193882,"byte_end":193889,"line_start":947,"line_end":947,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193890,"byte_end":193917,"line_start":948,"line_end":948,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193918,"byte_end":193921,"line_start":949,"line_end":949,"column_start":1,"column_end":4}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193922,"byte_end":193969,"line_start":950,"line_end":950,"column_start":1,"column_end":48}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193970,"byte_end":194017,"line_start":951,"line_end":951,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194018,"byte_end":194021,"line_start":952,"line_end":952,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194022,"byte_end":194072,"line_start":953,"line_end":953,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194073,"byte_end":194127,"line_start":954,"line_end":954,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194128,"byte_end":194131,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194132,"byte_end":194194,"line_start":956,"line_end":956,"column_start":1,"column_end":63}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194195,"byte_end":194237,"line_start":957,"line_end":957,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194238,"byte_end":194278,"line_start":958,"line_end":958,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194279,"byte_end":194286,"line_start":959,"line_end":959,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194890,"byte_end":194898,"line_start":984,"line_end":984,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<FromUtf8Error>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the original bytes as a slice that failed to convert to a\n `String`.","sig":null,"attributes":[{"value":"/ Return the original bytes as a slice that failed to convert to a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194417,"byte_end":194485,"line_start":967,"line_end":967,"column_start":5,"column_end":73}},{"value":"/ `String`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194490,"byte_end":194503,"line_start":968,"line_end":968,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194508,"byte_end":194511,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194516,"byte_end":194530,"line_start":970,"line_end":970,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194535,"byte_end":194538,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194543,"byte_end":194559,"line_start":972,"line_end":972,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194564,"byte_end":194567,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194572,"byte_end":194579,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194584,"byte_end":194611,"line_start":975,"line_end":975,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194616,"byte_end":194619,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194624,"byte_end":194671,"line_start":977,"line_end":977,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194676,"byte_end":194723,"line_start":978,"line_end":978,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194728,"byte_end":194731,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194736,"byte_end":194798,"line_start":980,"line_end":980,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(err.as_bytes(), B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194803,"byte_end":194852,"line_start":981,"line_end":981,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194857,"byte_end":194864,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194869,"byte_end":194878,"line_start":983,"line_end":983,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195475,"byte_end":195483,"line_start":1006,"line_end":1006,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<FromUtf8Error>::into_vec","value":"pub fn into_vec(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume this error and return the original byte string that failed to\n convert to a `String`.","sig":null,"attributes":[{"value":"/ Consume this error and return the original byte string that failed to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194951,"byte_end":195024,"line_start":988,"line_end":988,"column_start":5,"column_end":78}},{"value":"/ convert to a `String`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195029,"byte_end":195055,"line_start":989,"line_end":989,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195060,"byte_end":195063,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195068,"byte_end":195082,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195087,"byte_end":195090,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195095,"byte_end":195111,"line_start":993,"line_end":993,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195116,"byte_end":195119,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195124,"byte_end":195131,"line_start":995,"line_end":995,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195136,"byte_end":195163,"line_start":996,"line_end":996,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195168,"byte_end":195171,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195176,"byte_end":195223,"line_start":998,"line_end":998,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195228,"byte_end":195275,"line_start":999,"line_end":999,"column_start":5,"column_end":52}},{"value":"/ let original = err.into_vec();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195280,"byte_end":195314,"line_start":1000,"line_end":1000,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195319,"byte_end":195322,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195327,"byte_end":195389,"line_start":1002,"line_end":1002,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(original, B(b\"foo\\xFFbar\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195394,"byte_end":195437,"line_start":1003,"line_end":1003,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195442,"byte_end":195449,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195454,"byte_end":195463,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196066,"byte_end":196076,"line_start":1027,"line_end":1027,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"pub fn utf8_error(&Self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying UTF-8 error that occurred. This error provides\n information on the nature and location of the invalid UTF-8 detected.","sig":null,"attributes":[{"value":"/ Return the underlying UTF-8 error that occurred. This error provides","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195536,"byte_end":195608,"line_start":1010,"line_end":1010,"column_start":5,"column_end":77}},{"value":"/ information on the nature and location of the invalid UTF-8 detected.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195613,"byte_end":195686,"line_start":1011,"line_end":1011,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195691,"byte_end":195694,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195699,"byte_end":195713,"line_start":1013,"line_end":1013,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195718,"byte_end":195721,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195726,"byte_end":195742,"line_start":1015,"line_end":1015,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195747,"byte_end":195750,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195755,"byte_end":195762,"line_start":1017,"line_end":1017,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195767,"byte_end":195794,"line_start":1018,"line_end":1018,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195799,"byte_end":195802,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195807,"byte_end":195854,"line_start":1020,"line_end":1020,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195859,"byte_end":195906,"line_start":1021,"line_end":1021,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195911,"byte_end":195914,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195919,"byte_end":195969,"line_start":1023,"line_end":1023,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":195974,"byte_end":196028,"line_start":1024,"line_end":1024,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196033,"byte_end":196040,"line_start":1025,"line_end":1025,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196045,"byte_end":196054,"line_start":1026,"line_end":1026,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":837},{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1354},{"krate":0,"index":1358},{"krate":0,"index":839},{"krate":0,"index":843},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850}],"decl_id":null,"docs":"Utilities for working with I/O using byte strings.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":19017,"byte_end":19040,"line_start":401,"line_end":401,"column_start":1,"column_end":24}},{"value":"*\nUtilities for working with I/O using byte strings.\n\nThis module currently only exports a single trait, `BufReadExt`, which provides\nfacilities for conveniently and efficiently working with lines as byte strings.\n\nMore APIs may be added in the future.\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":224814,"byte_end":225071,"line_start":1,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225332,"byte_end":225342,"line_start":18,"line_end":18,"column_start":11,"column_end":21},"name":"BufReadExt","qualname":"::io::BufReadExt","value":"BufReadExt: io::BufRead","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":835}],"decl_id":null,"docs":" An extention trait for\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)\n which provides convenience APIs for dealing with byte strings.\n","sig":null,"attributes":[{"value":"/ An extention trait for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225150,"byte_end":225176,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225177,"byte_end":225254,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ which provides convenience APIs for dealing with byte strings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225255,"byte_end":225321,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226449,"byte_end":226459,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"byte_lines","qualname":"::io::BufReadExt::byte_lines","value":"pub fn byte_lines(Self) -> ByteLines<Self> where Self: Sized","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Returns an iterator over the lines of this reader, where each line\n is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the lines of this reader, where each line","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225362,"byte_end":225432,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ is represented as a byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225437,"byte_end":225473,"line_start":20,"line_end":20,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225478,"byte_end":225481,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225486,"byte_end":225558,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225563,"byte_end":225637,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225642,"byte_end":225653,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225658,"byte_end":225661,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ On success, the next line in the iterator is returned. The line does","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225666,"byte_end":225738,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ *not* contain a trailing `\\n` or `\\r\\n`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225743,"byte_end":225787,"line_start":27,"line_end":27,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225792,"byte_end":225795,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225800,"byte_end":225814,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225819,"byte_end":225822,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225827,"byte_end":225843,"line_start":31,"line_end":31,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225848,"byte_end":225851,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225856,"byte_end":225863,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225868,"byte_end":225884,"line_start":34,"line_end":34,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225889,"byte_end":225892,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225897,"byte_end":225926,"line_start":36,"line_end":36,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225931,"byte_end":225934,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225939,"byte_end":225984,"line_start":38,"line_end":38,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225989,"byte_end":226048,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226053,"byte_end":226056,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226061,"byte_end":226088,"line_start":41,"line_end":41,"column_start":5,"column_end":32}},{"value":"/ for result in cursor.byte_lines() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226093,"byte_end":226132,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"/     let line = result?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226137,"byte_end":226164,"line_start":43,"line_end":43,"column_start":5,"column_end":32}},{"value":"/     lines.push(line);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226169,"byte_end":226194,"line_start":44,"line_end":44,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226199,"byte_end":226204,"line_start":45,"line_end":45,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226209,"byte_end":226240,"line_start":46,"line_end":46,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226245,"byte_end":226290,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226295,"byte_end":226340,"line_start":48,"line_end":48,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226345,"byte_end":226390,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226395,"byte_end":226429,"line_start":50,"line_end":50,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226434,"byte_end":226441,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227834,"byte_end":227846,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"byte_records","qualname":"::io::BufReadExt::byte_records","value":"pub fn byte_records(Self, u8) -> ByteRecords<Self> where Self: Sized","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Returns an iterator over byte-terminated records of this reader, where\n each record is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over byte-terminated records of this reader, where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226565,"byte_end":226639,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ each record is represented as a byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226644,"byte_end":226692,"line_start":60,"line_end":60,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226697,"byte_end":226700,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226705,"byte_end":226777,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226782,"byte_end":226856,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226861,"byte_end":226872,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226877,"byte_end":226880,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ On success, the next record in the iterator is returned. The record","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226885,"byte_end":226956,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/ does *not* contain its trailing terminator.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":226961,"byte_end":227008,"line_start":67,"line_end":67,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227013,"byte_end":227016,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note that calling `byte_records(b'\\n')` differs from `byte_lines()` in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227021,"byte_end":227095,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ that it has no special handling for `\\r`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227100,"byte_end":227145,"line_start":70,"line_end":70,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227150,"byte_end":227153,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227158,"byte_end":227172,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227177,"byte_end":227180,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227185,"byte_end":227201,"line_start":74,"line_end":74,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227206,"byte_end":227209,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227214,"byte_end":227221,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227226,"byte_end":227242,"line_start":77,"line_end":77,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227247,"byte_end":227250,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227255,"byte_end":227284,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227289,"byte_end":227292,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227297,"byte_end":227342,"line_start":81,"line_end":81,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227347,"byte_end":227408,"line_start":82,"line_end":82,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227413,"byte_end":227416,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227421,"byte_end":227450,"line_start":84,"line_end":84,"column_start":5,"column_end":34}},{"value":"/ for result in cursor.byte_records(b'\\x00') {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227455,"byte_end":227503,"line_start":85,"line_end":85,"column_start":5,"column_end":53}},{"value":"/     let record = result?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227508,"byte_end":227537,"line_start":86,"line_end":86,"column_start":5,"column_end":34}},{"value":"/     records.push(record);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227542,"byte_end":227571,"line_start":87,"line_end":87,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227576,"byte_end":227581,"line_start":88,"line_end":88,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227586,"byte_end":227619,"line_start":89,"line_end":89,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227624,"byte_end":227671,"line_start":90,"line_end":90,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227676,"byte_end":227723,"line_start":91,"line_end":91,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227728,"byte_end":227775,"line_start":92,"line_end":92,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227780,"byte_end":227814,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227819,"byte_end":227826,"line_start":94,"line_end":94,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229331,"byte_end":229344,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"for_byte_line","qualname":"::io::BufReadExt::for_byte_line","value":"pub fn for_byte_line<F>(Self, F) -> io::Result<()> where Self: Sized,\nF: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":227984,"byte_end":228053,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228058,"byte_end":228061,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228066,"byte_end":228141,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228146,"byte_end":228219,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228224,"byte_end":228292,"line_start":106,"line_end":106,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228297,"byte_end":228300,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228305,"byte_end":228377,"line_start":108,"line_end":108,"column_start":5,"column_end":77}},{"value":"/ the [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228382,"byte_end":228445,"line_start":109,"line_end":109,"column_start":5,"column_end":68}},{"value":"/ iterator. Namely, lines do _not_ contain trailing `\\n` or `\\r\\n` bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228450,"byte_end":228525,"line_start":110,"line_end":110,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228530,"byte_end":228533,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228538,"byte_end":228603,"line_start":112,"line_end":112,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228608,"byte_end":228674,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228679,"byte_end":228682,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228687,"byte_end":228701,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228706,"byte_end":228709,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228714,"byte_end":228730,"line_start":117,"line_end":117,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228735,"byte_end":228738,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228743,"byte_end":228750,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228755,"byte_end":228771,"line_start":120,"line_end":120,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228776,"byte_end":228779,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228784,"byte_end":228813,"line_start":122,"line_end":122,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228818,"byte_end":228821,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228826,"byte_end":228871,"line_start":124,"line_end":124,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228876,"byte_end":228935,"line_start":125,"line_end":125,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228940,"byte_end":228943,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228948,"byte_end":228975,"line_start":127,"line_end":127,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line(|line| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":228980,"byte_end":229013,"line_start":128,"line_end":128,"column_start":5,"column_end":38}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229018,"byte_end":229052,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229057,"byte_end":229073,"line_start":130,"line_end":130,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229078,"byte_end":229086,"line_start":131,"line_end":131,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229091,"byte_end":229122,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229127,"byte_end":229172,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229177,"byte_end":229222,"line_start":134,"line_end":134,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229227,"byte_end":229272,"line_start":135,"line_end":135,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229277,"byte_end":229311,"line_start":136,"line_end":136,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229316,"byte_end":229323,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231010,"byte_end":231025,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"for_byte_record","qualname":"::io::BufReadExt::for_byte_record","value":"pub fn for_byte_record<F>(Self, u8, F) -> io::Result<()> where Self: Sized,\nF: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Executes the given closure on each byte-terminated record in the\n underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each byte-terminated record in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229601,"byte_end":229669,"line_start":148,"line_end":148,"column_start":5,"column_end":73}},{"value":"/ underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229674,"byte_end":229696,"line_start":149,"line_end":149,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229701,"byte_end":229704,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229709,"byte_end":229784,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229789,"byte_end":229862,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229867,"byte_end":229935,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229940,"byte_end":229943,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":229948,"byte_end":230020,"line_start":155,"line_end":155,"column_start":5,"column_end":77}},{"value":"/ the [`byte_records`](trait.BufReadExt.html#method.byte_records)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230025,"byte_end":230092,"line_start":156,"line_end":156,"column_start":5,"column_end":72}},{"value":"/ iterator. Namely, records do _not_ contain a trailing terminator byte.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230097,"byte_end":230171,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230176,"byte_end":230179,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over records as quickly as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230184,"byte_end":230251,"line_start":159,"line_end":159,"column_start":5,"column_end":72}},{"value":"/ possible. Namely, a single allocation is reused for each record.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230256,"byte_end":230324,"line_start":160,"line_end":160,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230329,"byte_end":230332,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230337,"byte_end":230351,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230356,"byte_end":230359,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230364,"byte_end":230380,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230385,"byte_end":230388,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230393,"byte_end":230400,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230405,"byte_end":230421,"line_start":167,"line_end":167,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230426,"byte_end":230429,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230434,"byte_end":230463,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230468,"byte_end":230471,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230476,"byte_end":230521,"line_start":171,"line_end":171,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230526,"byte_end":230587,"line_start":172,"line_end":172,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230592,"byte_end":230595,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230600,"byte_end":230629,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/ cursor.for_byte_record(b'\\x00', |record| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230634,"byte_end":230680,"line_start":175,"line_end":175,"column_start":5,"column_end":51}},{"value":"/     records.push(record.to_vec());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230685,"byte_end":230723,"line_start":176,"line_end":176,"column_start":5,"column_end":43}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230728,"byte_end":230744,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230749,"byte_end":230757,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230762,"byte_end":230795,"line_start":179,"line_end":179,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], \"lorem\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230800,"byte_end":230847,"line_start":180,"line_end":180,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[1], \"ipsum\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230852,"byte_end":230899,"line_start":181,"line_end":181,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230904,"byte_end":230951,"line_start":182,"line_end":182,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230956,"byte_end":230990,"line_start":183,"line_end":183,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":230995,"byte_end":231002,"line_start":184,"line_end":184,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232795,"byte_end":232824,"line_start":239,"line_end":239,"column_start":8,"column_end":37},"name":"for_byte_line_with_terminator","qualname":"::io::BufReadExt::for_byte_line_with_terminator","value":"pub fn for_byte_line_with_terminator<F>(Self, F) -> io::Result<()> where\nSelf: Sized, F: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231363,"byte_end":231432,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231437,"byte_end":231440,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231445,"byte_end":231520,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231525,"byte_end":231598,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231603,"byte_end":231671,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231676,"byte_end":231679,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231684,"byte_end":231694,"line_start":205,"line_end":205,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_line`](trait.BufReadExt.html#method.for_byte_line),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231699,"byte_end":231765,"line_start":206,"line_end":206,"column_start":5,"column_end":71}},{"value":"/ the lines given to the closure *do* include the line terminator, if one","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231770,"byte_end":231845,"line_start":207,"line_end":207,"column_start":5,"column_end":80}},{"value":"/ exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231850,"byte_end":231861,"line_start":208,"line_end":208,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231866,"byte_end":231869,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231874,"byte_end":231939,"line_start":210,"line_end":210,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":231944,"byte_end":232010,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232015,"byte_end":232018,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ This is identical to `for_byte_record_with_terminator` with a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232023,"byte_end":232088,"line_start":213,"line_end":213,"column_start":5,"column_end":70}},{"value":"/ terminator of `\\n`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232093,"byte_end":232116,"line_start":214,"line_end":214,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232121,"byte_end":232124,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232129,"byte_end":232143,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232148,"byte_end":232151,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232156,"byte_end":232172,"line_start":218,"line_end":218,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232177,"byte_end":232180,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232185,"byte_end":232192,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232197,"byte_end":232213,"line_start":221,"line_end":221,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232218,"byte_end":232221,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232226,"byte_end":232255,"line_start":223,"line_end":223,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232260,"byte_end":232263,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232268,"byte_end":232313,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232318,"byte_end":232377,"line_start":226,"line_end":226,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232382,"byte_end":232385,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232390,"byte_end":232417,"line_start":228,"line_end":228,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line_with_terminator(|line| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232422,"byte_end":232471,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232476,"byte_end":232510,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232515,"byte_end":232531,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232536,"byte_end":232544,"line_start":232,"line_end":232,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232549,"byte_end":232580,"line_start":233,"line_end":233,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\\n\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232585,"byte_end":232632,"line_start":234,"line_end":234,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(lines[1], \"ipsum\\r\\n\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232637,"byte_end":232686,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232691,"byte_end":232736,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232741,"byte_end":232775,"line_start":237,"line_end":237,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":232780,"byte_end":232787,"line_start":238,"line_end":238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234444,"byte_end":234475,"line_start":289,"line_end":289,"column_start":8,"column_end":39},"name":"for_byte_record_with_terminator","qualname":"::io::BufReadExt::for_byte_record_with_terminator","value":"pub fn for_byte_record_with_terminator<F>(Self, u8, F) -> io::Result<()> where\nSelf: Sized, F: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Executes the given closure on each byte-terminated record in the\n underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each byte-terminated record in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233053,"byte_end":233121,"line_start":250,"line_end":250,"column_start":5,"column_end":73}},{"value":"/ underlying reader.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233126,"byte_end":233148,"line_start":251,"line_end":251,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233153,"byte_end":233156,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233161,"byte_end":233236,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233241,"byte_end":233314,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233319,"byte_end":233387,"line_start":255,"line_end":255,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233392,"byte_end":233395,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233400,"byte_end":233410,"line_start":257,"line_end":257,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_record`](trait.BufReadExt.html#method.for_byte_record),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233415,"byte_end":233485,"line_start":258,"line_end":258,"column_start":5,"column_end":75}},{"value":"/ the lines given to the closure *do* include the record terminator, if","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233490,"byte_end":233563,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ one exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233568,"byte_end":233583,"line_start":260,"line_end":260,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233588,"byte_end":233591,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over records as quickly as","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233596,"byte_end":233663,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ possible. Namely, a single allocation is reused for each record.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233668,"byte_end":233736,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233741,"byte_end":233744,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233749,"byte_end":233763,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233768,"byte_end":233771,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233776,"byte_end":233792,"line_start":267,"line_end":267,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233797,"byte_end":233800,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233805,"byte_end":233812,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233817,"byte_end":233833,"line_start":270,"line_end":270,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233838,"byte_end":233841,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233846,"byte_end":233862,"line_start":272,"line_end":272,"column_start":5,"column_end":21}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233867,"byte_end":233896,"line_start":273,"line_end":273,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233901,"byte_end":233904,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233909,"byte_end":233954,"line_start":275,"line_end":275,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":233959,"byte_end":234020,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234025,"byte_end":234028,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234033,"byte_end":234062,"line_start":278,"line_end":278,"column_start":5,"column_end":34}},{"value":"/ cursor.for_byte_record_with_terminator(b'\\x00', |record| {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234067,"byte_end":234129,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/     records.push(record.to_vec());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234134,"byte_end":234172,"line_start":280,"line_end":280,"column_start":5,"column_end":43}},{"value":"/     Ok(true)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234177,"byte_end":234193,"line_start":281,"line_end":281,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234198,"byte_end":234206,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234211,"byte_end":234244,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], B(b\"lorem\\x00\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234249,"byte_end":234293,"line_start":284,"line_end":284,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(records[1], B(\"ipsum\\x00\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234298,"byte_end":234341,"line_start":285,"line_end":285,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(records[2], B(\"dolor\"));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234346,"byte_end":234385,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234390,"byte_end":234424,"line_start":287,"line_end":287,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":234429,"byte_end":234436,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236702,"byte_end":236711,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"ByteLines","qualname":"::io::ByteLines","value":"ByteLines {  }","parent":null,"children":[{"krate":0,"index":1350}],"decl_id":null,"docs":" An iterator over lines from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over lines from an instance of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236359,"byte_end":236405,"line_start":346,"line_end":346,"column_start":1,"column_end":47}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236406,"byte_end":236484,"line_start":347,"line_end":347,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236485,"byte_end":236488,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236489,"byte_end":236542,"line_start":349,"line_end":349,"column_start":1,"column_end":54}},{"value":"/ [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236543,"byte_end":236602,"line_start":350,"line_end":350,"column_start":1,"column_end":60}},{"value":"/ method on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236603,"byte_end":236620,"line_start":351,"line_end":351,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236621,"byte_end":236662,"line_start":352,"line_end":352,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236663,"byte_end":236673,"line_start":353,"line_end":353,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237274,"byte_end":237285,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"ByteRecords","qualname":"::io::ByteRecords","value":"ByteRecords {  }","parent":null,"children":[{"krate":0,"index":1356},{"krate":0,"index":1357}],"decl_id":null,"docs":" An iterator over records from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over records from an instance of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236732,"byte_end":236780,"line_start":359,"line_end":359,"column_start":1,"column_end":49}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236781,"byte_end":236859,"line_start":360,"line_end":360,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236860,"byte_end":236863,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ A byte record is any sequence of bytes terminated by a particular byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236864,"byte_end":236938,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ chosen by the caller. For example, NUL separated byte strings are said to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236939,"byte_end":237016,"line_start":363,"line_end":363,"column_start":1,"column_end":78}},{"value":"/ be NUL-terminated byte records.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237017,"byte_end":237052,"line_start":364,"line_end":364,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237053,"byte_end":237056,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237057,"byte_end":237110,"line_start":366,"line_end":366,"column_start":1,"column_end":54}},{"value":"/ [`byte_records`](trait.BufReadExt.html#method.byte_records)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237111,"byte_end":237174,"line_start":367,"line_end":367,"column_start":1,"column_end":64}},{"value":"/ method on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237175,"byte_end":237192,"line_start":368,"line_end":368,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237193,"byte_end":237234,"line_start":369,"line_end":369,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237235,"byte_end":237245,"line_start":370,"line_end":370,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1361},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244969,"byte_end":244974,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"Chars","qualname":"::utf8::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":1363}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244477,"byte_end":244537,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244538,"byte_end":244541,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244542,"byte_end":244620,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244621,"byte_end":244675,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244676,"byte_end":244752,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244753,"byte_end":244756,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244757,"byte_end":244792,"line_start":80,"line_end":80,"column_start":1,"column_end":36}},{"value":"/ [`chars`](trait.ByteSlice.html#method.chars) method provided by the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244793,"byte_end":244864,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/ [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":244865,"byte_end":244933,"line_start":82,"line_end":82,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245691,"byte_end":245699,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Chars>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245106,"byte_end":245170,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245175,"byte_end":245178,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245183,"byte_end":245257,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245262,"byte_end":245321,"line_start":96,"line_end":96,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245326,"byte_end":245329,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245334,"byte_end":245348,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245353,"byte_end":245356,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245361,"byte_end":245368,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245373,"byte_end":245397,"line_start":101,"line_end":101,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245402,"byte_end":245405,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let mut chars = b\"abc\".chars();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245410,"byte_end":245445,"line_start":103,"line_end":103,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245450,"byte_end":245453,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", chars.as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245458,"byte_end":245499,"line_start":105,"line_end":105,"column_start":5,"column_end":46}},{"value":"/ chars.next();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245504,"byte_end":245521,"line_start":106,"line_end":106,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"bc\", chars.as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245526,"byte_end":245566,"line_start":107,"line_end":107,"column_start":5,"column_end":45}},{"value":"/ chars.next();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245571,"byte_end":245588,"line_start":108,"line_end":108,"column_start":5,"column_end":22}},{"value":"/ chars.next();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245593,"byte_end":245610,"line_start":109,"line_end":109,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"\", chars.as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245615,"byte_end":245653,"line_start":110,"line_end":110,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245658,"byte_end":245665,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245670,"byte_end":245679,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247392,"byte_end":247403,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::utf8::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string and their\n byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string and their","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246320,"byte_end":246389,"line_start":144,"line_end":144,"column_start":1,"column_end":70}},{"value":"/ byte index positions.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246390,"byte_end":246415,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246416,"byte_end":246419,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246420,"byte_end":246498,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246499,"byte_end":246553,"line_start":148,"line_end":148,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246554,"byte_end":246630,"line_start":149,"line_end":149,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246631,"byte_end":246634,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246635,"byte_end":246707,"line_start":151,"line_end":151,"column_start":1,"column_end":73}},{"value":"/ provided by the standard library. Aside from working on possibly invalid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246708,"byte_end":246784,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/ UTF-8, this iterator provides both the corresponding starting and ending","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246785,"byte_end":246861,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ byte indices of each codepoint yielded. The ending position is necessary to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246862,"byte_end":246941,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ slice the original byte string when invalid UTF-8 bytes are converted into","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246942,"byte_end":247020,"line_start":155,"line_end":155,"column_start":1,"column_end":79}},{"value":"/ a Unicode replacement codepoint, since a single replacement codepoint can","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247021,"byte_end":247098,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ substitute anywhere from 1 to 3 invalid bytes (inclusive).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247099,"byte_end":247161,"line_start":157,"line_end":157,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247162,"byte_end":247165,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247166,"byte_end":247201,"line_start":159,"line_end":159,"column_start":1,"column_end":36}},{"value":"/ [`char_indices`](trait.ByteSlice.html#method.char_indices) method provided","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247202,"byte_end":247280,"line_start":160,"line_end":160,"column_start":1,"column_end":79}},{"value":"/ by the [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247281,"byte_end":247356,"line_start":161,"line_end":161,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248223,"byte_end":248231,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<CharIndices>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247652,"byte_end":247716,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247721,"byte_end":247724,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247729,"byte_end":247803,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247808,"byte_end":247867,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247872,"byte_end":247875,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247880,"byte_end":247894,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247899,"byte_end":247902,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247907,"byte_end":247914,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247919,"byte_end":247943,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247948,"byte_end":247951,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".char_indices();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247956,"byte_end":247995,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248000,"byte_end":248003,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248008,"byte_end":248046,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248051,"byte_end":248065,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248070,"byte_end":248107,"line_start":188,"line_end":188,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248112,"byte_end":248126,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248131,"byte_end":248145,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248150,"byte_end":248185,"line_start":191,"line_end":191,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248190,"byte_end":248197,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248202,"byte_end":248211,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249322,"byte_end":249332,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"Utf8Chunks","qualname":"::utf8::Utf8Chunks","value":"Utf8Chunks {  }","parent":null,"children":[{"krate":0,"index":1383}],"decl_id":null,"docs":" An iterator over chunks of valid UTF-8 in a byte slice.","sig":null,"attributes":[{"value":"/ An iterator over chunks of valid UTF-8 in a byte slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249157,"byte_end":249216,"line_start":230,"line_end":230,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249217,"byte_end":249220,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ See [`utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249221,"byte_end":249286,"line_start":232,"line_end":232,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249811,"byte_end":249820,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"Utf8Chunk","qualname":"::utf8::Utf8Chunk","value":"Utf8Chunk {  }","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"decl_id":null,"docs":" A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249374,"byte_end":249443,"line_start":238,"line_end":238,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249444,"byte_end":249447,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This is yielded by the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249448,"byte_end":249474,"line_start":240,"line_end":240,"column_start":1,"column_end":27}},{"value":"/ [`Utf8Chunks`](struct.Utf8Chunks.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249475,"byte_end":249517,"line_start":241,"line_end":241,"column_start":1,"column_end":43}},{"value":"/ iterator, which can be created via the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249518,"byte_end":249560,"line_start":242,"line_end":242,"column_start":1,"column_end":43}},{"value":"/ [`ByteSlice::utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249561,"byte_end":249632,"line_start":243,"line_end":243,"column_start":1,"column_end":72}},{"value":"/ method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249633,"byte_end":249644,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249645,"byte_end":249648,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ The `'a` lifetime parameter corresponds to the lifetime of the bytes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249649,"byte_end":249726,"line_start":246,"line_end":246,"column_start":1,"column_end":78}},{"value":"/ are being iterated over.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249727,"byte_end":249755,"line_start":247,"line_end":247,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250622,"byte_end":250627,"line_start":274,"line_end":274,"column_start":12,"column_end":17},"name":"valid","qualname":"<Utf8Chunk>::valid","value":"pub fn valid(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) valid UTF-8 bytes in this chunk.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250430,"byte_end":250495,"line_start":269,"line_end":269,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250500,"byte_end":250503,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This may be empty if there are consecutive sequences of invalid UTF-8","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250508,"byte_end":250581,"line_start":271,"line_end":271,"column_start":5,"column_end":78}},{"value":"/ bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250586,"byte_end":250596,"line_start":272,"line_end":272,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250601,"byte_end":250610,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251380,"byte_end":251387,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"name":"invalid","qualname":"<Utf8Chunk>::invalid","value":"pub fn invalid(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) invalid UTF-8 bytes in this chunk that\n immediately follow the valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) invalid UTF-8 bytes in this chunk that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250678,"byte_end":250749,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/ immediately follow the valid UTF-8 bytes in this chunk.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250754,"byte_end":250813,"line_start":279,"line_end":279,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250818,"byte_end":250821,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This is only empty when this chunk corresponds to the last chunk in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250826,"byte_end":250897,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/ the original bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250902,"byte_end":250925,"line_start":282,"line_end":282,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250930,"byte_end":250933,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ The maximum length of this slice is 3. That is, invalid UTF-8 byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250938,"byte_end":251008,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ sequences greater than 1 always correspond to a valid _prefix_ of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251013,"byte_end":251082,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ a valid UTF-8 encoded codepoint. This corresponds to the \"substitution","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251087,"byte_end":251161,"line_start":286,"line_end":286,"column_start":5,"column_end":79}},{"value":"/ of maximal subparts\" strategy that is described in more detail in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251166,"byte_end":251239,"line_start":287,"line_end":287,"column_start":5,"column_end":78}},{"value":"/ docs for the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251244,"byte_end":251260,"line_start":288,"line_end":288,"column_start":5,"column_end":21}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251265,"byte_end":251338,"line_start":289,"line_end":289,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251343,"byte_end":251354,"line_start":290,"line_end":290,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251359,"byte_end":251368,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251766,"byte_end":251776,"line_start":304,"line_end":304,"column_start":12,"column_end":22},"name":"incomplete","qualname":"<Utf8Chunk>::incomplete","value":"pub fn incomplete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the invalid sequence might still become valid if more\n bytes are added.","sig":null,"attributes":[{"value":"/ Returns whether the invalid sequence might still become valid if more","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251452,"byte_end":251525,"line_start":296,"line_end":296,"column_start":5,"column_end":78}},{"value":"/ bytes are added.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251530,"byte_end":251550,"line_start":297,"line_end":297,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251555,"byte_end":251558,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Returns true if the end of the input was reached unexpectedly,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251563,"byte_end":251629,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ without encountering an unexpected byte.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251634,"byte_end":251678,"line_start":300,"line_end":300,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251683,"byte_end":251686,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This can only be the case for the last chunk.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251691,"byte_end":251740,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251745,"byte_end":251754,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255281,"byte_end":255290,"line_start":410,"line_end":410,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::utf8::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392}],"decl_id":null,"docs":" An error that occurs when UTF-8 decoding fails.","sig":null,"attributes":[{"value":"/ An error that occurs when UTF-8 decoding fails.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253523,"byte_end":253574,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253575,"byte_end":253578,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ This error occurs when attempting to convert a non-UTF-8 byte","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253579,"byte_end":253644,"line_start":363,"line_end":363,"column_start":1,"column_end":66}},{"value":"/ string to a Rust string that must be valid UTF-8. For example,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253645,"byte_end":253711,"line_start":364,"line_end":364,"column_start":1,"column_end":67}},{"value":"/ [`to_str`](trait.ByteSlice.html#method.to_str) is one such method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253712,"byte_end":253782,"line_start":365,"line_end":365,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253783,"byte_end":253786,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253787,"byte_end":253800,"line_start":367,"line_end":367,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253801,"byte_end":253804,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence is invalid,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253805,"byte_end":253879,"line_start":369,"line_end":369,"column_start":1,"column_end":75}},{"value":"/ but ends with a sequence that is a possible prefix of valid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253880,"byte_end":253950,"line_start":370,"line_end":370,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253951,"byte_end":253954,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253955,"byte_end":253962,"line_start":372,"line_end":372,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253963,"byte_end":253992,"line_start":373,"line_end":373,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253993,"byte_end":253996,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ let s = B(b\"foobar\\xF1\\x80\\x80\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253997,"byte_end":254034,"line_start":375,"line_end":375,"column_start":1,"column_end":38}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254035,"byte_end":254073,"line_start":376,"line_end":376,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254074,"byte_end":254111,"line_start":377,"line_end":377,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254112,"byte_end":254150,"line_start":378,"line_end":378,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254151,"byte_end":254158,"line_start":379,"line_end":379,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254159,"byte_end":254162,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence contains","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254163,"byte_end":254234,"line_start":381,"line_end":381,"column_start":1,"column_end":72}},{"value":"/ invalid UTF-8.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254235,"byte_end":254253,"line_start":382,"line_end":382,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254254,"byte_end":254257,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254258,"byte_end":254265,"line_start":384,"line_end":384,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254266,"byte_end":254290,"line_start":385,"line_end":385,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254291,"byte_end":254294,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254295,"byte_end":254333,"line_start":387,"line_end":387,"column_start":1,"column_end":39}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254334,"byte_end":254372,"line_start":388,"line_end":388,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254373,"byte_end":254410,"line_start":389,"line_end":389,"column_start":1,"column_end":38}},{"value":"/ // The error length reports the maximum number of bytes that correspond to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254411,"byte_end":254489,"line_start":390,"line_end":390,"column_start":1,"column_end":79}},{"value":"/ // a valid prefix of a UTF-8 encoded codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254490,"byte_end":254541,"line_start":391,"line_end":391,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(err.error_len(), Some(3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254542,"byte_end":254583,"line_start":392,"line_end":392,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254584,"byte_end":254587,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ // In contrast to the above which contains a single invalid prefix,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254588,"byte_end":254659,"line_start":394,"line_end":394,"column_start":1,"column_end":72}},{"value":"/ // consider the case of multiple individal bytes that are never valid","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254660,"byte_end":254733,"line_start":395,"line_end":395,"column_start":1,"column_end":74}},{"value":"/ // prefixes. Note how the value of error_len changes!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254734,"byte_end":254791,"line_start":396,"line_end":396,"column_start":1,"column_end":58}},{"value":"/ let s = b\"foobar\\xFF\\xFFquux\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254792,"byte_end":254826,"line_start":397,"line_end":397,"column_start":1,"column_end":35}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254827,"byte_end":254865,"line_start":398,"line_end":398,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254866,"byte_end":254903,"line_start":399,"line_end":399,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254904,"byte_end":254945,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254946,"byte_end":254949,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ // The fact that it's an invalid prefix does not change error_len even","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":254950,"byte_end":255024,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ // when it immediately precedes the end of the string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255025,"byte_end":255083,"line_start":403,"line_end":403,"column_start":1,"column_end":59}},{"value":"/ let s = b\"foobar\\xFF\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255084,"byte_end":255110,"line_start":404,"line_end":404,"column_start":1,"column_end":27}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255111,"byte_end":255149,"line_start":405,"line_end":405,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255150,"byte_end":255187,"line_start":406,"line_end":406,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255188,"byte_end":255229,"line_start":407,"line_end":407,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255230,"byte_end":255237,"line_start":408,"line_end":408,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255980,"byte_end":255991,"line_start":435,"line_end":435,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"pub fn valid_up_to(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte index of the position immediately following the last\n valid UTF-8 byte.","sig":null,"attributes":[{"value":"/ Returns the byte index of the position immediately following the last","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255371,"byte_end":255444,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8 byte.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255449,"byte_end":255470,"line_start":417,"line_end":417,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255475,"byte_end":255478,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255483,"byte_end":255496,"line_start":419,"line_end":419,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255501,"byte_end":255504,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This examples shows how `valid_up_to` can be used to retrieve a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255509,"byte_end":255576,"line_start":421,"line_end":421,"column_start":5,"column_end":72}},{"value":"/ possibly empty prefix that is guaranteed to be valid UTF-8:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255581,"byte_end":255644,"line_start":422,"line_end":422,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255649,"byte_end":255652,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255657,"byte_end":255664,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255669,"byte_end":255693,"line_start":425,"line_end":425,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255698,"byte_end":255701,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255706,"byte_end":255744,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255749,"byte_end":255787,"line_start":428,"line_end":428,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255792,"byte_end":255795,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ // This is guaranteed to never panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255800,"byte_end":255841,"line_start":430,"line_end":430,"column_start":5,"column_end":46}},{"value":"/ let string = s[..err.valid_up_to()].to_str().unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255846,"byte_end":255904,"line_start":431,"line_end":431,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(string, \"foobar\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255909,"byte_end":255942,"line_start":432,"line_end":432,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255947,"byte_end":255954,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255959,"byte_end":255968,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256597,"byte_end":256606,"line_start":449,"line_end":449,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"pub fn error_len(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of invalid UTF-8 bytes immediately following\n the position returned by `valid_up_to`. This value is always at least\n `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8\n encoded codepoint.","sig":null,"attributes":[{"value":"/ Returns the total number of invalid UTF-8 bytes immediately following","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256046,"byte_end":256119,"line_start":439,"line_end":439,"column_start":5,"column_end":78}},{"value":"/ the position returned by `valid_up_to`. This value is always at least","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256124,"byte_end":256197,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/ `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256202,"byte_end":256274,"line_start":441,"line_end":441,"column_start":5,"column_end":77}},{"value":"/ encoded codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256279,"byte_end":256301,"line_start":442,"line_end":442,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256306,"byte_end":256309,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ If the end of the original input was found before a valid UTF-8 encoded","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256314,"byte_end":256389,"line_start":444,"line_end":444,"column_start":5,"column_end":80}},{"value":"/ codepoint could be completed, then this returns `None`. This is useful","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256394,"byte_end":256468,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/ when processing streams, where a `None` value signals that more input","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256473,"byte_end":256546,"line_start":446,"line_end":446,"column_start":5,"column_end":78}},{"value":"/ might be needed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256551,"byte_end":256571,"line_start":447,"line_end":447,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256576,"byte_end":256585,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262560,"byte_end":262566,"line_start":613,"line_end":613,"column_start":8,"column_end":14},"name":"decode","qualname":"::utf8::decode","value":"pub fn decode<B: AsRef<[u8]>>(B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the beginning of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the beginning of a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261021,"byte_end":261098,"line_start":567,"line_end":567,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261099,"byte_end":261102,"line_start":568,"line_end":568,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261103,"byte_end":261180,"line_start":569,"line_end":569,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261181,"byte_end":261259,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261260,"byte_end":261325,"line_start":571,"line_end":571,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261326,"byte_end":261329,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261330,"byte_end":261407,"line_start":573,"line_end":573,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261408,"byte_end":261487,"line_start":574,"line_end":574,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261488,"byte_end":261564,"line_start":575,"line_end":575,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261565,"byte_end":261610,"line_start":576,"line_end":576,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261611,"byte_end":261614,"line_start":577,"line_end":577,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261615,"byte_end":261629,"line_start":578,"line_end":578,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261630,"byte_end":261633,"line_start":579,"line_end":579,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261634,"byte_end":261650,"line_start":580,"line_end":580,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261651,"byte_end":261654,"line_start":581,"line_end":581,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261655,"byte_end":261662,"line_start":582,"line_end":582,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_utf8;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261663,"byte_end":261689,"line_start":583,"line_end":583,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261690,"byte_end":261693,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261694,"byte_end":261728,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261729,"byte_end":261779,"line_start":586,"line_end":586,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261780,"byte_end":261812,"line_start":587,"line_end":587,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261813,"byte_end":261837,"line_start":588,"line_end":588,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261838,"byte_end":261841,"line_start":589,"line_end":589,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261842,"byte_end":261882,"line_start":590,"line_end":590,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261883,"byte_end":261929,"line_start":591,"line_end":591,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261930,"byte_end":261955,"line_start":592,"line_end":592,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261956,"byte_end":261980,"line_start":593,"line_end":593,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261981,"byte_end":261988,"line_start":594,"line_end":594,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261989,"byte_end":261992,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":261993,"byte_end":262067,"line_start":596,"line_end":596,"column_start":1,"column_end":75}},{"value":"/ bytes, while replacing invalid UTF-8 sequences with the replacement","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262068,"byte_end":262139,"line_start":597,"line_end":597,"column_start":1,"column_end":72}},{"value":"/ codepoint:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262140,"byte_end":262154,"line_start":598,"line_end":598,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262155,"byte_end":262158,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262159,"byte_end":262166,"line_start":600,"line_end":600,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_utf8};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262167,"byte_end":262198,"line_start":601,"line_end":601,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262199,"byte_end":262202,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262203,"byte_end":262274,"line_start":603,"line_end":603,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262275,"byte_end":262302,"line_start":604,"line_end":604,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262303,"byte_end":262332,"line_start":605,"line_end":605,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_utf8(bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262333,"byte_end":262377,"line_start":606,"line_end":606,"column_start":1,"column_end":45}},{"value":"/     bytes = &bytes[size..];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262378,"byte_end":262409,"line_start":607,"line_end":607,"column_start":1,"column_end":32}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262410,"byte_end":262455,"line_start":608,"line_end":608,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262456,"byte_end":262461,"line_start":609,"line_end":609,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262462,"byte_end":262534,"line_start":610,"line_end":610,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262535,"byte_end":262542,"line_start":611,"line_end":611,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":262543,"byte_end":262552,"line_start":612,"line_end":612,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266793,"byte_end":266804,"line_start":740,"line_end":740,"column_start":8,"column_end":19},"name":"decode_last","qualname":"::utf8::decode_last","value":"pub fn decode_last<B: AsRef<[u8]>>(B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the end of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the end of a slice.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265212,"byte_end":265283,"line_start":694,"line_end":694,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265284,"byte_end":265287,"line_start":695,"line_end":695,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265288,"byte_end":265365,"line_start":696,"line_end":696,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265366,"byte_end":265444,"line_start":697,"line_end":697,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265445,"byte_end":265510,"line_start":698,"line_end":698,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265511,"byte_end":265514,"line_start":699,"line_end":699,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265515,"byte_end":265592,"line_start":700,"line_end":700,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265593,"byte_end":265672,"line_start":701,"line_end":701,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265673,"byte_end":265749,"line_start":702,"line_end":702,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265750,"byte_end":265795,"line_start":703,"line_end":703,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265796,"byte_end":265799,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265800,"byte_end":265814,"line_start":705,"line_end":705,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265815,"byte_end":265818,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265819,"byte_end":265835,"line_start":707,"line_end":707,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265836,"byte_end":265839,"line_start":708,"line_end":708,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265840,"byte_end":265847,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_last_utf8;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265848,"byte_end":265879,"line_start":710,"line_end":710,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265880,"byte_end":265883,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265884,"byte_end":265918,"line_start":712,"line_end":712,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265919,"byte_end":265974,"line_start":713,"line_end":713,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":265975,"byte_end":266007,"line_start":714,"line_end":714,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266008,"byte_end":266032,"line_start":715,"line_end":715,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266033,"byte_end":266036,"line_start":716,"line_end":716,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266037,"byte_end":266077,"line_start":717,"line_end":717,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266078,"byte_end":266129,"line_start":718,"line_end":718,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266130,"byte_end":266155,"line_start":719,"line_end":719,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266156,"byte_end":266180,"line_start":720,"line_end":720,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266181,"byte_end":266188,"line_start":721,"line_end":721,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266189,"byte_end":266192,"line_start":722,"line_end":722,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266193,"byte_end":266267,"line_start":723,"line_end":723,"column_start":1,"column_end":75}},{"value":"/ bytes in reverse, while replacing invalid UTF-8 sequences with the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266268,"byte_end":266338,"line_start":724,"line_end":724,"column_start":1,"column_end":71}},{"value":"/ replacement codepoint:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266339,"byte_end":266365,"line_start":725,"line_end":725,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266366,"byte_end":266369,"line_start":726,"line_end":726,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266370,"byte_end":266377,"line_start":727,"line_end":727,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_last_utf8};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266378,"byte_end":266414,"line_start":728,"line_end":728,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266415,"byte_end":266418,"line_start":729,"line_end":729,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266419,"byte_end":266490,"line_start":730,"line_end":730,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266491,"byte_end":266518,"line_start":731,"line_end":731,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266519,"byte_end":266548,"line_start":732,"line_end":732,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_last_utf8(bytes);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266549,"byte_end":266598,"line_start":733,"line_end":733,"column_start":1,"column_end":50}},{"value":"/     bytes = &bytes[..bytes.len()-size];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266599,"byte_end":266642,"line_start":734,"line_end":734,"column_start":1,"column_end":44}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266643,"byte_end":266688,"line_start":735,"line_end":735,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266689,"byte_end":266694,"line_start":736,"line_end":736,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266695,"byte_end":266767,"line_start":737,"line_end":737,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266768,"byte_end":266775,"line_start":738,"line_end":738,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":266776,"byte_end":266785,"line_start":739,"line_end":739,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":33251,"byte_end":33255,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35672,"byte_end":35679,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146857,"byte_end":146863,"line_start":2990,"line_end":2990,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150018,"byte_end":150031,"line_start":3073,"line_end":3073,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152637,"byte_end":152641,"line_start":3150,"line_end":3150,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152817,"byte_end":152821,"line_start":3156,"line_end":3156,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153335,"byte_end":153346,"line_start":3178,"line_end":3178,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153707,"byte_end":153718,"line_start":3196,"line_end":3196,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154039,"byte_end":154044,"line_start":3213,"line_end":3213,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154373,"byte_end":154378,"line_start":3223,"line_end":3223,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154637,"byte_end":154642,"line_start":3237,"line_end":3237,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154787,"byte_end":154792,"line_start":3244,"line_end":3244,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154906,"byte_end":154911,"line_start":3251,"line_end":3251,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155282,"byte_end":155288,"line_start":3264,"line_end":3264,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155436,"byte_end":155442,"line_start":3270,"line_end":3270,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":156138,"byte_end":156148,"line_start":3295,"line_end":3295,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":156331,"byte_end":156341,"line_start":3301,"line_end":3301,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157649,"byte_end":157654,"line_start":3345,"line_end":3345,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157856,"byte_end":157861,"line_start":3352,"line_end":3352,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":159480,"byte_end":159492,"line_start":3401,"line_end":3401,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":159722,"byte_end":159734,"line_start":3408,"line_end":3408,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160944,"byte_end":160950,"line_start":3452,"line_end":3452,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161192,"byte_end":161198,"line_start":3463,"line_end":3463,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161924,"byte_end":161937,"line_start":3491,"line_end":3491,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162194,"byte_end":162207,"line_start":3502,"line_end":3502,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162878,"byte_end":162883,"line_start":3528,"line_end":3528,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163018,"byte_end":163023,"line_start":3534,"line_end":3534,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":164058,"byte_end":164077,"line_start":3567,"line_end":3567,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":164210,"byte_end":164229,"line_start":3573,"line_end":3573,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168073,"byte_end":168076,"line_start":83,"line_end":83,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168447,"byte_end":168450,"line_start":103,"line_end":103,"column_start":17,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193156,"byte_end":193166,"line_start":912,"line_end":912,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193197,"byte_end":193207,"line_start":914,"line_end":914,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193353,"byte_end":193363,"line_start":923,"line_end":923,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193496,"byte_end":193506,"line_start":930,"line_end":930,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194397,"byte_end":194410,"line_start":966,"line_end":966,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196149,"byte_end":196162,"line_start":1032,"line_end":1032,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196277,"byte_end":196290,"line_start":1039,"line_end":1039,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":199931,"byte_end":199938,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200116,"byte_end":200123,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200299,"byte_end":200306,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200465,"byte_end":200472,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200613,"byte_end":200620,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200743,"byte_end":200750,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200876,"byte_end":200883,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201018,"byte_end":201025,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201164,"byte_end":201171,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201293,"byte_end":201297,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201459,"byte_end":201466,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201586,"byte_end":201593,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201738,"byte_end":201745,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201884,"byte_end":201887,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202021,"byte_end":202028,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202182,"byte_end":202189,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202341,"byte_end":202348,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202503,"byte_end":202506,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202659,"byte_end":202666,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202871,"byte_end":202878,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203091,"byte_end":203098,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203392,"byte_end":203399,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203694,"byte_end":203701,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203991,"byte_end":203998,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204268,"byte_end":204275,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204303,"byte_end":204310,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204768,"byte_end":204775,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204962,"byte_end":204969,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":205652,"byte_end":205656,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":207857,"byte_end":207861,"line_start":376,"line_end":376,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209123,"byte_end":209127,"line_start":411,"line_end":411,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209280,"byte_end":209284,"line_start":420,"line_end":420,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209428,"byte_end":209432,"line_start":427,"line_end":427,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209616,"byte_end":209620,"line_start":436,"line_end":436,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209801,"byte_end":209805,"line_start":445,"line_end":445,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210037,"byte_end":210041,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210284,"byte_end":210288,"line_start":463,"line_end":463,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210512,"byte_end":210516,"line_start":472,"line_end":472,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210745,"byte_end":210749,"line_start":481,"line_end":481,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210968,"byte_end":210972,"line_start":490,"line_end":490,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211143,"byte_end":211147,"line_start":497,"line_end":497,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211314,"byte_end":211318,"line_start":504,"line_end":504,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211546,"byte_end":211550,"line_start":511,"line_end":511,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211789,"byte_end":211793,"line_start":518,"line_end":518,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212013,"byte_end":212017,"line_start":525,"line_end":525,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212242,"byte_end":212246,"line_start":532,"line_end":532,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212449,"byte_end":212453,"line_start":539,"line_end":539,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212841,"byte_end":212845,"line_start":560,"line_end":560,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":213733,"byte_end":213736,"line_start":601,"line_end":601,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":213918,"byte_end":213921,"line_start":609,"line_end":609,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":214105,"byte_end":214108,"line_start":617,"line_end":617,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":214251,"byte_end":214255,"line_start":624,"line_end":624,"column_start":17,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":214289,"byte_end":214293,"line_start":626,"line_end":626,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":215094,"byte_end":215098,"line_start":653,"line_end":653,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":215290,"byte_end":215294,"line_start":660,"line_end":660,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236353,"byte_end":236354,"line_start":344,"line_end":344,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237360,"byte_end":237369,"line_start":377,"line_end":377,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237780,"byte_end":237791,"line_start":393,"line_end":393,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245011,"byte_end":245016,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245768,"byte_end":245773,"line_start":118,"line_end":118,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246059,"byte_end":246064,"line_start":132,"line_end":132,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247492,"byte_end":247503,"line_start":169,"line_end":169,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248300,"byte_end":248311,"line_start":199,"line_end":199,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248728,"byte_end":248739,"line_start":215,"line_end":215,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249137,"byte_end":249148,"line_start":228,"line_end":228,"column_start":42,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250410,"byte_end":250419,"line_start":268,"line_end":268,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251849,"byte_end":251859,"line_start":309,"line_end":309,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253504,"byte_end":253514,"line_start":359,"line_end":359,"column_start":42,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255355,"byte_end":255364,"line_start":415,"line_end":415,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256711,"byte_end":256720,"line_start":455,"line_end":455,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256814,"byte_end":256823,"line_start":461,"line_end":461,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\lib.rs","byte_start":19049,"byte_end":19051,"line_start":402,"line_end":402,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":814}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstr.rs","byte_start":33251,"byte_end":33255,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\bstring.rs","byte_start":35672,"byte_end":35679,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":51794,"byte_end":51800,"line_start":92,"line_end":92,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":258},"to":{"krate":0,"index":260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":146857,"byte_end":146863,"line_start":2990,"line_end":2990,"column_start":10,"column_end":16},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":957},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":150018,"byte_end":150031,"line_start":3073,"line_end":3073,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152637,"byte_end":152641,"line_start":3150,"line_end":3150,"column_start":10,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":152817,"byte_end":152821,"line_start":3156,"line_end":3156,"column_start":23,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153335,"byte_end":153346,"line_start":3178,"line_end":3178,"column_start":10,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":985},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":153707,"byte_end":153718,"line_start":3196,"line_end":3196,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":985},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154039,"byte_end":154044,"line_start":3213,"line_end":3213,"column_start":10,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":993},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154373,"byte_end":154378,"line_start":3223,"line_end":3223,"column_start":23,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154637,"byte_end":154642,"line_start":3237,"line_end":3237,"column_start":34,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154787,"byte_end":154792,"line_start":3244,"line_end":3244,"column_start":32,"column_end":37},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":154906,"byte_end":154911,"line_start":3251,"line_end":3251,"column_start":34,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":993},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155282,"byte_end":155288,"line_start":3264,"line_end":3264,"column_start":10,"column_end":16},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":155436,"byte_end":155442,"line_start":3270,"line_end":3270,"column_start":23,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1002},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":156138,"byte_end":156148,"line_start":3295,"line_end":3295,"column_start":34,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":156331,"byte_end":156341,"line_start":3301,"line_end":3301,"column_start":47,"column_end":57},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1008},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157649,"byte_end":157654,"line_start":3345,"line_end":3345,"column_start":10,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":157856,"byte_end":157861,"line_start":3352,"line_end":3352,"column_start":23,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1018},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":159480,"byte_end":159492,"line_start":3401,"line_end":3401,"column_start":10,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":159722,"byte_end":159734,"line_start":3408,"line_end":3408,"column_start":23,"column_end":35},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1026},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":160944,"byte_end":160950,"line_start":3452,"line_end":3452,"column_start":10,"column_end":16},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161192,"byte_end":161198,"line_start":3463,"line_end":3463,"column_start":23,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":161924,"byte_end":161937,"line_start":3491,"line_end":3491,"column_start":10,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162194,"byte_end":162207,"line_start":3502,"line_end":3502,"column_start":23,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1042},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":162878,"byte_end":162883,"line_start":3528,"line_end":3528,"column_start":10,"column_end":15},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":163018,"byte_end":163023,"line_start":3534,"line_end":3534,"column_start":23,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":164058,"byte_end":164077,"line_start":3567,"line_end":3567,"column_start":10,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_slice.rs","byte_start":164210,"byte_end":164229,"line_start":3573,"line_end":3573,"column_start":23,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168073,"byte_end":168076,"line_start":83,"line_end":83,"column_start":18,"column_end":21},"kind":{"Impl":{"id":29}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168447,"byte_end":168450,"line_start":103,"line_end":103,"column_start":17,"column_end":20},"kind":{"Impl":{"id":30}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":544}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":168856,"byte_end":168862,"line_start":117,"line_end":117,"column_start":20,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":544},"to":{"krate":0,"index":546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193156,"byte_end":193166,"line_start":912,"line_end":912,"column_start":34,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193197,"byte_end":193207,"line_start":914,"line_end":914,"column_start":23,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193353,"byte_end":193363,"line_start":923,"line_end":923,"column_start":34,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":193496,"byte_end":193506,"line_start":930,"line_end":930,"column_start":32,"column_end":42},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":194397,"byte_end":194410,"line_start":966,"line_end":966,"column_start":6,"column_end":19},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1056},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196149,"byte_end":196162,"line_start":1032,"line_end":1032,"column_start":23,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1056},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\ext_vec.rs","byte_start":196277,"byte_end":196290,"line_start":1039,"line_end":1039,"column_start":23,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1056},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":199931,"byte_end":199938,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200116,"byte_end":200123,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200299,"byte_end":200306,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200465,"byte_end":200472,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":3289}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200613,"byte_end":200620,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2954}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200743,"byte_end":200750,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2954}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":200876,"byte_end":200883,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2957}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201018,"byte_end":201025,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2957}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201164,"byte_end":201171,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2654}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201293,"byte_end":201297,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":945},"to":{"krate":5,"index":669}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201459,"byte_end":201466,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201586,"byte_end":201593,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201738,"byte_end":201745,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":201884,"byte_end":201887,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"kind":{"Impl":{"id":51}},"from":{"krate":5,"index":7089},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202021,"byte_end":202028,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202182,"byte_end":202189,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202341,"byte_end":202348,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202503,"byte_end":202506,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"kind":{"Impl":{"id":55}},"from":{"krate":5,"index":678},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202659,"byte_end":202666,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":202871,"byte_end":202878,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203091,"byte_end":203098,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203392,"byte_end":203399,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203694,"byte_end":203701,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":203991,"byte_end":203998,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7786}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204268,"byte_end":204275,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204303,"byte_end":204310,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204768,"byte_end":204775,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":204962,"byte_end":204969,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":205652,"byte_end":205656,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":207857,"byte_end":207861,"line_start":376,"line_end":376,"column_start":25,"column_end":29},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209123,"byte_end":209127,"line_start":411,"line_end":411,"column_start":25,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209280,"byte_end":209284,"line_start":420,"line_end":420,"column_start":28,"column_end":32},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3289}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209428,"byte_end":209432,"line_start":427,"line_end":427,"column_start":32,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209616,"byte_end":209620,"line_start":436,"line_end":436,"column_start":41,"column_end":45},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":209801,"byte_end":209805,"line_start":445,"line_end":445,"column_start":44,"column_end":48},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210037,"byte_end":210041,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210284,"byte_end":210288,"line_start":463,"line_end":463,"column_start":48,"column_end":52},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210512,"byte_end":210516,"line_start":472,"line_end":472,"column_start":46,"column_end":50},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210745,"byte_end":210749,"line_start":481,"line_end":481,"column_start":55,"column_end":59},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3361}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":210968,"byte_end":210972,"line_start":490,"line_end":490,"column_start":35,"column_end":39},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211143,"byte_end":211147,"line_start":497,"line_end":497,"column_start":44,"column_end":48},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211314,"byte_end":211318,"line_start":504,"line_end":504,"column_start":47,"column_end":51},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211546,"byte_end":211550,"line_start":511,"line_end":511,"column_start":56,"column_end":60},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":211789,"byte_end":211793,"line_start":518,"line_end":518,"column_start":51,"column_end":55},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212013,"byte_end":212017,"line_start":525,"line_end":525,"column_start":49,"column_end":53},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212242,"byte_end":212246,"line_start":532,"line_end":532,"column_start":58,"column_end":62},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":3365}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212449,"byte_end":212453,"line_start":539,"line_end":539,"column_start":26,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2954}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":212841,"byte_end":212845,"line_start":560,"line_end":560,"column_start":26,"column_end":30},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2957}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":213733,"byte_end":213736,"line_start":601,"line_end":601,"column_start":33,"column_end":36},"kind":{"Impl":{"id":111}},"from":{"krate":5,"index":678},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":213918,"byte_end":213921,"line_start":609,"line_end":609,"column_start":30,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":214105,"byte_end":214108,"line_start":617,"line_end":617,"column_start":30,"column_end":33},"kind":{"Impl":{"id":113}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":214251,"byte_end":214255,"line_start":624,"line_end":624,"column_start":17,"column_end":21},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":214289,"byte_end":214293,"line_start":626,"line_end":626,"column_start":30,"column_end":34},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":215094,"byte_end":215098,"line_start":653,"line_end":653,"column_start":25,"column_end":29},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\impls.rs","byte_start":215290,"byte_end":215294,"line_start":660,"line_end":660,"column_start":18,"column_end":22},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":945},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":225348,"byte_end":225355,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":4805},"to":{"krate":0,"index":824}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":236353,"byte_end":236354,"line_start":344,"line_end":344,"column_start":37,"column_end":38},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":838},"to":{"krate":0,"index":824}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237360,"byte_end":237369,"line_start":377,"line_end":377,"column_start":35,"column_end":44},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1348},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\io.rs","byte_start":237780,"byte_end":237791,"line_start":393,"line_end":393,"column_start":35,"column_end":46},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1354},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245011,"byte_end":245016,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":245768,"byte_end":245773,"line_start":118,"line_end":118,"column_start":23,"column_end":28},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1361},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":246059,"byte_end":246064,"line_start":132,"line_end":132,"column_start":34,"column_end":39},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1361},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":247492,"byte_end":247503,"line_start":169,"line_end":169,"column_start":10,"column_end":21},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248300,"byte_end":248311,"line_start":199,"line_end":199,"column_start":23,"column_end":34},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1370},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":248728,"byte_end":248739,"line_start":215,"line_end":215,"column_start":34,"column_end":45},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1370},"to":{"krate":2,"index":7834}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":249137,"byte_end":249148,"line_start":228,"line_end":228,"column_start":42,"column_end":53},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1370},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":250410,"byte_end":250419,"line_start":268,"line_end":268,"column_start":10,"column_end":19},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":251849,"byte_end":251859,"line_start":309,"line_end":309,"column_start":23,"column_end":33},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1381},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":253504,"byte_end":253514,"line_start":359,"line_end":359,"column_start":42,"column_end":52},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1381},"to":{"krate":2,"index":8260}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":255355,"byte_end":255364,"line_start":415,"line_end":415,"column_start":6,"column_end":15},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256711,"byte_end":256720,"line_start":455,"line_end":455,"column_start":23,"column_end":32},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1390},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bstr-0.2.17\\src\\utf8.rs","byte_start":256814,"byte_end":256823,"line_start":461,"line_end":461,"column_start":23,"column_end":32},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1390},"to":{"krate":2,"index":9692}}]}
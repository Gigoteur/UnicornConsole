{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","adler32","--edition=2018","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=99c2ecb5b34135f9","-C","extra-filename=-99c2ecb5b34135f9","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libadler32-99c2ecb5b34135f9.rmeta"},"prelude":{"crate_id":{"name":"adler32","disambiguator":[9489779933095753068,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":0,"byte_end":10015,"line_start":1,"line_end":324,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":0,"byte_end":10015,"line_start":1,"line_end":324,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":20}],"decl_id":null,"docs":" A minimal implementation of Adler32 for Rust.","sig":null,"attributes":[{"value":"/ A minimal implementation of Adler32 for Rust.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":0,"byte_end":49,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":50,"byte_end":53,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This provides the simple method adler32(), that exhausts a Read and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":54,"byte_end":125,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ computes the Adler32 hash, as well as the RollingAdler32 struct, that can","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":126,"byte_end":203,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ build a hash byte-by-byte, allowing to 'forget' past bytes in a rolling","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":204,"byte_end":279,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ fashion.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":280,"byte_end":292,"line_start":6,"line_end":6,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":293,"byte_end":296,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The adler32 code has been translated (as accurately as I could manage) from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":297,"byte_end":376,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ the zlib implementation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":377,"byte_end":405,"line_start":9,"line_end":9,"column_start":1,"column_end":29}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":407,"byte_end":430,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":2974,"byte_end":2988,"line_start":87,"line_end":87,"column_start":12,"column_end":26},"name":"RollingAdler32","qualname":"::RollingAdler32","value":"RollingAdler32 {  }","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" A rolling version of the Adler32 hash, which can 'forget' past bytes.","sig":null,"attributes":[{"value":"/ A rolling version of the Adler32 hash, which can 'forget' past bytes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":2666,"byte_end":2739,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":2740,"byte_end":2743,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Calling remove() will update the hash to the value it would have if that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":2744,"byte_end":2820,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/ past byte had never been fed to the algorithm. This allows you to get the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":2821,"byte_end":2898,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/ hash of a rolling window very efficiently.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":2899,"byte_end":2945,"line_start":85,"line_end":85,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3217,"byte_end":3220,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<RollingAdler32>::new","value":"pub fn new() -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty Adler32 context (with hash 1).\n","sig":null,"attributes":[{"value":"/ Creates an empty Adler32 context (with hash 1).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3154,"byte_end":3205,"line_start":99,"line_end":99,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3354,"byte_end":3364,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"from_value","qualname":"<RollingAdler32>::from_value","value":"pub fn from_value(u32) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an Adler32 context with the given initial value.\n","sig":null,"attributes":[{"value":"/ Creates an Adler32 context with the given initial value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3282,"byte_end":3342,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3593,"byte_end":3604,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"from_buffer","qualname":"<RollingAdler32>::from_buffer","value":"pub fn from_buffer(&[u8]) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Convenience function initializing a context from the hash of a buffer.\n","sig":null,"attributes":[{"value":"/ Convenience function initializing a context from the hash of a buffer.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3507,"byte_end":3581,"line_start":111,"line_end":111,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3787,"byte_end":3791,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"hash","qualname":"<RollingAdler32>::hash","value":"pub fn hash(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current hash.\n","sig":null,"attributes":[{"value":"/ Returns the current hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3746,"byte_end":3775,"line_start":118,"line_end":118,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3939,"byte_end":3945,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"remove","qualname":"<RollingAdler32>::remove","value":"pub fn remove(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Removes the given `byte` that was fed to the algorithm `size` bytes ago.\n","sig":null,"attributes":[{"value":"/ Removes the given `byte` that was fed to the algorithm `size` bytes ago.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3851,"byte_end":3927,"line_start":123,"line_end":123,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":4284,"byte_end":4290,"line_start":133,"line_end":133,"column_start":12,"column_end":18},"name":"update","qualname":"<RollingAdler32>::update","value":"pub fn update(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Feeds a new `byte` to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a new `byte` to the algorithm to update the hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":4213,"byte_end":4272,"line_start":132,"line_end":132,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":4521,"byte_end":4534,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"update_buffer","qualname":"<RollingAdler32>::update_buffer","value":"pub fn update_buffer(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Feeds a vector of bytes to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a vector of bytes to the algorithm to update the hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":4445,"byte_end":4509,"line_start":139,"line_end":139,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":6143,"byte_end":6150,"line_start":196,"line_end":196,"column_start":8,"column_end":15},"name":"adler32","qualname":"::adler32","value":"pub fn adler32<R: std::io::Read>(R) -> std::io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Consume a Read object and returns the Adler32 hash.\n","sig":null,"attributes":[{"value":"/ Consume a Read object and returns the Adler32 hash.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":6056,"byte_end":6111,"line_start":194,"line_end":194,"column_start":1,"column_end":56}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":6112,"byte_end":6135,"line_start":195,"line_end":195,"column_start":1,"column_end":24}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3035,"byte_end":3049,"line_start":92,"line_end":92,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3133,"byte_end":3147,"line_start":98,"line_end":98,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3035,"byte_end":3049,"line_start":92,"line_end":92,"column_start":18,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\adler32-1.2.0\\src\\lib.rs","byte_start":3133,"byte_end":3147,"line_start":98,"line_end":98,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}}]}
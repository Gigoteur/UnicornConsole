{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19","program":"C:\\Users\\toto\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=2","-C","embed-bitcode=no","-C","codegen-units=4","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"libc\"","--cfg","feature=\"oldtime\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","--cfg","feature=\"winapi\"","-C","metadata=0716af0ebc0791bd","-C","extra-filename=-0716af0ebc0791bd","--out-dir","d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","-L","dependency=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps","--extern","libc=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\liblibc-8f2b63fd302db70a.rmeta","--extern","num_integer=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libnum_integer-57aa9ee292f17b6f.rmeta","--extern","num_traits=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libnum_traits-3e40bcd7ad4f9f28.rmeta","--extern","time=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libtime-c5cfbe6078bd1f01.rmeta","--extern","winapi=d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libwinapi-9aeacbd1649155c5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\toto\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\UnicornConsole\\UnicornConsole\\unicorn-devkit\\target\\rls\\debug\\deps\\libchrono-0716af0ebc0791bd.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[16655647987879833095,0]},"crate_root":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src","external_crates":[{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":16,"id":{"name":"time","disambiguator":[5370073768841921979,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":17,"id":{"name":"winapi","disambiguator":[15949846003312357418,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":18,"id":{"name":"libc","disambiguator":[8607694418238748217,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":19,"id":{"name":"num_integer","disambiguator":[6929531873106407345,0]}},{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","num":20,"id":{"name":"num_traits","disambiguator":[114989641231652250,0]}}],"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":76,"byte_end":55909,"line_start":4,"line_end":1535,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":404},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22135,"byte_end":22143,"line_start":486,"line_end":486,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2416},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22161,"byte_end":22165,"line_start":488,"line_end":488,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22167,"byte_end":22175,"line_start":488,"line_end":488,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22177,"byte_end":22185,"line_start":488,"line_end":488,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2447},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22289,"byte_end":22297,"line_start":491,"line_end":491,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22299,"byte_end":22312,"line_start":491,"line_end":491,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1440},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22314,"byte_end":22326,"line_start":491,"line_end":491,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22328,"byte_end":22340,"line_start":491,"line_end":491,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2661},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22439,"byte_end":22449,"line_start":495,"line_end":495,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1671},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22451,"byte_end":22462,"line_start":495,"line_end":495,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22499,"byte_end":22506,"line_start":497,"line_end":497,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22508,"byte_end":22517,"line_start":497,"line_end":497,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22519,"byte_end":22532,"line_start":497,"line_end":497,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22534,"byte_end":22543,"line_start":497,"line_end":497,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22606,"byte_end":22611,"line_start":500,"line_end":500,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22606,"byte_end":22611,"line_start":500,"line_end":500,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22648,"byte_end":22659,"line_start":502,"line_end":502,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22661,"byte_end":22672,"line_start":502,"line_end":502,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22674,"byte_end":22680,"line_start":502,"line_end":502,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22682,"byte_end":22690,"line_start":502,"line_end":502,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22692,"byte_end":22695,"line_start":502,"line_end":502,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22692,"byte_end":22695,"line_start":502,"line_end":502,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2127},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22714,"byte_end":22727,"line_start":503,"line_end":503,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2762},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22729,"byte_end":22742,"line_start":503,"line_end":503,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22744,"byte_end":22755,"line_start":503,"line_end":503,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2416},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22894,"byte_end":22898,"line_start":508,"line_end":508,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22964,"byte_end":22969,"line_start":511,"line_end":511,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22964,"byte_end":22969,"line_start":511,"line_end":511,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23088,"byte_end":23099,"line_start":516,"line_end":516,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2447},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23136,"byte_end":23144,"line_start":518,"line_end":518,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23146,"byte_end":23159,"line_start":518,"line_end":518,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2169},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23197,"byte_end":23205,"line_start":520,"line_end":520,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2824},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23207,"byte_end":23212,"line_start":520,"line_end":520,"column_start":24,"column_end":29},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2188},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23214,"byte_end":23222,"line_start":520,"line_end":520,"column_start":31,"column_end":39},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23224,"byte_end":23231,"line_start":520,"line_end":520,"column_start":41,"column_end":48},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23269,"byte_end":23280,"line_start":522,"line_end":522,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23282,"byte_end":23285,"line_start":522,"line_end":522,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23282,"byte_end":23285,"line_start":522,"line_end":522,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23323,"byte_end":23332,"line_start":524,"line_end":524,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23334,"byte_end":23347,"line_start":524,"line_end":524,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23349,"byte_end":23358,"line_start":524,"line_end":524,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23396,"byte_end":23402,"line_start":526,"line_end":526,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23404,"byte_end":23412,"line_start":526,"line_end":526,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":141}},{"kind":"Use","ref_id":{"krate":0,"index":2235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83672,"byte_end":83683,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":210}},{"kind":"Use","ref_id":{"krate":0,"index":2250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83732,"byte_end":83737,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":210}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83732,"byte_end":83737,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":210}},{"kind":"Use","ref_id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83758,"byte_end":83761,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":210}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83758,"byte_end":83761,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":210}},{"kind":"Use","ref_id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23994,"byte_end":24003,"line_start":554,"line_end":554,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24005,"byte_end":24013,"line_start":554,"line_end":554,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24015,"byte_end":24023,"line_start":554,"line_end":554,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24176,"byte_end":24189,"line_start":558,"line_end":558,"column_start":30,"column_end":43},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24191,"byte_end":24203,"line_start":558,"line_end":558,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24205,"byte_end":24217,"line_start":558,"line_end":558,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24247,"byte_end":24254,"line_start":559,"line_end":559,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24280,"byte_end":24289,"line_start":560,"line_end":560,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":502}},{"kind":"Use","ref_id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":509752,"byte_end":509757,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1599}},{"kind":"Use","ref_id":{"krate":0,"index":2702},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":509781,"byte_end":509787,"line_start":43,"line_end":43,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1599}},{"kind":"Use","ref_id":{"krate":0,"index":2733},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":509813,"byte_end":509826,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1599}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":76,"byte_end":55909,"line_start":4,"line_end":1535,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":210},{"krate":0,"index":502},{"krate":0,"index":1161},{"krate":0,"index":1334},{"krate":0,"index":1599},{"krate":0,"index":2087},{"krate":0,"index":2780},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2808},{"krate":0,"index":2809},{"krate":0,"index":2811},{"krate":0,"index":2813},{"krate":0,"index":2141},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2153},{"krate":0,"index":2816},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2156},{"krate":0,"index":2824},{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2870},{"krate":0,"index":2872},{"krate":0,"index":2158},{"krate":0,"index":2163},{"krate":0,"index":2875},{"krate":0,"index":2877},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2188},{"krate":0,"index":2199}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"/ # Chrono: Date and Time for Rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/main/CHANGELOG.md) file.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":957,"byte_end":1048,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1049,"byte_end":1052,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1053,"byte_end":1065,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1066,"byte_end":1069,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1070,"byte_end":1104,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1105,"byte_end":1108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1109,"byte_end":1120,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1121,"byte_end":1139,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1140,"byte_end":1158,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1159,"byte_end":1166,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1167,"byte_end":1170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ### Features","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1171,"byte_end":1187,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1188,"byte_end":1191,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Chrono supports various runtime environments and operating systems, and has","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1192,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ several features that may be enabled or disabled.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1272,"byte_end":1325,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1326,"byte_end":1329,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Default features:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1330,"byte_end":1351,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1352,"byte_end":1355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - `alloc`: Enable features that depend on allocation (primarily string formatting)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1356,"byte_end":1442,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"/ - `std`: Enables functionality that depends on the standard library. This","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1443,"byte_end":1520,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/   is a superset of `alloc` and adds interoperation with standard library types","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1521,"byte_end":1603,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/   and traits.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1604,"byte_end":1621,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ - `clock`: enables reading the system time (`now`), independent of whether","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1622,"byte_end":1700,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/   `std::time::SystemTime` is present, depends on having a libc.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1701,"byte_end":1768,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1769,"byte_end":1772,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Optional features:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1773,"byte_end":1795,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1796,"byte_end":1799,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - `wasmbind`: Enable integration with [wasm-bindgen][] and its `js-sys` project","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1800,"byte_end":1883,"line_start":50,"line_end":50,"column_start":1,"column_end":84}},{"value":"/ - [`serde`][]: Enable serialization/deserialization via serde.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1884,"byte_end":1950,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/ - `unstable-locales`: Enable localization. This adds various methods with a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":1951,"byte_end":2030,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/   `_localized` suffix. The implementation and API may change or even be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2031,"byte_end":2106,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/   removed in a patch release. Feedback welcome.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2107,"byte_end":2158,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2159,"byte_end":2162,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`serde`]: https://github.com/serde-rs/serde","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2163,"byte_end":2211,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ [wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2212,"byte_end":2272,"line_start":57,"line_end":57,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2273,"byte_end":2276,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ See the [cargo docs][] for examples of specifying features.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2277,"byte_end":2340,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2341,"byte_end":2344,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2345,"byte_end":2451,"line_start":61,"line_end":61,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2452,"byte_end":2455,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2456,"byte_end":2471,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2472,"byte_end":2475,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2476,"byte_end":2492,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2493,"byte_end":2496,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses its own [`Duration`] type to represent the magnitude","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2497,"byte_end":2575,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ of a time span. Since this has the same name as the newer, standard type for","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2576,"byte_end":2656,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"/ duration, the reference will refer this type as `OldDuration`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2657,"byte_end":2723,"line_start":69,"line_end":69,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2724,"byte_end":2727,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2728,"byte_end":2799,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2800,"byte_end":2875,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2876,"byte_end":2887,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2888,"byte_end":2891,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ When the `oldtime` feature is enabled, [`Duration`] is an alias for the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2892,"byte_end":2967,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/ [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":2968,"byte_end":3045,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ type from v0.1 of the time crate. time v0.1 is deprecated, so new code","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3046,"byte_end":3120,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ should disable the `oldtime` feature and use the `chrono::Duration` type","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3121,"byte_end":3197,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ instead. The `oldtime` feature is enabled by default for backwards","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3198,"byte_end":3268,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ compatibility, but future versions of Chrono are likely to remove the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3269,"byte_end":3342,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ feature entirely.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3343,"byte_end":3364,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3365,"byte_end":3368,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3369,"byte_end":3409,"line_start":83,"line_end":83,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3410,"byte_end":3502,"line_start":84,"line_end":84,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3503,"byte_end":3546,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3547,"byte_end":3599,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3600,"byte_end":3697,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3698,"byte_end":3705,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3706,"byte_end":3799,"line_start":89,"line_end":89,"column_start":1,"column_end":94}},{"value":"/ methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3800,"byte_end":3812,"line_start":90,"line_end":90,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3813,"byte_end":3816,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3817,"byte_end":3838,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3839,"byte_end":3842,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3843,"byte_end":3864,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3865,"byte_end":3909,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3910,"byte_end":3964,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3965,"byte_end":3968,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":3969,"byte_end":4043,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4044,"byte_end":4092,"line_start":99,"line_end":99,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4093,"byte_end":4177,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4178,"byte_end":4216,"line_start":101,"line_end":101,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4217,"byte_end":4301,"line_start":102,"line_end":102,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4302,"byte_end":4383,"line_start":103,"line_end":103,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4384,"byte_end":4387,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4388,"byte_end":4449,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4450,"byte_end":4512,"line_start":106,"line_end":106,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4513,"byte_end":4593,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4594,"byte_end":4652,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4653,"byte_end":4656,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4657,"byte_end":4751,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4752,"byte_end":4755,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4756,"byte_end":4841,"line_start":112,"line_end":112,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4842,"byte_end":4845,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4846,"byte_end":4915,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4916,"byte_end":4983,"line_start":115,"line_end":115,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":4984,"byte_end":5047,"line_start":116,"line_end":116,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5048,"byte_end":5137,"line_start":117,"line_end":117,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5138,"byte_end":5205,"line_start":118,"line_end":118,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5206,"byte_end":5209,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5210,"byte_end":5286,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5287,"byte_end":5331,"line_start":121,"line_end":121,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5332,"byte_end":5420,"line_start":122,"line_end":122,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5421,"byte_end":5424,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5425,"byte_end":5487,"line_start":124,"line_end":124,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5488,"byte_end":5545,"line_start":125,"line_end":125,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5546,"byte_end":5575,"line_start":126,"line_end":126,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5576,"byte_end":5638,"line_start":127,"line_end":127,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5639,"byte_end":5642,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5643,"byte_end":5654,"line_start":129,"line_end":129,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5655,"byte_end":5682,"line_start":130,"line_end":130,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5683,"byte_end":5686,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5687,"byte_end":5774,"line_start":132,"line_end":132,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5775,"byte_end":5867,"line_start":133,"line_end":133,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5868,"byte_end":5901,"line_start":134,"line_end":134,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5902,"byte_end":5909,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5910,"byte_end":5913,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5914,"byte_end":5971,"line_start":137,"line_end":137,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":5972,"byte_end":6052,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6053,"byte_end":6121,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6122,"byte_end":6125,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6126,"byte_end":6137,"line_start":141,"line_end":141,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6138,"byte_end":6165,"line_start":142,"line_end":142,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6166,"byte_end":6202,"line_start":143,"line_end":143,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6203,"byte_end":6206,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6207,"byte_end":6285,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6286,"byte_end":6349,"line_start":146,"line_end":146,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6350,"byte_end":6407,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6408,"byte_end":6465,"line_start":148,"line_end":148,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6466,"byte_end":6540,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6541,"byte_end":6544,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6545,"byte_end":6637,"line_start":151,"line_end":151,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6638,"byte_end":6711,"line_start":152,"line_end":152,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6712,"byte_end":6788,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6789,"byte_end":6792,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6793,"byte_end":6820,"line_start":155,"line_end":155,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6821,"byte_end":6884,"line_start":156,"line_end":156,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6885,"byte_end":6962,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":6963,"byte_end":7046,"line_start":158,"line_end":158,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7047,"byte_end":7131,"line_start":159,"line_end":159,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7132,"byte_end":7135,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7136,"byte_end":7209,"line_start":161,"line_end":161,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7210,"byte_end":7307,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7308,"byte_end":7378,"line_start":163,"line_end":163,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7379,"byte_end":7472,"line_start":164,"line_end":164,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7473,"byte_end":7502,"line_start":165,"line_end":165,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7503,"byte_end":7526,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7527,"byte_end":7534,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7535,"byte_end":7538,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7539,"byte_end":7630,"line_start":169,"line_end":169,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7631,"byte_end":7713,"line_start":170,"line_end":170,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7714,"byte_end":7784,"line_start":171,"line_end":171,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7785,"byte_end":7832,"line_start":172,"line_end":172,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7833,"byte_end":7910,"line_start":173,"line_end":173,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7911,"byte_end":7914,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7915,"byte_end":7926,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"/ # extern crate chrono;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7927,"byte_end":7953,"line_start":176,"line_end":176,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7954,"byte_end":7957,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7958,"byte_end":7975,"line_start":178,"line_end":178,"column_start":1,"column_end":18}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":7976,"byte_end":8003,"line_start":179,"line_end":179,"column_start":1,"column_end":28}},{"value":"/ use chrono::Duration;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8004,"byte_end":8029,"line_start":180,"line_end":180,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8030,"byte_end":8033,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8034,"byte_end":8100,"line_start":182,"line_end":182,"column_start":1,"column_end":67}},{"value":"/ let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8101,"byte_end":8194,"line_start":183,"line_end":183,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8195,"byte_end":8198,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8199,"byte_end":8224,"line_start":185,"line_end":185,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8225,"byte_end":8291,"line_start":186,"line_end":186,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8292,"byte_end":8368,"line_start":187,"line_end":187,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8369,"byte_end":8437,"line_start":188,"line_end":188,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8438,"byte_end":8481,"line_start":189,"line_end":189,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8482,"byte_end":8556,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8557,"byte_end":8610,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8611,"byte_end":8707,"line_start":192,"line_end":192,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8708,"byte_end":8711,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8712,"byte_end":8754,"line_start":194,"line_end":194,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8755,"byte_end":8817,"line_start":195,"line_end":195,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8818,"byte_end":8877,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8878,"byte_end":8976,"line_start":197,"line_end":197,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8977,"byte_end":8980,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":8981,"byte_end":9046,"line_start":199,"line_end":199,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9047,"byte_end":9138,"line_start":200,"line_end":200,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9139,"byte_end":9177,"line_start":201,"line_end":201,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9178,"byte_end":9274,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9275,"byte_end":9278,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9279,"byte_end":9307,"line_start":204,"line_end":204,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9308,"byte_end":9362,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9363,"byte_end":9417,"line_start":206,"line_end":206,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9418,"byte_end":9499,"line_start":207,"line_end":207,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9500,"byte_end":9580,"line_start":208,"line_end":208,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9581,"byte_end":9668,"line_start":209,"line_end":209,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9669,"byte_end":9724,"line_start":210,"line_end":210,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9725,"byte_end":9812,"line_start":211,"line_end":211,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9813,"byte_end":9870,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9871,"byte_end":9878,"line_start":213,"line_end":213,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9879,"byte_end":9886,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9887,"byte_end":9890,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ### Formatting and Parsing","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9891,"byte_end":9921,"line_start":216,"line_end":216,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9922,"byte_end":9925,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":9926,"byte_end":10013,"line_start":218,"line_end":218,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10014,"byte_end":10079,"line_start":219,"line_end":219,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10080,"byte_end":10083,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10084,"byte_end":10153,"line_start":221,"line_end":221,"column_start":1,"column_end":70}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10154,"byte_end":10211,"line_start":222,"line_end":222,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10212,"byte_end":10215,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10216,"byte_end":10310,"line_start":224,"line_end":224,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10311,"byte_end":10396,"line_start":225,"line_end":225,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10397,"byte_end":10465,"line_start":226,"line_end":226,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10466,"byte_end":10493,"line_start":227,"line_end":227,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10494,"byte_end":10497,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ Chrono now also provides date formatting in almost any language without the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10498,"byte_end":10577,"line_start":229,"line_end":229,"column_start":1,"column_end":80}},{"value":"/ help of an additional C library. This functionality is under the feature","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10578,"byte_end":10654,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ `unstable-locales`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10655,"byte_end":10678,"line_start":231,"line_end":231,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10679,"byte_end":10682,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10683,"byte_end":10694,"line_start":233,"line_end":233,"column_start":1,"column_end":12}},{"value":"/ chrono { version = \"0.4\", features = [\"unstable-locales\"]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10695,"byte_end":10756,"line_start":234,"line_end":234,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10757,"byte_end":10764,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10765,"byte_end":10768,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ The `unstable-locales` feature requires and implies at least the `alloc` feature.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10769,"byte_end":10854,"line_start":237,"line_end":237,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10855,"byte_end":10858,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10859,"byte_end":10870,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10871,"byte_end":10898,"line_start":240,"line_end":240,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10899,"byte_end":10902,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10903,"byte_end":10956,"line_start":242,"line_end":242,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":10957,"byte_end":11039,"line_start":243,"line_end":243,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11040,"byte_end":11124,"line_start":244,"line_end":244,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11125,"byte_end":11246,"line_start":245,"line_end":245,"column_start":1,"column_end":122}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11247,"byte_end":11332,"line_start":246,"line_end":246,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11333,"byte_end":11336,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11337,"byte_end":11395,"line_start":248,"line_end":248,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11396,"byte_end":11463,"line_start":249,"line_end":249,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11464,"byte_end":11525,"line_start":250,"line_end":250,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11526,"byte_end":11586,"line_start":251,"line_end":251,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11587,"byte_end":11590,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11591,"byte_end":11663,"line_start":253,"line_end":253,"column_start":1,"column_end":73}},{"value":"/ let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11664,"byte_end":11730,"line_start":254,"line_end":254,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11731,"byte_end":11806,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11807,"byte_end":11814,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11815,"byte_end":11818,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11819,"byte_end":11862,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11863,"byte_end":11866,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11867,"byte_end":11958,"line_start":260,"line_end":260,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":11959,"byte_end":12050,"line_start":261,"line_end":261,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12051,"byte_end":12139,"line_start":262,"line_end":262,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12140,"byte_end":12200,"line_start":263,"line_end":263,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12201,"byte_end":12281,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12282,"byte_end":12352,"line_start":265,"line_end":265,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12353,"byte_end":12356,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12357,"byte_end":12445,"line_start":267,"line_end":267,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12446,"byte_end":12518,"line_start":268,"line_end":268,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12519,"byte_end":12614,"line_start":269,"line_end":269,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12615,"byte_end":12673,"line_start":270,"line_end":270,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12674,"byte_end":12763,"line_start":271,"line_end":271,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12764,"byte_end":12774,"line_start":272,"line_end":272,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12775,"byte_end":12864,"line_start":273,"line_end":273,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12865,"byte_end":12911,"line_start":274,"line_end":274,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12912,"byte_end":12915,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":12916,"byte_end":13010,"line_start":276,"line_end":276,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13011,"byte_end":13065,"line_start":277,"line_end":277,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13066,"byte_end":13153,"line_start":278,"line_end":278,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13154,"byte_end":13232,"line_start":279,"line_end":279,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13233,"byte_end":13264,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13265,"byte_end":13268,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13269,"byte_end":13336,"line_start":282,"line_end":282,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13337,"byte_end":13380,"line_start":283,"line_end":283,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13381,"byte_end":13384,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13385,"byte_end":13396,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13397,"byte_end":13424,"line_start":286,"line_end":286,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13425,"byte_end":13428,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13429,"byte_end":13482,"line_start":288,"line_end":288,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13483,"byte_end":13547,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13548,"byte_end":13551,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13552,"byte_end":13567,"line_start":291,"line_end":291,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13568,"byte_end":13648,"line_start":292,"line_end":292,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13649,"byte_end":13734,"line_start":293,"line_end":293,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13735,"byte_end":13834,"line_start":294,"line_end":294,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13835,"byte_end":13838,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13839,"byte_end":13854,"line_start":296,"line_end":296,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13855,"byte_end":13949,"line_start":297,"line_end":297,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13950,"byte_end":13987,"line_start":298,"line_end":298,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":13988,"byte_end":14067,"line_start":299,"line_end":299,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14068,"byte_end":14105,"line_start":300,"line_end":300,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14106,"byte_end":14202,"line_start":301,"line_end":301,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14203,"byte_end":14206,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14207,"byte_end":14222,"line_start":303,"line_end":303,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14223,"byte_end":14321,"line_start":304,"line_end":304,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14322,"byte_end":14422,"line_start":305,"line_end":305,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14423,"byte_end":14426,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14427,"byte_end":14460,"line_start":307,"line_end":307,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14461,"byte_end":14546,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14547,"byte_end":14611,"line_start":309,"line_end":309,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14612,"byte_end":14694,"line_start":310,"line_end":310,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14695,"byte_end":14733,"line_start":311,"line_end":311,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14734,"byte_end":14824,"line_start":312,"line_end":312,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14825,"byte_end":14832,"line_start":313,"line_end":313,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14833,"byte_end":14836,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14837,"byte_end":14914,"line_start":315,"line_end":315,"column_start":1,"column_end":78}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14915,"byte_end":14972,"line_start":316,"line_end":316,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14973,"byte_end":14976,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":14977,"byte_end":15024,"line_start":318,"line_end":318,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15025,"byte_end":15028,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15029,"byte_end":15123,"line_start":320,"line_end":320,"column_start":1,"column_end":95}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15124,"byte_end":15206,"line_start":321,"line_end":321,"column_start":1,"column_end":83}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15207,"byte_end":15269,"line_start":322,"line_end":322,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15270,"byte_end":15273,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15274,"byte_end":15379,"line_start":324,"line_end":324,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15380,"byte_end":15454,"line_start":325,"line_end":325,"column_start":1,"column_end":75}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15455,"byte_end":15548,"line_start":326,"line_end":326,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15549,"byte_end":15607,"line_start":327,"line_end":327,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15608,"byte_end":15611,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15612,"byte_end":15623,"line_start":329,"line_end":329,"column_start":1,"column_end":12}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15624,"byte_end":15682,"line_start":330,"line_end":330,"column_start":1,"column_end":59}},{"value":"/ use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15683,"byte_end":15725,"line_start":331,"line_end":331,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15726,"byte_end":15729,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15730,"byte_end":15769,"line_start":333,"line_end":333,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15770,"byte_end":15815,"line_start":334,"line_end":334,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15816,"byte_end":15883,"line_start":335,"line_end":335,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15884,"byte_end":15887,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15888,"byte_end":15927,"line_start":337,"line_end":337,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":15928,"byte_end":16014,"line_start":338,"line_end":338,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16015,"byte_end":16061,"line_start":339,"line_end":339,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16062,"byte_end":16069,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16070,"byte_end":16073,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16074,"byte_end":16097,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16098,"byte_end":16101,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16102,"byte_end":16186,"line_start":344,"line_end":344,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16187,"byte_end":16266,"line_start":345,"line_end":345,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16267,"byte_end":16361,"line_start":346,"line_end":346,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16362,"byte_end":16365,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16366,"byte_end":16377,"line_start":348,"line_end":348,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16378,"byte_end":16405,"line_start":349,"line_end":349,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16406,"byte_end":16442,"line_start":350,"line_end":350,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16443,"byte_end":16446,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16447,"byte_end":16547,"line_start":352,"line_end":352,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16548,"byte_end":16596,"line_start":353,"line_end":353,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16597,"byte_end":16649,"line_start":354,"line_end":354,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16650,"byte_end":16653,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16654,"byte_end":16716,"line_start":356,"line_end":356,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16717,"byte_end":16778,"line_start":357,"line_end":357,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16779,"byte_end":16872,"line_start":358,"line_end":358,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16873,"byte_end":16898,"line_start":359,"line_end":359,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16899,"byte_end":16906,"line_start":360,"line_end":360,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16907,"byte_end":16910,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":16911,"byte_end":17003,"line_start":362,"line_end":362,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17004,"byte_end":17007,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17008,"byte_end":17078,"line_start":364,"line_end":364,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17079,"byte_end":17142,"line_start":365,"line_end":365,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17143,"byte_end":17215,"line_start":366,"line_end":366,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17216,"byte_end":17276,"line_start":367,"line_end":367,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17277,"byte_end":17280,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17281,"byte_end":17308,"line_start":369,"line_end":369,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17309,"byte_end":17312,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17313,"byte_end":17399,"line_start":371,"line_end":371,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17400,"byte_end":17456,"line_start":372,"line_end":372,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17457,"byte_end":17513,"line_start":373,"line_end":373,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17514,"byte_end":17588,"line_start":374,"line_end":374,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17589,"byte_end":17592,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17593,"byte_end":17666,"line_start":376,"line_end":376,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17667,"byte_end":17745,"line_start":377,"line_end":377,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17746,"byte_end":17816,"line_start":378,"line_end":378,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17817,"byte_end":17820,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17821,"byte_end":17910,"line_start":380,"line_end":380,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17911,"byte_end":17981,"line_start":381,"line_end":381,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":17982,"byte_end":18017,"line_start":382,"line_end":382,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18018,"byte_end":18088,"line_start":383,"line_end":383,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18089,"byte_end":18122,"line_start":384,"line_end":384,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18123,"byte_end":18126,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18127,"byte_end":18145,"line_start":386,"line_end":386,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18146,"byte_end":18149,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18150,"byte_end":18240,"line_start":388,"line_end":388,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18241,"byte_end":18340,"line_start":389,"line_end":389,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18341,"byte_end":18344,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18345,"byte_end":18421,"line_start":391,"line_end":391,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18422,"byte_end":18476,"line_start":392,"line_end":392,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18477,"byte_end":18480,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18481,"byte_end":18538,"line_start":394,"line_end":394,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18539,"byte_end":18635,"line_start":395,"line_end":395,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18636,"byte_end":18706,"line_start":396,"line_end":396,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18707,"byte_end":18784,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18785,"byte_end":18875,"line_start":398,"line_end":398,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18876,"byte_end":18892,"line_start":399,"line_end":399,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18893,"byte_end":18896,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18897,"byte_end":18990,"line_start":401,"line_end":401,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":18991,"byte_end":19064,"line_start":402,"line_end":402,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19065,"byte_end":19131,"line_start":403,"line_end":403,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19132,"byte_end":19205,"line_start":404,"line_end":404,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19206,"byte_end":19209,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ Non ISO week handling is not yet supported.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19210,"byte_end":19257,"line_start":406,"line_end":406,"column_start":1,"column_end":48}},{"value":"/ For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19258,"byte_end":19335,"line_start":407,"line_end":407,"column_start":1,"column_end":78}},{"value":"/ crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19336,"byte_end":19400,"line_start":408,"line_end":408,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19401,"byte_end":19404,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19405,"byte_end":19458,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19459,"byte_end":19555,"line_start":411,"line_end":411,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19704,"byte_end":19726,"line_start":415,"line_end":415,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19727,"byte_end":19766,"line_start":416,"line_end":416,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19767,"byte_end":19786,"line_start":417,"line_end":417,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":19836,"byte_end":19860,"line_start":419,"line_end":419,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22850,"byte_end":22857,"line_start":506,"line_end":506,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":22759,"byte_end":22841,"line_start":505,"line_end":505,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":2201},{"krate":0,"index":2212},{"krate":0,"index":2215},{"krate":0,"index":2217},{"krate":0,"index":2221},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2231},{"krate":0,"index":247},{"krate":0,"index":255},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":292},{"krate":0,"index":377},{"krate":0,"index":439},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":500}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65356,"byte_end":65427,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65428,"byte_end":65431,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65432,"byte_end":65495,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65496,"byte_end":65499,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65500,"byte_end":65561,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65562,"byte_end":65621,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65622,"byte_end":65683,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65684,"byte_end":65747,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65748,"byte_end":65751,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65752,"byte_end":65848,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65849,"byte_end":65945,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":65946,"byte_end":66037,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66038,"byte_end":66118,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66119,"byte_end":66187,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66188,"byte_end":66233,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66234,"byte_end":66323,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66777,"byte_end":66781,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":2201},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66649,"byte_end":66696,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66701,"byte_end":66772,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2205},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66855,"byte_end":66861,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":2201},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66787,"byte_end":66850,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2208},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67027,"byte_end":67036,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":2201},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66870,"byte_end":66946,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66951,"byte_end":67022,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66628,"byte_end":66639,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"pub enum LocalResult<T> { None, Single(T), Ambiguous(T, T), }","parent":null,"children":[{"krate":0,"index":2203},{"krate":0,"index":2205},{"krate":0,"index":2208}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":66484,"byte_end":66567,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67186,"byte_end":67192,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"pub fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67092,"byte_end":67174,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67420,"byte_end":67428,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"pub fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67326,"byte_end":67408,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67685,"byte_end":67691,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"pub fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67593,"byte_end":67673,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67938,"byte_end":67941,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"pub fn map<U, F: FnMut(T) -> U>(Self, F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67856,"byte_end":67926,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68516,"byte_end":68524,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"pub fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68291,"byte_end":68362,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68367,"byte_end":68415,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68420,"byte_end":68423,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68428,"byte_end":68490,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68495,"byte_end":68504,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69019,"byte_end":69030,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"pub fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68791,"byte_end":68865,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68870,"byte_end":68918,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68923,"byte_end":68926,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68931,"byte_end":68993,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68998,"byte_end":69007,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69650,"byte_end":69667,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69324,"byte_end":69411,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69416,"byte_end":69496,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69501,"byte_end":69549,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69554,"byte_end":69557,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69562,"byte_end":69624,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":69629,"byte_end":69638,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70366,"byte_end":70383,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70036,"byte_end":70123,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70128,"byte_end":70212,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70217,"byte_end":70265,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70270,"byte_end":70273,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70278,"byte_end":70340,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70345,"byte_end":70354,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71084,"byte_end":71100,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70752,"byte_end":70838,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70843,"byte_end":70930,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70935,"byte_end":70983,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70988,"byte_end":70991,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":70996,"byte_end":71058,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71063,"byte_end":71072,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71588,"byte_end":71594,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71505,"byte_end":71576,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71949,"byte_end":71955,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":266}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71896,"byte_end":71938,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72061,"byte_end":72064,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"pub fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71990,"byte_end":72053,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72263,"byte_end":72271,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72091,"byte_end":72109,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72110,"byte_end":72113,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72114,"byte_end":72203,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72204,"byte_end":72252,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72494,"byte_end":72500,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72293,"byte_end":72323,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72328,"byte_end":72400,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72405,"byte_end":72484,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73117,"byte_end":73120,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"pub fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72515,"byte_end":72586,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72591,"byte_end":72670,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72675,"byte_end":72678,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72683,"byte_end":72776,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72781,"byte_end":72858,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72863,"byte_end":72866,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72871,"byte_end":72933,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72938,"byte_end":72941,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72946,"byte_end":72959,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72964,"byte_end":72967,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72972,"byte_end":72980,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72985,"byte_end":73017,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73022,"byte_end":73025,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73030,"byte_end":73096,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73101,"byte_end":73109,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73936,"byte_end":73943,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"pub fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73236,"byte_end":73307,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73312,"byte_end":73391,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73396,"byte_end":73399,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73404,"byte_end":73497,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73502,"byte_end":73579,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73584,"byte_end":73587,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73592,"byte_end":73662,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73667,"byte_end":73670,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73675,"byte_end":73688,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73693,"byte_end":73696,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73701,"byte_end":73709,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73714,"byte_end":73759,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73764,"byte_end":73767,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73772,"byte_end":73851,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73856,"byte_end":73915,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":73920,"byte_end":73928,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74792,"byte_end":74794,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"pub fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74180,"byte_end":74271,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74276,"byte_end":74355,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74360,"byte_end":74363,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74368,"byte_end":74461,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74466,"byte_end":74543,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74548,"byte_end":74551,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74556,"byte_end":74611,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74616,"byte_end":74619,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74624,"byte_end":74637,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74642,"byte_end":74645,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74650,"byte_end":74658,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74663,"byte_end":74695,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74700,"byte_end":74703,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74708,"byte_end":74771,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74776,"byte_end":74784,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75345,"byte_end":75351,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"pub fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74898,"byte_end":74989,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":74994,"byte_end":75073,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75078,"byte_end":75081,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75086,"byte_end":75179,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75184,"byte_end":75261,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75266,"byte_end":75269,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75274,"byte_end":75337,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76329,"byte_end":76335,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"pub fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75576,"byte_end":75667,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75672,"byte_end":75698,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75703,"byte_end":75782,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75787,"byte_end":75858,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75863,"byte_end":75866,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75871,"byte_end":75964,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":75969,"byte_end":76046,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76051,"byte_end":76054,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76059,"byte_end":76122,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76127,"byte_end":76130,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76135,"byte_end":76148,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76153,"byte_end":76156,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76161,"byte_end":76169,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76174,"byte_end":76215,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76220,"byte_end":76223,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76228,"byte_end":76308,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76313,"byte_end":76321,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77026,"byte_end":77036,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"pub fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76464,"byte_end":76555,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76560,"byte_end":76586,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76591,"byte_end":76670,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76675,"byte_end":76746,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76751,"byte_end":76754,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76759,"byte_end":76852,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76857,"byte_end":76934,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76939,"byte_end":76942,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":76947,"byte_end":77018,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77861,"byte_end":77870,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"pub fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77286,"byte_end":77348,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77353,"byte_end":77413,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77418,"byte_end":77489,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77494,"byte_end":77497,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77502,"byte_end":77577,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77582,"byte_end":77659,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77664,"byte_end":77667,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77672,"byte_end":77685,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77690,"byte_end":77693,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77698,"byte_end":77706,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77711,"byte_end":77743,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77748,"byte_end":77751,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77756,"byte_end":77840,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77845,"byte_end":77853,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78353,"byte_end":78366,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"pub fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":77981,"byte_end":78043,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78048,"byte_end":78108,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78113,"byte_end":78184,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78189,"byte_end":78192,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78197,"byte_end":78269,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78274,"byte_end":78345,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79106,"byte_end":79122,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"pub fn timestamp_millis(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78627,"byte_end":78694,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78699,"byte_end":78760,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78765,"byte_end":78768,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78773,"byte_end":78842,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78847,"byte_end":78918,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78923,"byte_end":78926,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78931,"byte_end":78944,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78949,"byte_end":78952,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78957,"byte_end":78965,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":78970,"byte_end":79002,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79007,"byte_end":79010,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79015,"byte_end":79085,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79090,"byte_end":79098,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79853,"byte_end":79873,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"pub fn timestamp_millis_opt(&Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79225,"byte_end":79292,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79297,"byte_end":79358,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79363,"byte_end":79366,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79371,"byte_end":79374,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79379,"byte_end":79449,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79454,"byte_end":79509,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79514,"byte_end":79540,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79545,"byte_end":79548,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79553,"byte_end":79566,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79571,"byte_end":79574,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79579,"byte_end":79587,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79592,"byte_end":79637,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79642,"byte_end":79690,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79695,"byte_end":79766,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79771,"byte_end":79821,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79826,"byte_end":79832,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":79837,"byte_end":79845,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80575,"byte_end":80590,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"pub fn timestamp_nanos(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80152,"byte_end":80218,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80223,"byte_end":80284,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80289,"byte_end":80292,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80297,"byte_end":80366,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80371,"byte_end":80382,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80387,"byte_end":80390,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80395,"byte_end":80408,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80413,"byte_end":80416,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80421,"byte_end":80429,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80434,"byte_end":80466,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80471,"byte_end":80474,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80479,"byte_end":80554,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80559,"byte_end":80567,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81377,"byte_end":81394,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"pub fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80873,"byte_end":80929,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80934,"byte_end":80983,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":80988,"byte_end":81058,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81063,"byte_end":81101,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81106,"byte_end":81109,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81114,"byte_end":81188,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81193,"byte_end":81251,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81256,"byte_end":81259,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81264,"byte_end":81334,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81339,"byte_end":81369,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81665,"byte_end":81676,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"pub fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81610,"byte_end":81657,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81788,"byte_end":81810,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"pub fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81714,"byte_end":81780,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81950,"byte_end":81976,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"pub fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":81872,"byte_end":81942,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82126,"byte_end":82141,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"pub fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82042,"byte_end":82118,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82493,"byte_end":82512,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"pub fn from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82401,"byte_end":82485,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82786,"byte_end":82806,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"pub fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82711,"byte_end":82778,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82932,"byte_end":82956,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"pub fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":82853,"byte_end":82924,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83163,"byte_end":83176,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"pub fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83007,"byte_end":83058,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83063,"byte_end":83155,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83449,"byte_end":83466,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"pub fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83289,"byte_end":83344,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":83349,"byte_end":83441,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":2235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86794,"byte_end":86805,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":2236}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86418,"byte_end":86489,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86490,"byte_end":86493,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86494,"byte_end":86551,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86552,"byte_end":86615,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86616,"byte_end":86689,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86690,"byte_end":86738,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87409,"byte_end":87413,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"pub fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86860,"byte_end":86948,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86953,"byte_end":87006,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87011,"byte_end":87014,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87019,"byte_end":87057,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87062,"byte_end":87065,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87070,"byte_end":87083,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87088,"byte_end":87091,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87096,"byte_end":87104,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87109,"byte_end":87149,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87154,"byte_end":87174,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87179,"byte_end":87243,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87248,"byte_end":87312,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87317,"byte_end":87384,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87389,"byte_end":87397,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87748,"byte_end":87756,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"pub fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87531,"byte_end":87619,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87624,"byte_end":87677,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87682,"byte_end":87685,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87690,"byte_end":87736,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88498,"byte_end":88502,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"pub fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":87949,"byte_end":88037,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88042,"byte_end":88095,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88100,"byte_end":88103,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88108,"byte_end":88146,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88151,"byte_end":88154,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88159,"byte_end":88172,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88177,"byte_end":88180,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88185,"byte_end":88193,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88198,"byte_end":88238,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88243,"byte_end":88263,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88268,"byte_end":88332,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88337,"byte_end":88401,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88406,"byte_end":88473,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88478,"byte_end":88486,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88837,"byte_end":88845,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"pub fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88620,"byte_end":88708,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88713,"byte_end":88766,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88771,"byte_end":88774,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":88779,"byte_end":88825,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89144,"byte_end":89159,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"pub fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89039,"byte_end":89118,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89123,"byte_end":89132,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89321,"byte_end":89336,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"pub fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89216,"byte_end":89295,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89300,"byte_end":89309,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96849,"byte_end":96854,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96393,"byte_end":96468,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96469,"byte_end":96472,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96473,"byte_end":96530,"line_start":78,"line_end":78,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96531,"byte_end":96606,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96607,"byte_end":96621,"line_start":80,"line_end":80,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96622,"byte_end":96625,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96626,"byte_end":96639,"line_start":82,"line_end":82,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96640,"byte_end":96643,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96644,"byte_end":96652,"line_start":84,"line_end":84,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96653,"byte_end":96697,"line_start":85,"line_end":85,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96698,"byte_end":96701,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96702,"byte_end":96745,"line_start":87,"line_end":87,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96746,"byte_end":96798,"line_start":88,"line_end":88,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96799,"byte_end":96807,"line_start":89,"line_end":89,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96945,"byte_end":96950,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"pub fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96874,"byte_end":96933,"line_start":94,"line_end":94,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":97176,"byte_end":97179,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"pub fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":97009,"byte_end":97072,"line_start":99,"line_end":99,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n\"wasmbind\")))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":97077,"byte_end":97164,"line_start":100,"line_end":100,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103106,"byte_end":103109,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102460,"byte_end":102555,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102556,"byte_end":102618,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102619,"byte_end":102622,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102623,"byte_end":102680,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102681,"byte_end":102752,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102753,"byte_end":102767,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102768,"byte_end":102771,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102772,"byte_end":102785,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102786,"byte_end":102789,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102790,"byte_end":102798,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102799,"byte_end":102856,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102857,"byte_end":102860,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102861,"byte_end":102943,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102944,"byte_end":102947,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102948,"byte_end":102989,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":102990,"byte_end":103047,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103048,"byte_end":103056,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103224,"byte_end":103229,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"pub fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103153,"byte_end":103212,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103451,"byte_end":103454,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"pub fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103284,"byte_end":103347,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n\"wasmbind\")))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103352,"byte_end":103439,"line_start":46,"line_end":46,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23625,"byte_end":23630,"line_start":541,"line_end":541,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":701},{"krate":0,"index":891},{"krate":0,"index":983},{"krate":0,"index":1004},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"/ Date and time types unconcerned with timezones.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23637,"byte_end":23688,"line_start":542,"line_end":542,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23693,"byte_end":23696,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23701,"byte_end":23755,"line_start":544,"line_end":544,"column_start":5,"column_end":59}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23760,"byte_end":23815,"line_start":545,"line_end":545,"column_start":5,"column_end":60}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23820,"byte_end":23884,"line_start":546,"line_end":546,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109223,"byte_end":109232,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":2269}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106645,"byte_end":106689,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106690,"byte_end":106753,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106754,"byte_end":106802,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106803,"byte_end":106872,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106873,"byte_end":106876,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106877,"byte_end":106896,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106897,"byte_end":106900,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106901,"byte_end":106977,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":106978,"byte_end":107050,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107051,"byte_end":107054,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107055,"byte_end":107151,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107152,"byte_end":107239,"line_start":61,"line_end":61,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107240,"byte_end":107329,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107330,"byte_end":107333,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107334,"byte_end":107424,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107425,"byte_end":107506,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107507,"byte_end":107593,"line_start":66,"line_end":66,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107594,"byte_end":107597,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107598,"byte_end":107675,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107676,"byte_end":107747,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107748,"byte_end":107830,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107831,"byte_end":107834,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107835,"byte_end":107850,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107851,"byte_end":107854,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107855,"byte_end":107925,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":107926,"byte_end":107999,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108000,"byte_end":108003,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108004,"byte_end":108092,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108093,"byte_end":108163,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108164,"byte_end":108167,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108168,"byte_end":108262,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108263,"byte_end":108343,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108344,"byte_end":108347,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108348,"byte_end":108437,"line_start":83,"line_end":83,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108438,"byte_end":108518,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108519,"byte_end":108522,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108523,"byte_end":108603,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108604,"byte_end":108680,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108681,"byte_end":108755,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108756,"byte_end":108807,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108808,"byte_end":108811,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108812,"byte_end":108830,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108831,"byte_end":108834,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108835,"byte_end":108926,"line_start":93,"line_end":93,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":108927,"byte_end":109000,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109001,"byte_end":109080,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109081,"byte_end":109084,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109085,"byte_end":109150,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109351,"byte_end":109359,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109279,"byte_end":109340,"line_start":103,"line_end":103,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109509,"byte_end":109517,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":109436,"byte_end":109498,"line_start":105,"line_end":105,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111881,"byte_end":111889,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"pub fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111151,"byte_end":111219,"line_start":152,"line_end":152,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111224,"byte_end":111250,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111255,"byte_end":111258,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111263,"byte_end":111325,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111330,"byte_end":111333,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111338,"byte_end":111351,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111356,"byte_end":111359,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111364,"byte_end":111372,"line_start":159,"line_end":159,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111377,"byte_end":111424,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111429,"byte_end":111432,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111437,"byte_end":111482,"line_start":162,"line_end":162,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111487,"byte_end":111518,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111523,"byte_end":111552,"line_start":164,"line_end":164,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111557,"byte_end":111585,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111590,"byte_end":111637,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111642,"byte_end":111684,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111689,"byte_end":111729,"line_start":168,"line_end":168,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111734,"byte_end":111776,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111781,"byte_end":111856,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":111861,"byte_end":111869,"line_start":171,"line_end":171,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112740,"byte_end":112752,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"pub fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112038,"byte_end":112106,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112111,"byte_end":112137,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112142,"byte_end":112145,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112150,"byte_end":112220,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112225,"byte_end":112228,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112233,"byte_end":112246,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112251,"byte_end":112254,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112259,"byte_end":112267,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112272,"byte_end":112298,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112303,"byte_end":112306,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112311,"byte_end":112358,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112363,"byte_end":112366,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112371,"byte_end":112420,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112425,"byte_end":112474,"line_start":189,"line_end":189,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112479,"byte_end":112528,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112533,"byte_end":112604,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112609,"byte_end":112659,"line_start":192,"line_end":192,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112664,"byte_end":112715,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112720,"byte_end":112728,"line_start":194,"line_end":194,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113646,"byte_end":113653,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"pub fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":112931,"byte_end":112997,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113002,"byte_end":113033,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113038,"byte_end":113041,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113046,"byte_end":113109,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113114,"byte_end":113117,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113122,"byte_end":113135,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113140,"byte_end":113143,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113148,"byte_end":113156,"line_start":207,"line_end":207,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113161,"byte_end":113208,"line_start":208,"line_end":208,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113213,"byte_end":113216,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113221,"byte_end":113262,"line_start":210,"line_end":210,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113267,"byte_end":113299,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113304,"byte_end":113335,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113340,"byte_end":113369,"line_start":213,"line_end":213,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113374,"byte_end":113402,"line_start":214,"line_end":214,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113407,"byte_end":113449,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113454,"byte_end":113494,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113499,"byte_end":113541,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113546,"byte_end":113621,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113626,"byte_end":113634,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114523,"byte_end":114534,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"pub fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113790,"byte_end":113856,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113861,"byte_end":113892,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113897,"byte_end":113900,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113905,"byte_end":113976,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113981,"byte_end":113984,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":113989,"byte_end":114002,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114007,"byte_end":114010,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114015,"byte_end":114023,"line_start":231,"line_end":231,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114028,"byte_end":114054,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114059,"byte_end":114062,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114067,"byte_end":114112,"line_start":234,"line_end":234,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114117,"byte_end":114120,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114125,"byte_end":114171,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114176,"byte_end":114220,"line_start":237,"line_end":237,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114225,"byte_end":114271,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114276,"byte_end":114322,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114327,"byte_end":114395,"line_start":240,"line_end":240,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114400,"byte_end":114446,"line_start":241,"line_end":241,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114451,"byte_end":114498,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114503,"byte_end":114511,"line_start":243,"line_end":243,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115540,"byte_end":115551,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"pub fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114700,"byte_end":114764,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114769,"byte_end":114813,"line_start":250,"line_end":250,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114818,"byte_end":114894,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114899,"byte_end":114902,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114907,"byte_end":114970,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114975,"byte_end":114978,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":114983,"byte_end":114996,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115001,"byte_end":115004,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115009,"byte_end":115017,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115022,"byte_end":115069,"line_start":258,"line_end":258,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115074,"byte_end":115077,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115082,"byte_end":115141,"line_start":260,"line_end":260,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115146,"byte_end":115188,"line_start":261,"line_end":261,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115193,"byte_end":115233,"line_start":262,"line_end":262,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115238,"byte_end":115280,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115285,"byte_end":115316,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115321,"byte_end":115350,"line_start":265,"line_end":265,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115355,"byte_end":115383,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115388,"byte_end":115435,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115440,"byte_end":115515,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115520,"byte_end":115528,"line_start":269,"line_end":269,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117914,"byte_end":117929,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"pub fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115713,"byte_end":115777,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115782,"byte_end":115826,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115831,"byte_end":115907,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115912,"byte_end":115915,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115920,"byte_end":115991,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":115996,"byte_end":115999,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116004,"byte_end":116017,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116022,"byte_end":116025,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116030,"byte_end":116038,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116043,"byte_end":116080,"line_start":283,"line_end":283,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116085,"byte_end":116088,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116093,"byte_end":116132,"line_start":285,"line_end":285,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116137,"byte_end":116190,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116195,"byte_end":116198,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116203,"byte_end":116264,"line_start":288,"line_end":288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116269,"byte_end":116353,"line_start":289,"line_end":289,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116358,"byte_end":116443,"line_start":290,"line_end":290,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116448,"byte_end":116510,"line_start":291,"line_end":291,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116515,"byte_end":116518,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116523,"byte_end":116587,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116592,"byte_end":116657,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116662,"byte_end":116670,"line_start":295,"line_end":295,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116675,"byte_end":116678,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116683,"byte_end":116762,"line_start":297,"line_end":297,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116767,"byte_end":116770,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116775,"byte_end":116783,"line_start":299,"line_end":299,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116788,"byte_end":116827,"line_start":300,"line_end":300,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116832,"byte_end":116873,"line_start":301,"line_end":301,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116878,"byte_end":116933,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116938,"byte_end":116975,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":116980,"byte_end":117045,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117050,"byte_end":117116,"line_start":305,"line_end":305,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117121,"byte_end":117207,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117212,"byte_end":117274,"line_start":307,"line_end":307,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117279,"byte_end":117364,"line_start":308,"line_end":308,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117369,"byte_end":117372,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117377,"byte_end":117442,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117447,"byte_end":117512,"line_start":311,"line_end":311,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117517,"byte_end":117554,"line_start":312,"line_end":312,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117559,"byte_end":117645,"line_start":313,"line_end":313,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117650,"byte_end":117734,"line_start":314,"line_end":314,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117739,"byte_end":117801,"line_start":315,"line_end":315,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117806,"byte_end":117889,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":117894,"byte_end":117902,"line_start":317,"line_end":317,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120872,"byte_end":120893,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"pub fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119141,"byte_end":119230,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119235,"byte_end":119264,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119269,"byte_end":119272,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119277,"byte_end":119316,"line_start":352,"line_end":352,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119321,"byte_end":119324,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119329,"byte_end":119342,"line_start":354,"line_end":354,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119347,"byte_end":119350,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119355,"byte_end":119363,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119368,"byte_end":119415,"line_start":357,"line_end":357,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119420,"byte_end":119423,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119428,"byte_end":119481,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119486,"byte_end":119561,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119566,"byte_end":119597,"line_start":361,"line_end":361,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119602,"byte_end":119631,"line_start":362,"line_end":362,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119636,"byte_end":119664,"line_start":363,"line_end":363,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119669,"byte_end":119716,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119721,"byte_end":119763,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119768,"byte_end":119808,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119813,"byte_end":119855,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119860,"byte_end":119868,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119873,"byte_end":119876,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119881,"byte_end":119924,"line_start":370,"line_end":370,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119929,"byte_end":119981,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":119986,"byte_end":120048,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120053,"byte_end":120087,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120092,"byte_end":120146,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120151,"byte_end":120154,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120159,"byte_end":120167,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120172,"byte_end":120198,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120203,"byte_end":120206,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120211,"byte_end":120252,"line_start":379,"line_end":379,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120257,"byte_end":120318,"line_start":380,"line_end":380,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120323,"byte_end":120379,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120384,"byte_end":120438,"line_start":382,"line_end":382,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120443,"byte_end":120448,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120453,"byte_end":120456,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120461,"byte_end":120534,"line_start":385,"line_end":385,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120539,"byte_end":120605,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120610,"byte_end":120613,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120618,"byte_end":120684,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120689,"byte_end":120759,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120764,"byte_end":120833,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120838,"byte_end":120846,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":120851,"byte_end":120860,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121842,"byte_end":121867,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"pub fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121010,"byte_end":121099,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121104,"byte_end":121133,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121138,"byte_end":121141,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121146,"byte_end":121193,"line_start":400,"line_end":400,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121198,"byte_end":121201,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121206,"byte_end":121219,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121224,"byte_end":121227,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121232,"byte_end":121240,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121245,"byte_end":121271,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121276,"byte_end":121279,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121284,"byte_end":121346,"line_start":407,"line_end":407,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121351,"byte_end":121390,"line_start":408,"line_end":408,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121395,"byte_end":121398,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121403,"byte_end":121476,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121481,"byte_end":121551,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121556,"byte_end":121628,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121633,"byte_end":121705,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121710,"byte_end":121761,"line_start":414,"line_end":414,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121766,"byte_end":121817,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":121822,"byte_end":121830,"line_start":416,"line_end":416,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123577,"byte_end":123598,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"pub fn from_weekday_of_month(i32, u32, Weekday, u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122293,"byte_end":122386,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122391,"byte_end":122485,"line_start":426,"line_end":426,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122490,"byte_end":122575,"line_start":427,"line_end":427,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122580,"byte_end":122583,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122588,"byte_end":122600,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122605,"byte_end":122608,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122613,"byte_end":122708,"line_start":431,"line_end":431,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122713,"byte_end":122806,"line_start":432,"line_end":432,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122811,"byte_end":122814,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122819,"byte_end":122875,"line_start":434,"line_end":434,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122880,"byte_end":122883,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122888,"byte_end":122901,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122906,"byte_end":122909,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122914,"byte_end":122922,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122927,"byte_end":122964,"line_start":439,"line_end":439,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122969,"byte_end":122972,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":122977,"byte_end":123042,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123047,"byte_end":123086,"line_start":442,"line_end":442,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123091,"byte_end":123094,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123099,"byte_end":123185,"line_start":444,"line_end":444,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123190,"byte_end":123276,"line_start":445,"line_end":445,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123281,"byte_end":123368,"line_start":446,"line_end":446,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123373,"byte_end":123460,"line_start":447,"line_end":447,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123465,"byte_end":123552,"line_start":448,"line_end":448,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123557,"byte_end":123565,"line_start":449,"line_end":449,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124473,"byte_end":124498,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"pub fn from_weekday_of_month_opt(i32, u32, Weekday, u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123771,"byte_end":123864,"line_start":454,"line_end":454,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123869,"byte_end":123963,"line_start":455,"line_end":455,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":123968,"byte_end":124072,"line_start":456,"line_end":456,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124077,"byte_end":124080,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124085,"byte_end":124093,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124098,"byte_end":124135,"line_start":459,"line_end":459,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124140,"byte_end":124218,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124223,"byte_end":124275,"line_start":461,"line_end":461,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124280,"byte_end":124288,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124293,"byte_end":124296,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124301,"byte_end":124393,"line_start":464,"line_end":464,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124398,"byte_end":124461,"line_start":465,"line_end":465,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126518,"byte_end":126532,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":124949,"byte_end":125032,"line_start":481,"line_end":481,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125037,"byte_end":125107,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125112,"byte_end":125150,"line_start":483,"line_end":483,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125155,"byte_end":125158,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125163,"byte_end":125176,"line_start":485,"line_end":485,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125181,"byte_end":125184,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125189,"byte_end":125197,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125202,"byte_end":125228,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125233,"byte_end":125236,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125241,"byte_end":125292,"line_start":490,"line_end":490,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125297,"byte_end":125300,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125305,"byte_end":125361,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125366,"byte_end":125418,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125423,"byte_end":125475,"line_start":494,"line_end":494,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125480,"byte_end":125532,"line_start":495,"line_end":495,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125537,"byte_end":125545,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125550,"byte_end":125553,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125558,"byte_end":125616,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125621,"byte_end":125624,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125629,"byte_end":125637,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125642,"byte_end":125670,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125675,"byte_end":125728,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125733,"byte_end":125814,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125819,"byte_end":125872,"line_start":504,"line_end":504,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125877,"byte_end":125885,"line_start":505,"line_end":505,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125890,"byte_end":125893,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125898,"byte_end":125955,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125960,"byte_end":125963,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125968,"byte_end":125976,"line_start":509,"line_end":509,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":125981,"byte_end":126009,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126014,"byte_end":126067,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126072,"byte_end":126128,"line_start":512,"line_end":512,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126133,"byte_end":126195,"line_start":513,"line_end":513,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126200,"byte_end":126208,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126213,"byte_end":126216,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126221,"byte_end":126303,"line_start":516,"line_end":516,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126308,"byte_end":126311,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126316,"byte_end":126324,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126329,"byte_end":126357,"line_start":519,"line_end":519,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126362,"byte_end":126415,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126420,"byte_end":126493,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126498,"byte_end":126506,"line_start":522,"line_end":522,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127181,"byte_end":127189,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126720,"byte_end":126796,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126801,"byte_end":126804,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126809,"byte_end":126822,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126827,"byte_end":126830,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126835,"byte_end":126843,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126848,"byte_end":126902,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126907,"byte_end":126910,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126915,"byte_end":126959,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":126964,"byte_end":127019,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127024,"byte_end":127027,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127032,"byte_end":127074,"line_start":539,"line_end":539,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127079,"byte_end":127108,"line_start":540,"line_end":540,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127113,"byte_end":127142,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127147,"byte_end":127155,"line_start":542,"line_end":542,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127160,"byte_end":127169,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128005,"byte_end":128012,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127284,"byte_end":127363,"line_start":548,"line_end":548,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127368,"byte_end":127371,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127376,"byte_end":127459,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127464,"byte_end":127538,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127543,"byte_end":127546,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127551,"byte_end":127600,"line_start":553,"line_end":553,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127605,"byte_end":127608,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127613,"byte_end":127626,"line_start":555,"line_end":555,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127631,"byte_end":127634,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127639,"byte_end":127647,"line_start":557,"line_end":557,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127652,"byte_end":127724,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127729,"byte_end":127732,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127737,"byte_end":127781,"line_start":560,"line_end":560,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127786,"byte_end":127789,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127794,"byte_end":127844,"line_start":562,"line_end":562,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127849,"byte_end":127881,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127886,"byte_end":127929,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127934,"byte_end":127966,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127971,"byte_end":127979,"line_start":566,"line_end":566,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":127984,"byte_end":127993,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128898,"byte_end":128909,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128145,"byte_end":128224,"line_start":572,"line_end":572,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128229,"byte_end":128232,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128237,"byte_end":128320,"line_start":574,"line_end":574,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128325,"byte_end":128403,"line_start":575,"line_end":575,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128408,"byte_end":128411,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128416,"byte_end":128473,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128478,"byte_end":128481,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128486,"byte_end":128499,"line_start":579,"line_end":579,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128504,"byte_end":128507,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128512,"byte_end":128520,"line_start":581,"line_end":581,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128525,"byte_end":128551,"line_start":582,"line_end":582,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128556,"byte_end":128559,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128564,"byte_end":128608,"line_start":584,"line_end":584,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128613,"byte_end":128662,"line_start":585,"line_end":585,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128667,"byte_end":128751,"line_start":586,"line_end":586,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128756,"byte_end":128805,"line_start":587,"line_end":587,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128810,"byte_end":128859,"line_start":588,"line_end":588,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128864,"byte_end":128872,"line_start":589,"line_end":589,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":128877,"byte_end":128886,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129848,"byte_end":129861,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129066,"byte_end":129158,"line_start":595,"line_end":595,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129163,"byte_end":129166,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129171,"byte_end":129212,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129217,"byte_end":129307,"line_start":598,"line_end":598,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129312,"byte_end":129315,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129320,"byte_end":129382,"line_start":600,"line_end":600,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129387,"byte_end":129390,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129395,"byte_end":129408,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129413,"byte_end":129416,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129421,"byte_end":129429,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129434,"byte_end":129506,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129511,"byte_end":129514,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129519,"byte_end":129563,"line_start":607,"line_end":607,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129568,"byte_end":129571,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129576,"byte_end":129637,"line_start":609,"line_end":609,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129642,"byte_end":129674,"line_start":610,"line_end":610,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129679,"byte_end":129722,"line_start":611,"line_end":611,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129727,"byte_end":129759,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129764,"byte_end":129809,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129814,"byte_end":129822,"line_start":614,"line_end":614,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":129827,"byte_end":129836,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130934,"byte_end":130951,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130019,"byte_end":130111,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130116,"byte_end":130119,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130124,"byte_end":130165,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130170,"byte_end":130260,"line_start":623,"line_end":623,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130265,"byte_end":130268,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130273,"byte_end":130343,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130348,"byte_end":130351,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130356,"byte_end":130369,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130374,"byte_end":130377,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130382,"byte_end":130390,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130395,"byte_end":130421,"line_start":630,"line_end":630,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130426,"byte_end":130429,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130434,"byte_end":130478,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130483,"byte_end":130545,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130550,"byte_end":130627,"line_start":634,"line_end":634,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130632,"byte_end":130694,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130699,"byte_end":130761,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130766,"byte_end":130828,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130833,"byte_end":130895,"line_start":638,"line_end":638,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130900,"byte_end":130908,"line_start":639,"line_end":639,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":130913,"byte_end":130922,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131970,"byte_end":131983,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131180,"byte_end":131272,"line_start":651,"line_end":651,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131277,"byte_end":131280,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131285,"byte_end":131330,"line_start":653,"line_end":653,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131335,"byte_end":131425,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131430,"byte_end":131433,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131438,"byte_end":131500,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131505,"byte_end":131508,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131513,"byte_end":131526,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131531,"byte_end":131534,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131539,"byte_end":131547,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131552,"byte_end":131624,"line_start":661,"line_end":661,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131629,"byte_end":131632,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131637,"byte_end":131681,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131686,"byte_end":131689,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131694,"byte_end":131759,"line_start":665,"line_end":665,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131764,"byte_end":131796,"line_start":666,"line_end":666,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131801,"byte_end":131844,"line_start":667,"line_end":667,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131849,"byte_end":131881,"line_start":668,"line_end":668,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131886,"byte_end":131931,"line_start":669,"line_end":669,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131936,"byte_end":131944,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":131949,"byte_end":131958,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133084,"byte_end":133101,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132141,"byte_end":132233,"line_start":676,"line_end":676,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132238,"byte_end":132241,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132246,"byte_end":132291,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132296,"byte_end":132386,"line_start":679,"line_end":679,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132391,"byte_end":132394,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132399,"byte_end":132469,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132474,"byte_end":132477,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132482,"byte_end":132495,"line_start":683,"line_end":683,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132500,"byte_end":132503,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132508,"byte_end":132516,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132521,"byte_end":132547,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132552,"byte_end":132555,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132560,"byte_end":132604,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132609,"byte_end":132675,"line_start":689,"line_end":689,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132680,"byte_end":132761,"line_start":690,"line_end":690,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132766,"byte_end":132832,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132837,"byte_end":132903,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132908,"byte_end":132974,"line_start":693,"line_end":693,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":132979,"byte_end":133045,"line_start":694,"line_end":694,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133050,"byte_end":133058,"line_start":695,"line_end":695,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133063,"byte_end":133072,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134124,"byte_end":134136,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133330,"byte_end":133421,"line_start":707,"line_end":707,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133426,"byte_end":133429,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133434,"byte_end":133482,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133487,"byte_end":133577,"line_start":710,"line_end":710,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133582,"byte_end":133585,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133590,"byte_end":133651,"line_start":712,"line_end":712,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133656,"byte_end":133659,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133664,"byte_end":133677,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133682,"byte_end":133685,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133690,"byte_end":133698,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133703,"byte_end":133775,"line_start":717,"line_end":717,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133780,"byte_end":133783,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133788,"byte_end":133832,"line_start":719,"line_end":719,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133837,"byte_end":133840,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133845,"byte_end":133913,"line_start":721,"line_end":721,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133918,"byte_end":133950,"line_start":722,"line_end":722,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":133955,"byte_end":133998,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134003,"byte_end":134035,"line_start":724,"line_end":724,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134040,"byte_end":134085,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134090,"byte_end":134098,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134103,"byte_end":134112,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135253,"byte_end":135269,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134291,"byte_end":134382,"line_start":732,"line_end":732,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134387,"byte_end":134390,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134395,"byte_end":134443,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134448,"byte_end":134538,"line_start":735,"line_end":735,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134543,"byte_end":134546,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134551,"byte_end":134620,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134625,"byte_end":134628,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134633,"byte_end":134646,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134651,"byte_end":134654,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134659,"byte_end":134667,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134672,"byte_end":134698,"line_start":742,"line_end":742,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134703,"byte_end":134706,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134711,"byte_end":134755,"line_start":744,"line_end":744,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134760,"byte_end":134829,"line_start":745,"line_end":745,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134834,"byte_end":134918,"line_start":746,"line_end":746,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134923,"byte_end":134992,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":134997,"byte_end":135066,"line_start":748,"line_end":748,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135071,"byte_end":135140,"line_start":749,"line_end":749,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135145,"byte_end":135214,"line_start":750,"line_end":750,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135219,"byte_end":135227,"line_start":751,"line_end":751,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":135232,"byte_end":135241,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136961,"byte_end":136965,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"pub fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136429,"byte_end":136484,"line_start":796,"line_end":796,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136489,"byte_end":136492,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136497,"byte_end":136551,"line_start":798,"line_end":798,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136556,"byte_end":136559,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136564,"byte_end":136577,"line_start":800,"line_end":800,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136582,"byte_end":136585,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136590,"byte_end":136598,"line_start":802,"line_end":802,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136603,"byte_end":136629,"line_start":803,"line_end":803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136634,"byte_end":136637,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136642,"byte_end":136732,"line_start":805,"line_end":805,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136737,"byte_end":136827,"line_start":806,"line_end":806,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136832,"byte_end":136922,"line_start":807,"line_end":807,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136927,"byte_end":136935,"line_start":808,"line_end":808,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":136940,"byte_end":136949,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137507,"byte_end":137515,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137046,"byte_end":137101,"line_start":814,"line_end":814,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137106,"byte_end":137109,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137114,"byte_end":137176,"line_start":816,"line_end":816,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137181,"byte_end":137184,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137189,"byte_end":137202,"line_start":818,"line_end":818,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137207,"byte_end":137210,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137215,"byte_end":137223,"line_start":820,"line_end":820,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137228,"byte_end":137254,"line_start":821,"line_end":821,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137259,"byte_end":137291,"line_start":822,"line_end":822,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137296,"byte_end":137299,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137304,"byte_end":137362,"line_start":824,"line_end":824,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137367,"byte_end":137421,"line_start":825,"line_end":825,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137426,"byte_end":137468,"line_start":826,"line_end":826,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137473,"byte_end":137481,"line_start":827,"line_end":827,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137486,"byte_end":137495,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138192,"byte_end":138196,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"pub fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137655,"byte_end":137714,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137719,"byte_end":137722,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137727,"byte_end":137782,"line_start":835,"line_end":835,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137787,"byte_end":137790,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137795,"byte_end":137808,"line_start":837,"line_end":837,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137813,"byte_end":137816,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137821,"byte_end":137829,"line_start":839,"line_end":839,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137834,"byte_end":137860,"line_start":840,"line_end":840,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137865,"byte_end":137868,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137873,"byte_end":137963,"line_start":842,"line_end":842,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":137968,"byte_end":138058,"line_start":843,"line_end":843,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138063,"byte_end":138153,"line_start":844,"line_end":844,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138158,"byte_end":138166,"line_start":845,"line_end":845,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138171,"byte_end":138180,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138743,"byte_end":138751,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138277,"byte_end":138336,"line_start":851,"line_end":851,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138341,"byte_end":138344,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138349,"byte_end":138412,"line_start":853,"line_end":853,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138417,"byte_end":138420,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138425,"byte_end":138438,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138443,"byte_end":138446,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138451,"byte_end":138459,"line_start":857,"line_end":857,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138464,"byte_end":138490,"line_start":858,"line_end":858,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138495,"byte_end":138527,"line_start":859,"line_end":859,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138532,"byte_end":138535,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138540,"byte_end":138598,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138603,"byte_end":138657,"line_start":862,"line_end":862,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138662,"byte_end":138704,"line_start":863,"line_end":863,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138709,"byte_end":138717,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138722,"byte_end":138731,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139763,"byte_end":139781,"line_start":891,"line_end":891,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138893,"byte_end":138958,"line_start":870,"line_end":870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138963,"byte_end":138966,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":138971,"byte_end":139022,"line_start":872,"line_end":872,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139027,"byte_end":139030,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139035,"byte_end":139048,"line_start":874,"line_end":874,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139053,"byte_end":139056,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139061,"byte_end":139069,"line_start":876,"line_end":876,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139074,"byte_end":139112,"line_start":877,"line_end":877,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139117,"byte_end":139155,"line_start":878,"line_end":878,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139160,"byte_end":139192,"line_start":879,"line_end":879,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139197,"byte_end":139200,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139205,"byte_end":139249,"line_start":881,"line_end":881,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139254,"byte_end":139310,"line_start":882,"line_end":882,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139315,"byte_end":139371,"line_start":883,"line_end":883,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139376,"byte_end":139433,"line_start":884,"line_end":884,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139438,"byte_end":139493,"line_start":885,"line_end":885,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139498,"byte_end":139572,"line_start":886,"line_end":886,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139577,"byte_end":139652,"line_start":887,"line_end":887,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139657,"byte_end":139726,"line_start":888,"line_end":888,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139731,"byte_end":139738,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":139743,"byte_end":139751,"line_start":890,"line_end":890,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141352,"byte_end":141370,"line_start":925,"line_end":925,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140475,"byte_end":140547,"line_start":904,"line_end":904,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140552,"byte_end":140555,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140560,"byte_end":140611,"line_start":906,"line_end":906,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140616,"byte_end":140619,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140624,"byte_end":140637,"line_start":908,"line_end":908,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140642,"byte_end":140645,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140650,"byte_end":140658,"line_start":910,"line_end":910,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140663,"byte_end":140701,"line_start":911,"line_end":911,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140706,"byte_end":140744,"line_start":912,"line_end":912,"column_start":5,"column_end":43}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140749,"byte_end":140781,"line_start":913,"line_end":913,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140786,"byte_end":140789,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140794,"byte_end":140838,"line_start":915,"line_end":915,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140843,"byte_end":140899,"line_start":916,"line_end":916,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140904,"byte_end":140959,"line_start":917,"line_end":917,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":140964,"byte_end":141021,"line_start":918,"line_end":918,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141026,"byte_end":141082,"line_start":919,"line_end":919,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141087,"byte_end":141161,"line_start":920,"line_end":920,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141166,"byte_end":141241,"line_start":921,"line_end":921,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141246,"byte_end":141315,"line_start":922,"line_end":922,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141320,"byte_end":141327,"line_start":923,"line_end":923,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":141332,"byte_end":141340,"line_start":924,"line_end":924,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143234,"byte_end":143255,"line_start":962,"line_end":962,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142064,"byte_end":142120,"line_start":938,"line_end":938,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142125,"byte_end":142170,"line_start":939,"line_end":939,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142175,"byte_end":142178,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142183,"byte_end":142230,"line_start":941,"line_end":941,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142235,"byte_end":142294,"line_start":942,"line_end":942,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142299,"byte_end":142302,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142307,"byte_end":142320,"line_start":944,"line_end":944,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142325,"byte_end":142328,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142333,"byte_end":142341,"line_start":946,"line_end":946,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142346,"byte_end":142384,"line_start":947,"line_end":947,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142389,"byte_end":142427,"line_start":948,"line_end":948,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142432,"byte_end":142435,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142440,"byte_end":142479,"line_start":950,"line_end":950,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142484,"byte_end":142533,"line_start":951,"line_end":951,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142538,"byte_end":142541,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142546,"byte_end":142630,"line_start":953,"line_end":953,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142635,"byte_end":142722,"line_start":954,"line_end":954,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142727,"byte_end":142813,"line_start":955,"line_end":955,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142818,"byte_end":142906,"line_start":956,"line_end":956,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":142911,"byte_end":142998,"line_start":957,"line_end":957,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143003,"byte_end":143096,"line_start":958,"line_end":958,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143101,"byte_end":143197,"line_start":959,"line_end":959,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143202,"byte_end":143209,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143214,"byte_end":143222,"line_start":961,"line_end":961,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145015,"byte_end":145032,"line_start":1003,"line_end":1003,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143846,"byte_end":143903,"line_start":974,"line_end":974,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143908,"byte_end":143969,"line_start":975,"line_end":975,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143974,"byte_end":143977,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":143982,"byte_end":144032,"line_start":977,"line_end":977,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144037,"byte_end":144115,"line_start":978,"line_end":978,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144120,"byte_end":144123,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144128,"byte_end":144141,"line_start":980,"line_end":980,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144146,"byte_end":144149,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144154,"byte_end":144162,"line_start":982,"line_end":982,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144167,"byte_end":144193,"line_start":983,"line_end":983,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144198,"byte_end":144246,"line_start":984,"line_end":984,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144251,"byte_end":144254,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144259,"byte_end":144304,"line_start":986,"line_end":986,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144309,"byte_end":144353,"line_start":987,"line_end":987,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144358,"byte_end":144433,"line_start":988,"line_end":988,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144438,"byte_end":144513,"line_start":989,"line_end":989,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144518,"byte_end":144526,"line_start":990,"line_end":990,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144531,"byte_end":144534,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144539,"byte_end":144623,"line_start":992,"line_end":992,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144628,"byte_end":144631,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144636,"byte_end":144644,"line_start":994,"line_end":994,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144649,"byte_end":144677,"line_start":995,"line_end":995,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144682,"byte_end":144732,"line_start":996,"line_end":996,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144737,"byte_end":144792,"line_start":997,"line_end":997,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144797,"byte_end":144843,"line_start":998,"line_end":998,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144848,"byte_end":144918,"line_start":999,"line_end":999,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144923,"byte_end":144931,"line_start":1000,"line_end":1000,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144936,"byte_end":144989,"line_start":1001,"line_end":1001,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":144994,"byte_end":145003,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146720,"byte_end":146726,"line_start":1045,"line_end":1045,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145228,"byte_end":145282,"line_start":1011,"line_end":1011,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145287,"byte_end":145357,"line_start":1012,"line_end":1012,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145362,"byte_end":145400,"line_start":1013,"line_end":1013,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145405,"byte_end":145408,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145413,"byte_end":145448,"line_start":1015,"line_end":1015,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145453,"byte_end":145526,"line_start":1016,"line_end":1016,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145531,"byte_end":145588,"line_start":1017,"line_end":1017,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145593,"byte_end":145655,"line_start":1018,"line_end":1018,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145660,"byte_end":145720,"line_start":1019,"line_end":1019,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145725,"byte_end":145728,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145733,"byte_end":145797,"line_start":1021,"line_end":1021,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145802,"byte_end":145865,"line_start":1022,"line_end":1022,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145870,"byte_end":145945,"line_start":1023,"line_end":1023,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145950,"byte_end":145953,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145958,"byte_end":145971,"line_start":1025,"line_end":1025,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145976,"byte_end":145979,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145984,"byte_end":145992,"line_start":1027,"line_end":1027,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":145997,"byte_end":146023,"line_start":1028,"line_end":1028,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146028,"byte_end":146031,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146036,"byte_end":146080,"line_start":1030,"line_end":1030,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146085,"byte_end":146148,"line_start":1031,"line_end":1031,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146153,"byte_end":146241,"line_start":1032,"line_end":1032,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146246,"byte_end":146254,"line_start":1033,"line_end":1033,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146259,"byte_end":146262,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146267,"byte_end":146351,"line_start":1035,"line_end":1035,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146356,"byte_end":146359,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146364,"byte_end":146372,"line_start":1037,"line_end":1037,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146377,"byte_end":146405,"line_start":1038,"line_end":1038,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146410,"byte_end":146456,"line_start":1039,"line_end":1039,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146461,"byte_end":146527,"line_start":1040,"line_end":1040,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146532,"byte_end":146623,"line_start":1041,"line_end":1041,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146628,"byte_end":146636,"line_start":1042,"line_end":1042,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146641,"byte_end":146694,"line_start":1043,"line_end":1043,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146699,"byte_end":146708,"line_start":1044,"line_end":1044,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147508,"byte_end":147517,"line_start":1071,"line_end":1071,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"pub fn iter_days(&Self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by days until the last representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146857,"byte_end":146934,"line_start":1049,"line_end":1049,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146939,"byte_end":146942,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146947,"byte_end":146960,"line_start":1051,"line_end":1051,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146965,"byte_end":146968,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146973,"byte_end":146980,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":146985,"byte_end":147013,"line_start":1054,"line_end":1054,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147018,"byte_end":147021,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147026,"byte_end":147046,"line_start":1056,"line_end":1056,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147051,"byte_end":147092,"line_start":1057,"line_end":1057,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 28),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147097,"byte_end":147138,"line_start":1058,"line_end":1058,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 29),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147143,"byte_end":147184,"line_start":1059,"line_end":1059,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 1),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147189,"byte_end":147229,"line_start":1060,"line_end":1060,"column_start":5,"column_end":45}},{"value":"/ ];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147234,"byte_end":147240,"line_start":1061,"line_end":1061,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147245,"byte_end":147248,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147253,"byte_end":147275,"line_start":1063,"line_end":1063,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_days().take(4).enumerate() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147280,"byte_end":147366,"line_start":1064,"line_end":1064,"column_start":5,"column_end":91}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147371,"byte_end":147407,"line_start":1065,"line_end":1065,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147412,"byte_end":147430,"line_start":1066,"line_end":1066,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147435,"byte_end":147440,"line_start":1067,"line_end":1067,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147445,"byte_end":147470,"line_start":1068,"line_end":1068,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147475,"byte_end":147482,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147487,"byte_end":147496,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148263,"byte_end":148273,"line_start":1097,"line_end":1097,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"pub fn iter_weeks(&Self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by weeks until the last representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147610,"byte_end":147688,"line_start":1075,"line_end":1075,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147693,"byte_end":147696,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147701,"byte_end":147714,"line_start":1077,"line_end":1077,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147719,"byte_end":147722,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147727,"byte_end":147734,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147739,"byte_end":147767,"line_start":1080,"line_end":1080,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147772,"byte_end":147775,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147780,"byte_end":147800,"line_start":1082,"line_end":1082,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147805,"byte_end":147846,"line_start":1083,"line_end":1083,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 5),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147851,"byte_end":147891,"line_start":1084,"line_end":1084,"column_start":5,"column_end":45}},{"value":"/     NaiveDate::from_ymd(2016, 3, 12),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147896,"byte_end":147937,"line_start":1085,"line_end":1085,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 19),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147942,"byte_end":147983,"line_start":1086,"line_end":1086,"column_start":5,"column_end":46}},{"value":"/ ];","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147988,"byte_end":147994,"line_start":1087,"line_end":1087,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":147999,"byte_end":148002,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148007,"byte_end":148029,"line_start":1089,"line_end":1089,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_weeks().take(4).enumerate() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148034,"byte_end":148121,"line_start":1090,"line_end":1090,"column_start":5,"column_end":92}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148126,"byte_end":148162,"line_start":1091,"line_end":1091,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148167,"byte_end":148185,"line_start":1092,"line_end":1092,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148190,"byte_end":148195,"line_start":1093,"line_end":1093,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148200,"byte_end":148225,"line_start":1094,"line_end":1094,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148230,"byte_end":148237,"line_start":1095,"line_end":1095,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148242,"byte_end":148251,"line_start":1096,"line_end":1096,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2287},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164072,"byte_end":164093,"line_start":1562,"line_end":1562,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":2288}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[{"value":"/ Iterator over `NaiveDate` with a step size of one day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163934,"byte_end":163992,"line_start":1560,"line_end":1560,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2308},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164842,"byte_end":164864,"line_start":1589,"line_end":1589,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":2309}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198572,"byte_end":198584,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198520,"byte_end":198561,"line_start":31,"line_end":31,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198704,"byte_end":198716,"line_start":34,"line_end":34,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198652,"byte_end":198693,"line_start":33,"line_end":33,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199649,"byte_end":199662,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2331}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198785,"byte_end":198838,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198839,"byte_end":198842,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198843,"byte_end":198856,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198857,"byte_end":198860,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198861,"byte_end":198945,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198946,"byte_end":198949,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198950,"byte_end":198958,"line_start":42,"line_end":42,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":198959,"byte_end":199002,"line_start":43,"line_end":43,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199003,"byte_end":199006,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199007,"byte_end":199086,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199087,"byte_end":199104,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199105,"byte_end":199113,"line_start":47,"line_end":47,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199114,"byte_end":199117,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199118,"byte_end":199181,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199182,"byte_end":199230,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199231,"byte_end":199282,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199283,"byte_end":199286,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199287,"byte_end":199295,"line_start":53,"line_end":53,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199296,"byte_end":199341,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199342,"byte_end":199423,"line_start":55,"line_end":55,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199424,"byte_end":199470,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199471,"byte_end":199474,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199475,"byte_end":199518,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199519,"byte_end":199573,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199574,"byte_end":199582,"line_start":60,"line_end":60,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200324,"byte_end":200327,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"pub fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199735,"byte_end":199797,"line_start":68,"line_end":68,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199802,"byte_end":199884,"line_start":69,"line_end":69,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199889,"byte_end":199943,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199948,"byte_end":199951,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199956,"byte_end":199969,"line_start":72,"line_end":72,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199974,"byte_end":199977,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199982,"byte_end":199990,"line_start":74,"line_end":74,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199995,"byte_end":200049,"line_start":75,"line_end":75,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200054,"byte_end":200057,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200062,"byte_end":200106,"line_start":77,"line_end":77,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200111,"byte_end":200166,"line_start":78,"line_end":78,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200171,"byte_end":200174,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200179,"byte_end":200217,"line_start":80,"line_end":80,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200222,"byte_end":200251,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200256,"byte_end":200285,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200290,"byte_end":200298,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200303,"byte_end":200312,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201610,"byte_end":201624,"line_start":115,"line_end":115,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"pub fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200441,"byte_end":200510,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200515,"byte_end":200554,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200559,"byte_end":200627,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200632,"byte_end":200703,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200708,"byte_end":200711,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200716,"byte_end":200764,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200769,"byte_end":200845,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200850,"byte_end":200853,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200858,"byte_end":200932,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":200937,"byte_end":201017,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201022,"byte_end":201083,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201088,"byte_end":201091,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201096,"byte_end":201171,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201176,"byte_end":201179,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201184,"byte_end":201197,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201202,"byte_end":201205,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201210,"byte_end":201218,"line_start":105,"line_end":105,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201223,"byte_end":201266,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201271,"byte_end":201274,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201279,"byte_end":201337,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201342,"byte_end":201421,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201426,"byte_end":201429,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201434,"byte_end":201495,"line_start":111,"line_end":111,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201500,"byte_end":201571,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201576,"byte_end":201584,"line_start":113,"line_end":113,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201589,"byte_end":201598,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202966,"byte_end":202984,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"pub fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201809,"byte_end":201878,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201883,"byte_end":201922,"line_start":121,"line_end":121,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":201927,"byte_end":201995,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202000,"byte_end":202071,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202076,"byte_end":202079,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202084,"byte_end":202132,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202137,"byte_end":202227,"line_start":126,"line_end":126,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202232,"byte_end":202309,"line_start":127,"line_end":127,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202314,"byte_end":202317,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202322,"byte_end":202405,"line_start":129,"line_end":129,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202410,"byte_end":202413,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202418,"byte_end":202431,"line_start":131,"line_end":131,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202436,"byte_end":202439,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202444,"byte_end":202452,"line_start":133,"line_end":133,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202457,"byte_end":202500,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202505,"byte_end":202522,"line_start":135,"line_end":135,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202527,"byte_end":202530,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202535,"byte_end":202598,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202603,"byte_end":202606,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202611,"byte_end":202659,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202664,"byte_end":202722,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202727,"byte_end":202802,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202807,"byte_end":202867,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202872,"byte_end":202927,"line_start":143,"line_end":143,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202932,"byte_end":202940,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":202945,"byte_end":202954,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206369,"byte_end":206383,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203506,"byte_end":203593,"line_start":159,"line_end":159,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203598,"byte_end":203668,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203673,"byte_end":203711,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203716,"byte_end":203719,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203724,"byte_end":203737,"line_start":163,"line_end":163,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203742,"byte_end":203745,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203750,"byte_end":203758,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203763,"byte_end":203806,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203811,"byte_end":203814,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203819,"byte_end":203874,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203879,"byte_end":203882,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203887,"byte_end":203961,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":203966,"byte_end":204037,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204042,"byte_end":204118,"line_start":172,"line_end":172,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204123,"byte_end":204210,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204215,"byte_end":204223,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204228,"byte_end":204231,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204236,"byte_end":204285,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204290,"byte_end":204293,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204298,"byte_end":204306,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204311,"byte_end":204356,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204361,"byte_end":204418,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204423,"byte_end":204504,"line_start":181,"line_end":181,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204509,"byte_end":204582,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204587,"byte_end":204595,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204600,"byte_end":204603,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204608,"byte_end":204697,"line_start":185,"line_end":185,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204702,"byte_end":204764,"line_start":186,"line_end":186,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204769,"byte_end":204845,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204850,"byte_end":204853,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204858,"byte_end":204866,"line_start":189,"line_end":189,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204871,"byte_end":204916,"line_start":190,"line_end":190,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204921,"byte_end":204978,"line_start":191,"line_end":191,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":204983,"byte_end":205064,"line_start":192,"line_end":192,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205069,"byte_end":205153,"line_start":193,"line_end":193,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205158,"byte_end":205166,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205171,"byte_end":205174,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205179,"byte_end":205222,"line_start":196,"line_end":196,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205227,"byte_end":205298,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205303,"byte_end":205306,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205311,"byte_end":205319,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205324,"byte_end":205369,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205374,"byte_end":205431,"line_start":201,"line_end":201,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205436,"byte_end":205499,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205504,"byte_end":205574,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205579,"byte_end":205582,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205587,"byte_end":205644,"line_start":205,"line_end":205,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205649,"byte_end":205714,"line_start":206,"line_end":206,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205719,"byte_end":205790,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205795,"byte_end":205872,"line_start":208,"line_end":208,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205877,"byte_end":205885,"line_start":209,"line_end":209,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205890,"byte_end":205893,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205898,"byte_end":205980,"line_start":211,"line_end":211,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205985,"byte_end":205988,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":205993,"byte_end":206001,"line_start":213,"line_end":213,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206006,"byte_end":206038,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206043,"byte_end":206100,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206105,"byte_end":206159,"line_start":216,"line_end":216,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206164,"byte_end":206255,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206260,"byte_end":206344,"line_start":218,"line_end":218,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206349,"byte_end":206357,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206905,"byte_end":206909,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"pub fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206616,"byte_end":206647,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206652,"byte_end":206655,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206660,"byte_end":206673,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206678,"byte_end":206681,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206686,"byte_end":206694,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206699,"byte_end":206725,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206730,"byte_end":206733,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206738,"byte_end":206802,"line_start":233,"line_end":233,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206807,"byte_end":206866,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206871,"byte_end":206879,"line_start":235,"line_end":235,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206884,"byte_end":206893,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207262,"byte_end":207266,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206961,"byte_end":206992,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":206997,"byte_end":207000,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207005,"byte_end":207018,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207023,"byte_end":207026,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207031,"byte_end":207039,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207044,"byte_end":207083,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207088,"byte_end":207091,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207096,"byte_end":207160,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207165,"byte_end":207223,"line_start":249,"line_end":249,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207228,"byte_end":207236,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207241,"byte_end":207250,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208173,"byte_end":208182,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207318,"byte_end":207399,"line_start":256,"line_end":256,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207404,"byte_end":207407,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207412,"byte_end":207467,"line_start":258,"line_end":258,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207472,"byte_end":207560,"line_start":259,"line_end":259,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207565,"byte_end":207568,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207573,"byte_end":207586,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207591,"byte_end":207594,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207599,"byte_end":207607,"line_start":263,"line_end":263,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207612,"byte_end":207638,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207643,"byte_end":207646,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207651,"byte_end":207724,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207729,"byte_end":207763,"line_start":267,"line_end":267,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207768,"byte_end":207771,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207776,"byte_end":207840,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207845,"byte_end":207891,"line_start":270,"line_end":270,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207896,"byte_end":207899,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207904,"byte_end":207971,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":207976,"byte_end":208011,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208016,"byte_end":208019,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208024,"byte_end":208084,"line_start":275,"line_end":275,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208089,"byte_end":208134,"line_start":276,"line_end":276,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208139,"byte_end":208147,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208152,"byte_end":208161,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209560,"byte_end":209576,"line_start":311,"line_end":311,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208484,"byte_end":208568,"line_start":286,"line_end":286,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208573,"byte_end":208576,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208581,"byte_end":208636,"line_start":288,"line_end":288,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208641,"byte_end":208729,"line_start":289,"line_end":289,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208734,"byte_end":208737,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208742,"byte_end":208809,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208814,"byte_end":208887,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208892,"byte_end":208961,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":208966,"byte_end":209017,"line_start":294,"line_end":294,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209022,"byte_end":209025,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209030,"byte_end":209043,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209048,"byte_end":209051,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209056,"byte_end":209064,"line_start":298,"line_end":298,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209069,"byte_end":209095,"line_start":299,"line_end":299,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209100,"byte_end":209103,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209108,"byte_end":209181,"line_start":301,"line_end":301,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209186,"byte_end":209231,"line_start":302,"line_end":302,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209236,"byte_end":209239,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209244,"byte_end":209319,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209324,"byte_end":209381,"line_start":305,"line_end":305,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209386,"byte_end":209389,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209394,"byte_end":209472,"line_start":307,"line_end":307,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209477,"byte_end":209521,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209526,"byte_end":209534,"line_start":309,"line_end":309,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209539,"byte_end":209548,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211044,"byte_end":211059,"line_start":350,"line_end":350,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209707,"byte_end":209790,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209795,"byte_end":209798,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209803,"byte_end":209858,"line_start":318,"line_end":318,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209863,"byte_end":209951,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209956,"byte_end":209959,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209964,"byte_end":209976,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209981,"byte_end":209984,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":209989,"byte_end":210056,"line_start":323,"line_end":323,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210061,"byte_end":210131,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210136,"byte_end":210204,"line_start":325,"line_end":325,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210209,"byte_end":210243,"line_start":326,"line_end":326,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210248,"byte_end":210251,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210256,"byte_end":210330,"line_start":328,"line_end":328,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210335,"byte_end":210395,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210400,"byte_end":210403,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210408,"byte_end":210421,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210426,"byte_end":210429,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210434,"byte_end":210442,"line_start":333,"line_end":333,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210447,"byte_end":210490,"line_start":334,"line_end":334,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210495,"byte_end":210498,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210503,"byte_end":210575,"line_start":336,"line_end":336,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210580,"byte_end":210632,"line_start":337,"line_end":337,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210637,"byte_end":210640,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210645,"byte_end":210719,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210724,"byte_end":210727,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210732,"byte_end":210773,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210778,"byte_end":210815,"line_start":342,"line_end":342,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210820,"byte_end":210869,"line_start":343,"line_end":343,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210874,"byte_end":210889,"line_start":344,"line_end":344,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210894,"byte_end":210905,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210910,"byte_end":210994,"line_start":346,"line_end":346,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":210999,"byte_end":211005,"line_start":347,"line_end":347,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211010,"byte_end":211018,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211023,"byte_end":211032,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211837,"byte_end":211860,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211198,"byte_end":211274,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211279,"byte_end":211282,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211287,"byte_end":211329,"line_start":357,"line_end":357,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211334,"byte_end":211416,"line_start":358,"line_end":358,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211421,"byte_end":211424,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211429,"byte_end":211442,"line_start":360,"line_end":360,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211447,"byte_end":211450,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211455,"byte_end":211463,"line_start":362,"line_end":362,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211468,"byte_end":211494,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211499,"byte_end":211502,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211507,"byte_end":211589,"line_start":365,"line_end":365,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211594,"byte_end":211644,"line_start":366,"line_end":366,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211649,"byte_end":211652,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211657,"byte_end":211741,"line_start":368,"line_end":368,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211746,"byte_end":211798,"line_start":369,"line_end":369,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211803,"byte_end":211811,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211816,"byte_end":211825,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212593,"byte_end":212616,"line_start":393,"line_end":393,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":211938,"byte_end":212014,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212019,"byte_end":212022,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212027,"byte_end":212073,"line_start":378,"line_end":378,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212078,"byte_end":212164,"line_start":379,"line_end":379,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212169,"byte_end":212172,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212177,"byte_end":212190,"line_start":381,"line_end":381,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212195,"byte_end":212198,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212203,"byte_end":212211,"line_start":383,"line_end":383,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212216,"byte_end":212242,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212247,"byte_end":212250,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212255,"byte_end":212337,"line_start":386,"line_end":386,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212342,"byte_end":212396,"line_start":387,"line_end":387,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212401,"byte_end":212404,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212409,"byte_end":212493,"line_start":389,"line_end":389,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212498,"byte_end":212554,"line_start":390,"line_end":390,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212559,"byte_end":212567,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212572,"byte_end":212581,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213358,"byte_end":213380,"line_start":414,"line_end":414,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212690,"byte_end":212765,"line_start":397,"line_end":397,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212770,"byte_end":212773,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212778,"byte_end":212828,"line_start":399,"line_end":399,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212833,"byte_end":212923,"line_start":400,"line_end":400,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212928,"byte_end":212931,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212936,"byte_end":212949,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212954,"byte_end":212957,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212962,"byte_end":212970,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":212975,"byte_end":213001,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213006,"byte_end":213009,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213014,"byte_end":213096,"line_start":407,"line_end":407,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213101,"byte_end":213158,"line_start":408,"line_end":408,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213163,"byte_end":213166,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213171,"byte_end":213255,"line_start":410,"line_end":410,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213260,"byte_end":213319,"line_start":411,"line_end":411,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213324,"byte_end":213332,"line_start":412,"line_end":412,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213337,"byte_end":213346,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216650,"byte_end":216668,"line_start":489,"line_end":489,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213439,"byte_end":213494,"line_start":418,"line_end":418,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213499,"byte_end":213502,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213507,"byte_end":213602,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213607,"byte_end":213670,"line_start":421,"line_end":421,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213675,"byte_end":213742,"line_start":422,"line_end":422,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213747,"byte_end":213840,"line_start":423,"line_end":423,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213845,"byte_end":213848,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213853,"byte_end":213904,"line_start":425,"line_end":425,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213909,"byte_end":213912,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213917,"byte_end":213930,"line_start":427,"line_end":427,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213935,"byte_end":213938,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213943,"byte_end":213951,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213956,"byte_end":213994,"line_start":430,"line_end":430,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":213999,"byte_end":214037,"line_start":431,"line_end":431,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214042,"byte_end":214045,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214050,"byte_end":214089,"line_start":433,"line_end":433,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214094,"byte_end":214097,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214102,"byte_end":214135,"line_start":435,"line_end":435,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214140,"byte_end":214183,"line_start":436,"line_end":436,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214188,"byte_end":214253,"line_start":437,"line_end":437,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214258,"byte_end":214293,"line_start":438,"line_end":438,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214298,"byte_end":214367,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214372,"byte_end":214407,"line_start":440,"line_end":440,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214412,"byte_end":214482,"line_start":441,"line_end":441,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214487,"byte_end":214522,"line_start":442,"line_end":442,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214527,"byte_end":214604,"line_start":443,"line_end":443,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214609,"byte_end":214644,"line_start":444,"line_end":444,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214649,"byte_end":214723,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214728,"byte_end":214788,"line_start":446,"line_end":446,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214793,"byte_end":214796,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214801,"byte_end":214865,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214870,"byte_end":214952,"line_start":449,"line_end":449,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":214957,"byte_end":214998,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215003,"byte_end":215010,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215015,"byte_end":215023,"line_start":452,"line_end":452,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215028,"byte_end":215031,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215036,"byte_end":215064,"line_start":454,"line_end":454,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215069,"byte_end":215072,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215077,"byte_end":215085,"line_start":456,"line_end":456,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215090,"byte_end":215128,"line_start":457,"line_end":457,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215133,"byte_end":215173,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215178,"byte_end":215253,"line_start":459,"line_end":459,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215258,"byte_end":215343,"line_start":460,"line_end":460,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215348,"byte_end":215355,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215360,"byte_end":215368,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215373,"byte_end":215376,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215381,"byte_end":215410,"line_start":464,"line_end":464,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215415,"byte_end":215485,"line_start":465,"line_end":465,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215490,"byte_end":215493,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215498,"byte_end":215506,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215511,"byte_end":215549,"line_start":468,"line_end":468,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215554,"byte_end":215594,"line_start":469,"line_end":469,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215599,"byte_end":215640,"line_start":470,"line_end":470,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215645,"byte_end":215730,"line_start":471,"line_end":471,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215735,"byte_end":215772,"line_start":472,"line_end":472,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215777,"byte_end":215834,"line_start":473,"line_end":473,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215839,"byte_end":215883,"line_start":474,"line_end":474,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215888,"byte_end":215957,"line_start":475,"line_end":475,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":215962,"byte_end":216004,"line_start":476,"line_end":476,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216009,"byte_end":216077,"line_start":477,"line_end":477,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216082,"byte_end":216126,"line_start":478,"line_end":478,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216131,"byte_end":216199,"line_start":479,"line_end":479,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216204,"byte_end":216245,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216250,"byte_end":216312,"line_start":481,"line_end":481,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216317,"byte_end":216358,"line_start":482,"line_end":482,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216363,"byte_end":216426,"line_start":483,"line_end":483,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216431,"byte_end":216473,"line_start":484,"line_end":484,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216478,"byte_end":216536,"line_start":485,"line_end":485,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216541,"byte_end":216613,"line_start":486,"line_end":486,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216618,"byte_end":216625,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":216630,"byte_end":216638,"line_start":488,"line_end":488,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220103,"byte_end":220121,"line_start":568,"line_end":568,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217115,"byte_end":217177,"line_start":501,"line_end":501,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217182,"byte_end":217185,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217190,"byte_end":217285,"line_start":503,"line_end":503,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217290,"byte_end":217356,"line_start":504,"line_end":504,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217361,"byte_end":217428,"line_start":505,"line_end":505,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217433,"byte_end":217526,"line_start":506,"line_end":506,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217531,"byte_end":217534,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217539,"byte_end":217590,"line_start":508,"line_end":508,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217595,"byte_end":217598,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217603,"byte_end":217616,"line_start":510,"line_end":510,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217621,"byte_end":217624,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217629,"byte_end":217637,"line_start":512,"line_end":512,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217642,"byte_end":217680,"line_start":513,"line_end":513,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217685,"byte_end":217723,"line_start":514,"line_end":514,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217728,"byte_end":217731,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217736,"byte_end":217775,"line_start":516,"line_end":516,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217780,"byte_end":217783,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217788,"byte_end":217821,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217826,"byte_end":217869,"line_start":519,"line_end":519,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217874,"byte_end":217939,"line_start":520,"line_end":520,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217944,"byte_end":217979,"line_start":521,"line_end":521,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":217984,"byte_end":218053,"line_start":522,"line_end":522,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218058,"byte_end":218093,"line_start":523,"line_end":523,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218098,"byte_end":218168,"line_start":524,"line_end":524,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218173,"byte_end":218208,"line_start":525,"line_end":525,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218213,"byte_end":218290,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218295,"byte_end":218330,"line_start":527,"line_end":527,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218335,"byte_end":218409,"line_start":528,"line_end":528,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218414,"byte_end":218474,"line_start":529,"line_end":529,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218479,"byte_end":218482,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218487,"byte_end":218551,"line_start":531,"line_end":531,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218556,"byte_end":218638,"line_start":532,"line_end":532,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218643,"byte_end":218684,"line_start":533,"line_end":533,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218689,"byte_end":218696,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218701,"byte_end":218709,"line_start":535,"line_end":535,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218714,"byte_end":218717,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218722,"byte_end":218750,"line_start":537,"line_end":537,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218755,"byte_end":218758,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218763,"byte_end":218771,"line_start":539,"line_end":539,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218776,"byte_end":218814,"line_start":540,"line_end":540,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218819,"byte_end":218859,"line_start":541,"line_end":541,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218864,"byte_end":218939,"line_start":542,"line_end":542,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":218944,"byte_end":219029,"line_start":543,"line_end":543,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219034,"byte_end":219041,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219046,"byte_end":219054,"line_start":545,"line_end":545,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219059,"byte_end":219062,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219067,"byte_end":219096,"line_start":547,"line_end":547,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219101,"byte_end":219174,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219179,"byte_end":219182,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219187,"byte_end":219195,"line_start":550,"line_end":550,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219200,"byte_end":219238,"line_start":551,"line_end":551,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219243,"byte_end":219283,"line_start":552,"line_end":552,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219288,"byte_end":219329,"line_start":553,"line_end":553,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219334,"byte_end":219419,"line_start":554,"line_end":554,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219424,"byte_end":219461,"line_start":555,"line_end":555,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219466,"byte_end":219523,"line_start":556,"line_end":556,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219528,"byte_end":219572,"line_start":557,"line_end":557,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219577,"byte_end":219645,"line_start":558,"line_end":558,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219650,"byte_end":219694,"line_start":559,"line_end":559,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219699,"byte_end":219767,"line_start":560,"line_end":560,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219772,"byte_end":219814,"line_start":561,"line_end":561,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219819,"byte_end":219881,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219886,"byte_end":219927,"line_start":563,"line_end":563,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219932,"byte_end":219990,"line_start":564,"line_end":564,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":219995,"byte_end":220066,"line_start":565,"line_end":565,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220071,"byte_end":220078,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220083,"byte_end":220091,"line_start":567,"line_end":567,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222458,"byte_end":222479,"line_start":622,"line_end":622,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220568,"byte_end":220637,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220642,"byte_end":220689,"line_start":581,"line_end":581,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220694,"byte_end":220697,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220702,"byte_end":220797,"line_start":583,"line_end":583,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220802,"byte_end":220868,"line_start":584,"line_end":584,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220873,"byte_end":220952,"line_start":585,"line_end":585,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":220957,"byte_end":221002,"line_start":586,"line_end":586,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221007,"byte_end":221066,"line_start":587,"line_end":587,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221071,"byte_end":221074,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221079,"byte_end":221092,"line_start":589,"line_end":589,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221097,"byte_end":221100,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221105,"byte_end":221113,"line_start":591,"line_end":591,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221118,"byte_end":221156,"line_start":592,"line_end":592,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221161,"byte_end":221199,"line_start":593,"line_end":593,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221204,"byte_end":221207,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221212,"byte_end":221251,"line_start":595,"line_end":595,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221256,"byte_end":221259,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221264,"byte_end":221297,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221302,"byte_end":221378,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221383,"byte_end":221432,"line_start":599,"line_end":599,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221437,"byte_end":221440,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221445,"byte_end":221488,"line_start":601,"line_end":601,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221493,"byte_end":221527,"line_start":602,"line_end":602,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221532,"byte_end":221620,"line_start":603,"line_end":603,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221625,"byte_end":221716,"line_start":604,"line_end":604,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221721,"byte_end":221728,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221733,"byte_end":221741,"line_start":606,"line_end":606,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221746,"byte_end":221749,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221754,"byte_end":221816,"line_start":608,"line_end":608,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221821,"byte_end":221867,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221872,"byte_end":221875,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221880,"byte_end":221888,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221893,"byte_end":221931,"line_start":612,"line_end":612,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221936,"byte_end":221976,"line_start":613,"line_end":613,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":221981,"byte_end":222022,"line_start":614,"line_end":614,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222027,"byte_end":222097,"line_start":615,"line_end":615,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222102,"byte_end":222185,"line_start":616,"line_end":616,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222190,"byte_end":222260,"line_start":617,"line_end":617,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222265,"byte_end":222346,"line_start":618,"line_end":618,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222351,"byte_end":222421,"line_start":619,"line_end":619,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222426,"byte_end":222433,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222438,"byte_end":222446,"line_start":621,"line_end":621,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223921,"byte_end":223938,"line_start":655,"line_end":655,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222628,"byte_end":222703,"line_start":626,"line_end":626,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222708,"byte_end":222787,"line_start":627,"line_end":627,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222792,"byte_end":222795,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222800,"byte_end":222850,"line_start":629,"line_end":629,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222855,"byte_end":222933,"line_start":630,"line_end":630,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222938,"byte_end":222941,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222946,"byte_end":222959,"line_start":632,"line_end":632,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222964,"byte_end":222967,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222972,"byte_end":222980,"line_start":634,"line_end":634,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":222985,"byte_end":223011,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223016,"byte_end":223064,"line_start":636,"line_end":636,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223069,"byte_end":223072,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223077,"byte_end":223131,"line_start":638,"line_end":638,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223136,"byte_end":223200,"line_start":639,"line_end":639,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223205,"byte_end":223290,"line_start":640,"line_end":640,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223295,"byte_end":223380,"line_start":641,"line_end":641,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223385,"byte_end":223393,"line_start":642,"line_end":642,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223398,"byte_end":223401,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223406,"byte_end":223490,"line_start":644,"line_end":644,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223495,"byte_end":223498,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223503,"byte_end":223511,"line_start":646,"line_end":646,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223516,"byte_end":223544,"line_start":647,"line_end":647,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223549,"byte_end":223599,"line_start":648,"line_end":648,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223604,"byte_end":223668,"line_start":649,"line_end":649,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223673,"byte_end":223739,"line_start":650,"line_end":650,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223744,"byte_end":223824,"line_start":651,"line_end":651,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223829,"byte_end":223837,"line_start":652,"line_end":652,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223842,"byte_end":223895,"line_start":653,"line_end":653,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":223900,"byte_end":223909,"line_start":654,"line_end":654,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225739,"byte_end":225745,"line_start":697,"line_end":697,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224149,"byte_end":224221,"line_start":663,"line_end":663,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224226,"byte_end":224296,"line_start":664,"line_end":664,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224301,"byte_end":224339,"line_start":665,"line_end":665,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224344,"byte_end":224347,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224352,"byte_end":224387,"line_start":667,"line_end":667,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224392,"byte_end":224465,"line_start":668,"line_end":668,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224470,"byte_end":224527,"line_start":669,"line_end":669,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224532,"byte_end":224594,"line_start":670,"line_end":670,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224599,"byte_end":224659,"line_start":671,"line_end":671,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224664,"byte_end":224667,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224672,"byte_end":224736,"line_start":673,"line_end":673,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224741,"byte_end":224804,"line_start":674,"line_end":674,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224809,"byte_end":224884,"line_start":675,"line_end":675,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224889,"byte_end":224892,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224897,"byte_end":224910,"line_start":677,"line_end":677,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224915,"byte_end":224918,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224923,"byte_end":224931,"line_start":679,"line_end":679,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224936,"byte_end":224962,"line_start":680,"line_end":680,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224967,"byte_end":224970,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":224975,"byte_end":225039,"line_start":682,"line_end":682,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225044,"byte_end":225126,"line_start":683,"line_end":683,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225131,"byte_end":225220,"line_start":684,"line_end":684,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225225,"byte_end":225233,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225238,"byte_end":225241,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225246,"byte_end":225330,"line_start":687,"line_end":687,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225335,"byte_end":225338,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225343,"byte_end":225351,"line_start":689,"line_end":689,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225356,"byte_end":225384,"line_start":690,"line_end":690,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225389,"byte_end":225455,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225460,"byte_end":225545,"line_start":692,"line_end":692,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225550,"byte_end":225642,"line_start":693,"line_end":693,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225647,"byte_end":225655,"line_start":694,"line_end":694,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225660,"byte_end":225713,"line_start":695,"line_end":695,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225718,"byte_end":225727,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324409,"byte_end":324416,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":2384}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324003,"byte_end":324021,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324022,"byte_end":324025,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324026,"byte_end":324089,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324090,"byte_end":324165,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324166,"byte_end":324257,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":324258,"byte_end":324342,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326374,"byte_end":326378,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"pub fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325716,"byte_end":325762,"line_start":49,"line_end":49,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325767,"byte_end":325770,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325775,"byte_end":325788,"line_start":51,"line_end":51,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325793,"byte_end":325796,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325801,"byte_end":325809,"line_start":53,"line_end":53,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325814,"byte_end":325861,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325866,"byte_end":325869,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325874,"byte_end":325932,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325937,"byte_end":325979,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325984,"byte_end":325992,"line_start":58,"line_end":58,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325997,"byte_end":326000,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326005,"byte_end":326067,"line_start":60,"line_end":60,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326072,"byte_end":326101,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326106,"byte_end":326109,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326114,"byte_end":326122,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326127,"byte_end":326176,"line_start":64,"line_end":64,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326181,"byte_end":326241,"line_start":65,"line_end":65,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326246,"byte_end":326277,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326282,"byte_end":326335,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326340,"byte_end":326348,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326353,"byte_end":326362,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326828,"byte_end":326832,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"pub fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326429,"byte_end":326477,"line_start":74,"line_end":74,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326482,"byte_end":326485,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326490,"byte_end":326573,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326578,"byte_end":326581,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326586,"byte_end":326599,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326604,"byte_end":326607,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326612,"byte_end":326620,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326625,"byte_end":326672,"line_start":81,"line_end":81,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326677,"byte_end":326680,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326685,"byte_end":326744,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326749,"byte_end":326789,"line_start":84,"line_end":84,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326794,"byte_end":326802,"line_start":85,"line_end":85,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326807,"byte_end":326816,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327300,"byte_end":327305,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"pub fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326900,"byte_end":326948,"line_start":91,"line_end":91,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326953,"byte_end":326956,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":326961,"byte_end":327044,"line_start":93,"line_end":93,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327049,"byte_end":327052,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327057,"byte_end":327070,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327075,"byte_end":327078,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327083,"byte_end":327091,"line_start":97,"line_end":97,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327096,"byte_end":327143,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327148,"byte_end":327151,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327156,"byte_end":327215,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327220,"byte_end":327261,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327266,"byte_end":327274,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":327279,"byte_end":327288,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337231,"byte_end":337240,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":2400},{"krate":0,"index":2401}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330020,"byte_end":330055,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330056,"byte_end":330136,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330137,"byte_end":330140,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330141,"byte_end":330167,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330168,"byte_end":330171,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330172,"byte_end":330239,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330240,"byte_end":330293,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330294,"byte_end":330372,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330373,"byte_end":330443,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330444,"byte_end":330522,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330523,"byte_end":330612,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330613,"byte_end":330683,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330684,"byte_end":330761,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330762,"byte_end":330793,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330794,"byte_end":330877,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330878,"byte_end":330961,"line_start":37,"line_end":37,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330962,"byte_end":330965,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":330966,"byte_end":331003,"line_start":39,"line_end":39,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331004,"byte_end":331072,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331073,"byte_end":331149,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331150,"byte_end":331231,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331232,"byte_end":331306,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331307,"byte_end":331377,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331378,"byte_end":331463,"line_start":45,"line_end":45,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331464,"byte_end":331533,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331534,"byte_end":331537,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331538,"byte_end":331617,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331618,"byte_end":331713,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331714,"byte_end":331776,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331777,"byte_end":331840,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331841,"byte_end":331844,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331845,"byte_end":331886,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331887,"byte_end":331966,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":331967,"byte_end":332047,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332048,"byte_end":332119,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332120,"byte_end":332123,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332124,"byte_end":332156,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332157,"byte_end":332160,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332161,"byte_end":332236,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332237,"byte_end":332312,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332313,"byte_end":332361,"line_start":62,"line_end":62,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332362,"byte_end":332430,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332431,"byte_end":332434,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332435,"byte_end":332504,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332505,"byte_end":332508,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332509,"byte_end":332517,"line_start":67,"line_end":67,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332518,"byte_end":332572,"line_start":68,"line_end":68,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332573,"byte_end":332576,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332577,"byte_end":332633,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332634,"byte_end":332637,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332638,"byte_end":332720,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332721,"byte_end":332724,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332725,"byte_end":332800,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332801,"byte_end":332829,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332830,"byte_end":332838,"line_start":76,"line_end":76,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332839,"byte_end":332842,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332843,"byte_end":332923,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":332924,"byte_end":333003,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333004,"byte_end":333089,"line_start":80,"line_end":80,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333090,"byte_end":333177,"line_start":81,"line_end":81,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333178,"byte_end":333181,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333182,"byte_end":333214,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333215,"byte_end":333218,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333219,"byte_end":333307,"line_start":85,"line_end":85,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333308,"byte_end":333383,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333384,"byte_end":333458,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333459,"byte_end":333462,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333463,"byte_end":333484,"line_start":89,"line_end":89,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333485,"byte_end":333571,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333572,"byte_end":333575,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333576,"byte_end":333609,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333610,"byte_end":333644,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333645,"byte_end":333678,"line_start":94,"line_end":94,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333679,"byte_end":333712,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333713,"byte_end":333766,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333767,"byte_end":333801,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333802,"byte_end":333836,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333837,"byte_end":333876,"line_start":99,"line_end":99,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333877,"byte_end":333880,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333881,"byte_end":333902,"line_start":101,"line_end":101,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333903,"byte_end":333989,"line_start":102,"line_end":102,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333990,"byte_end":333993,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":333994,"byte_end":334027,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334028,"byte_end":334061,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334062,"byte_end":334096,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334097,"byte_end":334131,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334132,"byte_end":334188,"line_start":108,"line_end":108,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334189,"byte_end":334228,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334229,"byte_end":334268,"line_start":110,"line_end":110,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334269,"byte_end":334272,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334273,"byte_end":334290,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334291,"byte_end":334375,"line_start":113,"line_end":113,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334376,"byte_end":334379,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334380,"byte_end":334416,"line_start":115,"line_end":115,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334417,"byte_end":334451,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334452,"byte_end":334486,"line_start":117,"line_end":117,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334487,"byte_end":334547,"line_start":118,"line_end":118,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334548,"byte_end":334587,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334588,"byte_end":334625,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334626,"byte_end":334663,"line_start":121,"line_end":121,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334664,"byte_end":334723,"line_start":122,"line_end":122,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334724,"byte_end":334800,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334801,"byte_end":334833,"line_start":124,"line_end":124,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334834,"byte_end":334915,"line_start":125,"line_end":125,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334916,"byte_end":334954,"line_start":126,"line_end":126,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334955,"byte_end":334958,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334959,"byte_end":334974,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334975,"byte_end":334978,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":334979,"byte_end":335047,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335048,"byte_end":335051,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335052,"byte_end":335123,"line_start":132,"line_end":132,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335124,"byte_end":335127,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335128,"byte_end":335195,"line_start":134,"line_end":134,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335196,"byte_end":335199,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335200,"byte_end":335252,"line_start":136,"line_end":136,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335253,"byte_end":335344,"line_start":137,"line_end":137,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335345,"byte_end":335378,"line_start":138,"line_end":138,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335379,"byte_end":335382,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335383,"byte_end":335473,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335474,"byte_end":335477,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335478,"byte_end":335553,"line_start":142,"line_end":142,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335554,"byte_end":335593,"line_start":143,"line_end":143,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335594,"byte_end":335679,"line_start":144,"line_end":144,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335680,"byte_end":335717,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335718,"byte_end":335721,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335722,"byte_end":335761,"line_start":147,"line_end":147,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335762,"byte_end":335765,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335766,"byte_end":335823,"line_start":149,"line_end":149,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335824,"byte_end":335881,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335882,"byte_end":335938,"line_start":151,"line_end":151,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":335939,"byte_end":336016,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336017,"byte_end":336020,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336021,"byte_end":336029,"line_start":154,"line_end":154,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336030,"byte_end":336062,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336063,"byte_end":336066,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336067,"byte_end":336134,"line_start":157,"line_end":157,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336135,"byte_end":336195,"line_start":158,"line_end":158,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336196,"byte_end":336204,"line_start":159,"line_end":159,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336205,"byte_end":336208,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336209,"byte_end":336275,"line_start":161,"line_end":161,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336276,"byte_end":336313,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336314,"byte_end":336380,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336381,"byte_end":336478,"line_start":164,"line_end":164,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336479,"byte_end":336544,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336545,"byte_end":336600,"line_start":166,"line_end":166,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336601,"byte_end":336604,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336605,"byte_end":336613,"line_start":168,"line_end":168,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336614,"byte_end":336656,"line_start":169,"line_end":169,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336657,"byte_end":336660,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336661,"byte_end":336727,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336728,"byte_end":336788,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336789,"byte_end":336792,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336793,"byte_end":336846,"line_start":174,"line_end":174,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336847,"byte_end":336907,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336908,"byte_end":336990,"line_start":176,"line_end":176,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":336991,"byte_end":336999,"line_start":177,"line_end":177,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337000,"byte_end":337003,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337004,"byte_end":337074,"line_start":179,"line_end":179,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337075,"byte_end":337164,"line_start":180,"line_end":180,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337898,"byte_end":337906,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"pub fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337297,"byte_end":337354,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337359,"byte_end":337362,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337367,"byte_end":337427,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337432,"byte_end":337507,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337512,"byte_end":337515,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337520,"byte_end":337569,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337574,"byte_end":337577,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337582,"byte_end":337595,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337600,"byte_end":337603,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337608,"byte_end":337616,"line_start":197,"line_end":197,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337621,"byte_end":337659,"line_start":198,"line_end":198,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337664,"byte_end":337667,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337672,"byte_end":337715,"line_start":200,"line_end":200,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337720,"byte_end":337749,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337754,"byte_end":337785,"line_start":202,"line_end":202,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337790,"byte_end":337820,"line_start":203,"line_end":203,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337825,"byte_end":337859,"line_start":204,"line_end":204,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337864,"byte_end":337872,"line_start":205,"line_end":205,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337877,"byte_end":337886,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338763,"byte_end":338775,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"pub fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338035,"byte_end":338092,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338097,"byte_end":338100,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338105,"byte_end":338165,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338170,"byte_end":338249,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338254,"byte_end":338257,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338262,"byte_end":338319,"line_start":216,"line_end":216,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338324,"byte_end":338327,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338332,"byte_end":338345,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338350,"byte_end":338353,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338358,"byte_end":338366,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338371,"byte_end":338397,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338402,"byte_end":338405,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338410,"byte_end":338457,"line_start":223,"line_end":223,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338462,"byte_end":338465,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338470,"byte_end":338515,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338520,"byte_end":338568,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338573,"byte_end":338619,"line_start":227,"line_end":227,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338624,"byte_end":338671,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338676,"byte_end":338724,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338729,"byte_end":338737,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338742,"byte_end":338751,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339516,"byte_end":339530,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"pub fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338897,"byte_end":338967,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338972,"byte_end":338975,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":338980,"byte_end":339021,"line_start":238,"line_end":238,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339026,"byte_end":339093,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339098,"byte_end":339101,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339106,"byte_end":339168,"line_start":241,"line_end":241,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339173,"byte_end":339176,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339181,"byte_end":339194,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339199,"byte_end":339202,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339207,"byte_end":339215,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339220,"byte_end":339258,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339263,"byte_end":339266,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339271,"byte_end":339324,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339329,"byte_end":339358,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339363,"byte_end":339394,"line_start":250,"line_end":250,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339399,"byte_end":339429,"line_start":251,"line_end":251,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339434,"byte_end":339477,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339482,"byte_end":339490,"line_start":253,"line_end":253,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339495,"byte_end":339504,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340590,"byte_end":340608,"line_start":282,"line_end":282,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"pub fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339684,"byte_end":339754,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339759,"byte_end":339762,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339767,"byte_end":339808,"line_start":261,"line_end":261,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339813,"byte_end":339880,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339885,"byte_end":339888,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339893,"byte_end":339963,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339968,"byte_end":339971,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339976,"byte_end":339989,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":339994,"byte_end":339997,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340002,"byte_end":340010,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340015,"byte_end":340041,"line_start":269,"line_end":269,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340046,"byte_end":340049,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340054,"byte_end":340108,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340113,"byte_end":340116,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340121,"byte_end":340170,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340175,"byte_end":340229,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340234,"byte_end":340322,"line_start":275,"line_end":275,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340327,"byte_end":340377,"line_start":276,"line_end":276,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340382,"byte_end":340433,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340438,"byte_end":340490,"line_start":278,"line_end":278,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340495,"byte_end":340551,"line_start":279,"line_end":279,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340556,"byte_end":340564,"line_start":280,"line_end":280,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340569,"byte_end":340578,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341444,"byte_end":341458,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"pub fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340817,"byte_end":340887,"line_start":288,"line_end":288,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340892,"byte_end":340895,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340900,"byte_end":340945,"line_start":290,"line_end":290,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":340950,"byte_end":341017,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341022,"byte_end":341025,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341030,"byte_end":341092,"line_start":293,"line_end":293,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341097,"byte_end":341100,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341105,"byte_end":341118,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341123,"byte_end":341126,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341131,"byte_end":341139,"line_start":297,"line_end":297,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341144,"byte_end":341182,"line_start":298,"line_end":298,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341187,"byte_end":341190,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341195,"byte_end":341252,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341257,"byte_end":341286,"line_start":301,"line_end":301,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341291,"byte_end":341322,"line_start":302,"line_end":302,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341327,"byte_end":341357,"line_start":303,"line_end":303,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341362,"byte_end":341405,"line_start":304,"line_end":304,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341410,"byte_end":341418,"line_start":305,"line_end":305,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341423,"byte_end":341432,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342534,"byte_end":342552,"line_start":334,"line_end":334,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"pub fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341612,"byte_end":341682,"line_start":311,"line_end":311,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341687,"byte_end":341690,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341695,"byte_end":341740,"line_start":313,"line_end":313,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341745,"byte_end":341812,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341817,"byte_end":341820,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341825,"byte_end":341895,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341900,"byte_end":341903,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341908,"byte_end":341921,"line_start":318,"line_end":318,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341926,"byte_end":341929,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341934,"byte_end":341942,"line_start":320,"line_end":320,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341947,"byte_end":341973,"line_start":321,"line_end":321,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341978,"byte_end":341981,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":341986,"byte_end":342040,"line_start":323,"line_end":323,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342045,"byte_end":342048,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342053,"byte_end":342102,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342107,"byte_end":342165,"line_start":326,"line_end":326,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342170,"byte_end":342262,"line_start":327,"line_end":327,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342267,"byte_end":342317,"line_start":328,"line_end":328,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342322,"byte_end":342373,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342378,"byte_end":342430,"line_start":330,"line_end":330,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342435,"byte_end":342495,"line_start":331,"line_end":331,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342500,"byte_end":342508,"line_start":332,"line_end":332,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342513,"byte_end":342522,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343362,"byte_end":343375,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"pub fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342731,"byte_end":342800,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342805,"byte_end":342808,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342813,"byte_end":342861,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342866,"byte_end":342933,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342938,"byte_end":342941,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":342946,"byte_end":343007,"line_start":343,"line_end":343,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343012,"byte_end":343015,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343020,"byte_end":343033,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343038,"byte_end":343041,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343046,"byte_end":343054,"line_start":347,"line_end":347,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343059,"byte_end":343097,"line_start":348,"line_end":348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343102,"byte_end":343105,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343110,"byte_end":343170,"line_start":350,"line_end":350,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343175,"byte_end":343204,"line_start":351,"line_end":351,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343209,"byte_end":343240,"line_start":352,"line_end":352,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343245,"byte_end":343275,"line_start":353,"line_end":353,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343280,"byte_end":343323,"line_start":354,"line_end":354,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343328,"byte_end":343336,"line_start":355,"line_end":355,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343341,"byte_end":343350,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344460,"byte_end":344477,"line_start":384,"line_end":384,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"pub fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343526,"byte_end":343595,"line_start":361,"line_end":361,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343600,"byte_end":343603,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343608,"byte_end":343656,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343661,"byte_end":343728,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343733,"byte_end":343736,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343741,"byte_end":343810,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343815,"byte_end":343818,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343823,"byte_end":343836,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343841,"byte_end":343844,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343849,"byte_end":343857,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343862,"byte_end":343888,"line_start":371,"line_end":371,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343893,"byte_end":343896,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343901,"byte_end":343954,"line_start":373,"line_end":373,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343959,"byte_end":343962,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":343967,"byte_end":344016,"line_start":375,"line_end":375,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344021,"byte_end":344083,"line_start":376,"line_end":376,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344088,"byte_end":344184,"line_start":377,"line_end":377,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344189,"byte_end":344239,"line_start":378,"line_end":378,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344244,"byte_end":344295,"line_start":379,"line_end":379,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344300,"byte_end":344352,"line_start":380,"line_end":380,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344357,"byte_end":344421,"line_start":381,"line_end":381,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344426,"byte_end":344434,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344439,"byte_end":344448,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345421,"byte_end":345451,"line_start":411,"line_end":411,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"pub fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344764,"byte_end":344849,"line_start":392,"line_end":392,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344854,"byte_end":344857,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344862,"byte_end":344910,"line_start":394,"line_end":394,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344915,"byte_end":344982,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344987,"byte_end":344990,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":344995,"byte_end":345053,"line_start":397,"line_end":397,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345058,"byte_end":345061,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345066,"byte_end":345079,"line_start":399,"line_end":399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345084,"byte_end":345087,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345092,"byte_end":345100,"line_start":401,"line_end":401,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345105,"byte_end":345143,"line_start":402,"line_end":402,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345148,"byte_end":345151,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345156,"byte_end":345229,"line_start":404,"line_end":404,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345234,"byte_end":345263,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345268,"byte_end":345299,"line_start":406,"line_end":406,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345304,"byte_end":345334,"line_start":407,"line_end":407,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345339,"byte_end":345382,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345387,"byte_end":345395,"line_start":409,"line_end":409,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345400,"byte_end":345409,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346423,"byte_end":346457,"line_start":436,"line_end":436,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"pub fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345589,"byte_end":345674,"line_start":415,"line_end":415,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345679,"byte_end":345682,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345687,"byte_end":345735,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345740,"byte_end":345807,"line_start":418,"line_end":418,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345812,"byte_end":345815,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345820,"byte_end":345886,"line_start":420,"line_end":420,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345891,"byte_end":345894,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345899,"byte_end":345912,"line_start":422,"line_end":422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345917,"byte_end":345920,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345925,"byte_end":345933,"line_start":424,"line_end":424,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345938,"byte_end":345964,"line_start":425,"line_end":425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345969,"byte_end":345972,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":345977,"byte_end":346048,"line_start":427,"line_end":427,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346053,"byte_end":346056,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346061,"byte_end":346105,"line_start":429,"line_end":429,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346110,"byte_end":346168,"line_start":430,"line_end":430,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346173,"byte_end":346265,"line_start":431,"line_end":431,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346270,"byte_end":346319,"line_start":432,"line_end":432,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346324,"byte_end":346384,"line_start":433,"line_end":433,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346389,"byte_end":346397,"line_start":434,"line_end":434,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346402,"byte_end":346411,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349127,"byte_end":349141,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346653,"byte_end":346736,"line_start":443,"line_end":443,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346741,"byte_end":346811,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346816,"byte_end":346854,"line_start":445,"line_end":445,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346859,"byte_end":346862,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346867,"byte_end":346880,"line_start":447,"line_end":447,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346885,"byte_end":346888,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346893,"byte_end":346901,"line_start":449,"line_end":449,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346906,"byte_end":346932,"line_start":450,"line_end":450,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346937,"byte_end":346940,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":346945,"byte_end":346996,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347001,"byte_end":347004,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347009,"byte_end":347063,"line_start":454,"line_end":454,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347068,"byte_end":347119,"line_start":455,"line_end":455,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347124,"byte_end":347186,"line_start":456,"line_end":456,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347191,"byte_end":347258,"line_start":457,"line_end":457,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347263,"byte_end":347271,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347276,"byte_end":347279,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347284,"byte_end":347342,"line_start":460,"line_end":460,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347347,"byte_end":347350,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347355,"byte_end":347363,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347368,"byte_end":347396,"line_start":463,"line_end":463,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347401,"byte_end":347454,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347459,"byte_end":347540,"line_start":465,"line_end":465,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347545,"byte_end":347597,"line_start":466,"line_end":466,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347602,"byte_end":347610,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347615,"byte_end":347618,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347623,"byte_end":347689,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347694,"byte_end":347756,"line_start":470,"line_end":470,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347761,"byte_end":347837,"line_start":471,"line_end":471,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347842,"byte_end":347845,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347850,"byte_end":347858,"line_start":473,"line_end":473,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347863,"byte_end":347891,"line_start":474,"line_end":474,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347896,"byte_end":347949,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":347954,"byte_end":348015,"line_start":476,"line_end":476,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348020,"byte_end":348084,"line_start":477,"line_end":477,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348089,"byte_end":348097,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348102,"byte_end":348105,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348110,"byte_end":348153,"line_start":480,"line_end":480,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348158,"byte_end":348229,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348234,"byte_end":348237,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348242,"byte_end":348250,"line_start":483,"line_end":483,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348255,"byte_end":348283,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348288,"byte_end":348341,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348346,"byte_end":348393,"line_start":486,"line_end":486,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348398,"byte_end":348448,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348453,"byte_end":348456,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348461,"byte_end":348518,"line_start":489,"line_end":489,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348523,"byte_end":348572,"line_start":490,"line_end":490,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348577,"byte_end":348632,"line_start":491,"line_end":491,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348637,"byte_end":348698,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348703,"byte_end":348711,"line_start":493,"line_end":493,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348716,"byte_end":348719,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348724,"byte_end":348806,"line_start":495,"line_end":495,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348811,"byte_end":348860,"line_start":496,"line_end":496,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348865,"byte_end":348924,"line_start":497,"line_end":497,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348929,"byte_end":348932,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348937,"byte_end":348945,"line_start":499,"line_end":499,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348950,"byte_end":348978,"line_start":500,"line_end":500,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":348983,"byte_end":349036,"line_start":501,"line_end":501,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349041,"byte_end":349102,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349107,"byte_end":349115,"line_start":503,"line_end":503,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":350269,"byte_end":350291,"line_start":532,"line_end":532,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"pub fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349329,"byte_end":349375,"line_start":510,"line_end":510,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349380,"byte_end":349424,"line_start":511,"line_end":511,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349429,"byte_end":349490,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349495,"byte_end":349576,"line_start":513,"line_end":513,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349581,"byte_end":349584,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349589,"byte_end":349602,"line_start":515,"line_end":515,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349607,"byte_end":349610,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349615,"byte_end":349623,"line_start":517,"line_end":517,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349628,"byte_end":349666,"line_start":518,"line_end":518,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349671,"byte_end":349709,"line_start":519,"line_end":519,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349714,"byte_end":349717,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349722,"byte_end":349761,"line_start":521,"line_end":521,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349766,"byte_end":349769,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349774,"byte_end":349851,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349856,"byte_end":349896,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349901,"byte_end":349978,"line_start":525,"line_end":525,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":349983,"byte_end":350027,"line_start":526,"line_end":526,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":350032,"byte_end":350109,"line_start":527,"line_end":527,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":350114,"byte_end":350160,"line_start":528,"line_end":528,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":350165,"byte_end":350172,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":350177,"byte_end":350185,"line_start":530,"line_end":530,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353765,"byte_end":353787,"line_start":617,"line_end":617,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"pub fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":352874,"byte_end":352927,"line_start":595,"line_end":595,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":352932,"byte_end":352976,"line_start":596,"line_end":596,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":352981,"byte_end":353045,"line_start":597,"line_end":597,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353050,"byte_end":353131,"line_start":598,"line_end":598,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353136,"byte_end":353139,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353144,"byte_end":353157,"line_start":600,"line_end":600,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353162,"byte_end":353165,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353170,"byte_end":353178,"line_start":602,"line_end":602,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353183,"byte_end":353221,"line_start":603,"line_end":603,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353226,"byte_end":353264,"line_start":604,"line_end":604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353269,"byte_end":353272,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353277,"byte_end":353316,"line_start":606,"line_end":606,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353321,"byte_end":353324,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353329,"byte_end":353405,"line_start":608,"line_end":608,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353410,"byte_end":353449,"line_start":609,"line_end":609,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353454,"byte_end":353531,"line_start":610,"line_end":610,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353536,"byte_end":353581,"line_start":611,"line_end":611,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353586,"byte_end":353664,"line_start":612,"line_end":612,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353669,"byte_end":353714,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353719,"byte_end":353726,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353731,"byte_end":353739,"line_start":615,"line_end":615,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353744,"byte_end":353753,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356769,"byte_end":356790,"line_start":680,"line_end":680,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":353979,"byte_end":354035,"line_start":622,"line_end":622,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354040,"byte_end":354082,"line_start":623,"line_end":623,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354087,"byte_end":354134,"line_start":624,"line_end":624,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354139,"byte_end":354142,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354147,"byte_end":354219,"line_start":626,"line_end":626,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354224,"byte_end":354290,"line_start":627,"line_end":627,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354295,"byte_end":354370,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354375,"byte_end":354420,"line_start":629,"line_end":629,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354425,"byte_end":354484,"line_start":630,"line_end":630,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354489,"byte_end":354492,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354497,"byte_end":354510,"line_start":632,"line_end":632,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354515,"byte_end":354518,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354523,"byte_end":354531,"line_start":634,"line_end":634,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354536,"byte_end":354574,"line_start":635,"line_end":635,"column_start":5,"column_end":43}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354579,"byte_end":354617,"line_start":636,"line_end":636,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354622,"byte_end":354625,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354630,"byte_end":354676,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354681,"byte_end":354730,"line_start":639,"line_end":639,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354735,"byte_end":354738,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354743,"byte_end":354814,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354819,"byte_end":354852,"line_start":642,"line_end":642,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354857,"byte_end":354928,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354933,"byte_end":354976,"line_start":644,"line_end":644,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":354981,"byte_end":355052,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355057,"byte_end":355101,"line_start":646,"line_end":646,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355106,"byte_end":355177,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355182,"byte_end":355219,"line_start":648,"line_end":648,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355224,"byte_end":355295,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355300,"byte_end":355342,"line_start":650,"line_end":650,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355347,"byte_end":355418,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355423,"byte_end":355467,"line_start":652,"line_end":652,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355472,"byte_end":355543,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355548,"byte_end":355589,"line_start":654,"line_end":654,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355594,"byte_end":355665,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355670,"byte_end":355749,"line_start":656,"line_end":656,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355754,"byte_end":355761,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355766,"byte_end":355774,"line_start":658,"line_end":658,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355779,"byte_end":355782,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355787,"byte_end":355849,"line_start":660,"line_end":660,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355854,"byte_end":355900,"line_start":661,"line_end":661,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355905,"byte_end":355908,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355913,"byte_end":355921,"line_start":663,"line_end":663,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; fn main() {","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355926,"byte_end":355964,"line_start":664,"line_end":664,"column_start":5,"column_end":43}},{"value":"/ # use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":355969,"byte_end":356009,"line_start":665,"line_end":665,"column_start":5,"column_end":45}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356014,"byte_end":356062,"line_start":666,"line_end":666,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356067,"byte_end":356118,"line_start":667,"line_end":667,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356123,"byte_end":356196,"line_start":668,"line_end":668,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356201,"byte_end":356238,"line_start":669,"line_end":669,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356243,"byte_end":356316,"line_start":670,"line_end":670,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356321,"byte_end":356366,"line_start":671,"line_end":671,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356371,"byte_end":356443,"line_start":672,"line_end":672,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356448,"byte_end":356486,"line_start":673,"line_end":673,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356491,"byte_end":356564,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356569,"byte_end":356606,"line_start":675,"line_end":675,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356611,"byte_end":356689,"line_start":676,"line_end":676,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356694,"byte_end":356732,"line_start":677,"line_end":677,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356737,"byte_end":356744,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":356749,"byte_end":356757,"line_start":679,"line_end":679,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359446,"byte_end":359463,"line_start":747,"line_end":747,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358267,"byte_end":358324,"line_start":718,"line_end":718,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358329,"byte_end":358408,"line_start":719,"line_end":719,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358413,"byte_end":358416,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358421,"byte_end":358471,"line_start":721,"line_end":721,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358476,"byte_end":358554,"line_start":722,"line_end":722,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358559,"byte_end":358562,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358567,"byte_end":358580,"line_start":724,"line_end":724,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358585,"byte_end":358588,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358593,"byte_end":358601,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358606,"byte_end":358632,"line_start":727,"line_end":727,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358637,"byte_end":358685,"line_start":728,"line_end":728,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358690,"byte_end":358693,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358698,"byte_end":358743,"line_start":730,"line_end":730,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358748,"byte_end":358791,"line_start":731,"line_end":731,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358796,"byte_end":358869,"line_start":732,"line_end":732,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358874,"byte_end":358947,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358952,"byte_end":358960,"line_start":734,"line_end":734,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358965,"byte_end":358968,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":358973,"byte_end":359057,"line_start":736,"line_end":736,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359062,"byte_end":359065,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359070,"byte_end":359078,"line_start":738,"line_end":738,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359083,"byte_end":359111,"line_start":739,"line_end":739,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359116,"byte_end":359166,"line_start":740,"line_end":740,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359171,"byte_end":359226,"line_start":741,"line_end":741,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359231,"byte_end":359276,"line_start":742,"line_end":742,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359281,"byte_end":359349,"line_start":743,"line_end":743,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359354,"byte_end":359362,"line_start":744,"line_end":744,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359367,"byte_end":359420,"line_start":745,"line_end":745,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359425,"byte_end":359434,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361284,"byte_end":361290,"line_start":791,"line_end":791,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359659,"byte_end":359713,"line_start":755,"line_end":755,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359718,"byte_end":359788,"line_start":756,"line_end":756,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359793,"byte_end":359831,"line_start":757,"line_end":757,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359836,"byte_end":359839,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359844,"byte_end":359879,"line_start":759,"line_end":759,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359884,"byte_end":359957,"line_start":760,"line_end":760,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":359962,"byte_end":360019,"line_start":761,"line_end":761,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360024,"byte_end":360086,"line_start":762,"line_end":762,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360091,"byte_end":360151,"line_start":763,"line_end":763,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360156,"byte_end":360159,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360164,"byte_end":360228,"line_start":765,"line_end":765,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360233,"byte_end":360296,"line_start":766,"line_end":766,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360301,"byte_end":360376,"line_start":767,"line_end":767,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360381,"byte_end":360384,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360389,"byte_end":360402,"line_start":769,"line_end":769,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360407,"byte_end":360410,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360415,"byte_end":360423,"line_start":771,"line_end":771,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360428,"byte_end":360454,"line_start":772,"line_end":772,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360459,"byte_end":360462,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360467,"byte_end":360527,"line_start":774,"line_end":774,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360532,"byte_end":360593,"line_start":775,"line_end":775,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360598,"byte_end":360670,"line_start":776,"line_end":776,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360675,"byte_end":360737,"line_start":777,"line_end":777,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360742,"byte_end":360750,"line_start":778,"line_end":778,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360755,"byte_end":360758,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360763,"byte_end":360847,"line_start":780,"line_end":780,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360852,"byte_end":360855,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360860,"byte_end":360868,"line_start":782,"line_end":782,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360873,"byte_end":360901,"line_start":783,"line_end":783,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360906,"byte_end":360968,"line_start":784,"line_end":784,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":360973,"byte_end":361037,"line_start":785,"line_end":785,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361042,"byte_end":361117,"line_start":786,"line_end":786,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361122,"byte_end":361187,"line_start":787,"line_end":787,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361192,"byte_end":361200,"line_start":788,"line_end":788,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361205,"byte_end":361258,"line_start":789,"line_end":789,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361263,"byte_end":361272,"line_start":790,"line_end":790,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2416},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402235,"byte_end":402239,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":2418},{"krate":0,"index":2419}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":400862,"byte_end":400904,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":400905,"byte_end":400908,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":400909,"byte_end":400962,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":400963,"byte_end":401043,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401044,"byte_end":401130,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401131,"byte_end":401188,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401189,"byte_end":401192,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401193,"byte_end":401271,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401272,"byte_end":401342,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401343,"byte_end":401399,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401400,"byte_end":401403,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401404,"byte_end":401476,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401477,"byte_end":401529,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401530,"byte_end":401617,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401618,"byte_end":401686,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401687,"byte_end":401733,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401734,"byte_end":401737,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401738,"byte_end":401782,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401783,"byte_end":401879,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401880,"byte_end":401975,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401976,"byte_end":401979,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":401980,"byte_end":402056,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402057,"byte_end":402124,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402125,"byte_end":402206,"line_start":45,"line_end":45,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402347,"byte_end":402355,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402304,"byte_end":402336,"line_start":52,"line_end":52,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402457,"byte_end":402465,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402414,"byte_end":402446,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402813,"byte_end":402821,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"pub fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402559,"byte_end":402615,"line_start":58,"line_end":58,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402620,"byte_end":402686,"line_start":59,"line_end":59,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402792,"byte_end":402801,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403122,"byte_end":403130,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402928,"byte_end":402999,"line_start":67,"line_end":67,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403004,"byte_end":403052,"line_start":68,"line_end":68,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403057,"byte_end":403060,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403065,"byte_end":403096,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403101,"byte_end":403110,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403527,"byte_end":403534,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403312,"byte_end":403386,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403391,"byte_end":403439,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403444,"byte_end":403447,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403452,"byte_end":403501,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403506,"byte_end":403515,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403889,"byte_end":403900,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403666,"byte_end":403740,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403745,"byte_end":403793,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403798,"byte_end":403801,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403806,"byte_end":403863,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":403868,"byte_end":403877,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404387,"byte_end":404400,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404061,"byte_end":404148,"line_start":95,"line_end":95,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404153,"byte_end":404233,"line_start":96,"line_end":96,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404238,"byte_end":404286,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404291,"byte_end":404294,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404299,"byte_end":404361,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404366,"byte_end":404375,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404891,"byte_end":404908,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404557,"byte_end":404644,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404649,"byte_end":404729,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404734,"byte_end":404782,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404787,"byte_end":404790,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404795,"byte_end":404865,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":404870,"byte_end":404879,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405471,"byte_end":405484,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405141,"byte_end":405228,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405233,"byte_end":405317,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405322,"byte_end":405370,"line_start":123,"line_end":123,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405375,"byte_end":405378,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405383,"byte_end":405445,"line_start":125,"line_end":125,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405450,"byte_end":405459,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405979,"byte_end":405996,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405641,"byte_end":405728,"line_start":131,"line_end":131,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405733,"byte_end":405817,"line_start":132,"line_end":132,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405822,"byte_end":405870,"line_start":133,"line_end":133,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405875,"byte_end":405878,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405883,"byte_end":405953,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":405958,"byte_end":405967,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406560,"byte_end":406572,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406229,"byte_end":406315,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406320,"byte_end":406407,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406412,"byte_end":406460,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406465,"byte_end":406468,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406473,"byte_end":406534,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406539,"byte_end":406548,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407065,"byte_end":407081,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406726,"byte_end":406812,"line_start":157,"line_end":157,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406817,"byte_end":406904,"line_start":158,"line_end":158,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406909,"byte_end":406957,"line_start":159,"line_end":159,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406962,"byte_end":406965,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":406970,"byte_end":407039,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407044,"byte_end":407053,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407445,"byte_end":407449,"line_start":177,"line_end":177,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"pub fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407311,"byte_end":407352,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407357,"byte_end":407360,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407365,"byte_end":407419,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407424,"byte_end":407433,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407671,"byte_end":407679,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407529,"byte_end":407570,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407575,"byte_end":407578,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407583,"byte_end":407645,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407650,"byte_end":407659,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407939,"byte_end":407943,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"pub fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407803,"byte_end":407845,"line_start":189,"line_end":189,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407850,"byte_end":407853,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407858,"byte_end":407913,"line_start":191,"line_end":191,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":407918,"byte_end":407927,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408167,"byte_end":408175,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408023,"byte_end":408065,"line_start":197,"line_end":197,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408070,"byte_end":408073,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408078,"byte_end":408141,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408146,"byte_end":408155,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408369,"byte_end":408375,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408299,"byte_end":408343,"line_start":205,"line_end":205,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408348,"byte_end":408357,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408496,"byte_end":408504,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408432,"byte_end":408470,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408475,"byte_end":408484,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408730,"byte_end":408743,"line_start":220,"line_end":220,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408575,"byte_end":408612,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408617,"byte_end":408704,"line_start":218,"line_end":218,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408709,"byte_end":408718,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408975,"byte_end":408993,"line_start":228,"line_end":228,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408839,"byte_end":408885,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408890,"byte_end":408893,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408898,"byte_end":408949,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":408954,"byte_end":408963,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409313,"byte_end":409331,"line_start":237,"line_end":237,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409170,"byte_end":409223,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409228,"byte_end":409231,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409236,"byte_end":409287,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409292,"byte_end":409301,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409759,"byte_end":409780,"line_start":248,"line_end":248,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409508,"byte_end":409559,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409564,"byte_end":409609,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409614,"byte_end":409617,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409622,"byte_end":409669,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409674,"byte_end":409733,"line_start":246,"line_end":246,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409738,"byte_end":409747,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409963,"byte_end":409972,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409896,"byte_end":409937,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":409942,"byte_end":409951,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410282,"byte_end":410293,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410024,"byte_end":410067,"line_start":258,"line_end":258,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410072,"byte_end":410075,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410080,"byte_end":410148,"line_start":260,"line_end":260,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410153,"byte_end":410214,"line_start":261,"line_end":261,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410219,"byte_end":410256,"line_start":262,"line_end":262,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410261,"byte_end":410270,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410840,"byte_end":410857,"line_start":284,"line_end":284,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410699,"byte_end":410756,"line_start":281,"line_end":281,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410761,"byte_end":410814,"line_start":282,"line_end":282,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410819,"byte_end":410828,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":411347,"byte_end":411353,"line_start":297,"line_end":297,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":411092,"byte_end":411146,"line_start":292,"line_end":292,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":411151,"byte_end":411220,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":411225,"byte_end":411263,"line_start":294,"line_end":294,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":411268,"byte_end":411321,"line_start":295,"line_end":295,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":411326,"byte_end":411335,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2424},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417488,"byte_end":417492,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417415,"byte_end":417483,"line_start":39,"line_end":39,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2426},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417631,"byte_end":417637,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417499,"byte_end":417552,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417557,"byte_end":417626,"line_start":43,"line_end":43,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2428},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417776,"byte_end":417782,"line_start":48,"line_end":48,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417644,"byte_end":417697,"line_start":46,"line_end":46,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417702,"byte_end":417771,"line_start":47,"line_end":47,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2430},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417921,"byte_end":417926,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417789,"byte_end":417842,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417847,"byte_end":417916,"line_start":51,"line_end":51,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418162,"byte_end":418168,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417933,"byte_end":418006,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418011,"byte_end":418085,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418090,"byte_end":418157,"line_start":56,"line_end":56,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418228,"byte_end":418243,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":2423},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2423},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417395,"byte_end":417408,"line_start":38,"line_end":38,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"pub enum SecondsFormat {\n    Secs,\n    Millis,\n    Micros,\n    Nanos,\n    AutoSi,\n    __NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":2424},{"krate":0,"index":2426},{"krate":0,"index":2428},{"krate":0,"index":2430},{"krate":0,"index":2432},{"krate":0,"index":2434}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417132,"byte_end":417204,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417205,"byte_end":417276,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417277,"byte_end":417280,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":417281,"byte_end":417340,"line_start":36,"line_end":36,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2447},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418541,"byte_end":418549,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":2449},{"krate":0,"index":2450}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418248,"byte_end":418299,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418300,"byte_end":418303,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418304,"byte_end":418380,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418381,"byte_end":418448,"line_start":67,"line_end":67,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418449,"byte_end":418512,"line_start":68,"line_end":68,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418674,"byte_end":418686,"line_start":76,"line_end":76,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418622,"byte_end":418663,"line_start":75,"line_end":75,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":1440},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418813,"byte_end":418825,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418761,"byte_end":418802,"line_start":77,"line_end":77,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419468,"byte_end":419476,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"pub fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418939,"byte_end":419003,"line_start":81,"line_end":81,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419008,"byte_end":419078,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419083,"byte_end":419086,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419091,"byte_end":419104,"line_start":84,"line_end":84,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419109,"byte_end":419112,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419117,"byte_end":419125,"line_start":86,"line_end":86,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419130,"byte_end":419187,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419192,"byte_end":419195,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419200,"byte_end":419282,"line_start":89,"line_end":89,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419287,"byte_end":419328,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419333,"byte_end":419341,"line_start":91,"line_end":91,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419447,"byte_end":419456,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419664,"byte_end":419668,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"pub fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419607,"byte_end":419638,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419643,"byte_end":419652,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419893,"byte_end":419897,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419772,"byte_end":419803,"line_start":105,"line_end":105,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419808,"byte_end":419867,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419872,"byte_end":419881,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420114,"byte_end":420123,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":419980,"byte_end":420056,"line_start":112,"line_end":112,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420061,"byte_end":420088,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420093,"byte_end":420102,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420944,"byte_end":420960,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420185,"byte_end":420258,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420263,"byte_end":420266,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420271,"byte_end":420345,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420350,"byte_end":420423,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420428,"byte_end":420500,"line_start":123,"line_end":123,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420505,"byte_end":420541,"line_start":124,"line_end":124,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420546,"byte_end":420549,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420554,"byte_end":420567,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420572,"byte_end":420575,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420580,"byte_end":420588,"line_start":128,"line_end":128,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420593,"byte_end":420613,"line_start":129,"line_end":129,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420618,"byte_end":420643,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420648,"byte_end":420651,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420656,"byte_end":420717,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420722,"byte_end":420767,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420772,"byte_end":420775,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420780,"byte_end":420843,"line_start":135,"line_end":135,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420848,"byte_end":420905,"line_start":136,"line_end":136,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420910,"byte_end":420918,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":420923,"byte_end":420932,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421782,"byte_end":421797,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421029,"byte_end":421101,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421106,"byte_end":421109,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421114,"byte_end":421188,"line_start":145,"line_end":145,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421193,"byte_end":421258,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421263,"byte_end":421334,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421339,"byte_end":421367,"line_start":148,"line_end":148,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421372,"byte_end":421375,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421380,"byte_end":421393,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421398,"byte_end":421401,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421406,"byte_end":421414,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421419,"byte_end":421439,"line_start":153,"line_end":153,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421444,"byte_end":421469,"line_start":154,"line_end":154,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421474,"byte_end":421477,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421482,"byte_end":421542,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421547,"byte_end":421599,"line_start":157,"line_end":157,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421604,"byte_end":421607,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421612,"byte_end":421674,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421679,"byte_end":421743,"line_start":160,"line_end":160,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421748,"byte_end":421756,"line_start":161,"line_end":161,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421761,"byte_end":421770,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422127,"byte_end":422150,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421865,"byte_end":421934,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421939,"byte_end":421942,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":421947,"byte_end":422006,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422011,"byte_end":422014,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422019,"byte_end":422101,"line_start":171,"line_end":171,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422106,"byte_end":422115,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422492,"byte_end":422515,"line_start":183,"line_end":183,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422226,"byte_end":422295,"line_start":177,"line_end":177,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422300,"byte_end":422303,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422308,"byte_end":422371,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422376,"byte_end":422379,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422384,"byte_end":422466,"line_start":181,"line_end":181,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422471,"byte_end":422480,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422859,"byte_end":422881,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422591,"byte_end":422659,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422664,"byte_end":422667,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422672,"byte_end":422739,"line_start":189,"line_end":189,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422744,"byte_end":422747,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422752,"byte_end":422833,"line_start":191,"line_end":191,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422838,"byte_end":422847,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423026,"byte_end":423032,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":422956,"byte_end":423000,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423005,"byte_end":423014,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423153,"byte_end":423161,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423089,"byte_end":423127,"line_start":203,"line_end":203,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423132,"byte_end":423141,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423391,"byte_end":423404,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423232,"byte_end":423269,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423274,"byte_end":423365,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423370,"byte_end":423379,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423657,"byte_end":423675,"line_start":220,"line_end":220,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423512,"byte_end":423567,"line_start":216,"line_end":216,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423572,"byte_end":423575,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423580,"byte_end":423631,"line_start":218,"line_end":218,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423636,"byte_end":423645,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424041,"byte_end":424059,"line_start":230,"line_end":230,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423889,"byte_end":423951,"line_start":226,"line_end":226,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423956,"byte_end":423959,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":423964,"byte_end":424015,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424020,"byte_end":424029,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424415,"byte_end":424436,"line_start":239,"line_end":239,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, DateTime<Tz2>)\n-> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424273,"byte_end":424337,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424342,"byte_end":424389,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424394,"byte_end":424403,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424635,"byte_end":424644,"line_start":245,"line_end":245,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424564,"byte_end":424609,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424614,"byte_end":424623,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424777,"byte_end":424788,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424704,"byte_end":424751,"line_start":249,"line_end":249,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424756,"byte_end":424765,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428595,"byte_end":428613,"line_start":347,"line_end":347,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"pub fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428021,"byte_end":428106,"line_start":334,"line_end":334,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428111,"byte_end":428173,"line_start":335,"line_end":335,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428178,"byte_end":428181,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428186,"byte_end":428251,"line_start":337,"line_end":337,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428256,"byte_end":428310,"line_start":338,"line_end":338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428315,"byte_end":428318,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428323,"byte_end":428330,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428335,"byte_end":428387,"line_start":341,"line_end":341,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428392,"byte_end":428407,"line_start":342,"line_end":342,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428412,"byte_end":428491,"line_start":343,"line_end":343,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428496,"byte_end":428560,"line_start":344,"line_end":344,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428565,"byte_end":428571,"line_start":345,"line_end":345,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428576,"byte_end":428583,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429238,"byte_end":429256,"line_start":359,"line_end":359,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"pub fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428869,"byte_end":428962,"line_start":354,"line_end":354,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":428967,"byte_end":429029,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429034,"byte_end":429037,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429042,"byte_end":429132,"line_start":357,"line_end":357,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429137,"byte_end":429226,"line_start":358,"line_end":358,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430464,"byte_end":430478,"line_start":386,"line_end":386,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429512,"byte_end":429568,"line_start":366,"line_end":366,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429573,"byte_end":429630,"line_start":367,"line_end":367,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429635,"byte_end":429704,"line_start":368,"line_end":368,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429709,"byte_end":429747,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429752,"byte_end":429755,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429760,"byte_end":429854,"line_start":371,"line_end":371,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429859,"byte_end":429862,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429867,"byte_end":429933,"line_start":373,"line_end":373,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":429938,"byte_end":430032,"line_start":374,"line_end":374,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430037,"byte_end":430112,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430117,"byte_end":430120,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430125,"byte_end":430138,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430143,"byte_end":430146,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430151,"byte_end":430162,"line_start":379,"line_end":379,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430167,"byte_end":430217,"line_start":380,"line_end":380,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430222,"byte_end":430225,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430230,"byte_end":430268,"line_start":382,"line_end":382,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430273,"byte_end":430343,"line_start":383,"line_end":383,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430348,"byte_end":430440,"line_start":384,"line_end":384,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430445,"byte_end":430452,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430904,"byte_end":430914,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"pub fn to_rfc2822(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430748,"byte_end":430834,"line_start":397,"line_end":397,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430839,"byte_end":430892,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431246,"byte_end":431256,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"pub fn to_rfc3339(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431082,"byte_end":431176,"line_start":404,"line_end":404,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431181,"byte_end":431234,"line_start":405,"line_end":405,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432719,"byte_end":432734,"line_start":436,"line_end":436,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"pub fn to_rfc3339_opts(&Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431424,"byte_end":431496,"line_start":411,"line_end":411,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431501,"byte_end":431571,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431576,"byte_end":431623,"line_start":413,"line_end":413,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431628,"byte_end":431715,"line_start":414,"line_end":414,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431720,"byte_end":431752,"line_start":415,"line_end":415,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431757,"byte_end":431842,"line_start":416,"line_end":416,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431847,"byte_end":431850,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431855,"byte_end":431869,"line_start":418,"line_end":418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431874,"byte_end":431877,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431882,"byte_end":431893,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431898,"byte_end":431970,"line_start":421,"line_end":421,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":431975,"byte_end":432043,"line_start":422,"line_end":422,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432048,"byte_end":432112,"line_start":423,"line_end":423,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432117,"byte_end":432165,"line_start":424,"line_end":424,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432170,"byte_end":432233,"line_start":425,"line_end":425,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432238,"byte_end":432281,"line_start":426,"line_end":426,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432286,"byte_end":432347,"line_start":427,"line_end":427,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432352,"byte_end":432391,"line_start":428,"line_end":428,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432396,"byte_end":432399,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432404,"byte_end":432449,"line_start":430,"line_end":430,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432454,"byte_end":432522,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432527,"byte_end":432588,"line_start":432,"line_end":432,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432593,"byte_end":432637,"line_start":433,"line_end":433,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432642,"byte_end":432649,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":432654,"byte_end":432707,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434344,"byte_end":434361,"line_start":481,"line_end":481,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434185,"byte_end":434260,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434265,"byte_end":434318,"line_start":479,"line_end":479,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434323,"byte_end":434332,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434917,"byte_end":434923,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434644,"byte_end":434716,"line_start":490,"line_end":490,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434721,"byte_end":434790,"line_start":491,"line_end":491,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434795,"byte_end":434833,"line_start":492,"line_end":492,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434838,"byte_end":434891,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":434896,"byte_end":434905,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1599},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1616},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1623},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1630},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1637},{"krate":0,"index":1640},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2467},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":2485},{"krate":0,"index":2529},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":2540},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2611},{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2644},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2653},{"krate":0,"index":2655},{"krate":0,"index":2658},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":2661},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2691},{"krate":0,"index":2693},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1740},{"krate":0,"index":1744},{"krate":0,"index":1855},{"krate":0,"index":1970},{"krate":0,"index":2026},{"krate":0,"index":2752},{"krate":0,"index":2759},{"krate":0,"index":2069},{"krate":0,"index":2076},{"krate":0,"index":2081},{"krate":0,"index":2084}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508239,"byte_end":508296,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508297,"byte_end":508300,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508301,"byte_end":508369,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508370,"byte_end":508449,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508450,"byte_end":508538,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508539,"byte_end":508601,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508602,"byte_end":508605,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508606,"byte_end":508694,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508695,"byte_end":508788,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508789,"byte_end":508829,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508830,"byte_end":508891,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508892,"byte_end":508961,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ C's `strftime` format](./strftime/index.html).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":508962,"byte_end":509012,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":509014,"byte_end":509058,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2468},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510244,"byte_end":510248,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510224,"byte_end":510239,"line_start":60,"line_end":60,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2470},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510282,"byte_end":510286,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510254,"byte_end":510277,"line_start":62,"line_end":62,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510315,"byte_end":510320,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":2467},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510292,"byte_end":510310,"line_start":64,"line_end":64,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":2467},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510214,"byte_end":510217,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"pub enum Pad { None, Zero, Space, }","parent":null,"children":[{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2472}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510118,"byte_end":510159,"line_start":57,"line_end":57,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2486},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511216,"byte_end":511220,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511093,"byte_end":511132,"line_start":83,"line_end":83,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511137,"byte_end":511211,"line_start":84,"line_end":84,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2488},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511322,"byte_end":511332,"line_start":87,"line_end":87,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511226,"byte_end":511317,"line_start":86,"line_end":86,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2490},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511403,"byte_end":511413,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511338,"byte_end":511398,"line_start":88,"line_end":88,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2492},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511548,"byte_end":511555,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511419,"byte_end":511464,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511469,"byte_end":511543,"line_start":91,"line_end":91,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511653,"byte_end":511666,"line_start":94,"line_end":94,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511561,"byte_end":511648,"line_start":93,"line_end":93,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2496},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511749,"byte_end":511762,"line_start":96,"line_end":96,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511672,"byte_end":511744,"line_start":95,"line_end":95,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511793,"byte_end":511798,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511768,"byte_end":511788,"line_start":97,"line_end":97,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2500},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511840,"byte_end":511843,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511804,"byte_end":511835,"line_start":99,"line_end":99,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2502},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511936,"byte_end":511947,"line_start":102,"line_end":102,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511849,"byte_end":511931,"line_start":101,"line_end":101,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2504},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512040,"byte_end":512051,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511953,"byte_end":512035,"line_start":103,"line_end":103,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2506},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512109,"byte_end":512116,"line_start":106,"line_end":106,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512057,"byte_end":512104,"line_start":105,"line_end":105,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2508},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512192,"byte_end":512206,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512122,"byte_end":512187,"line_start":107,"line_end":107,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512280,"byte_end":512294,"line_start":110,"line_end":110,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512212,"byte_end":512275,"line_start":109,"line_end":109,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2512},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512335,"byte_end":512342,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512300,"byte_end":512330,"line_start":111,"line_end":111,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2514},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512401,"byte_end":512405,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512348,"byte_end":512396,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512464,"byte_end":512470,"line_start":116,"line_end":116,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512411,"byte_end":512459,"line_start":115,"line_end":115,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512543,"byte_end":512549,"line_start":118,"line_end":118,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512476,"byte_end":512538,"line_start":117,"line_end":117,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2520},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512624,"byte_end":512630,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512555,"byte_end":512619,"line_start":119,"line_end":119,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2522},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512833,"byte_end":512843,"line_start":124,"line_end":124,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512636,"byte_end":512704,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512709,"byte_end":512750,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512755,"byte_end":512828,"line_start":123,"line_end":123,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2524},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513023,"byte_end":513032,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512849,"byte_end":512941,"line_start":125,"line_end":125,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":512946,"byte_end":513018,"line_start":126,"line_end":126,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513251,"byte_end":513259,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":2485},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513039,"byte_end":513062,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513067,"byte_end":513070,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513075,"byte_end":513151,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513156,"byte_end":513246,"line_start":132,"line_end":132,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":2485},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":511079,"byte_end":511086,"line_start":82,"line_end":82,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"pub enum Numeric {\n    Year,\n    YearDiv100,\n    YearMod100,\n    IsoYear,\n    IsoYearDiv100,\n    IsoYearMod100,\n    Month,\n    Day,\n    WeekFromSun,\n    WeekFromMon,\n    IsoWeek,\n    NumDaysFromSun,\n    WeekdayFromMon,\n    Ordinal,\n    Hour,\n    Hour12,\n    Minute,\n    Second,\n    Nanosecond,\n    Timestamp,\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":2486},{"krate":0,"index":2488},{"krate":0,"index":2490},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510325,"byte_end":510348,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510349,"byte_end":510419,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510420,"byte_end":510423,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510424,"byte_end":510490,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510491,"byte_end":510590,"line_start":72,"line_end":72,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510591,"byte_end":510618,"line_start":73,"line_end":73,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510619,"byte_end":510698,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510699,"byte_end":510702,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510703,"byte_end":510764,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510765,"byte_end":510848,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510849,"byte_end":510899,"line_start":78,"line_end":78,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510900,"byte_end":510987,"line_start":79,"line_end":79,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":510988,"byte_end":511030,"line_start":80,"line_end":80,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513367,"byte_end":513382,"line_start":137,"line_end":137,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1656}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513281,"byte_end":513355,"line_start":136,"line_end":136,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2541},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514180,"byte_end":514194,"line_start":170,"line_end":170,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514047,"byte_end":514075,"line_start":167,"line_end":167,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514080,"byte_end":514083,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514088,"byte_end":514175,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514327,"byte_end":514340,"line_start":174,"line_end":174,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514200,"byte_end":514221,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514226,"byte_end":514229,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514234,"byte_end":514322,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2545},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514489,"byte_end":514505,"line_start":178,"line_end":178,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514346,"byte_end":514384,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514389,"byte_end":514392,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514397,"byte_end":514484,"line_start":177,"line_end":177,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2547},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514648,"byte_end":514663,"line_start":182,"line_end":182,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514511,"byte_end":514542,"line_start":179,"line_end":179,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514547,"byte_end":514550,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514555,"byte_end":514643,"line_start":181,"line_end":181,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514741,"byte_end":514750,"line_start":186,"line_end":186,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514669,"byte_end":514679,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514684,"byte_end":514687,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514692,"byte_end":514736,"line_start":185,"line_end":185,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2551},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514828,"byte_end":514837,"line_start":190,"line_end":190,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514756,"byte_end":514766,"line_start":187,"line_end":187,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514771,"byte_end":514774,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514779,"byte_end":514823,"line_start":189,"line_end":189,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2553},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515084,"byte_end":515094,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514843,"byte_end":514916,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514921,"byte_end":514997,"line_start":192,"line_end":192,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515002,"byte_end":515079,"line_start":193,"line_end":193,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2555},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515184,"byte_end":515195,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515100,"byte_end":515179,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515285,"byte_end":515296,"line_start":198,"line_end":198,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515201,"byte_end":515280,"line_start":197,"line_end":197,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2559},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515386,"byte_end":515397,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515302,"byte_end":515381,"line_start":199,"line_end":199,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515518,"byte_end":515530,"line_start":204,"line_end":204,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515403,"byte_end":515421,"line_start":201,"line_end":201,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515426,"byte_end":515429,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515434,"byte_end":515513,"line_start":203,"line_end":203,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2563},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515865,"byte_end":515884,"line_start":210,"line_end":210,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515536,"byte_end":515609,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515614,"byte_end":515617,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515622,"byte_end":515714,"line_start":207,"line_end":207,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515719,"byte_end":515771,"line_start":208,"line_end":208,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515776,"byte_end":515860,"line_start":209,"line_end":209,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2565},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516276,"byte_end":516296,"line_start":217,"line_end":217,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515890,"byte_end":515958,"line_start":211,"line_end":211,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515963,"byte_end":515966,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":515971,"byte_end":516063,"line_start":213,"line_end":213,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516068,"byte_end":516125,"line_start":214,"line_end":214,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516130,"byte_end":516182,"line_start":215,"line_end":215,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516187,"byte_end":516271,"line_start":216,"line_end":216,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2567},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516435,"byte_end":516449,"line_start":220,"line_end":220,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516302,"byte_end":516388,"line_start":218,"line_end":218,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516393,"byte_end":516430,"line_start":219,"line_end":219,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2569},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516590,"byte_end":516605,"line_start":223,"line_end":223,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516455,"byte_end":516543,"line_start":221,"line_end":221,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516548,"byte_end":516585,"line_start":222,"line_end":222,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2571},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516698,"byte_end":516705,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516611,"byte_end":516693,"line_start":224,"line_end":224,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2573},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516761,"byte_end":516768,"line_start":227,"line_end":227,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516711,"byte_end":516756,"line_start":226,"line_end":226,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516987,"byte_end":516995,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":2540},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516775,"byte_end":516798,"line_start":229,"line_end":229,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516803,"byte_end":516806,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516811,"byte_end":516887,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":516892,"byte_end":516982,"line_start":232,"line_end":232,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":2540},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":514035,"byte_end":514040,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"pub enum Fixed {\n    ShortMonthName,\n    LongMonthName,\n    ShortWeekdayName,\n    LongWeekdayName,\n    LowerAmPm,\n    UpperAmPm,\n    Nanosecond,\n    Nanosecond3,\n    Nanosecond6,\n    Nanosecond9,\n    TimezoneName,\n    TimezoneOffsetColon,\n    TimezoneOffsetColonZ,\n    TimezoneOffset,\n    TimezoneOffsetZ,\n    RFC2822,\n    RFC3339,\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":2541},{"krate":0,"index":2543},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2557},{"krate":0,"index":2559},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2571},{"krate":0,"index":2573},{"krate":0,"index":2575}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513812,"byte_end":513840,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513841,"byte_end":513844,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513845,"byte_end":513901,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513902,"byte_end":513986,"line_start":164,"line_end":164,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2589},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":517145,"byte_end":517158,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":2590}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":517015,"byte_end":517094,"line_start":236,"line_end":236,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2623},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518174,"byte_end":518181,"line_start":265,"line_end":265,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518129,"byte_end":518169,"line_start":264,"line_end":264,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2626},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518319,"byte_end":518331,"line_start":268,"line_end":268,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518196,"byte_end":518256,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518261,"byte_end":518314,"line_start":267,"line_end":267,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2629},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518419,"byte_end":518424,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518347,"byte_end":518414,"line_start":269,"line_end":269,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2632},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518560,"byte_end":518570,"line_start":273,"line_end":273,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518439,"byte_end":518497,"line_start":271,"line_end":271,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518502,"byte_end":518555,"line_start":272,"line_end":272,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2635},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518749,"byte_end":518756,"line_start":276,"line_end":276,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518586,"byte_end":518676,"line_start":274,"line_end":274,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518681,"byte_end":518744,"line_start":275,"line_end":275,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2639},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518803,"byte_end":518808,"line_start":278,"line_end":278,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518776,"byte_end":518798,"line_start":277,"line_end":277,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2642},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518897,"byte_end":518902,"line_start":280,"line_end":280,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":2621},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518821,"byte_end":518892,"line_start":279,"line_end":279,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":2621},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":518114,"byte_end":518118,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"pub enum Item<'a> {\n    Literal(&'a str),\n    OwnedLiteral(Box<str>),\n    Space(&'a str),\n    OwnedSpace(Box<str>),\n    Numeric(Numeric, Pad),\n    Fixed(Fixed),\n    Error,\n}","parent":null,"children":[{"krate":0,"index":2623},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2635},{"krate":0,"index":2639},{"krate":0,"index":2642}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":517990,"byte_end":518065,"line_start":261,"line_end":261,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2661},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":519650,"byte_end":519660,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":519554,"byte_end":519593,"line_start":319,"line_end":319,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1671},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":520928,"byte_end":520939,"line_start":356,"line_end":356,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":520882,"byte_end":520918,"line_start":355,"line_end":355,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":522509,"byte_end":522520,"line_start":391,"line_end":391,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"pub fn format_item<'a>(&mut fmt::Formatter, Option<&NaiveDate>,\nOption<&NaiveTime>, Option<&(String, FixedOffset)>, &Item) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"/ Formats single formatting item","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":522413,"byte_end":522447,"line_start":389,"line_end":389,"column_start":1,"column_end":35}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":522448,"byte_end":522501,"line_start":390,"line_end":390,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535841,"byte_end":535847,"line_start":689,"line_end":689,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"pub fn format<'a, I,\nB>(&mut fmt::Formatter, Option<&NaiveDate>, Option<&NaiveTime>,\nOption<&(String, FixedOffset)>, I) -> fmt::Result where I: Iterator<Item =\nB> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535675,"byte_end":535739,"line_start":686,"line_end":686,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535740,"byte_end":535779,"line_start":687,"line_end":687,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":535780,"byte_end":535833,"line_start":688,"line_end":688,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2702},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544219,"byte_end":544225,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":2703},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":543701,"byte_end":543769,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":543770,"byte_end":543773,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":543774,"byte_end":543857,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":543858,"byte_end":543950,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":543951,"byte_end":543954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":543955,"byte_end":544037,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544038,"byte_end":544133,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544134,"byte_end":544172,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544402,"byte_end":544406,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544232,"byte_end":544241,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544246,"byte_end":544249,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544254,"byte_end":544329,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544334,"byte_end":544393,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2704},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544710,"byte_end":544722,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544426,"byte_end":544494,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544499,"byte_end":544502,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544507,"byte_end":544564,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544569,"byte_end":544628,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544633,"byte_end":544701,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2705},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544815,"byte_end":544827,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544742,"byte_end":544806,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2706},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545094,"byte_end":545101,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544847,"byte_end":544921,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544926,"byte_end":544929,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":544934,"byte_end":545019,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545024,"byte_end":545085,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2707},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545488,"byte_end":545503,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545121,"byte_end":545211,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545216,"byte_end":545263,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545268,"byte_end":545271,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545276,"byte_end":545333,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545338,"byte_end":545403,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545408,"byte_end":545479,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2708},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545670,"byte_end":545685,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545523,"byte_end":545609,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545614,"byte_end":545661,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2709},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545732,"byte_end":545737,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545705,"byte_end":545723,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2710},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545892,"byte_end":545905,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545757,"byte_end":545828,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545833,"byte_end":545883,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2711},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546060,"byte_end":546073,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":545925,"byte_end":545996,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546001,"byte_end":546051,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2712},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546213,"byte_end":546220,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546093,"byte_end":546156,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546161,"byte_end":546204,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2713},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546269,"byte_end":546276,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546240,"byte_end":546260,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2714},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546370,"byte_end":546377,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546300,"byte_end":546361,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2715},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546481,"byte_end":546484,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546397,"byte_end":546472,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2716},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546585,"byte_end":546596,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546504,"byte_end":546576,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2717},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546659,"byte_end":546670,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546616,"byte_end":546650,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2718},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546725,"byte_end":546731,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546690,"byte_end":546716,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2719},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546815,"byte_end":546821,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546751,"byte_end":546806,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2720},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546920,"byte_end":546930,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546841,"byte_end":546911,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547133,"byte_end":547142,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":546950,"byte_end":547027,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547032,"byte_end":547035,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547040,"byte_end":547124,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2722},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547221,"byte_end":547227,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547162,"byte_end":547212,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548556,"byte_end":548559,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"pub fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548498,"byte_end":548544,"line_start":158,"line_end":158,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548709,"byte_end":548717,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"pub fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548611,"byte_end":548683,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548688,"byte_end":548697,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548966,"byte_end":548982,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"pub fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548852,"byte_end":548940,"line_start":169,"line_end":169,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548945,"byte_end":548954,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549310,"byte_end":549326,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"pub fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549196,"byte_end":549284,"line_start":178,"line_end":178,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549289,"byte_end":549298,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549644,"byte_end":549655,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"pub fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549540,"byte_end":549618,"line_start":187,"line_end":187,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549623,"byte_end":549632,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549913,"byte_end":549932,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"pub fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549793,"byte_end":549887,"line_start":193,"line_end":193,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":549892,"byte_end":549901,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550269,"byte_end":550288,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"pub fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550149,"byte_end":550243,"line_start":202,"line_end":202,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550248,"byte_end":550257,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550605,"byte_end":550614,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"pub fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550505,"byte_end":550579,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550584,"byte_end":550593,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550866,"byte_end":550883,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"pub fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550750,"byte_end":550840,"line_start":217,"line_end":217,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":550845,"byte_end":550854,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551143,"byte_end":551160,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"pub fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551027,"byte_end":551117,"line_start":223,"line_end":223,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551122,"byte_end":551131,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551408,"byte_end":551419,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"pub fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551304,"byte_end":551382,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551387,"byte_end":551396,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551661,"byte_end":551672,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"pub fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551557,"byte_end":551635,"line_start":235,"line_end":235,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551640,"byte_end":551649,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551888,"byte_end":551899,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"pub fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551784,"byte_end":551862,"line_start":241,"line_end":241,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":551867,"byte_end":551876,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552133,"byte_end":552140,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"pub fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552037,"byte_end":552107,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552112,"byte_end":552121,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552426,"byte_end":552434,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"pub fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552274,"byte_end":552360,"line_start":253,"line_end":253,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552365,"byte_end":552400,"line_start":254,"line_end":254,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552405,"byte_end":552414,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552711,"byte_end":552721,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"pub fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552567,"byte_end":552640,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552645,"byte_end":552685,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552690,"byte_end":552699,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553098,"byte_end":553106,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"pub fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":552930,"byte_end":552997,"line_start":270,"line_end":270,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553002,"byte_end":553072,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553077,"byte_end":553086,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553450,"byte_end":553460,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"pub fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553348,"byte_end":553424,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553429,"byte_end":553438,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553699,"byte_end":553709,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"pub fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553597,"byte_end":553673,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553678,"byte_end":553687,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553956,"byte_end":553970,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"pub fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553846,"byte_end":553930,"line_start":292,"line_end":292,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":553935,"byte_end":553944,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554219,"byte_end":554232,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"pub fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554111,"byte_end":554193,"line_start":298,"line_end":298,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554198,"byte_end":554207,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554444,"byte_end":554454,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"pub fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554342,"byte_end":554418,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554423,"byte_end":554432,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":555098,"byte_end":555111,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"pub fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554591,"byte_end":554643,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554648,"byte_end":554651,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554656,"byte_end":554730,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554735,"byte_end":554738,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554743,"byte_end":554766,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554771,"byte_end":554809,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554814,"byte_end":554885,"line_start":316,"line_end":316,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554890,"byte_end":554910,"line_start":317,"line_end":317,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554915,"byte_end":554918,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":554923,"byte_end":555017,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":555022,"byte_end":555086,"line_start":320,"line_end":320,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564430,"byte_end":564443,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"pub fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564027,"byte_end":564079,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564084,"byte_end":564087,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564092,"byte_end":564166,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564171,"byte_end":564174,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564179,"byte_end":564238,"line_start":524,"line_end":524,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564243,"byte_end":564299,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564304,"byte_end":564343,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564348,"byte_end":564351,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":564356,"byte_end":564418,"line_start":528,"line_end":528,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":566226,"byte_end":566255,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"pub fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":565741,"byte_end":565802,"line_start":564,"line_end":564,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":565807,"byte_end":565896,"line_start":565,"line_end":565,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":565901,"byte_end":565978,"line_start":566,"line_end":566,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":565983,"byte_end":565986,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":565991,"byte_end":566054,"line_start":568,"line_end":568,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":566059,"byte_end":566145,"line_start":569,"line_end":569,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":566150,"byte_end":566214,"line_start":570,"line_end":570,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":569673,"byte_end":569688,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"pub fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":569597,"byte_end":569661,"line_start":643,"line_end":643,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570160,"byte_end":570171,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"pub fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":569809,"byte_end":569879,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":569884,"byte_end":569887,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":569892,"byte_end":569955,"line_start":650,"line_end":650,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":569960,"byte_end":570046,"line_start":651,"line_end":651,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570051,"byte_end":570079,"line_start":652,"line_end":652,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570084,"byte_end":570148,"line_start":653,"line_end":653,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571199,"byte_end":571224,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"pub fn to_datetime_with_timezone<Tz: TimeZone>(&Self, &Tz)\n-> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570642,"byte_end":570712,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570717,"byte_end":570797,"line_start":666,"line_end":666,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570802,"byte_end":570805,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570810,"byte_end":570873,"line_start":668,"line_end":668,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570878,"byte_end":570964,"line_start":669,"line_end":669,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":570969,"byte_end":570997,"line_start":670,"line_end":670,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571002,"byte_end":571066,"line_start":671,"line_end":671,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571071,"byte_end":571146,"line_start":672,"line_end":672,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":571151,"byte_end":571187,"line_start":673,"line_end":673,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608366,"byte_end":608371,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"pub fn parse<'a, I, B>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607463,"byte_end":607537,"line_start":218,"line_end":218,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607538,"byte_end":607634,"line_start":219,"line_end":219,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607635,"byte_end":607688,"line_start":220,"line_end":220,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607689,"byte_end":607773,"line_start":221,"line_end":221,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607774,"byte_end":607777,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607778,"byte_end":607822,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607823,"byte_end":607826,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607827,"byte_end":607885,"line_start":225,"line_end":225,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607886,"byte_end":607979,"line_start":226,"line_end":226,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":607980,"byte_end":608055,"line_start":227,"line_end":227,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608056,"byte_end":608059,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608060,"byte_end":608103,"line_start":229,"line_end":229,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608104,"byte_end":608167,"line_start":230,"line_end":230,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608168,"byte_end":608259,"line_start":231,"line_end":231,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608260,"byte_end":608263,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":608264,"byte_end":608358,"line_start":233,"line_end":233,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":2026},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2031},{"krate":0,"index":2034},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2733},{"krate":0,"index":2740},{"krate":0,"index":2743},{"krate":0,"index":2051},{"krate":0,"index":2057},{"krate":0,"index":2058}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. [^9] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n[^9]: `%Z`:\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.\n*/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":653206,"byte_end":664276,"line_start":4,"line_end":169,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2733},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":665168,"byte_end":665181,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":665076,"byte_end":665132,"line_start":200,"line_end":200,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":665771,"byte_end":665774,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"pub fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":665685,"byte_end":665759,"line_start":218,"line_end":218,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2752},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536619,"byte_end":536632,"line_start":719,"line_end":719,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":2758}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536373,"byte_end":536454,"line_start":715,"line_end":715,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536455,"byte_end":536536,"line_start":716,"line_end":716,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536537,"byte_end":536590,"line_start":717,"line_end":717,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537216,"byte_end":537219,"line_start":735,"line_end":735,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"pub fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537139,"byte_end":537204,"line_start":734,"line_end":734,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537493,"byte_end":537508,"line_start":740,"line_end":740,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"pub fn new_with_offset<Off>(Option<NaiveDate>, Option<NaiveTime>, &Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537401,"byte_end":537481,"line_start":739,"line_end":739,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684668,"byte_end":684679,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":2120},{"krate":0,"index":2121}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684270,"byte_end":684346,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684347,"byte_end":684418,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684419,"byte_end":684491,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684492,"byte_end":684567,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684568,"byte_end":684645,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684646,"byte_end":684657,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685209,"byte_end":685222,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"pub fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":2119},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684686,"byte_end":684761,"line_start":22,"line_end":22,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684766,"byte_end":684835,"line_start":23,"line_end":23,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684840,"byte_end":684872,"line_start":24,"line_end":24,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684877,"byte_end":684880,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684885,"byte_end":684898,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684903,"byte_end":684915,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684920,"byte_end":684987,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":684992,"byte_end":685055,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685060,"byte_end":685122,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685127,"byte_end":685189,"line_start":31,"line_end":31,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685194,"byte_end":685201,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685725,"byte_end":685738,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"pub fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":2119},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685256,"byte_end":685320,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685325,"byte_end":685388,"line_start":36,"line_end":36,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685393,"byte_end":685396,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685401,"byte_end":685414,"line_start":38,"line_end":38,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685419,"byte_end":685431,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685436,"byte_end":685503,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685508,"byte_end":685571,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685576,"byte_end":685638,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685643,"byte_end":685705,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685710,"byte_end":685717,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2127},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687477,"byte_end":687490,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687064,"byte_end":687136,"line_start":95,"line_end":95,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687137,"byte_end":687140,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687141,"byte_end":687158,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687159,"byte_end":687238,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687239,"byte_end":687318,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687319,"byte_end":687399,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687400,"byte_end":687466,"line_start":101,"line_end":101,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":2128},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687603,"byte_end":687606,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687504,"byte_end":687554,"line_start":103,"line_end":103,"column_start":5,"column_end":55}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687559,"byte_end":687593,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688309,"byte_end":688323,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"pub fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687773,"byte_end":687811,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687816,"byte_end":687819,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687824,"byte_end":687837,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687842,"byte_end":687854,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687859,"byte_end":687928,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687933,"byte_end":687996,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688001,"byte_end":688016,"line_start":117,"line_end":117,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688021,"byte_end":688096,"line_start":118,"line_end":118,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688101,"byte_end":688138,"line_start":119,"line_end":119,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688143,"byte_end":688149,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688154,"byte_end":688169,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688174,"byte_end":688240,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688245,"byte_end":688278,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688283,"byte_end":688289,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688294,"byte_end":688301,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688921,"byte_end":688935,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"pub fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688383,"byte_end":688423,"line_start":128,"line_end":128,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688428,"byte_end":688431,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688436,"byte_end":688449,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688454,"byte_end":688466,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688471,"byte_end":688540,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688545,"byte_end":688608,"line_start":133,"line_end":133,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688613,"byte_end":688628,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688633,"byte_end":688708,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688713,"byte_end":688750,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688755,"byte_end":688761,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688766,"byte_end":688781,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688786,"byte_end":688852,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688857,"byte_end":688890,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688895,"byte_end":688901,"line_start":141,"line_end":141,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":688906,"byte_end":688913,"line_start":142,"line_end":142,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2763},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691762,"byte_end":691786,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":2762},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691347,"byte_end":691425,"line_start":207,"line_end":207,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691430,"byte_end":691433,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691438,"byte_end":691450,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691455,"byte_end":691539,"line_start":210,"line_end":210,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691544,"byte_end":691596,"line_start":211,"line_end":211,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691601,"byte_end":691604,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691609,"byte_end":691624,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691629,"byte_end":691676,"line_start":214,"line_end":214,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691681,"byte_end":691734,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691739,"byte_end":691745,"line_start":216,"line_end":216,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691750,"byte_end":691757,"line_start":217,"line_end":217,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2765},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692213,"byte_end":692233,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":2762},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691793,"byte_end":691853,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691858,"byte_end":691861,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691866,"byte_end":691878,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691883,"byte_end":691967,"line_start":223,"line_end":223,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691972,"byte_end":692046,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692051,"byte_end":692054,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692059,"byte_end":692074,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692079,"byte_end":692132,"line_start":227,"line_end":227,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692137,"byte_end":692185,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692190,"byte_end":692196,"line_start":229,"line_end":229,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692201,"byte_end":692208,"line_start":230,"line_end":230,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2767},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692598,"byte_end":692619,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":2762},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692240,"byte_end":692300,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692305,"byte_end":692308,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692313,"byte_end":692325,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692330,"byte_end":692414,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692419,"byte_end":692471,"line_start":237,"line_end":237,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692476,"byte_end":692479,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692484,"byte_end":692581,"line_start":239,"line_end":239,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692586,"byte_end":692593,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2762},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691327,"byte_end":691340,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"pub enum RoundingError {\n    DurationExceedsTimestamp,\n    DurationExceedsLimit,\n    TimestampExceedsLimit,\n}","parent":null,"children":[{"krate":0,"index":2763},{"krate":0,"index":2765},{"krate":0,"index":2767}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691201,"byte_end":691241,"line_start":202,"line_end":202,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691242,"byte_end":691245,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":691246,"byte_end":691272,"line_start":204,"line_end":204,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2781},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27205,"byte_end":27208,"line_start":648,"line_end":648,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27189,"byte_end":27200,"line_start":647,"line_end":647,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2784},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27235,"byte_end":27238,"line_start":650,"line_end":650,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27218,"byte_end":27230,"line_start":649,"line_end":649,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27267,"byte_end":27270,"line_start":652,"line_end":652,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27248,"byte_end":27262,"line_start":651,"line_end":651,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2790},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27298,"byte_end":27301,"line_start":654,"line_end":654,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27280,"byte_end":27293,"line_start":653,"line_end":653,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27327,"byte_end":27330,"line_start":656,"line_end":656,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27311,"byte_end":27322,"line_start":655,"line_end":655,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2796},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27358,"byte_end":27361,"line_start":658,"line_end":658,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27340,"byte_end":27353,"line_start":657,"line_end":657,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27387,"byte_end":27390,"line_start":660,"line_end":660,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27371,"byte_end":27382,"line_start":659,"line_end":659,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27175,"byte_end":27182,"line_start":646,"line_end":646,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"pub enum Weekday { Mon = , Tue = , Wed = , Thu = , Fri = , Sat = , Sun = , }","parent":null,"children":[{"krate":0,"index":2781},{"krate":0,"index":2784},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2793},{"krate":0,"index":2796},{"krate":0,"index":2799}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26780,"byte_end":26800,"line_start":639,"line_end":639,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26801,"byte_end":26804,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26805,"byte_end":26862,"line_start":641,"line_end":641,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26863,"byte_end":26941,"line_start":642,"line_end":642,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":26942,"byte_end":27033,"line_start":643,"line_end":643,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27709,"byte_end":27713,"line_start":670,"line_end":670,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"pub fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27418,"byte_end":27447,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27452,"byte_end":27455,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27460,"byte_end":27531,"line_start":666,"line_end":666,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27536,"byte_end":27607,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27612,"byte_end":27683,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27688,"byte_end":27697,"line_start":669,"line_end":669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28366,"byte_end":28370,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"pub fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28071,"byte_end":28104,"line_start":682,"line_end":682,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28109,"byte_end":28112,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28117,"byte_end":28188,"line_start":684,"line_end":684,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28193,"byte_end":28264,"line_start":685,"line_end":685,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28269,"byte_end":28340,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28345,"byte_end":28354,"line_start":687,"line_end":687,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29112,"byte_end":29130,"line_start":706,"line_end":706,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"pub fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28728,"byte_end":28812,"line_start":700,"line_end":700,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28817,"byte_end":28820,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28825,"byte_end":28910,"line_start":702,"line_end":702,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":28915,"byte_end":29000,"line_start":703,"line_end":703,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29005,"byte_end":29086,"line_start":704,"line_end":704,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29091,"byte_end":29100,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29765,"byte_end":29783,"line_start":724,"line_end":724,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"pub fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29407,"byte_end":29465,"line_start":718,"line_end":718,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29470,"byte_end":29473,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29478,"byte_end":29563,"line_start":720,"line_end":720,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29568,"byte_end":29653,"line_start":721,"line_end":721,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29658,"byte_end":29739,"line_start":722,"line_end":722,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":29744,"byte_end":29753,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30424,"byte_end":30444,"line_start":742,"line_end":742,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"pub fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30060,"byte_end":30118,"line_start":736,"line_end":736,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30123,"byte_end":30126,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30131,"byte_end":30218,"line_start":738,"line_end":738,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30223,"byte_end":30310,"line_start":739,"line_end":739,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30315,"byte_end":30398,"line_start":740,"line_end":740,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30403,"byte_end":30412,"line_start":741,"line_end":741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31085,"byte_end":31105,"line_start":760,"line_end":760,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"pub fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30721,"byte_end":30779,"line_start":754,"line_end":754,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30784,"byte_end":30787,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30792,"byte_end":30879,"line_start":756,"line_end":756,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30884,"byte_end":30971,"line_start":757,"line_end":757,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":30976,"byte_end":31059,"line_start":758,"line_end":758,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31064,"byte_end":31073,"line_start":759,"line_end":759,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2816},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32944,"byte_end":32961,"line_start":824,"line_end":824,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2817}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32837,"byte_end":32904,"line_start":822,"line_end":822,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2825},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37130,"byte_end":37137,"line_start":968,"line_end":968,"column_start":5,"column_end":12},"name":"January","qualname":"::Month::January","value":"Month::January","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[{"value":"/ January","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37114,"byte_end":37125,"line_start":967,"line_end":967,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37164,"byte_end":37172,"line_start":970,"line_end":970,"column_start":5,"column_end":13},"name":"February","qualname":"::Month::February","value":"Month::February","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[{"value":"/ February","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37147,"byte_end":37159,"line_start":969,"line_end":969,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37196,"byte_end":37201,"line_start":972,"line_end":972,"column_start":5,"column_end":10},"name":"March","qualname":"::Month::March","value":"Month::March","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[{"value":"/ March","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37182,"byte_end":37191,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2834},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37225,"byte_end":37230,"line_start":974,"line_end":974,"column_start":5,"column_end":10},"name":"April","qualname":"::Month::April","value":"Month::April","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[{"value":"/ April","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37211,"byte_end":37220,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37252,"byte_end":37255,"line_start":976,"line_end":976,"column_start":5,"column_end":8},"name":"May","qualname":"::Month::May","value":"Month::May","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[{"value":"/ May","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37240,"byte_end":37247,"line_start":975,"line_end":975,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2840},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37278,"byte_end":37282,"line_start":978,"line_end":978,"column_start":5,"column_end":9},"name":"June","qualname":"::Month::June","value":"Month::June","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[{"value":"/ June","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37265,"byte_end":37273,"line_start":977,"line_end":977,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2843},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37305,"byte_end":37309,"line_start":980,"line_end":980,"column_start":5,"column_end":9},"name":"July","qualname":"::Month::July","value":"Month::July","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[{"value":"/ July","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37292,"byte_end":37300,"line_start":979,"line_end":979,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2846},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37334,"byte_end":37340,"line_start":982,"line_end":982,"column_start":5,"column_end":11},"name":"August","qualname":"::Month::August","value":"Month::August","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[{"value":"/ August","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37319,"byte_end":37329,"line_start":981,"line_end":981,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2849},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37368,"byte_end":37377,"line_start":984,"line_end":984,"column_start":5,"column_end":14},"name":"September","qualname":"::Month::September","value":"Month::September","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[{"value":"/ September","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37350,"byte_end":37363,"line_start":983,"line_end":983,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2852},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37403,"byte_end":37410,"line_start":986,"line_end":986,"column_start":5,"column_end":12},"name":"October","qualname":"::Month::October","value":"Month::October","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[{"value":"/ October","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37387,"byte_end":37398,"line_start":985,"line_end":985,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2855},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37437,"byte_end":37445,"line_start":988,"line_end":988,"column_start":5,"column_end":13},"name":"November","qualname":"::Month::November","value":"Month::November","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[{"value":"/ November","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37420,"byte_end":37432,"line_start":987,"line_end":987,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2858},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37473,"byte_end":37481,"line_start":990,"line_end":990,"column_start":5,"column_end":13},"name":"December","qualname":"::Month::December","value":"Month::December","parent":{"krate":0,"index":2824},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[{"value":"/ December","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37456,"byte_end":37468,"line_start":989,"line_end":989,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":2824},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37102,"byte_end":37107,"line_start":966,"line_end":966,"column_start":10,"column_end":15},"name":"Month","qualname":"::Month","value":"pub enum Month {\n    January = ,\n    February = ,\n    March = ,\n    April = ,\n    May = ,\n    June = ,\n    July = ,\n    August = ,\n    September = ,\n    October = ,\n    November = ,\n    December = ,\n}","parent":null,"children":[{"krate":0,"index":2825},{"krate":0,"index":2828},{"krate":0,"index":2831},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2840},{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2849},{"krate":0,"index":2852},{"krate":0,"index":2855},{"krate":0,"index":2858}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[{"value":"/ The month of the year.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":35957,"byte_end":35983,"line_start":939,"line_end":939,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":35984,"byte_end":35987,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/ This enum is just a convenience implementation.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":35988,"byte_end":36039,"line_start":941,"line_end":941,"column_start":1,"column_end":52}},{"value":"/ The month in dates created by DateLike objects does not return this enum.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36040,"byte_end":36117,"line_start":942,"line_end":942,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36118,"byte_end":36121,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ It is possible to convert from a date to a month independently","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36122,"byte_end":36188,"line_start":944,"line_end":944,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36189,"byte_end":36196,"line_start":945,"line_end":945,"column_start":1,"column_end":8}},{"value":"/ # extern crate num_traits;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36197,"byte_end":36227,"line_start":946,"line_end":946,"column_start":1,"column_end":31}},{"value":"/ use num_traits::FromPrimitive;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36228,"byte_end":36262,"line_start":947,"line_end":947,"column_start":1,"column_end":35}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36263,"byte_end":36290,"line_start":948,"line_end":948,"column_start":1,"column_end":28}},{"value":"/ let date = Utc.ymd(2019, 10, 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36291,"byte_end":36347,"line_start":949,"line_end":949,"column_start":1,"column_end":57}},{"value":"/ // `2019-10-28T09:10:11Z`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36348,"byte_end":36377,"line_start":950,"line_end":950,"column_start":1,"column_end":30}},{"value":"/ let month = Month::from_u32(date.month());","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36378,"byte_end":36424,"line_start":951,"line_end":951,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(month, Some(Month::October))","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36425,"byte_end":36468,"line_start":952,"line_end":952,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36469,"byte_end":36476,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"/ Or from a Month to an integer usable by dates","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36477,"byte_end":36526,"line_start":954,"line_end":954,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36527,"byte_end":36534,"line_start":955,"line_end":955,"column_start":1,"column_end":8}},{"value":"/ # use chrono::prelude::*;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36535,"byte_end":36564,"line_start":956,"line_end":956,"column_start":1,"column_end":30}},{"value":"/ let month = Month::January;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36565,"byte_end":36596,"line_start":957,"line_end":957,"column_start":1,"column_end":32}},{"value":"/ let dt = Utc.ymd(2019, month.number_from_month(), 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36597,"byte_end":36674,"line_start":958,"line_end":958,"column_start":1,"column_end":78}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36675,"byte_end":36740,"line_start":959,"line_end":959,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36741,"byte_end":36748,"line_start":960,"line_end":960,"column_start":1,"column_end":8}},{"value":"/ Allows mapping from and to month, from 1-January to 12-December.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36749,"byte_end":36817,"line_start":961,"line_end":961,"column_start":1,"column_end":69}},{"value":"/ Can be Serialized/Deserialized with serde","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":36818,"byte_end":36863,"line_start":962,"line_end":962,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2159},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37758,"byte_end":37762,"line_start":1000,"line_end":1000,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"pub fn succ(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"/ The next month.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37508,"byte_end":37527,"line_start":994,"line_end":994,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37532,"byte_end":37535,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37540,"byte_end":37602,"line_start":996,"line_end":996,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37607,"byte_end":37666,"line_start":997,"line_end":997,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `February` | `March`    | `...` | `January`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37671,"byte_end":37732,"line_start":998,"line_end":998,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37737,"byte_end":37746,"line_start":999,"line_end":999,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2160},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38611,"byte_end":38615,"line_start":1023,"line_end":1023,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"pub fn pred(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"/ The previous month.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38356,"byte_end":38379,"line_start":1017,"line_end":1017,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38384,"byte_end":38387,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38392,"byte_end":38454,"line_start":1019,"line_end":1019,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38459,"byte_end":38518,"line_start":1020,"line_end":1020,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `December` | `January`  | `...` | `November`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38523,"byte_end":38585,"line_start":1021,"line_end":1021,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":38590,"byte_end":38599,"line_start":1022,"line_end":1022,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39526,"byte_end":39543,"line_start":1046,"line_end":1046,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"pub fn number_from_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"/ Returns a month-of-year number starting from January = 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39209,"byte_end":39270,"line_start":1040,"line_end":1040,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39275,"byte_end":39278,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ `m`:                     | `January` | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39283,"byte_end":39357,"line_start":1042,"line_end":1042,"column_start":5,"column_end":79}},{"value":"/ -------------------------| --------- | ---------- | --- | -----","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39362,"byte_end":39429,"line_start":1043,"line_end":1043,"column_start":5,"column_end":72}},{"value":"/ `m.number_from_month()`: | 1         | 2          | `...` | 12","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39434,"byte_end":39500,"line_start":1044,"line_end":1044,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39505,"byte_end":39514,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40153,"byte_end":40157,"line_start":1070,"line_end":1070,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"pub fn name(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[{"value":"/ Get the name of the month","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":39992,"byte_end":40021,"line_start":1063,"line_end":1063,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40026,"byte_end":40029,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40034,"byte_end":40041,"line_start":1065,"line_end":1065,"column_start":5,"column_end":12}},{"value":"/ use chrono::Month;","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40046,"byte_end":40068,"line_start":1066,"line_end":1066,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40073,"byte_end":40076,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Month::January.name(), \"January\")","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40081,"byte_end":40129,"line_start":1068,"line_end":1068,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40134,"byte_end":40141,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2875},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":42008,"byte_end":42023,"line_start":1127,"line_end":1127,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":2876}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `<Month>` value with `FromStr`.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":41901,"byte_end":41968,"line_start":1125,"line_end":1125,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":2169},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45158,"byte_end":45166,"line_start":1245,"line_end":1245,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45098,"byte_end":45147,"line_start":1244,"line_end":1244,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45284,"byte_end":45288,"line_start":1247,"line_end":1247,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"pub fn year(&Self) -> i32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45180,"byte_end":45276,"line_start":1246,"line_end":1246,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2171},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45497,"byte_end":45504,"line_start":1252,"line_end":1252,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"pub fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45309,"byte_end":45382,"line_start":1249,"line_end":1249,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45387,"byte_end":45475,"line_start":1250,"line_end":1250,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45480,"byte_end":45489,"line_start":1251,"line_end":1251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2172},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45799,"byte_end":45804,"line_start":1264,"line_end":1264,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"pub fn month(&Self) -> u32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45692,"byte_end":45737,"line_start":1261,"line_end":1261,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45742,"byte_end":45745,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45750,"byte_end":45791,"line_start":1263,"line_end":1263,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45932,"byte_end":45938,"line_start":1269,"line_end":1269,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"pub fn month0(&Self) -> u32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45825,"byte_end":45870,"line_start":1266,"line_end":1266,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45875,"byte_end":45878,"line_start":1267,"line_end":1267,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45883,"byte_end":45924,"line_start":1268,"line_end":1268,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46109,"byte_end":46112,"line_start":1274,"line_end":1274,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"pub fn day(&Self) -> u32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45959,"byte_end":46004,"line_start":1271,"line_end":1271,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46009,"byte_end":46012,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46017,"byte_end":46101,"line_start":1273,"line_end":1273,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46283,"byte_end":46287,"line_start":1279,"line_end":1279,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"pub fn day0(&Self) -> u32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46133,"byte_end":46178,"line_start":1276,"line_end":1276,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46183,"byte_end":46186,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46191,"byte_end":46275,"line_start":1278,"line_end":1278,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2176},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46456,"byte_end":46463,"line_start":1284,"line_end":1284,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"pub fn ordinal(&Self) -> u32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46308,"byte_end":46352,"line_start":1281,"line_end":1281,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46357,"byte_end":46360,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46365,"byte_end":46448,"line_start":1283,"line_end":1283,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2177},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46632,"byte_end":46640,"line_start":1289,"line_end":1289,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"pub fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46484,"byte_end":46528,"line_start":1286,"line_end":1286,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46533,"byte_end":46536,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46541,"byte_end":46624,"line_start":1288,"line_end":1288,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46697,"byte_end":46704,"line_start":1292,"line_end":1292,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"pub fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46661,"byte_end":46689,"line_start":1291,"line_end":1291,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2179},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46762,"byte_end":46770,"line_start":1295,"line_end":1295,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"pub fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46729,"byte_end":46754,"line_start":1294,"line_end":1294,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46928,"byte_end":46937,"line_start":1300,"line_end":1300,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"pub fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46795,"byte_end":46846,"line_start":1297,"line_end":1297,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46851,"byte_end":46854,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46859,"byte_end":46920,"line_start":1299,"line_end":1299,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47130,"byte_end":47140,"line_start":1305,"line_end":1305,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"pub fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":46978,"byte_end":47048,"line_start":1302,"line_end":1302,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47053,"byte_end":47056,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47061,"byte_end":47122,"line_start":1304,"line_end":1304,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47334,"byte_end":47345,"line_start":1310,"line_end":1310,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"pub fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47182,"byte_end":47252,"line_start":1307,"line_end":1307,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47257,"byte_end":47260,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47265,"byte_end":47326,"line_start":1309,"line_end":1309,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47540,"byte_end":47548,"line_start":1315,"line_end":1315,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"pub fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47388,"byte_end":47458,"line_start":1312,"line_end":1312,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47463,"byte_end":47466,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47471,"byte_end":47532,"line_start":1314,"line_end":1314,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47740,"byte_end":47749,"line_start":1320,"line_end":1320,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"pub fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47588,"byte_end":47658,"line_start":1317,"line_end":1317,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47663,"byte_end":47666,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47671,"byte_end":47732,"line_start":1319,"line_end":1319,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47941,"byte_end":47953,"line_start":1325,"line_end":1325,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"pub fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47790,"byte_end":47859,"line_start":1322,"line_end":1322,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47864,"byte_end":47867,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47872,"byte_end":47933,"line_start":1324,"line_end":1324,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48148,"byte_end":48161,"line_start":1330,"line_end":1330,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"pub fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":47997,"byte_end":48066,"line_start":1327,"line_end":1327,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48071,"byte_end":48074,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48079,"byte_end":48140,"line_start":1329,"line_end":1329,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48720,"byte_end":48736,"line_start":1344,"line_end":1344,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"pub fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":2169},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48206,"byte_end":48300,"line_start":1332,"line_end":1332,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48305,"byte_end":48308,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48313,"byte_end":48327,"line_start":1334,"line_end":1334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48332,"byte_end":48335,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48340,"byte_end":48347,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48352,"byte_end":48390,"line_start":1337,"line_end":1337,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48395,"byte_end":48398,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48403,"byte_end":48479,"line_start":1339,"line_end":1339,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48484,"byte_end":48553,"line_start":1340,"line_end":1340,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48558,"byte_end":48625,"line_start":1341,"line_end":1341,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48630,"byte_end":48700,"line_start":1342,"line_end":1342,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":48705,"byte_end":48712,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2188},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49394,"byte_end":49402,"line_start":1363,"line_end":1363,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49334,"byte_end":49383,"line_start":1362,"line_end":1362,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49465,"byte_end":49469,"line_start":1365,"line_end":1365,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"pub fn hour(&Self) -> u32","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49416,"byte_end":49457,"line_start":1364,"line_end":1364,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49620,"byte_end":49626,"line_start":1370,"line_end":1370,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"pub fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49490,"byte_end":49551,"line_start":1367,"line_end":1367,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49556,"byte_end":49598,"line_start":1368,"line_end":1368,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49603,"byte_end":49612,"line_start":1369,"line_end":1369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49870,"byte_end":49876,"line_start":1380,"line_end":1380,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"pub fn minute(&Self) -> u32","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49819,"byte_end":49862,"line_start":1379,"line_end":1379,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49948,"byte_end":49954,"line_start":1383,"line_end":1383,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"pub fn second(&Self) -> u32","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49897,"byte_end":49940,"line_start":1382,"line_end":1382,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50197,"byte_end":50207,"line_start":1388,"line_end":1388,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"pub fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49975,"byte_end":50045,"line_start":1385,"line_end":1385,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50050,"byte_end":50110,"line_start":1386,"line_end":1386,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50115,"byte_end":50189,"line_start":1387,"line_end":1387,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50361,"byte_end":50370,"line_start":1393,"line_end":1393,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"pub fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50228,"byte_end":50279,"line_start":1390,"line_end":1390,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50284,"byte_end":50287,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50292,"byte_end":50353,"line_start":1392,"line_end":1392,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2195},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50546,"byte_end":50557,"line_start":1398,"line_end":1398,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"pub fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50411,"byte_end":50464,"line_start":1395,"line_end":1395,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50469,"byte_end":50472,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50477,"byte_end":50538,"line_start":1397,"line_end":1397,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50844,"byte_end":50855,"line_start":1405,"line_end":1405,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"pub fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50597,"byte_end":50650,"line_start":1400,"line_end":1400,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50655,"byte_end":50658,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50663,"byte_end":50724,"line_start":1402,"line_end":1402,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50729,"byte_end":50781,"line_start":1403,"line_end":1403,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50786,"byte_end":50836,"line_start":1404,"line_end":1404,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51188,"byte_end":51203,"line_start":1412,"line_end":1412,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"pub fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50895,"byte_end":50974,"line_start":1407,"line_end":1407,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50979,"byte_end":50982,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":50987,"byte_end":51048,"line_start":1409,"line_end":1409,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51053,"byte_end":51113,"line_start":1410,"line_end":1410,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51118,"byte_end":51180,"line_start":1411,"line_end":1411,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51332,"byte_end":51357,"line_start":1416,"line_end":1416,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"pub fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51244,"byte_end":51310,"line_start":1414,"line_end":1414,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":51315,"byte_end":51324,"line_start":1415,"line_end":1415,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":57212,"byte_end":57220,"line_start":41,"line_end":41,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":59422,"byte_end":59424,"line_start":117,"line_end":117,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67071,"byte_end":67082,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68263,"byte_end":68274,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71484,"byte_end":71495,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86842,"byte_end":86853,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89410,"byte_end":89421,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":90009,"byte_end":90020,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":90101,"byte_end":90112,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":90610,"byte_end":90621,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91389,"byte_end":91398,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91586,"byte_end":91595,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91784,"byte_end":91797,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91993,"byte_end":92006,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":92217,"byte_end":92225,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":92437,"byte_end":92445,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96862,"byte_end":96867,"line_start":93,"line_end":93,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":97767,"byte_end":97772,"line_start":117,"line_end":117,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103143,"byte_end":103146,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104032,"byte_end":104035,"line_start":62,"line_end":62,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104555,"byte_end":104558,"line_start":84,"line_end":84,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104654,"byte_end":104657,"line_start":90,"line_end":90,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104773,"byte_end":104776,"line_start":96,"line_end":96,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":110571,"byte_end":110580,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148384,"byte_end":148393,"line_start":1102,"line_end":1102,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160694,"byte_end":160703,"line_start":1468,"line_end":1468,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160922,"byte_end":160931,"line_start":1477,"line_end":1477,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162315,"byte_end":162324,"line_start":1509,"line_end":1509,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162543,"byte_end":162552,"line_start":1518,"line_end":1518,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163777,"byte_end":163786,"line_start":1551,"line_end":1551,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164139,"byte_end":164160,"line_start":1566,"line_end":1566,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164737,"byte_end":164758,"line_start":1586,"line_end":1586,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164910,"byte_end":164932,"line_start":1593,"line_end":1593,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165447,"byte_end":165469,"line_start":1611,"line_end":1611,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166516,"byte_end":166525,"line_start":1639,"line_end":1639,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167784,"byte_end":167793,"line_start":1674,"line_end":1674,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168395,"byte_end":168404,"line_start":1696,"line_end":1696,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199715,"byte_end":199728,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225892,"byte_end":225905,"line_start":702,"line_end":702,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236961,"byte_end":236974,"line_start":1020,"line_end":1020,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243170,"byte_end":243183,"line_start":1192,"line_end":1192,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245734,"byte_end":245747,"line_start":1252,"line_end":1252,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245978,"byte_end":245991,"line_start":1261,"line_end":1261,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248438,"byte_end":248451,"line_start":1320,"line_end":1320,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248682,"byte_end":248695,"line_start":1329,"line_end":1329,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250569,"byte_end":250582,"line_start":1380,"line_end":1380,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251790,"byte_end":251803,"line_start":1416,"line_end":1416,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252901,"byte_end":252914,"line_start":1447,"line_end":1447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":253652,"byte_end":253665,"line_start":1469,"line_end":1469,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":297872,"byte_end":297881,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":298678,"byte_end":298687,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":306828,"byte_end":306830,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":308909,"byte_end":308911,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":309510,"byte_end":309513,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":311476,"byte_end":311479,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325702,"byte_end":325709,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":328255,"byte_end":328262,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337281,"byte_end":337290,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1094},{"krate":0,"index":1098},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361680,"byte_end":361689,"line_start":803,"line_end":803,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368918,"byte_end":368927,"line_start":1016,"line_end":1016,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371837,"byte_end":371846,"line_start":1078,"line_end":1078,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372027,"byte_end":372036,"line_start":1087,"line_end":1087,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374542,"byte_end":374551,"line_start":1145,"line_end":1145,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374732,"byte_end":374741,"line_start":1154,"line_end":1154,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":377212,"byte_end":377221,"line_start":1210,"line_end":1210,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":378609,"byte_end":378618,"line_start":1247,"line_end":1247,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380471,"byte_end":380480,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381252,"byte_end":381261,"line_start":1322,"line_end":1322,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402544,"byte_end":402548,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410648,"byte_end":410652,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":412529,"byte_end":412533,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1292},{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414368,"byte_end":414372,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414452,"byte_end":414456,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414561,"byte_end":414565,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414685,"byte_end":414689,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414732,"byte_end":414736,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414888,"byte_end":414892,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415027,"byte_end":415031,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415170,"byte_end":415174,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1318},{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415398,"byte_end":415402,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415623,"byte_end":415627,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415812,"byte_end":415816,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415990,"byte_end":415994,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418920,"byte_end":418928,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424975,"byte_end":424983,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":425489,"byte_end":425497,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":425907,"byte_end":425915,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":426367,"byte_end":426375,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":426823,"byte_end":426831,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":427269,"byte_end":427277,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":427993,"byte_end":428001,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430693,"byte_end":430701,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1497},{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":436183,"byte_end":436191,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":438048,"byte_end":438056,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439096,"byte_end":439104,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439184,"byte_end":439192,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439301,"byte_end":439309,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439441,"byte_end":439449,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439522,"byte_end":439530,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440269,"byte_end":440277,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440424,"byte_end":440432,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440575,"byte_end":440583,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440819,"byte_end":440827,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441064,"byte_end":441072,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441261,"byte_end":441269,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441443,"byte_end":441451,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441644,"byte_end":441652,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441878,"byte_end":441886,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":442131,"byte_end":442139,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":442791,"byte_end":442799,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":442998,"byte_end":443008,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1595}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513421,"byte_end":513436,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513526,"byte_end":513541,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513647,"byte_end":513662,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513687,"byte_end":513702,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":520991,"byte_end":521001,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":521750,"byte_end":521760,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547803,"byte_end":547809,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548485,"byte_end":548491,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":617396,"byte_end":617404,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":665661,"byte_end":665674,"line_start":217,"line_end":217,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2053},{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":667169,"byte_end":667182,"line_start":266,"line_end":266,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537116,"byte_end":537129,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539102,"byte_end":539115,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540402,"byte_end":540409,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2083}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542367,"byte_end":542372,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2085},{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685794,"byte_end":685795,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":689176,"byte_end":689184,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692646,"byte_end":692659,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":693238,"byte_end":693251,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2140}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27404,"byte_end":27411,"line_start":663,"line_end":663,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31402,"byte_end":31409,"line_start":773,"line_end":773,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32057,"byte_end":32064,"line_start":790,"line_end":790,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2151},{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":33003,"byte_end":33020,"line_start":828,"line_end":828,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37496,"byte_end":37501,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40731,"byte_end":40736,"line_start":1088,"line_end":1088,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":42065,"byte_end":42080,"line_start":1131,"line_end":1131,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":23609,"byte_end":23615,"line_start":540,"line_end":540,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":210}},{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":24931,"byte_end":24937,"line_start":581,"line_end":581,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1599}},{"kind":"Mod","span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":536362,"byte_end":536370,"line_start":713,"line_end":713,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2026}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":57212,"byte_end":57220,"line_start":41,"line_end":41,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\sys.rs","byte_start":59422,"byte_end":59424,"line_start":117,"line_end":117,"column_start":6,"column_end":8},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":67071,"byte_end":67082,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":68263,"byte_end":68274,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71484,"byte_end":71495,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71957,"byte_end":71962,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":265}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71965,"byte_end":71970,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":265}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":71978,"byte_end":71983,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":9685},"to":{"krate":0,"index":265}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72273,"byte_end":72278,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":267}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\mod.rs","byte_start":72281,"byte_end":72286,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":267}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":86842,"byte_end":86853,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":89410,"byte_end":89421,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2235},"to":{"krate":0,"index":267}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":90009,"byte_end":90020,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2235},"to":{"krate":0,"index":265}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":90101,"byte_end":90112,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2235},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":90610,"byte_end":90621,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2235},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91389,"byte_end":91398,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91586,"byte_end":91595,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91784,"byte_end":91797,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":91993,"byte_end":92006,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":92217,"byte_end":92225,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\fixed.rs","byte_start":92437,"byte_end":92445,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":96862,"byte_end":96867,"line_start":93,"line_end":93,"column_start":6,"column_end":11},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\local.rs","byte_start":97767,"byte_end":97772,"line_start":117,"line_end":117,"column_start":19,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2250},"to":{"krate":0,"index":267}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":103143,"byte_end":103146,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104032,"byte_end":104035,"line_start":62,"line_end":62,"column_start":19,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2257},"to":{"krate":0,"index":267}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104555,"byte_end":104558,"line_start":84,"line_end":84,"column_start":17,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2257},"to":{"krate":0,"index":265}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104654,"byte_end":104657,"line_start":90,"line_end":90,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\offset\\utc.rs","byte_start":104773,"byte_end":104776,"line_start":96,"line_end":96,"column_start":23,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2257},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":110571,"byte_end":110580,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":148384,"byte_end":148393,"line_start":1102,"line_end":1102,"column_start":19,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2268},"to":{"krate":0,"index":2169}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160694,"byte_end":160703,"line_start":1468,"line_end":1468,"column_start":27,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":160922,"byte_end":160931,"line_start":1477,"line_end":1477,"column_start":33,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162315,"byte_end":162324,"line_start":1509,"line_end":1509,"column_start":27,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":162543,"byte_end":162552,"line_start":1518,"line_end":1518,"column_start":33,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":163777,"byte_end":163786,"line_start":1551,"line_end":1551,"column_start":25,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164139,"byte_end":164160,"line_start":1566,"line_end":1566,"column_start":19,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2287},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164737,"byte_end":164758,"line_start":1586,"line_end":1586,"column_start":28,"column_end":49},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2287},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":164910,"byte_end":164932,"line_start":1593,"line_end":1593,"column_start":19,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2308},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":165447,"byte_end":165469,"line_start":1611,"line_end":1611,"column_start":28,"column_end":50},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2308},"to":{"krate":2,"index":7859}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":166516,"byte_end":166525,"line_start":1639,"line_end":1639,"column_start":21,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":167784,"byte_end":167793,"line_start":1674,"line_end":1674,"column_start":23,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\date.rs","byte_start":168395,"byte_end":168404,"line_start":1696,"line_end":1696,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2268},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":199715,"byte_end":199728,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":225892,"byte_end":225905,"line_start":702,"line_end":702,"column_start":19,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2329},"to":{"krate":0,"index":2169}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":236961,"byte_end":236974,"line_start":1020,"line_end":1020,"column_start":19,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2329},"to":{"krate":0,"index":2188}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":243170,"byte_end":243183,"line_start":1192,"line_end":1192,"column_start":21,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245734,"byte_end":245747,"line_start":1252,"line_end":1252,"column_start":27,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":245978,"byte_end":245991,"line_start":1261,"line_end":1261,"column_start":33,"column_end":46},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248438,"byte_end":248451,"line_start":1320,"line_end":1320,"column_start":27,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":248682,"byte_end":248695,"line_start":1329,"line_end":1329,"column_start":33,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":250569,"byte_end":250582,"line_start":1380,"line_end":1380,"column_start":29,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":251790,"byte_end":251803,"line_start":1416,"line_end":1416,"column_start":21,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":252901,"byte_end":252914,"line_start":1447,"line_end":1447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\datetime.rs","byte_start":253652,"byte_end":253665,"line_start":1469,"line_end":1469,"column_start":23,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":297872,"byte_end":297881,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":298678,"byte_end":298687,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2346},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":306828,"byte_end":306830,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":308909,"byte_end":308911,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2359},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":309510,"byte_end":309513,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\internals.rs","byte_start":311476,"byte_end":311479,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2371},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":325702,"byte_end":325709,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\isoweek.rs","byte_start":328255,"byte_end":328262,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2383},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":337281,"byte_end":337290,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":361680,"byte_end":361689,"line_start":803,"line_end":803,"column_start":19,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2399},"to":{"krate":0,"index":2188}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":368918,"byte_end":368927,"line_start":1016,"line_end":1016,"column_start":21,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":371837,"byte_end":371846,"line_start":1078,"line_end":1078,"column_start":27,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":372027,"byte_end":372036,"line_start":1087,"line_end":1087,"column_start":33,"column_end":42},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3156}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374542,"byte_end":374551,"line_start":1145,"line_end":1145,"column_start":27,"column_end":36},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":374732,"byte_end":374741,"line_start":1154,"line_end":1154,"column_start":33,"column_end":42},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3160}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":377212,"byte_end":377221,"line_start":1210,"line_end":1210,"column_start":25,"column_end":34},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":378609,"byte_end":378618,"line_start":1247,"line_end":1247,"column_start":21,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":380471,"byte_end":380480,"line_start":1297,"line_end":1297,"column_start":23,"column_end":32},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\naive\\time.rs","byte_start":381252,"byte_end":381261,"line_start":1322,"line_end":1322,"column_start":23,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2399},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":402544,"byte_end":402548,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":410648,"byte_end":410652,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":412529,"byte_end":412533,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2416},"to":{"krate":0,"index":2169}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414368,"byte_end":414372,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":3067}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414452,"byte_end":414456,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414561,"byte_end":414565,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414685,"byte_end":414689,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414732,"byte_end":414736,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":414888,"byte_end":414892,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415027,"byte_end":415031,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415170,"byte_end":415174,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415398,"byte_end":415402,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415623,"byte_end":415627,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415812,"byte_end":415816,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\date.rs","byte_start":415990,"byte_end":415994,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2416},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":418920,"byte_end":418928,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":424975,"byte_end":424983,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":425489,"byte_end":425497,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":425907,"byte_end":425915,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":426367,"byte_end":426375,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":426823,"byte_end":426831,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":427269,"byte_end":427277,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":427993,"byte_end":428001,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":430693,"byte_end":430701,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":436183,"byte_end":436191,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2447},"to":{"krate":0,"index":2169}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":438048,"byte_end":438056,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2447},"to":{"krate":0,"index":2188}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439096,"byte_end":439104,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3067}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439184,"byte_end":439192,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3057}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439301,"byte_end":439309,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439441,"byte_end":439449,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":439522,"byte_end":439530,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2755}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440269,"byte_end":440277,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2745}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440424,"byte_end":440432,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":9892}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440575,"byte_end":440583,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3125}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":440819,"byte_end":440827,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441064,"byte_end":441072,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":3130}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441261,"byte_end":441269,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441443,"byte_end":441451,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441644,"byte_end":441652,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":441878,"byte_end":441886,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":442131,"byte_end":442139,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":442791,"byte_end":442799,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\datetime.rs","byte_start":442998,"byte_end":443008,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"kind":{"Impl":{"id":110}},"from":{"krate":1,"index":11445},"to":{"krate":2,"index":2963}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513421,"byte_end":513436,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1655},"to":{"krate":2,"index":2679}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513526,"byte_end":513541,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1655},"to":{"krate":2,"index":2709}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513647,"byte_end":513662,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1655},"to":{"krate":2,"index":2714}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":513687,"byte_end":513702,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1655},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":520991,"byte_end":521001,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2661},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":521750,"byte_end":521760,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2661},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":547803,"byte_end":547809,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2702},"to":{"krate":2,"index":3035}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parsed.rs","byte_start":548485,"byte_end":548491,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\parse.rs","byte_start":617396,"byte_end":617404,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2447},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":665661,"byte_end":665674,"line_start":217,"line_end":217,"column_start":10,"column_end":23},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\strftime.rs","byte_start":667169,"byte_end":667182,"line_start":266,"line_end":266,"column_start":23,"column_end":36},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2733},"to":{"krate":2,"index":7985}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":537116,"byte_end":537129,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":539102,"byte_end":539115,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2752},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":540402,"byte_end":540409,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2780},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\format\\mod.rs","byte_start":542367,"byte_end":542372,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2824},"to":{"krate":2,"index":12324}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":685794,"byte_end":685795,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2123},"to":{"krate":0,"index":2119}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":687492,"byte_end":687497,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":2127}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":689176,"byte_end":689184,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2447},"to":{"krate":0,"index":2127}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":692646,"byte_end":692659,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2762},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\round.rs","byte_start":693238,"byte_end":693251,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2762},"to":{"krate":1,"index":2546}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":27404,"byte_end":27411,"line_start":663,"line_end":663,"column_start":6,"column_end":13},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":31402,"byte_end":31409,"line_start":773,"line_end":773,"column_start":23,"column_end":30},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2780},"to":{"krate":2,"index":9692}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":32057,"byte_end":32064,"line_start":790,"line_end":790,"column_start":36,"column_end":43},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2780},"to":{"krate":20,"index":337}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":33003,"byte_end":33020,"line_start":828,"line_end":828,"column_start":21,"column_end":38},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2816},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":37496,"byte_end":37501,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":40731,"byte_end":40736,"line_start":1088,"line_end":1088,"column_start":36,"column_end":41},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2824},"to":{"krate":20,"index":337}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":42065,"byte_end":42080,"line_start":1131,"line_end":1131,"column_start":21,"column_end":36},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2875},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":45168,"byte_end":45173,"line_start":1245,"line_end":1245,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":2169}},{"span":{"file_name":"C:\\Users\\toto\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.19\\src\\lib.rs","byte_start":49404,"byte_end":49409,"line_start":1363,"line_end":1363,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":2188}}]}
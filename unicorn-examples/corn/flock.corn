pico-8 cartridge // http://www.pico-8.com
version 7
__lua__
-- flocking system based on rule set
-- by laurent victorino

-- list of boids
boids={}
-- cursor position
pos={}

-- used to clamp boids velocity
maxvelocity=3
-- min distance between boids
mindistance=5

function _init()
-- init cursor position
	pos.x=64
	pos.y=64

	createboids()	
end

function _update()
	-- move cursor position
	if btn(0) then pos.x-=1 end
	if btn(1) then pos.x+=1 end
	if btn(2) then pos.y-=1 end
	if btn(3) then pos.y+=1 end

	-- on x press, update the min distance	
	if btn(5) and btnp(5)==true then
		mindistance+=1
		if mindistance>10 then
			mindistance=1
		end
	end
	
	for boid in all(boids) do
		boid.update(boid)
	end
end

function _draw()
	cls()
	-- draw all boids
	for b in all(boids) do
		b.draw(b)
	end
	-- draw cursor
	rect(pos.x-1,pos.y-1,pos.x+1,pos.y+1,8);
	-- draw helpers
	print("arrows:move",1,1,7)
	print("x: change min distance("..mindistance..")",1,7,7)
end

function createboids()
-- create 25 boids
	for i=0,25 do
		b={}
		b.velocity={}
		b.velocity.x=0
		b.velocity.y=0
		b.pos={}
		-- set a random initial position
		b.pos.x=flr(rnd(127))
		b.pos.y=flr(rnd(127))
		b.update=function(boid)
			-- rule1: try to fly toward the flock mass
			v1=boid.flytowardcentralmass(boid)
			-- rule2: try to keep your distance with 
			-- other boids
			v2=boid.keepdistance(boid)
			-- rule3: try to match the flock velocity
			v3=boid.matchvelocity(boid)
			-- rule4: try to fly toward the leader (cursor)
			v4=boid.flytowardleader(boid)
			-- apply all rules results to velocity
			boid.velocity.x+=(v1.x+v2.x+v3.x+v4.x)
			boid.velocity.y+=(v1.y+v2.y+v3.y+v4.y)
			-- clamp velocity to maxvelocity
			boid.limitvelocity(boid)
			-- update position according to velocity
			boid.pos.x+=boid.velocity.x
			boid.pos.y+=boid.velocity.y
		end
		b.draw=function(boid)
			-- draw the boid (simple cross)
			line(boid.pos.x,boid.pos.y-1,boid.pos.x,boid.pos.y+1,6)
			line(boid.pos.x-1,boid.pos.y,boid.pos.x+1,boid.pos.y,6)
		end
		b.flytowardcentralmass=function(boid)
			-- perceived center of the flock
			v={}
			v.x=0
			v.y=0
			for b in all(boids) do
				if b != boid then
					v.x+=b.pos.x
					v.y+=b.pos.y
				end
			end
			v.x=v.x/#boids
			v.y=v.y/#boids
			vr={}
			vr.x=(v.x-boid.pos.x)/100 -- move only toward 1%
			vr.y=(v.y-boid.pos.y)/100 -- move only toward 1%
			return vr
		end
		b.keepdistance=function(boid)
			-- check if the boid is near other boids
			-- if yes try to move it far away
			v={}
			v.x=0
			v.y=0
			for b in all(boids) do
				if b != boid then
					if distvector(b.pos,boid.pos) < mindistance then
						v.x-=(b.pos.x-boid.pos.x)
						v.y-=(b.pos.y-boid.pos.y)
					end		
				end
			end
			return v
		end
		b.matchvelocity=function(boid)
			-- compute perceived velocity of the flock
			-- and try to adapt
			v={}
			v.x=0
			v.y=0
			for b in all(boids) do
				if b != boid then
					v.x+=b.velocity.x
					v.y+=b.velocity.y
				end
			end
			v.x=v.x/#boids
			v.y=v.y/#boids
			vr={}
			vr.x=(v.x-boid.velocity.x)/8
			vr.y=(v.y-boid.velocity.y)/8
			return vr
		end
		b.flytowardleader=function(boid)
			-- try to reach the cursor
			vr={}
			vr.x=(pos.x-boid.pos.x)/100
			vr.y=(pos.y-boid.pos.y)/100
			return vr
		end
		b.limitvelocity=function(boid)
			if magnitude(boid.velocity) > maxvelocity then
				boid.velocity.x=(boid.velocity.x/magnitude(boid.velocity))*maxvelocity
				boid.velocity.y=(boid.velocity.y/magnitude(boid.velocity))*maxvelocity
			end  
		end
		add(boids,b)
	end
end

-- return the distance between 
-- two vectors
function distvector(v1,v2)
	vx=v1.x-v2.x
	vy=v1.y-v2.y
	return sqrt(vx*vx+vy*vy)
end

-- return the magnitude of a vector
function magnitude(v)
	return sqrt(v.x*v.x+v.y*v.y)
end

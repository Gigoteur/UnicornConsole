unicorn / python cartridge
version 1
__python__

# Educational examples to understand some algorithms

import random
import threading
import time

class Button(object):
    def __init__(self, x, y, w, h, color, text):
        self.x1 = x
        self.y1 = y
        self.x2 = x+w
        self.y2 = y+h
        self.color = color
        self.text = text
        self.clicked = False

    def draw(self):
        rectfill(self.x1, self.y1, self.x2, self.y2, self.color)
        unicorn_print(self.text, self.x1+1, self.y1+1, 2)

    def update(self, x, y):
        self.clicked = False
        if x >= self.x1 and x <= self.x2:
            if y >= self.y1 and y <= self.y2:
                self.clicked = True

    def is_click(self):
        return self.clicked

def random_color():
    return random.randint(1, 16)

class BubbleSort(object):
    def __init__(self):
        self.T = 0
        self.alist = [(int(110*random.random()), i) for i in range(1, 16)]

        t1 = threading.Thread(target=self.start_algorithm)
        t1.start()

    def init(self):
        cls()
        self.draw_list()

    def update(self):
        self.T += 1

    def start_algorithm(self):
        for passnum in range(len(self.alist)-1,0,-1):
            for i in range(passnum):
                if self.alist[i][0]>self.alist[i+1][0]:
                    temp = self.alist[i]
                    self.alist[i] = self.alist[i+1]
                    self.alist[i+1] = temp
                    time.sleep(0.2)

    def draw_list(self):
        idx = 4
        for i in self.alist:
            rect(idx, i[0], idx+8, 110, 0)
            rectfill(idx+1, i[0], idx+7, 110, i[1])
            idx += 8

    def draw(self):
        cls()
        self.draw_list()

idx_demo = 0
demos = [
    ["BubbleSort", [BubbleSort()]],
]

buttons = []
buttons.append(Button(70, 118, 16, 8, 9, "run"))
buttons.append(Button(88, 118, 16, 8, 9, "next"))

def _init():
    global demos, idx_demo
    cls()

    for demo in demos[idx_demo][1]:
        demo.init()

def prev_demo():
    global idx_demo, demos

    idx_demo =  (idx_demo-1) % len(demos)
    pal()
    for demo in demos[idx_demo][1]:
        demo.init()

def next_demo():
    global idx_demo, demos

    idx_demo =  (idx_demo+1) % len(demos)
    pal()
    for demo in demos[idx_demo][1]:
        demo.init()

def _update():
    global idx_demo, demos, buttons

    _mouse_state = mouse_state()
    if _mouse_state == 1:
        _mouse_x = mouse_x()
        _mouse_y = mouse_y()

        for button in buttons:
            button.update(_mouse_x, _mouse_y)
            if button.is_click():
                next_demo()

    for demo in demos[idx_demo][1]:
        demo.update()

def _draw():
    global idx_demo, demos, buttons

    for demo in demos[idx_demo][1]:
        demo.draw()

    for button in buttons:
        button.draw()

    unicorn_print("Demos " + demos[idx_demo][0], 0, 120, 2)


__gfx__
__gff__
__map__
__sfx__
__music__
